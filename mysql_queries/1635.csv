SELECT A.MONTH month, A.active_drivers, COALESCE(B.no_rides,0) accepted_rides FROM (SELECT M.MONTH, COUNT(D.join_date) active_drivers FROM (SELECT 1 AS MONTH UNION ALL SELECT 2 AS MONTH UNION ALL SELECT 3 AS MONTH UNION ALL SELECT 4 AS MONTH UNION ALL SELECT 5 AS MONTH UNION ALL SELECT 6 AS MONTH UNION ALL SELECT 7 AS MONTH UNION ALL SELECT 8 AS MONTH UNION ALL SELECT 9 AS MONTH UNION ALL SELECT 10 AS MONTH UNION ALL SELECT 11 AS MONTH UNION ALL SELECT 12 AS MONTH) M LEFT JOIN Drivers D ON (CASE WHEN M.MONTH = 2 THEN CONCAT('2020-', M.MONTH, '-29') >= D.join_date WHEN M.MONTH = 4 OR M.MONTH = 6 OR M.MONTH = 9 OR M.MONTH = 11 THEN CONCAT('2020-', M.MONTH, '-30') >= D.join_date ELSE CONCAT('2020-', M.MONTH, '-31') >= D.join_date END) GROUP BY M.MONTH) A LEFT JOIN (SELECT MONTH(R.requested_at) MONTH, COUNT(R.requested_at) no_rides FROM AcceptedRides A LEFT JOIN Rides R ON R.ride_id = A.ride_id WHERE YEAR(R.requested_at) = 2020 GROUP BY MONTH(R.requested_at)) B ON A.MONTH = B.MONTH
SELECT column_0 as month, ( SELECT COUNT(*) FROM Drivers WHERE join_date < '2021-01-01' AND (join_date < '2020-01-01' OR Month(join_date) <= column_0) ) as active_drivers, ( SELECT COUNT(*) FROM AcceptedRides, Rides WHERE AcceptedRides.ride_id = Rides.ride_id AND requested_at < '2021-01-01' AND requested_at >= '2020-01-01' AND Month(requested_at) = column_0 ) as accepted_rides FROM ( VALUES ROW(1), ROW(2), ROW(3), ROW(4), ROW(5), ROW(6), ROW(7), ROW(8), ROW(9), ROW(10), ROW(11), ROW(12) ) AS months
WITH Canlendar AS ( SELECT 1 AS 'month' UNION SELECT 2 AS 'month' UNION SELECT 3 AS 'month' UNION SELECT 4 AS 'month' UNION SELECT 5 AS 'month' UNION SELECT 1 AS 'month' UNION SELECT 6 AS 'month' UNION SELECT 7 AS 'month' UNION SELECT 8 AS 'month' UNION SELECT 9 AS 'month' UNION SELECT 10 AS 'month' UNION SELECT 11 AS 'month' UNION SELECT 12 AS 'month' ), Temp AS ( SELECT MONTH(r.requested_at) AS 'month', COUNT(ar.ride_id) AS 'accepted_rides' FROM AcceptedRides ar LEFT JOIN Drivers d ON d.driver_id=ar.driver_id LEFT JOIN Rides r ON r.ride_id=ar.ride_id WHERE YEAR(r.requested_at)=2020 GROUP BY MONTH(r.requested_at) ) SELECT c.month, COUNT(d.driver_id) AS 'active_drivers', COALESCE(t.accepted_rides,0) AS 'accepted_rides' FROM Canlendar c LEFT JOIN Temp t ON t.month=c.month LEFT JOIN Drivers d ON YEAR(d.join_date)<2020 OR (YEAR(d.join_date)=2020 AND MONTH(d.join_date)<=c.month) GROUP BY c.month ORDER BY c.month
WITH RECURSIVE A AS ( SELECT YEAR(join_date) AS yr, MONTH(join_date) AS mth, COUNT(*) as ct FROM Drivers GROUP BY yr, mth HAVING yr<2021), B AS ( SELECT 1 AS mth UNION ALL SELECT mth+1 FROM B WHERE mth<12 ), C AS ( SELECT * FROM A WHERE yr = 2020 ), D AS ( SELECT B.mth, IFNULL(C.ct, 0) AS ct FROM B LEFT JOIN C ON B.mth = C.mth), E AS ( SELECT mth, SUM(ct) OVER (ORDER BY mth) AS total FROM D), active_driver AS ( SELECT mth, total+IFNULL((SELECT SUM(ct) FROM A WHERE yr<2020), 0) AS active_drivers FROM E), F AS ( SELECT AcceptedRides.ride_id, requested_at FROM AcceptedRides JOIN Rides ON AcceptedRides.ride_id = Rides.ride_id), G AS ( SELECT month(requested_at) AS mth, COUNT(*) AS ct FROM F WHERE YEAR(requested_at) = 2020 GROUP BY mth) SELECT active_driver.mth AS month, active_driver.active_drivers, IFNULL(ct, 0) AS accepted_rides FROM active_driver LEFT JOIN G ON active_driver.mth = G.mth ORDER BY month
WITH RECURSIVE AllMonths AS (SELECT 1 AS month UNION ALL SELECT month + 1 AS month FROM AllMonths WHERE month < 12), DriverActiveSince AS (SELECT driver_id ,CASE WHEN YEAR(join_date) = 2019 THEN 1 ELSE MONTH(join_date) END AS month FROM Drivers WHERE YEAR(join_date) <= 2020), DriverActiveSummary AS (SELECT AM.month ,COUNT(DAS.driver_id) AS active_drivers FROM AllMonths AM LEFT JOIN DriverActiveSince DAS ON DAS.month = AM.month GROUP BY AM.month), CumulativeDrivers AS (SELECT month ,SUM(active_drivers) OVER(ORDER BY month ASC) AS active_drivers FROM DriverActiveSummary), AcceptedRidesMonth AS (SELECT AR.ride_id ,MONTH(R.requested_at) AS month FROM AcceptedRides AR INNER JOIN Rides R ON R.ride_id = AR.ride_id WHERE YEAR(R.requested_at) = 2020), AcceptedRidesMonthCounts AS (SELECT AL.month ,COUNT(ARM.ride_id) AS accepted_rides FROM AllMonths AL LEFT JOIN AcceptedRidesMonth ARM ON ARM.month = AL.month GROUP BY AL.month) SELECT CD.month ,CD.active_drivers ,ARMC.accepted_rides FROM CumulativeDrivers CD INNER JOIN AcceptedRidesMonthCounts ARMC ON ARMC.month = CD.month ORDER BY 1 ASC
WITH RECURSIVE AllMonths AS (SELECT 1 AS month UNION ALL SELECT month + 1 AS month FROM AllMonths WHERE month < 12), DriversActiveSince AS (SELECT driver_id ,CASE WHEN YEAR(join_date) < 2020 THEN 1 ELSE MONTH(join_date) END AS Month FROM Drivers WHERE YEAR(join_date) <= 2020), ActiveDriversMonths AS (SELECT AM.Month ,COUNT(DAS.driver_id) AS new_active_drivers FROM DriversActiveSince DAS RIGHT JOIN AllMonths AM ON AM.month = DAS.month GROUP BY AM.Month), CumulativeActiveDrivers AS (SELECT Month ,SUM(new_active_drivers) OVER(ORDER BY Month ASC) AS active_drivers FROM ActiveDriversMonths), MonthlyRides AS (SELECT AR.ride_id ,MONTH(R.requested_at) AS month FROM AcceptedRides AR INNER JOIN Rides R ON R.ride_id = AR.ride_id WHERE YEAR(R.requested_at) = 2020), MontlyRidesSummary AS (SELECT month ,COUNT(ride_id) AS accepted_rides FROM MonthlyRides GROUP BY month) SELECT CAD.Month ,CAD.active_drivers ,IFNULL(MRS.accepted_rides,0) AS accepted_rides FROM CumulativeActiveDrivers CAD LEFT JOIN MontlyRidesSummary MRS ON MRS.month = CAD.month
WITH RECURSIVE AllMonths AS (SELECT 1 AS month UNION ALL SELECT month+1 FROM AllMonths WHERE month < 12), DriversActiveFROM AS (SELECT driver_id ,IF(YEAR(join_date)<2020,1,MONTH(join_date)) AS month FROM Drivers WHERE YEAR(join_date)<=2020), ActiveDriversDetails AS (SELECT AM.month ,COUNT(driver_id) AS active_drivers FROM DriversActiveFROM DA RIGHT JOIN AllMonths AM ON AM.month = DA.month GROUP BY AM.month), ActiveDriversSummary AS (SELECT month ,SUM(active_drivers) OVER(ORDER BY month ASC) AS active_drivers FROM ActiveDriversDetails), AcceptedRidesDetails AS (SELECT driver_id,MONTH(requested_at) AS month FROM AcceptedRides AR INNER JOIN Rides R ON R.ride_id = AR.ride_id WHERE YEAR(requested_at) = 2020), AcceptedRidesSummary AS (SELECT month, COUNT(driver_id) AS accepted_rides FROM AcceptedRidesDetails GROUP BY month) SELECT AM.month ,IFNULL(ADS.active_drivers,0) AS active_drivers ,IFNULL(ARS.accepted_rides,0) AS accepted_rides FROM AllMonths AM LEFT JOIN ActiveDriversSummary ADS ON ADS.month = AM.month LEFT JOIN AcceptedRidesSummary ARS ON ARS.month = AM.month
WITH RECURSIVE CTE (month) AS ( SELECT 1 AS month UNION ALL SELECT month + 1 FROM CTE WHERE month < 12 ) SELECT month, IFNULL(MAX(active_drivers),0) AS active_drivers, IFNULL(accepted_rides,0) AS accepted_rides FROM CTE LEFT JOIN ( SELECT YEAR(requested_at) AS YYYY, YEAR(requested_at)*100+MONTH(requested_at) AS YYYYMM, COUNT(ride_id) AS accepted_rides FROM Rides WHERE ride_id IN (SELECT ride_id FROM AcceptedRides) GROUP BY YEAR(requested_at),YEAR(requested_at)*100+MONTH(requested_at) ) R ON CTE.month = R.YYYYMM - R.YYYY*100 AND R.YYYY = 2020 LEFT JOIN ( SELECT YEAR(join_date) AS YYYY, YEAR(join_date)*100+MONTH(join_date) AS YYYYMM, COUNT(driver_id) OVER(ORDER BY YEAR(join_date)*100+MONTH(join_date) ASC) AS active_drivers FROM Drivers ) D ON CTE.month >= D.YYYYMM - D.YYYY*100 AND D.YYYY = 2020 GROUP BY month,IFNULL(accepted_rides,0) ORDER BY 1 ASC
WITH RECURSIVE CTE1 (month) AS ( SELECT 1 AS month UNION ALL SELECT month + 1 FROM CTE1 WHERE month < 12 ) ,CTE2 AS ( SELECT MONTH(REQUESTED_AT) AS MONTH, A.RIDE_ID FROM RIDES R JOIN ACCEPTEDRIDES A ON R.RIDE_ID = A.RIDE_ID WHERE YEAR(REQUESTED_AT) = 2020 ) ,CTE3 AS ( SELECT CTE1.MONTH, COUNT(RIDE_ID) AS ACCEPTED_RIDES FROM CTE1 LEFT JOIN CTE2 USING(MONTH) GROUP BY CTE1.MONTH ) ,CTE4 AS ( SELECT CASE WHEN YEAR(JOIN_DATE) < 2020 THEN 1 ELSE MONTH(JOIN_DATE) END AS MONTH, DRIVER_ID FROM DRIVERS WHERE YEAR(JOIN_DATE) <= 2020 ) ,CTE5 AS ( SELECT DISTINCT CTE1.MONTH, COUNT(DRIVER_ID) OVER(ORDER BY CTE1.MONTH) AS ACTIVE_DRIVERS FROM CTE1 LEFT JOIN CTE4 USING(MONTH) ) SELECT CTE3.MONTH, ACTIVE_DRIVERS, ACCEPTED_RIDES FROM CTE3 JOIN CTE5 USING(MONTH)
WITH RECURSIVE CTE1 (month) AS ( SELECT 1 AS month UNION ALL SELECT month + 1 FROM CTE1 WHERE month < 12 ), CTE2 AS ( SELECT month(join_date) join_month, active_drivers FROM (SELECT driver_id, CASE WHEN join_date <= '2020-01-01' THEN 0 ELSE join_date END AS join_date, COUNT(join_date) OVER(ORDER BY join_date ASC) active_drivers FROM Drivers WHERE year(join_date) <= '2020' ORDER BY join_date ASC) t WHERE month(join_date) IS NOT NULL ), CTE3 AS ( SELECT month(requested_at) AS month, COUNT(r.requested_at) accepted_rides FROM AcceptedRides ar LEFT JOIN Rides r ON r.ride_id = ar.ride_id WHERE driver_id IN (SELECT DISTINCT driver_id FROM CTE2) AND year(requested_at) = '2020' GROUP BY month(requested_at) ), CTE4 AS ( SELECT month, MAX(COALESCE(active_drivers, 0)) OVER(ORDER BY month) active_drivers FROM CTE2 RIGHT JOIN CTE1 ON CTE2.join_month = CTE1.month ) SELECT DISTINCT CTE4.month, active_drivers, COALESCE(accepted_rides, 0) accepted_rides FROM CTE3 RIGHT JOIN CTE4 ON CTE3.month = CTE4.month
WITH RECURSIVE CTE1 (month) AS (SELECT 1 AS month UNION ALL SELECT month + 1 FROM CTE1 WHERE month < 12) ,CTE2 AS (SELECT MONTH(requested_at) AS MONTH, A.RIDE_ID FROM RIDES R JOIN ACCEPTEDRIDES A ON R.RIDE_ID = A.RIDE_ID WHERE YEAR(requested_at) = 2020) ,CTE3 AS (SELECT CTE1.MONTH, COUNT(RIDE_ID) AS ACCEPTED_RIDES FROM CTE1 LEFT JOIN CTE2 USING(MONTH) GROUP BY CTE1.MONTH) ,CTE4 AS (SELECT CASE WHEN YEAR(JOIN_DATE) < 2020 THEN 1 ELSE MONTH(JOIN_DATE) END AS MONTH, DRIVER_ID FROM DRIVERS WHERE YEAR(JOIN_DATE) <= 2020) ,CTE5 AS (SELECT DISTINCT CTE1.MONTH, COUNT(DRIVER_ID) OVER(ORDER BY CTE1.MONTH) AS ACTIVE_DRIVERS FROM CTE1 LEFT JOIN CTE4 USING(MONTH)) SELECT CTE3.MONTH, ACTIVE_DRIVERS, ACCEPTED_RIDES FROM CTE3 JOIN CTE5 USING(MONTH)
WITH RECURSIVE CTE1 AS ( SELECT '2020-01-01' AS date UNION SELECT DATE_ADD(date, interval 1 day) FROM CTE1 WHERE date < '2020-12-31' ), CTE2 AS ( SELECT DISTINCT MONTH(d1.date) as month, COUNT(d2.driver_id) OVER(ORDER BY MONTH(d1.date)) as active_drivers FROM CTE1 as d1 LEFT JOIN (SELECT driver_id, CASE WHEN join_date <= '2019-12-31' THEN '2020-01-01' ELSE join_date END as join_date FROM Drivers) as d2 ON d1.date = d2.join_date ORDER BY 1 ), CTE3 AS ( SELECT month(requested_at) as month, COUNT(d2.ride_id) as accepted_rides FROM Rides as d1 JOIN AcceptedRides as d2 ON d1.ride_id = d2.ride_id WHERE YEAR(d1.requested_at) = 2020 GROUP BY 1 ) SELECT d1.month, d1.active_drivers, IFNULL(d2.accepted_rides,0) AS accepted_rides FROM CTE2 as d1 LEFT JOIN CTE3 as d2 ON d1.month = d2.month ORDER BY 1
WITH RECURSIVE CTE1 AS ( SELECT 1 AS month UNION SELECT month + 1 FROM CTE1 WHERE month < 12 ), CTE2 AS ( SELECT CASE WHEN join_date <= '2020-01-31' THEN 1 WHEN join_date <= '2020-02-29' THEN 2 WHEN join_date <= '2020-03-31' THEN 3 WHEN join_date <= '2020-04-30' THEN 4 WHEN join_date <= '2020-05-31' THEN 5 WHEN join_date <= '2020-06-30' THEN 6 WHEN join_date <= '2020-07-31' THEN 7 WHEN join_date <= '2020-08-31' THEN 8 WHEN join_date <= '2020-09-30' THEN 9 WHEN join_date <= '2020-10-31' THEN 10 WHEN join_date <= '2020-11-30' THEN 11 WHEN join_date <= '2020-12-31' THEN 12 END AS month, COUNT(driver_id) as active_drivers FROM Drivers WHERE join_date <= '2020-12-31' GROUP BY CASE WHEN join_date <= '2020-01-31' THEN 1 WHEN join_date <= '2020-02-29' THEN 2 WHEN join_date <= '2020-03-31' THEN 3 WHEN join_date <= '2020-04-30' THEN 4 WHEN join_date <= '2020-05-31' THEN 5 WHEN join_date <= '2020-06-30' THEN 6 WHEN join_date <= '2020-07-31' THEN 7 WHEN join_date <= '2020-08-31' THEN 8 WHEN join_date <= '2020-09-30' THEN 9 WHEN join_date <= '2020-10-31' THEN 10 WHEN join_date <= '2020-11-30' THEN 11 WHEN join_date <= '2020-12-31' THEN 12 END ), CTE3 AS ( SELECT d1.month, SUM(active_drivers) OVER(ORDER BY month) as active_drivers FROM CTE1 as d1 LEFT JOIN CTE2 as d2 ON d1.month = d2.month ), CTE4 AS ( SELECT MONTH(requested_at) AS month, COUNT(d1.ride_id) AS accepted_rides FROM Rides as d1 JOIN AcceptedRides as d2 ON d1.ride_id = d2.ride_id WHERE requested_at BETWEEN '2020-01-01' AND '2020-12-31' GROUP BY MONTH(requested_at) ) SELECT d1.month, IFNULL(active_drivers,0) AS active_drivers, IFNULL(accepted_rides,0) AS accepted_rides FROM CTE3 as d1 LEFT JOIN CTE4 as d2 ON d1.month = d2.month ORDER BY 1
WITH RECURSIVE CTE1 AS ( SELECT 1 as month UNION SELECT 1 + month FROM CTE1 WHERE month < 12 ), CTE2 AS ( SELECT DISTINCT MONTH(CASE WHEN join_date <= '2019-12-31' THEN '2020-01-01' ELSE join_date END) as month, COUNT(driver_id) as active_driver FROM Drivers WHERE join_date <= '2020-12-31' GROUP BY 1 ), CTE3 AS ( SELECT month(requested_at) as month, COUNT(d2.ride_id) as accepted_rides FROM Rides as d1 JOIN AcceptedRides as d2 ON d1.ride_id = d2.ride_id WHERE YEAR(d1.requested_at) = 2020 GROUP BY 1 ) SELECT d1.month, IFNULL(SUM(d2.active_driver) OVER(ORDER BY d1.month),0) as active_drivers, IFNULL(d3.accepted_rides,0) as accepted_rides FROM CTE1 as d1 LEFT JOIN CTE2 as d2 ON d1.month = d2.month LEFT JOIN CTE3 as d3 ON d1.month = d3.month ORDER BY 1
WITH RECURSIVE CTE1 AS ( SELECT CASE WHEN '2020-01-01' < (SELECT MIN(join_DATE) FROM Drivers) THEN '2020-01-01' ELSE (SELECT MIN(join_DATE) FROM Drivers) END as dates UNION SELECT DATE_ADD(dates, INTERVAL 1 day) FROM CTE1 WHERE dates < '2020-12-31' ), CTE2 AS ( SELECT d1.dates, d2.join_date, IFNULL(d2.driver_cnt,0) as driver_cnt FROM CTE1 as d1 LEFT JOIN (SELECT join_date, 1 as driver_cnt FROM Drivers) as d2 ON d1.dates = d2.join_date ), CTE3 AS ( SELECT CASE WHEN dates <= '2020-01-31' THEN 1 WHEN dates <= '2020-02-29' THEN 2 WHEN dates <= '2020-03-31' THEN 3 WHEN dates <= '2020-04-30' THEN 4 WHEN dates <= '2020-05-31' THEN 5 WHEN dates <= '2020-06-30' THEN 6 WHEN dates <= '2020-07-31' THEN 7 WHEN dates <= '2020-08-31' THEN 8 WHEN dates <= '2020-09-30' THEN 9 WHEN dates <= '2020-10-31' THEN 10 WHEN dates <= '2020-11-30' THEN 11 WHEN dates <= '2020-12-31' THEN 12 END AS month, SUM(driver_cnt) AS active_drivers FROM CTE2 GROUP BY CASE WHEN dates <= '2020-01-31' THEN 1 WHEN dates <= '2020-02-29' THEN 2 WHEN dates <= '2020-03-31' THEN 3 WHEN dates <= '2020-04-30' THEN 4 WHEN dates <= '2020-05-31' THEN 5 WHEN dates <= '2020-06-30' THEN 6 WHEN dates <= '2020-07-31' THEN 7 WHEN dates <= '2020-08-31' THEN 8 WHEN dates <= '2020-09-30' THEN 9 WHEN dates <= '2020-10-31' THEN 10 WHEN dates <= '2020-11-30' THEN 11 WHEN dates <= '2020-12-31' THEN 12 END ), CTE4 AS ( SELECT month, SUM(active_drivers) OVER(ORDER BY month) AS active_drivers FROM CTE3 ), CTE5 AS ( SELECT EXTRACT(month FROM requested_at) AS month, COUNT(ride_id) AS accepted_rides FROM ( SELECT d1.ride_id, d1.requested_at FROM Rides as d1 JOIN AcceptedRides as d2 ON d1.ride_id = d2.ride_id WHERE requested_at BETWEEN '2020-01-01' AND '2020-12-31' ) as sub GROUP BY EXTRACT(month FROM requested_at) ) SELECT d1.month, d1.active_drivers, IFNULL(d2.accepted_rides,0) AS accepted_rides FROM CTE4 as d1 LEFT JOIN CTE5 as d2 ON d1.month = d2.month ORDER BY 1
WITH RECURSIVE CTE_MONTH AS ( SELECT '202001' AS YYYY_MON ,1 AS MON_ID UNION ALL SELECT YYYY_MON + 1 ,MON_ID + 1 FROM CTE_MONTH WHERE MON_ID < 12 ) ,CTE_DRIVER_FLG AS ( SELECT CM.YYYY_MON AS JOIN_YYYYMM ,0 AS DRIVER_FLG FROM CTE_MONTH CM LEFT JOIN DRIVERS D ON CM.YYYY_MON = DATE_FORMAT(D.JOIN_DATE,'%Y%m') AND D.JOIN_DATE <= '2020-12-31' WHERE D.JOIN_DATE IS NULL UNION ALL SELECT DATE_FORMAT(D.JOIN_DATE,'%Y%m') ,SUM(1) AS DRIVER_FLG FROM CTE_MONTH CM RIGHT JOIN DRIVERS D ON CM.YYYY_MON = DATE_FORMAT(D.JOIN_DATE,'%Y%m') WHERE D.JOIN_DATE <= '2020-12-31' GROUP BY 1 ) ,CTE_ACTIVE_DRIVER AS ( SELECT JOIN_YYYYMM ,SUM(DRIVER_FLG) OVER(ORDER BY JOIN_YYYYMM) ACTIVE_DRI_CNT FROM CTE_DRIVER_FLG ) SELECT CM.MON_ID month ,CAD.ACTIVE_DRI_CNT active_drivers ,COUNT(AR.DRIVER_ID) as accepted_rides FROM CTE_MONTH CM JOIN CTE_ACTIVE_DRIVER CAD ON CM.YYYY_MON = CAD.JOIN_YYYYMM LEFT JOIN RIDES R ON CM.YYYY_MON = DATE_FORMAT(R.REQUESTED_AT,'%Y%m') LEFT JOIN ACCEPTEDRIDES AR ON AR.RIDE_ID = R.RIDE_ID GROUP BY 1,2
WITH RECURSIVE M AS (SELECT 1 AS MONTH UNION SELECT MONTH+1 AS MONTH FROM M WHERE MONTH<12), D AS (SELECT YEAR(JOIN_DATE) AS YEAR, MONTH(JOIN_DATE) AS MONTH, COUNT(DRIVER_ID) OVER (ORDER BY YEAR(JOIN_DATE),MONTH(JOIN_DATE)) AS CNT FROM DRIVERS D), A AS (SELECT MONTH(R.REQUESTED_AT) AS MONTH, COUNT(AR.RIDE_ID) AS CNT FROM RIDES R, ACCEPTEDRIDES AR WHERE R.RIDE_ID = AR.RIDE_ID AND YEAR(R.REQUESTED_AT) = 2020 GROUP BY MONTH(R.REQUESTED_AT)) SELECT DISTINCT M.MONTH, COALESCE(D.CNT,MAX(D.CNT) OVER (ORDER BY M.MONTH),0) ACTIVE_DRIVERS, COALESCE(A.CNT,0) AS ACCEPTED_RIDES FROM M LEFT OUTER JOIN D ON M.MONTH = D.MONTH AND D.YEAR = 2020 LEFT OUTER JOIN A ON M.MONTH = A.MONTH ORDER BY 1
WITH RECURSIVE MONTH AS ( SELECT 1 AS MONTH UNION SELECT MONTH+1 AS MONTH FROM MONTH WHERE MONTH<=11 ), ACTIVE_DRIVERS as ( select month(join_date) as month, count(driver_id) over (order by join_date) as active_drivers from drivers where year(join_date) <= 2020 ), ACCEPTED_RIDES as ( select month(requested_at) as month, count(ride_id) as accepted_rides from AcceptedRides join rides using (ride_id) where year(requested_at) = 2020 group by month ) SELECT distinct M.MONTH, IFNULL(max(active_drivers) over (order by month),0) as active_drivers, IFNULL(ACCEPTED_RIDES,0) as ACCEPTED_RIDES FROM MONTH m LEFT JOIN active_drivers ON M.MONTH=active_drivers.MONTH LEFT JOIN ACCEPTED_RIDES ON M.MONTH=ACCEPTED_RIDES.MONTH
WITH RECURSIVE MONTH AS ( SELECT 1 as MONTH UNION SELECT 1+MONTH FROM MONTH WHERE MONTH<12 ), CTE1 AS ( SELECT MONTH, IFNULL(COUNT(DRIVER_ID),0) AS active_drivers FROM MONTH LEFT JOIN DRIVERS ON ((YEAR(JOIN_DATE)<2020) OR (MONTH(JOIN_DATE)<=MONTH)) AND (JOIN_DATE <'2021-01-01') GROUP BY MONTH ), CTE2 AS ( SELECT MONTH(R.requested_at) AS month, COUNT(A.ride_id) AS accepted_rides FROM AcceptedRides A LEFT JOIN Rides R ON A.ride_id=R.ride_id WHERE requested_at BETWEEN '2020-01-01' AND '2020-12-31' GROUP BY MONTH(R.requested_at) ) SELECT CTE1.month, active_drivers, (CASE WHEN accepted_rides IS NULL THEN 0 ELSE accepted_rides END) AS accepted_rides FROM CTE1 LEFT JOIN CTE2 ON CTE1.month=CTE2.month ORDER BY 1
WITH RECURSIVE MONTHS (month) AS ( SELECT 1 UNION ALL SELECT month + 1 FROM MONTHS WHERE month < 12 ) , ACCEPTED AS ( SELECT MONTH(requested_at) AS month, A.ride_id FROM Rides A JOIN AcceptedRides B ON A.ride_id = B.ride_id WHERE YEAR(requested_at) = 2020 ) , ACCEPTED_BY_MONTH AS ( SELECT A.month , COUNT(ride_id) AS accepted_rides FROM MONTHS A LEFT JOIN ACCEPTED B ON A.month = B.month GROUP BY month ) , ACTIVE_DRIVERS AS ( SELECT CASE WHEN YEAR(join_date) < 2020 THEN 1 ELSE MONTH(join_date) END AS month, driver_id FROM Drivers WHERE YEAR(join_date) <= 2020 ) , ACTIVE_DRIVER_BY_MONTH AS ( SELECT A.month, COUNT(driver_id) OVER (ORDER BY A.month) AS active_drivers FROM MONTHS A LEFT JOIN ACTIVE_DRIVERS B ON A.month = B.month ) SELECT DISTINCT A.month, active_drivers, accepted_rides FROM ACTIVE_DRIVER_BY_MONTH A JOIN ACCEPTED_BY_MONTH B ON A.month = B.month
WITH RECURSIVE Month AS ( SELECT 1 AS month UNION SELECT month + 1 FROM Month WHERE month < 12), ActiveDriver AS ( SELECT DISTINCT MONTH(join_date) AS month, (SELECT COUNT(driver_id) FROM Drivers WHERE YEAR(join_date)<2020) + COUNT(driver_id) OVER(ORDER BY MONTH(join_date)) AS active_drivers FROM Drivers WHERE YEAR(join_date)=2020), AcceptRides AS ( SELECT MONTH(requested_at) AS month, COUNT(r.ride_id) AS accepted_rides FROM AcceptedRides a JOIN Rides r ON a.ride_id = r.ride_id WHERE YEAR(requested_at)=2020 GROUP BY MONTH(requested_at)) SELECT m.month, IFNULL(MAX(a1.active_drivers) OVER(ORDER BY m.month),0) AS active_drivers, IFNULL(accepted_rides, 0) AS accepted_rides FROM Month m LEFT JOIN ActiveDriver a1 ON m.month = a1.month LEFT JOIN AcceptRides a2 ON m.month = a2.month ORDER BY 1
WITH RECURSIVE Month AS ( SELECT 1 AS month UNION SELECT month + 1 as month FROM Month WHERE month < 12 ), T1 AS ( SELECT CASE WHEN YEAR(join_date) < 2020 THEN 1 ELSE MONTH(join_date) END AS month, COUNT(driver_id) as num FROM Drivers WHERE YEAR(join_date) <=2020 GROUP BY month ), T2 AS ( SELECT M.month, SUM(IFNULL(T1.num,0)) OVER (ORDER BY M.month ASC) as active_drivers FROM Month M LEFT JOIN T1 ON M.month = T1.month ), T3 AS ( SELECT T2.month, COUNT(A.ride_id) as accepted_rides FROM T2 LEFT JOIN (SELECT * FROM Rides WHERE YEAR(requested_at)=2020) R ON T2.month = MONTH(R.requested_at) LEFT JOIN AcceptedRides A ON R.ride_id = A.ride_id GROUP BY T2.month ORDER BY T2.month ASC ) SELECT T2.month, T2.active_drivers, T3.accepted_rides FROM T2 INNER JOIN T3 ON T2.month = T3.month ORDER BY T2.month ASC
WITH RECURSIVE Month_CTE AS ( SELECT 1 As month UNION ALL SELECT month+1 FROM Month_CTE WHERE month < 12 ), Active_drivers AS ( SELECT m.month, SUM(IF(d.month<=m.month,d.driver_counts,0)) AS active_drivers FROM Month_CTE m JOIN ( SELECT MONTH(join_date) AS month, COUNT(driver_id) AS driver_counts FROM Drivers WHERE join_date between '2020-01-01' AND '2020-12-31' GROUP BY 1 UNION SELECT 0 AS month, COUNT(driver_id) FROM Drivers WHERE join_date <'2020-01-01' ) d GROUP BY m.month ORDER BY m.month ), Accepted_Rides AS ( SELECT MONTH(r.requested_at) AS month, COUNT(a.driver_id) AS accepted_rides FROM (SELECT * FROM Rides WHERE requested_at between'2020-01-01' AND '2020-12-31') r JOIN AcceptedRides a ON r.ride_id = a.ride_id GROUP BY 1 ) SELECT ad.*, IFNULL(ar.accepted_rides,0) AS accepted_rides FROM Active_drivers ad LEFT JOIN Accepted_Rides ar ON ad.month=ar.month
WITH RECURSIVE Month_CTE AS( SELECT 1 AS Month UNION ALL SELECT Month+1 FROM Month_CTE WHERE Month<12 ), Drivers_CTE AS ( SELECT *, CASE WHEN YEAR(join_date) = '2019' THEN 1 ELSE Month(join_date) END AS d_month FROM Drivers WHERE YEAR(join_date) < '2021' ), CTE_3 AS( SELECT m.Month, COUNT(d.driver_id) AS active_drivers FROM MONTH_CTE m LEFT JOIN Drivers_CTE d ON m.Month >= d.d_month GROUP BY m.Month ), CTE_4 AS( SELECT t2.r_month, COUNT(DISTINCT ride_id) AS accepted_rides FROM (SELECT*, MONTH(t.requested_at) AS r_month FROM (SELECT ar.ride_id, ar.driver_id, r.user_id, r.requested_at FROM AcceptedRides ar LEFT JOIN Rides r ON ar.ride_id = r.ride_id WHERE YEAR(r.requested_at) = '2020')t )t2 GROUP BY t2.r_month ) SELECT CTE_3.Month, CTE_3.active_drivers AS active_drivers, IFNULL(CTE_4.accepted_rides,0) AS accepted_rides FROM CTE_3 LEFT JOIN CTE_4 ON CTE_3.Month = CTE_4.r_month
WITH RECURSIVE Month_Table AS ( SELECT 1 AS month UNION SELECT month + 1 as month FROM Month_Table WHERE month < 12 ), available_driver AS ( SELECT driver_id, CASE WHEN YEAR(join_date) = 2019 THEN 1 ELSE MONTH(join_date) END AS month FROM Drivers WHERE YEAR(join_date) <=2020 ), rides_accepted AS ( SELECT MONTH(R.requested_at) as month, COUNT(A.ride_id) as ride_total FROM Rides R INNER JOIN AcceptedRides A ON R.ride_id = A.ride_id WHERE YEAR(requested_at) = 2020 GROUP BY month ) SELECT DISTINCT M.month, count(A.driver_id) OVER (ORDER BY M.month ASC) as active_drivers, IFNULL(R.ride_total,0) AS accepted_rides FROM Month_Table M LEFT JOIN available_driver A ON M.month = A.month LEFT JOIN rides_accepted R ON M.month = R.month ORDER BY M.month ASC
WITH RECURSIVE Months AS ( SELECT 1 AS r_month UNION ALL SELECT r_month + 1 AS r_month FROM Months WHERE r_month < 12 ), RideSummary AS ( SELECT Rides.ride_id, MONTH(Rides.requested_at) AS ride_month FROM Rides INNER JOIN AcceptedRides ON AcceptedRides.ride_id = Rides.ride_id WHERE YEAR(Rides.requested_at) = 2020 ) SELECT Months.r_month AS month, COUNT(DISTINCT Drivers.driver_id) AS active_drivers, COUNT(DISTINCT RideSummary.ride_id) AS accepted_rides FROM Months LEFT JOIN Drivers ON DATE_FORMAT(Drivers.join_date, '%Y%m') <= CONCAT('2020', LPAD(CAST(Months.r_month AS CHAR), 2, '0')) LEFT JOIN RideSummary ON RideSummary.ride_month = Months.r_month GROUP BY Months.r_month
WITH RECURSIVE Months AS( SELECT 1 AS month UNION ALL SELECT month+1 FROM Months WHERE month <12 ) SELECT m.month, COUNT(DISTINCT d.driver_id) AS active_drivers, COUNT(DISTINCT r.ride_id) AS accepted_rides FROM Months m LEFT JOIN Drivers d ON LAST_DAY(STR_TO_DATE(CONCAT(2020, m.month), "%Y%m")) >= d.join_date LEFT JOIN Rides r ON LEFT(r.requested_at, 4) = 2020 AND m.month = DATE_FORMAT(r.requested_at, "%c") AND ride_id IN (SELECT ride_id FROM AcceptedRides) GROUP BY m.month ORDER BY 1
WITH RECURSIVE Months AS( SELECT 1 AS month UNION ALL SELECT month+1 FROM Months WHERE month <12 ) SELECT m.month, COUNT(DISTINCT d.driver_id) AS active_drivers, COUNT(DISTINCT r.ride_id) AS accepted_rides FROM Months m LEFT JOIN Drivers d ON LAST_DAY(STR_TO_DATE(CONCAT(2020, m.month), "%Y%m")) >= d.join_date LEFT JOIN Rides r ON LEFT(r.requested_at, 4) = 2020 AND m.month = DATE_FORMAT(r.requested_at, "%m") AND ride_id IN (SELECT ride_id FROM AcceptedRides) GROUP BY m.month ORDER BY 1
WITH RECURSIVE Months AS( SELECT 1 AS month UNION ALL SELECT month+1 FROM Months WHERE month <12 ) SELECT m.month, IFNULL(MAX(t1.active_drivers), 0) AS active_drivers, COUNT(DISTINCT r.ride_id) AS accepted_rides FROM Months m LEFT JOIN ( SELECT DATE_FORMAT(d1.join_date, "%c") AS month, COUNT(d1.driver_id) AS active_drivers FROM Drivers d1 LEFT JOIN Drivers d2 ON d1.join_date >= d2.join_date WHERE LEFT(d1.join_date, 4) = 2020 GROUP BY d1.driver_id ) AS t1 ON m.month >= t1.month LEFT JOIN Rides r ON LEFT(r.requested_at, 4) = 2020 AND m.month = DATE_FORMAT(r.requested_at, "%c") AND ride_id IN (SELECT ride_id FROM AcceptedRides) GROUP BY m.month ORDER BY 1
WITH RECURSIVE Seq AS ( SELECT 1 AS month UNION ALL SELECT month + 1 FROM Seq WHERE month < 12 ) SELECT Seq.month, COUNT(DISTINCT driver_id) active_drivers, COUNT(DISTINCT rides_table.ride_id) accepted_rides FROM Seq LEFT JOIN (SELECT driver_id, (CASE WHEN YEAR(join_date) = 2019 THEN '1' else MONTH(join_date) END) AS `month` FROM Drivers WHERE YEAR(join_date) <= 2020 ) d ON d.month <= Seq.month LEFT JOIN (SELECT MONTH(requested_at) as `month`, a.ride_id FROM AcceptedRides a JOIN Rides r ON r.ride_id = a.ride_id WHERE YEAR(requested_at) = 2020 ) rides_table ON Seq.month = rides_table.month GROUP BY Seq.month ORDER BY Seq.month
WITH RECURSIVE all_months AS ( SELECT 1 as join_month UNION ALL SELECT join_month+1 FROM all_months WHERE join_month<12 ), rolling_drivers as ( SELECT join_year, join_month, SUM(new_drivers) OVER (ORDER BY join_year, join_month ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) as active_drivers FROM ( SELECT YEAR(join_date) as join_year, MONTH(join_date) as join_month, COUNT(DISTINCT driver_id) as new_drivers FROM Drivers GROUP BY EXTRACT(YEAR_MONTH FROM join_date) ) t1 ), monthly_rides as( SELECT YEAR(requested_at) as join_year, MONTH(requested_at) as join_month, COUNT(DISTINCT AcceptedRides.ride_id) as accepted_rides FROM AcceptedRides INNER JOIN Rides ON AcceptedRides.ride_id = Rides.ride_id WHERE YEAR(requested_at) = 2020 GROUP BY EXTRACT(YEAR_MONTH FROM requested_at) ), existing_data as ( SELECT m_r.join_month as join_month, r_d.active_drivers, m_r.accepted_rides FROM ( SELECT * FROM monthly_rides ) m_r LEFT JOIN ( SELECT * FROM rolling_drivers WHERE join_year = 2020 ) r_d ON r_d.join_month = m_r.join_month UNION SELECT r_d.join_month as join_month, r_d.active_drivers, m_r.accepted_rides FROM ( SELECT * FROM monthly_rides ) m_r RIGHT JOIN ( SELECT * FROM rolling_drivers WHERE join_year = 2020 ) r_d ON r_d.join_month = m_r.join_month ORDER BY join_month ) SELECT t1.join_month as month, COALESCE(active_drivers, MAX(active_drivers) OVER (ORDER BY t1.join_month ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW), 0) as active_drivers, IFNULL(accepted_rides, 0) as accepted_rides FROM (SELECT * FROM all_months) t1 LEFT JOIN (SELECT * FROM existing_data) t2 ON t1.join_month=t2.join_month
WITH RECURSIVE all_months(dates) AS ( SELECT LEAST(MIN(join_date), '2020-01-01') AS dates FROM Drivers UNION SELECT DATE_ADD(dates, INTERVAL 1 MONTH) FROM all_months WHERE YEAR(dates) < 2021 ), drivers_joined1 AS ( SELECT YEAR(join_date) AS 'year', MONTH(join_date) AS 'month', COUNT(driver_id) AS new_drivers FROM Drivers GROUP BY YEAR(join_date), MONTH(join_date) ), drivers_joined2 AS ( SELECT YEAR(am.dates) AS year, MONTH(am.dates) AS month, COALESCE(d.new_drivers,0) AS new_drivers FROM all_months am LEFT JOIN drivers_joined1 d ON YEAR(am.dates) = d.year AND MONTH(am.dates) = d.month ORDER BY year, month ), drivers_joined_rolling AS ( SELECT year, month, SUM(new_drivers) OVER (ORDER BY year, month) AS active_drivers FROM drivers_joined2 ), rides_2020 AS ( SELECT MONTH(r.requested_at) AS month, COUNT(ar.driver_id) AS accepted_rides FROM Rides r LEFT JOIN AcceptedRides ar ON r.ride_id = ar.ride_id WHERE YEAR(r.requested_at) = '2020' GROUP BY MONTH(r.requested_at) ) SELECT d.month, d.active_drivers, COALESCE(r.accepted_rides,0) AS accepted_rides FROM drivers_joined_rolling d LEFT JOIN rides_2020 r ON d.month = r.month WHERE d.year = 2020
WITH RECURSIVE cte AS ( SELECT 1 AS month UNION ALL SELECT month+1 FROM cte WHERE month < 12 ), temp1 AS ( SELECT cte.month, SUM(COALESCE(drivers,0)) OVER (ORDER BY cte.month) AS active_drivers FROM (SELECT MONTH(CASE WHEN join_date < '2020-01-01' THEN '2020-01-01' ELSE join_date END) AS month, COUNT(driver_id) AS drivers FROM Drivers WHERE YEAR(join_date) < 2021 GROUP BY MONTH(CASE WHEN join_date < '2020-01-01' THEN '2020-01-01' ELSE join_date END) ) sub RIGHT JOIN cte ON cte.month = sub.month ), temp2 AS ( SELECT MONTH(requested_at) AS month, COUNT(a.ride_id) AS rides FROM Rides r INNER JOIN AcceptedRides a ON r.ride_id = a.ride_id WHERE YEAR(requested_at) = 2020 GROUP BY MONTH(requested_at) ) SELECT temp1.month, active_drivers, COALESCE(rides,0) AS accepted_rides FROM temp1 LEFT JOIN temp2 ON temp1.month = temp2.month ORDER BY month
WITH RECURSIVE cte AS ( SELECT 1 as month UNION ALL SELECT month+1 AS month FROM cte WHERE month < 12 ), temp1 AS ( SELECT MONTH(join_date) AS month, COUNT(driver_id) AS active_drivers FROM (SELECT driver_id, CASE WHEN join_date < '2020-1-1' THEN '2020-1-1' ELSE join_date END AS join_date FROM Drivers) sub WHERE YEAR(join_date) < 2021 GROUP BY MONTH(join_date) ), temp2 AS ( SELECT MONTH(requested_at) AS month, COUNT(*) AS accepted_rides FROM Rides r INNER JOIN AcceptedRides a ON r.ride_id = a.ride_id WHERE YEAR(requested_at) = 2020 GROUP BY MONTH(requested_at) ), temp3 AS ( SELECT cte.month, COALESCE(active_drivers,0) AS active_drivers, COALESCE(accepted_rides,0) AS accepted_rides FROM cte LEFT JOIN temp1 t1 ON cte.month = t1.month LEFT JOIN temp2 t2 ON cte.month = t2.month ) SELECT month, SUM(active_drivers) OVER (ORDER BY month) AS active_drivers, accepted_rides FROM temp3 ORDER BY month
WITH RECURSIVE cte AS (SELECT 1 AS month UNION ALL SELECT month + 1 AS month FROM cte WHERE month < 12), ride_tbl AS (SELECT MONTH(requested_at) AS month, COUNT(a.ride_id) AS accepted_rides FROM Rides r JOIN AcceptedRides a ON r.ride_id = a.ride_id WHERE YEAR(requested_at) = 2020 GROUP BY 1), driver_tbl AS (SELECT CASE WHEN YEAR(join_date) < 2020 THEN 1 ELSE MONTH(join_date) END AS month, COUNT(driver_id) AS active_drivers FROM Drivers WHERE YEAR(join_date) <= 2020 GROUP BY 1) SELECT c.month, IFNULL(SUM(active_drivers) OVER(ORDER BY month), 0) AS active_drivers, IFNULL(accepted_rides, 0) AS accepted_rides FROM cte c LEFT JOIN ride_tbl r ON c.month = r.month LEFT JOIN driver_tbl d ON c.month = d.month
WITH RECURSIVE cte AS (SELECT 1 AS month UNION ALL SELECT month + 1 FROM cte WHERE month < 12 ), drive as( select driver_id, case when year(join_date)=2019 then '1' else month(join_date) end as months from drivers where year(join_date)<=2020 ), accept as ( select month(requested_at)as m,a.ride_id as acc from rides r left join AcceptedRides a on r.ride_id = a.ride_id where year(requested_at)=2020 ) select c.month , count(distinct d.driver_id)as active_drivers, count(distinct acc) as accepted_rides from cte c left join drive d on d.months <= c.month left join accept a on a.m = c.month group by c.month order by c.month
WITH RECURSIVE cte AS( SELECT 1 AS month UNION ALL SELECT month + 1 FROM cte WHERE month < 12 ), driver AS( SELECT driver_id, MONTH(join_date) AS month FROM Drivers WHERE YEAR(join_date) = 2020 ), rider AS( SELECT r.ride_id, MONTH(requested_at) AS month FROM AcceptedRides a INNER JOIN Rides r USING(ride_id) WHERE YEAR(requested_at) = '2020' ), table1 AS( SELECT cte.month, COUNT(r.ride_id) AS accepted_rides FROM cte LEFT JOIN rider r ON cte.month = r.month GROUP BY month ), table2 AS( SELECT table1.month, COUNT(driver_id)OVER(ORDER BY month ASC) AS active_drivers, accepted_rides FROM table1 LEFT JOIN driver d USING(month) ) SELECT DISTINCT month, active_drivers + (SELECT COUNT(driver_id) FROM Drivers WHERE YEAR(join_date) < 2020) AS active_drivers, accepted_rides FROM table2
WITH RECURSIVE cte(month) AS (SELECT 1 UNION ALL SELECT month + 1 FROM cte WHERE month < 12), Drivers_before_2020 AS (SELECT COUNT(*) AS num FROM Drivers WHERE YEAR(join_date) < 2020), Active_Drives AS (SELECT DISTINCT c.month, SUM(CASE WHEN d.driver_id IS NOT NULL THEN 1 ELSE 0 END) OVER(ORDER BY c.month) AS active_drivers FROM cte AS c LEFT JOIN (SELECT * FROM Drivers WHERE YEAR(join_date) = 2020) AS d ON c.month = MONTH(d.join_date)), AcceptedRides_2020 AS (SELECT MONTH(r.requested_at) AS month, COUNT(*) AS accepted_rides FROM Rides AS r JOIN AcceptedRides AS ar ON r.ride_id = ar.ride_id WHERE YEAR(r.requested_at) = 2020 GROUP BY month) SELECT ad.month, ad.active_drivers + (SELECT num FROM Drivers_before_2020) AS active_drivers, IFNULL(ar.accepted_rides, 0) AS accepted_rides FROM Active_Drives AS ad LEFT JOIN AcceptedRides_2020 AS ar ON ad.month = ar.month
WITH RECURSIVE cte(month) AS (SELECT 1 UNION ALL SELECT month + 1 FROM cte WHERE month < 12), Drivers_before_2020 AS (SELECT COUNT(*) AS num FROM Drivers WHERE YEAR(join_date) < 2020), Active_Drives AS (SELECT c.month, SUM(CASE WHEN d.driver_id IS NOT NULL THEN 1 ELSE 0 END) OVER(ORDER BY c.month) AS active_drivers FROM cte AS c LEFT JOIN (SELECT * FROM Drivers WHERE YEAR(join_date) = 2020) AS d ON c.month = MONTH(d.join_date)), AcceptedRides_2020 AS (SELECT MONTH(r.requested_at) AS month, COUNT(*) AS accepted_rides FROM Rides AS r JOIN AcceptedRides AS ar ON r.ride_id = ar.ride_id WHERE YEAR(r.requested_at) = 2020 GROUP BY month) SELECT DISTINCT ad.month, ad.active_drivers + (SELECT num FROM Drivers_before_2020) AS active_drivers, IFNULL(ar.accepted_rides, 0) AS accepted_rides FROM Active_Drives AS ad LEFT JOIN AcceptedRides_2020 AS ar ON ad.month = ar.month
WITH RECURSIVE cte_count (n) AS ( SELECT 1 UNION ALL SELECT n + 1 FROM cte_count WHERE n < 20 ) SELECT month, active_drivers, accepted_rides FROM ( SELECT t2.cal_year, t2.cal_month month, SUM(COALESCE(cnt, 0)) OVER ( ORDER BY t2.cal_year, t2.cal_month ) active_drivers, COALESCE(t4.cnt_rides, 0) accepted_rides FROM ( SELECT year(DATE_ADD("2019-09-30", INTERVAL n MONTH)) cal_year, month(DATE_ADD("2019-09-30", INTERVAL n MONTH)) cal_month from cte_count ) t2 left outer join ( SELECT year(join_date) join_year, month(join_date) join_month, count(driver_id) cnt FROM Drivers GROUP BY year(join_date), month(join_date) ) t1 on t1.join_year=t2.cal_year and t1.join_month=t2.cal_month left outer join ( SELECT year(r.requested_at) ride_year, month(r.requested_at) ride_month, count(1) cnt_rides FROM RIDES r INNER JOIN AcceptedRides ar on r.ride_id=ar.ride_id group by year(r.requested_at), month(r.requested_at) ) t4 on t4.ride_year=t2.cal_year and t4.ride_month=t2.cal_month ) t3 WHERE cal_year=2020
WITH RECURSIVE date_dummy(n) as ( SELECT 1 UNION ALL SELECT n + 1 FROM date_dummy WHERE n<12 ) , date_n as ( SELECT DATE_FORMAT( (STR_TO_DATE(CONCAT('2020-', n, '-1'), '%Y-%m-%d')),'%Y-%m') as mn FROM date_dummy ) , cte1 as ( SELECT ride_date, SUM(IF(ride_distance IS NULL,0,1)) AS accepted_rides FROM ( SELECT DATE_FORMAT(requested_at,'%Y-%m') AS ride_date, r.ride_id as ride_id, ride_distance FROM Rides r LEFT JOIN AcceptedRides a ON r.ride_id = a.ride_id WHERE DATE_FORMAT(requested_at , '%Y') = 2020 ) t GROUP BY ride_date ) SELECT MONTH((STR_TO_DATE(CONCAT(month, '-1'), '%Y-%m-%d'))) AS month, driver_cnt AS active_drivers, accepted_rides FROM (SELECT mn as month, ifnull(accepted_rides,0) as accepted_rides FROM date_n dn LEFT JOIN cte1 ct on dn.mn = ct.ride_date ) a LEFT JOIN (SELECT mn, COUNT(DISTINCT driver_id) as driver_cnt FROM date_n dn LEFT JOIN Drivers d ON dn.mn >= DATE_FORMAT(join_date,'%Y-%m') GROUP BY mn ) b ON a.month = b.mn
WITH RECURSIVE end_of_months AS ( SELECT LAST_DAY('2020-01-01') as mon UNION ALL SELECT LAST_DAY(DATE_ADD(mon, INTERVAL 1 month)) FROM end_of_months WHERE LAST_DAY(DATE_ADD(mon, INTERVAL 1 month)) <= '2020-12-31' ), active_drivers as ( SELECT MONTH(m.mon) as month, COUNT(d.driver_id) as active_drivers FROM end_of_months m LEFT JOIN drivers d ON d.join_date <= m.mon GROUP BY mon ), accepted AS ( SELECT MONTH(r.requested_at) as month, COUNT(ar.ride_id) as accepted_rides FROM AcceptedRides ar JOIN Rides r ON ar.ride_id = r.ride_id WHERE r.requested_at between '2020-01-01' AND '2020-12-31' GROUP BY month ) SELECT ad.*, IFNULL(a.accepted_rides,0) as accepted_rides FROM active_drivers ad LEFT JOIN accepted a ON ad.month = a.month ORDER BY ad.month
WITH RECURSIVE full_year AS ( SELECT 1 as month UNION ALL SELECT month+1 FROM full_year WHERE month < 12 ), cte1 AS ( SELECT driver_id, join_date FROM Drivers WHERE join_date < '2021-01-01' ), cte2 AS ( SELECT MONTH(d1.join_date) AS month, d2.driver_id FROM cte1 d1, cte1 d2 WHERE d1.join_date >= d2.join_date ), cte3 AS ( SELECT month, COUNT(DISTINCT driver_id) as driver_id FROM cte2 GROUP BY month ORDER BY month ), cte4 AS ( SELECT full_year.month, max(driver_id) as active_drivers FROM full_year , cte3 WHERE full_year.month >= cte3.month group by full_year.month ), cte5 AS ( SELECT MONTH(requested_at) AS month, COUNT(*) AS accepted_rides FROM Rides r, AcceptedRides a WHERE r.ride_id = a.ride_id AND requested_at >= '2020-01-01' AND requested_at < '2021-01-01' GROUP BY MONTH(requested_at) ORDER BY month ) SELECT full_year.month AS month, IFNULL(active_drivers, 0) AS active_drivers, IFNULL(accepted_rides,0) AS accepted_rides FROM cte4 LEFT JOIN cte5 ON cte4.month = cte5.month RIGHT JOIN full_year ON cte4.month = full_year.month ORDER BY month
WITH RECURSIVE full_year AS ( SELECT 1 as month UNION ALL SELECT month+1 FROM full_year WHERE month < 12 ), cte1 AS ( SELECT driver_id, join_date FROM Drivers WHERE join_date < '2021-01-01' ), cte2 AS ( SELECT MONTH(d1.join_date) AS month, d2.driver_id FROM cte1 d1, cte1 d2 WHERE d1.join_date >= d2.join_date ), cte3 AS ( SELECT month, COUNT(DISTINCT driver_id) as driver_id FROM cte2 GROUP BY month ORDER BY month ), cte4 AS ( SELECT full_year.month, max(driver_id) as active_drivers FROM full_year LEFT JOIN cte3 ON full_year.month >= cte3.month group by full_year.month ), cte5 AS ( SELECT MONTH(requested_at) AS month, COUNT(*) AS accepted_rides FROM Rides r, AcceptedRides a WHERE r.ride_id = a.ride_id AND requested_at >= '2020-01-01' AND requested_at < '2021-01-01' GROUP BY MONTH(requested_at) ORDER BY month ) SELECT cte4.month AS month, IFNULL(active_drivers, 0) AS active_drivers, IFNULL(accepted_rides,0) AS accepted_rides FROM cte4 LEFT JOIN cte5 ON cte4.month = cte5.month ORDER BY month
WITH RECURSIVE getMonth AS( SELECT 1 AS month UNION ALL SELECT month+1 AS month FROM getMonth WHERE month < 12 ), getDates AS( SELECT month, LAST_DAY(CONCAT('2020-',month,'-01')) AS last_day FROM getMonth ), getRides AS ( SELECT MONTH(requested_at) AS month_, COUNT( r.ride_id) AS accepted_rides FROM Rides r INNER JOIN AcceptedRides ar ON r.ride_id = ar.ride_id WHERE Year(requested_at) = '2020' GROUP BY 1 ), getDrivers AS( SELECT month, SUM(CASE WHEN Drivers.driver_id IS NOT NULL THEN 1 ELSE 0 END) AS active_drivers FROM getDates LEFT OUTER JOIN Drivers ON Drivers.join_date <= last_day GROUP BY 1 ) SELECT month, active_drivers, COALESCE(accepted_rides,0) AS accepted_rides FROM getDrivers LEFT OUTER JOIN getRides ON month = month_ ORDER BY 1
WITH RECURSIVE getMonth AS( SELECT 1 AS month UNION ALL SELECT month+1 AS month FROM getMonth WHERE month < 12 ), getDates AS( SELECT month, LAST_DAY(CONCAT('2020-',month,'-01')) AS last_day FROM getMonth ), getRides AS ( SELECT MONTH(requested_at) AS month_, COUNT(DISTINCT r.ride_id) AS accepted_rides FROM Rides r INNER JOIN AcceptedRides ar ON r.ride_id = ar.ride_id WHERE Year(requested_at) = '2020' GROUP BY 1 ), getDrivers AS( SELECT month, SUM(CASE WHEN Drivers.driver_id IS NOT NULL THEN 1 ELSE 0 END) AS active_drivers FROM getDates LEFT OUTER JOIN Drivers ON Drivers.join_date <= last_day GROUP BY 1 ) SELECT month, active_drivers, COALESCE(accepted_rides,0) AS accepted_rides FROM getDrivers LEFT OUTER JOIN getRides ON month = month_ ORDER BY 1
WITH RECURSIVE m AS ( SELECT 1 month UNION SELECT month+1 month FROM m WHERE month<=11 ) SELECT m.month month, COUNT(DISTINCT d.driver_id) active_drivers, COUNT(DISTINCT a.ride_id) accepted_rides FROM m LEFT JOIN drivers d ON (DATE_FORMAT(d.join_date,"%m")<=m.month AND DATE_FORMAT(d.join_date,"%Y")=2020) OR DATE_FORMAT(d.join_date,"%Y")<2020 LEFT JOIN rides r ON DATE_FORMAT(r.requested_at,"%m")=m.month AND DATE_FORMAT(r.requested_at,"%Y")=2020 LEFT JOIN acceptedrides a ON a.ride_id=r.ride_id GROUP BY m.month ORDER BY m.month
WITH RECURSIVE m AS ( SELECT 1 month UNION SELECT month+1 month FROM m WHERE month<=11 ), d1 AS ( SELECT DATE_FORMAT(join_date,"%Y") j_year, DATE_FORMAT(join_date,"%m") j_month, COUNT(*) j_drivers FROM drivers GROUP BY DATE_FORMAT(join_date,"%Y"), DATE_FORMAT(join_date,"%m") ), a AS ( SELECT DATE_FORMAT(requested_at,"%Y") r_year, DATE_FORMAT(requested_at,"%m") r_month, COUNT(*) ac_rides FROM acceptedrides ac JOIN rides r ON ac.ride_id=r.ride_id GROUP BY DATE_FORMAT(requested_at,"%Y"), DATE_FORMAT(requested_at,"%m") ) SELECT m.month month, IFNULL(SUM(j_drivers),0) active_drivers, IFNULL(AVG(ac_rides),0) accepted_rides FROM m LEFT JOIN d1 ON (d1.j_year=2020 AND d1.j_month<=m.month) OR d1.j_year<2020 LEFT JOIN a ON m.month=a.r_month AND a.r_year=2020 GROUP BY m.month ORDER BY m.month
WITH RECURSIVE m AS ( SELECT 1 month UNION SELECT month+1 month FROM m WHERE month<=11 ), d1 AS ( SELECT DATE_FORMAT(join_date,"%Y") j_year, DATE_FORMAT(join_date,"%m") j_month, COUNT(*) j_drivers FROM drivers GROUP BY DATE_FORMAT(join_date,"%Y"), DATE_FORMAT(join_date,"%m") ), y_m AS ( SELECT month, j_year year FROM m CROSS JOIN (SELECT DISTINCT j_year FROM d1) y ), d2 AS ( SELECT y_m.year act_year, y_m.month act_month, IFNULL(SUM(j_drivers) OVER(ORDER BY y_m.year, y_m.month ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW),0) act_drivers FROM d1 RIGHT JOIN y_m ON d1.j_month=y_m.month AND d1.j_year=y_m.year ), a AS ( SELECT DATE_FORMAT(requested_at,"%Y") r_year, DATE_FORMAT(requested_at,"%m") r_month, COUNT(*) ac_rides FROM acceptedrides ac JOIN rides r ON ac.ride_id=r.ride_id GROUP BY DATE_FORMAT(requested_at,"%Y"), DATE_FORMAT(requested_at,"%m") ) SELECT d2.act_month month, act_drivers active_drivers, IFNULL(ac_rides,0) accepted_rides FROM d2 LEFT JOIN a ON d2.act_year=a.r_year AND d2.act_month=a.r_month WHERE d2.act_year=2020 ORDER BY month
WITH RECURSIVE m AS (SELECT 1 AS month UNION ALL SELECT month+1 FROM m WHERE month<12), t1 AS (SELECT MONTH(join_date) AS month, COUNT(driver_id) OVER(ORDER BY join_date) AS active_drivers FROM Drivers WHERE YEAR(join_date)<=2020), t2 AS (SELECT MONTH(requested_at) AS month, COUNT(ride_id) AS accepted_rides FROM Rides r WHERE r.ride_id IN (SELECT ride_id FROM AcceptedRides) AND YEAR(requested_at)=2020 GROUP BY 1) SELECT DISTINCT m.month AS month, IFNULL(MAX(t1.active_drivers) OVER (ORDER BY m.month),0) AS active_drivers, IFNULL(t2.accepted_rides,0)AS accepted_rides FROM m LEFT JOIN t1 ON m.month = t1.month LEFT JOIN t2 ON m.month = t2.month
WITH RECURSIVE m AS( SELECT 1 AS month, "2020-02-01" as day UNION ALL SELECT month+1 AS month, (CASE WHEN month+1<12 THEN DATE(CONCAT("2020-",month+2,"-01")) ELSE "2021-01-01" END ) as day FROM m WHERE month < 12 ), n as ( SELECT d.driver_id, d.join_date, r.requested_at FROM AcceptedRides ar LEFT JOIN Rides r ON ar.ride_id = r.ride_id LEFT JOIN Drivers d ON ar.driver_id = d.driver_id ) SELECT m.month, (SELECT COUNT(*) FROM Drivers d WHERE DATE(d.join_date)<DATE(m.day)) As active_drivers, (SELECT COUNT(*) FROM n WHERE MONTH(n.requested_at)= m.month &amp;&amp; YEAR(n.requested_at)= "2020" ) As accepted_rides from m GROUP By m.month ORDER BY m.month
WITH RECURSIVE month AS (SELECT 1 mon UNION ALL SELECT mon+1 mon FROM month WHERE mon < 12), t1 AS ((SELECT 1 mon, count(driver_id) cn FROM Drivers WHERE date_format(join_date, "%Y-%m") <= "2020-01") UNION (SELECT month(join_date), count(driver_id) cn FROM Drivers WHERE date_format(join_date, "%Y-%m") between "2020-02" and "2020-12" GROUP BY date_format(join_date, "%Y-%m"))), t2 AS (SELECT month(requested_at) mon, count(a.ride_id) cn1 FROM acceptedRides a LEFT JOIN Rides r ON a.ride_id = r.ride_id WHERE year(requested_at) = 2020 GROUP BY month(requested_at)) SELECT m.mon month, sum(cn) OVER(ORDER BY m.mon) active_drivers, ifnull(cn1,0) accepted_rides FROM month m LEFT JOIN t1 ON m.mon = t1.mon LEFT JOIN t2 on m.mon = t2.mon
WITH RECURSIVE month AS( SELECT 1 AS month UNION ALL SELECT month + 1 FROM month WHERE month < 12 ) SELECT t.month, (SELECT COUNT(DISTINCT driver_id) FROM Drivers WHERE join_date < '2021-01-01' AND (join_date < '2020-01-01' OR MONTH(join_date) <= t.month) ) AS active_drivers, (SELECT COUNT(DISTINCT a.ride_id) FROM Rides a JOIN AcceptedRides b ON a.ride_id = b.ride_id AND YEAR(a.requested_at) = '2020' AND MONTH(a.requested_at) = t.month ) AS accepted_rides FROM month t
WITH RECURSIVE monthTable AS ( SELECT 1 AS month UNION SELECT month+1 FROM monthTable WHERE month < 12 ), AcceptedDrivers AS ( SELECT COUNT(a.ride_id) AS accepted_rides, MONTH(requested_at) AS month FROM AcceptedRides a LEFT JOIN Rides r ON a.ride_id = r.ride_id WHERE YEAR(requested_at) = 2020 GROUP BY month ), ActiveDrivers AS ( SELECT driver_id, ( CASE WHEN YEAR(join_date) < 2020 THEN 1 ELSE MONTH(join_date) END ) AS month FROM Drivers WHERE YEAR(join_date) <= 2020 ) SELECT DISTINCT m.month AS month, COUNT(a.driver_id) OVER(ORDER BY m.month) AS active_drivers,COALESCE(accept.accepted_rides, 0) AS accepted_rides FROM monthTable m LEFT JOIN ActiveDrivers a ON m.month = a.month LEFT JOIN AcceptedDrivers accept ON m.month = accept.month
WITH RECURSIVE month_cte AS( SELECT 1 AS month_num, STR_TO_DATE('2020-02-01', '%Y-%m-%d') AS next_month UNION ALL SELECT month_num+1, CASE WHEN month_num+1<=11 THEN STR_TO_DATE(CONCAT('2020-',LPAD(month_num+2,2,'00'),'-01'), '%Y-%m-%d') ELSE STR_TO_DATE('2021-01-01','%Y-%m-%d') END AS next_month FROM month_cte WHERE month_num<12) SELECT month_num AS month, COUNT(DISTINCT d.driver_id) AS active_drivers, COUNT(DISTINCT r.ride_id) AS accepted_rides FROM Rides r JOIN AcceptedRides ar ON r.ride_id = ar.ride_id RIGHT JOIN month_cte m ON m.month_num=MONTH(r.requested_at) AND YEAR(r.requested_at) = '2020' LEFT JOIN Drivers d ON m.next_month>d.join_date GROUP BY month_num ORDER BY month_num
WITH RECURSIVE month_list(month) AS ( SELECT 1 UNION SELECT month+1 FROM month_list WHERE month<12 ), accept_rides AS ( SELECT MONTH(requested_at) AS month, COUNT(ride_distance) AS accepted_rides FROM Rides LEFT JOIN AcceptedRides USING(ride_id) WHERE YEAR(requested_at) = 2020 GROUP BY month ) SELECT month_list.month AS month, COUNT(driver_id) AS active_drivers, IFNULL(accepted_rides,0) AS accepted_rides FROM month_list LEFT JOIN accept_rides ON month_list.month = accept_rides.month LEFT JOIN Drivers ON (YEAR(join_date) =2020 AND MONTH(join_date)<=month_list.month) OR (YEAR(join_date)<2020) GROUP BY month_list.month ORDER BY month_list.month
WITH RECURSIVE month_seq AS (SELECT 1 MONTH_NUM UNION ALL SELECT MONTH_NUM+1 FROM month_seq WHERE MONTH_NUM <12), active_drivers_table AS (SELECT MONTH_NUM month, COUNT(driver_id) active_drivers FROM month_seq M1 LEFT JOIN Drivers D1 ON (M1.MONTH_NUM >= MONTH(D1.join_date) AND YEAR(D1.join_date) = 2020) OR YEAR(D1.join_date) < 2020 GROUP BY MONTH_NUM), accepted_rides_table AS (SELECT MONTH(requested_at) month, COUNT(A1.ride_id) accepted_rides FROM AcceptedRides A1 JOIN Rides R1 ON A1.ride_id = R1.ride_id WHERE YEAR(requested_at) = 2020 GROUP BY month) SELECT T1.month, active_drivers, IFNULL(accepted_rides,0) accepted_rides FROM active_drivers_table T1 LEFT JOIN accepted_rides_table T2 ON T1.month = T2.month
WITH RECURSIVE monthcount as ( SELECT 1 month UNION SELECT month+1 month FROM monthcount WHERE month < 12) SELECT month,COUNT(DISTINCT d.driver_id)active_drivers,COUNT(DISTINCT a.ride_id) accepted_rides FROM monthcount m LEFT JOIN Drivers d ON (YEAR(d.join_date)<2020) OR (m.month>=MONTH(join_date) AND YEAR(d.join_date)=2020 ) LEFT JOIN Rides r ON (m.month=MONTH(r.requested_at) AND YEAR(r.requested_at)=2020) LEFT JOIN AcceptedRides a ON a.ride_id=r.ride_id GROUP BY 1
WITH RECURSIVE months AS ( SELECT 1 AS month UNION ALL SELECT month + 1 FROM months WHERE month < 12 ) SELECT m.month ,COUNT(DISTINCT d.driver_id) AS active_drivers ,COUNT(DISTINCT r.ride_id) AS accepted_rides FROM Rides r INNER JOIN AcceptedRides a ON r.ride_id = a.ride_id RIGHT JOIN months m ON YEAR(r.requested_at) = 2020 AND MONTH(r.requested_at) = m.month LEFT JOIN Drivers d ON YEAR(d.join_date) < 2020 OR (YEAR(d.join_date) = 2020 AND MONTH(d.join_date) <= m.month) GROUP BY m.month ORDER BY m.month
WITH RECURSIVE months AS ( SELECT 1 AS month UNION ALL SELECT month + 1 FROM months WHERE month < 12 ) SELECT t1.month ,t1.active_drivers ,t2.accepted_rides FROM ( SELECT m.month ,COUNT(DISTINCT d.driver_id) AS active_drivers FROM months m LEFT JOIN drivers d ON YEAR(d.join_date) < 2020 OR (YEAR(d.join_date) = 2020 AND MONTH(d.join_date) <= m.month) GROUP BY m.month ) t1 INNER JOIN ( SELECT m.month ,COUNT(DISTINCT r.ride_id) AS accepted_rides FROM Rides r INNER JOIN AcceptedRides a ON r.ride_id = a.ride_id RIGHT JOIN months m ON YEAR(r.requested_at) = 2020 AND MONTH(r.requested_at) = m.month GROUP BY m.month ) t2 ON t1.month = t2.month
WITH RECURSIVE months AS ( SELECT 1 AS month UNION SELECT month + 1 AS month FROM months WHERE month < 12), active_drivers AS ( SELECT MONTH(join_date) AS 'month', MAX(drivers) AS active_drivers FROM (SELECT join_date, COUNT(driver_id) OVER (ORDER BY join_date) AS drivers FROM Drivers) t1 WHERE YEAR(join_date) = 2020 GROUP BY MONTH(join_date)), accepted_rides AS ( SELECT MONTH(r.requested_at) AS month, COUNT(ar.ride_id) AS accepted_rides FROM AcceptedRides ar LEFT JOIN Rides r ON ar.ride_id = r.ride_id WHERE YEAR(r.requested_at) = 2020 GROUP BY month) SELECT month, MAX(active_drivers) OVER (ORDER BY month) AS active_drivers, accepted_rides FROM (SELECT m.month, IFNULL(ad.active_drivers, 0) AS active_drivers, IFNULL(ar.accepted_rides, 0) AS accepted_rides FROM months m LEFT JOIN active_drivers ad ON m.month = ad.month LEFT JOIN accepted_rides ar ON m.month = ar.month) t2 ORDER BY month
WITH RECURSIVE months AS ( SELECT 1 month UNION ALL SELECT month + 1 FROM months WHERE month < 12 ), active_drivers AS ( SELECT m.month, COUNT(d.driver_id) active_drivers FROM months m LEFT JOIN Drivers d ON YEAR(d.join_date) < 2020 OR (YEAR(d.join_date) = 2020 AND m.month >= MONTH(d.join_date)) GROUP BY m.month ), accepted_rides AS ( SELECT MONTH(r.requested_at) month, COUNT(*) accepted_rides FROM Rides r JOIN AcceptedRides a ON r.ride_id = a.ride_id WHERE YEAR(r.requested_at) = 2020 GROUP BY month ) SELECT m.month, IFNULL(d.active_drivers,0) active_drivers, IFNULL(r.accepted_rides, 0) accepted_rides FROM months m LEFT JOIN active_drivers d ON m.month = d.month LEFT JOIN accepted_rides r ON m.month = r.month
WITH RECURSIVE months AS (SELECT 1 AS month UNION ALL SELECT month+1 FROM months WHERE month<12) SELECT t.month, (SELECT COUNT(DISTINCT driver_id) FROM drivers WHERE join_date < '2021-01-01' AND (join_date < '2020-01-01' OR month(join_date) <= t.month)) AS active_drivers, (SELECT COUNT(DISTINCT a.ride_id) FROM rides a JOIN acceptedrides b ON a.ride_id = b.ride_id AND a.requested_at BETWEEN '2020-01-01' AND '2020-12-31' AND month(a.requested_at) = t.month) AS accepted_rides FROM months AS t
WITH RECURSIVE months AS (SELECT 1 AS month UNION ALL SELECT month+1 FROM months WHERE month<12) select t.month, (select count(distinct driver_id) from drivers where join_date < '2021-01-01' and (join_date < '2020-01-01' or month(join_date) <= t.month)) active_drivers, (select count(distinct a.ride_id) from rides a join acceptedrides b on a.ride_id = b.ride_id and a.requested_at between '2020-01-01' and '2020-12-31' and month(a.requested_at) = t.month) accepted_rides from months t
WITH RECURSIVE months AS( SELECT 1 AS month UNION ALL SELECT month + 1 FROM months WHERE month < 12 ) SELECT t.month , ( SELECT COUNT(driver_id) FROM Drivers WHERE YEAR(join_date) < 2021 AND (MONTH(join_date) <= t.month OR YEAR(join_date) <2020) ) AS active_drivers , ( SELECT COUNT(DISTINCT ride_id) FROM AcceptedRides INNER JOIN Rides USING(ride_id) WHERE MONTH(requested_at) = t.month AND YEAR(requested_at) = 2020 ) AS accepted_rides FROM months t
WITH RECURSIVE months AS( SELECT 1 AS month UNION ALL SELECT month + 1 FROM months WHERE month < 12 ) SELECT t.month , (SELECT COUNT(driver_id) FROM Drivers WHERE YEAR(join_date) < 2021 AND (MONTH(join_date)<= t.month OR YEAR(join_date) < 2020 )) AS active_drivers , (SELECT COUNT(DISTINCT a.ride_id) FROM rides a JOIN Acceptedrides b ON a.ride_id = b.ride_id AND MONTH(a.requested_at) = t.month WHERE a.requested_at LIKE '2020%' ) AS accepted_rides FROM months t
WITH RECURSIVE months(month) AS (SELECT 1 UNION ALL SELECT month+1 FROM months WHERE month<12), t1 AS (SELECT MONTH(join_date) AS month, COUNT(driver_id) OVER (ORDER BY join_date) AS active_drivers FROM Drivers WHERE YEAR(join_date)<='2020'), t2 AS (SELECT MONTH(requested_at) AS month, COUNT(ride_id) AS accpted_rides FROM Rides r WHERE ride_id IN (SELECT ride_id FROM AcceptedRides) AND YEAR(requested_at)='2020' GROUP BY month) SELECT DISTINCT m.month, IFNULL(MAX(t1.active_drivers) OVER (ORDER BY m.month), 0) AS active_drivers, IFNULL(t2.accpted_rides, 0) AS accepted_rides FROM months m LEFT JOIN t1 ON m.month=t1.month LEFT JOIN t2 ON m.month=t2.month
WITH RECURSIVE one_to_twelve(n) AS( SELECT 1 UNION ALL SELECT n + 1 FROM one_to_twelve WHERE n < 11 ), months AS( SELECT n AS month, STR_TO_DATE(CONCAT('2020 ', n, ' 1'), '%Y %m %d') AS start_date, DATE_SUB(STR_TO_DATE(CONCAT('2020 ', n + 1, ' 1'), '%Y %m %d'), INTERVAL 1 DAY) AS end_date FROM one_to_twelve UNION ALL SELECT 12 AS month, STR_TO_DATE('2020-12-01', '%Y-%m-%d') AS start_date, STR_TO_DATE('2020-12-31', '%Y-%m-%d') AS end_date ), active_drivers AS( SELECT month, COUNT(driver_id) AS active_drivers FROM months LEFT JOIN drivers ON drivers.join_date <= months.end_date GROUP BY 1 ), accepted_rides AS( SELECT month, COUNT(acceptedrides.ride_id) AS accepted_rides FROM acceptedrides LEFT JOIN rides ON rides.ride_id = acceptedrides.ride_id RIGHT JOIN months ON (months.start_date <= rides.requested_at AND rides.requested_at <= months.end_date) GROUP BY 1 ) SELECT ad.month, IFNULL(active_drivers, 0) AS active_drivers, IFNULL(accepted_rides, 0) AS accepted_rides FROM active_drivers ad JOIN accepted_rides ar ON ad.month = ar.month ORDER BY month
WITH RECURSIVE seq AS ( SELECT 1 AS month UNION ALL SELECT month + 1 FROM seq WHERE month < 12 ), tbl AS ( SELECT CAST(RIGHT(`year_month`, 2) AS SIGNED) AS month, active_drivers FROM ( SELECT `year_month`, SUM(cnt) OVER(ORDER BY `year_month`) AS active_drivers FROM ( SELECT EXTRACT(YEAR_MONTH FROM join_date) AS `year_month`, COUNT(*) AS cnt FROM Drivers GROUP BY `year_month` ) t ) tt WHERE tt.`year_month` BETWEEN '202001' AND '202012' ), r AS ( SELECT COUNT(t1.ride_id) AS accepted_rides, EXTRACT(MONTH FROM t2.requested_at) AS `month` FROM AcceptedRides t1 INNER JOIN Rides t2 ON t1.ride_id = t2.ride_id AND t2.requested_at BETWEEN '2020-01-01' AND '2020-12-31' GROUP BY `month` ) SELECT seq.month, COALESCE(MAX(tbl.active_drivers) OVER(ORDER BY seq.month), 0) AS active_drivers, COALESCE(r.accepted_rides, 0) AS accepted_rides FROM seq LEFT JOIN tbl ON seq.month = tbl.month LEFT JOIN r ON seq.month = r.month
WITH RECURSIVE seq AS ( SELECT 1 AS month UNION ALL SELECT month + 1 FROM seq WHERE month < 12), driver AS ( SELECT driver_id, (CASE WHEN YEAR(join_date) = 2019 THEN '1' ELSE MONTH(join_date) END) AS `month` FROM Drivers WHERE YEAR(join_date) <= 2020), accepted AS ( SELECT MONTH(requested_at) AS `month`, a.ride_id FROM AcceptedRides a JOIN Rides r ON r.ride_id = a.ride_id WHERE YEAR(requested_at) = 2020) SELECT t.month, COUNT(DISTINCT driver_id) AS active_drivers, COUNT(DISTINCT rides.ride_id) AS accepted_rides FROM seq t LEFT JOIN driver d ON d.month <= t.month LEFT JOIN accepted rides ON t.month = rides.month GROUP BY t.month ORDER BY t.month
WITH RECURSIVE seq AS (SELECT 0 as cnt ,1 AS value UNION ALL SELECT 0 as cnt, value + 1 FROM seq WHERE value < 12), rides_2020 as ( select ride_id, month(requested_at) as month from rides where year(requested_at) = 2020 ) , dam as ( select count(b.ride_id) as cnt, a.month from rides_2020 a inner join acceptedrides b on a.ride_id = b.ride_id group by 2 ), damn as ( select a.cnt + ifnull(b.cnt,0) as cnt, a.value as month from seq a left join dam b on a.value = b.month ), avp as ( select count(driver_id) as d_cnt from drivers where year(join_date) < 2020 ), avc as ( select count(driver_id) as ad_cnt, month(join_date) as month from drivers where year(join_date) = 2020 group by 2 ), avs as ( select a.cnt + ifnull(b.ad_cnt,0) as cnt, a.value as month from seq a left join avc b on a.value = b.month ), avl as ( select sum(cnt) over(order by month) + avp.d_cnt as cnt, month from avs, avp ), final as ( select avl.month as month, damn.cnt as d_cnt, avl.cnt as a_cnt from avl inner join damn on damn.month = avl.month ) select month, a_cnt as active_drivers, d_cnt as accepted_rides from final
WITH RECURSIVE seq AS (SELECT 1 AS month UNION ALL SELECT month + 1 FROM seq WHERE month < 12) select seq.month, count(distinct driver_id) active_drivers, count(distinct rides.ride_id) accepted_rides from seq left join ( select driver_id, (case when year(join_date)=2019 then '1' else month(join_date) end) `month` from Drivers where year(join_date)<=2020 ) d on d.month <= seq.month left join ( select month(requested_at) as `month`, a.ride_id from AcceptedRides a join Rides r on r.ride_id = a.ride_id where year(requested_at)=2020 ) rides on seq.month = rides.month group by seq.month order by seq.month
WITH RECURSIVE t AS ( SELECT 1 AS month UNION ALL SELECT month + 1 AS month FROM t WHERE month < 12 ) SELECT t.month, COUNT(DISTINCT d.driver_id) AS active_drivers, COUNT(DISTINCT a.ride_id) AS accepted_rides FROM t LEFT JOIN Drivers d ON (t.month >= month(d.join_date) AND year(d.join_date) = 2020) OR year(d.join_date) < 2020 LEFT JOIN Rides r ON t.month = month(r.requested_at) AND year(r.requested_at) = 2020 LEFT JOIN AcceptedRides a ON r.ride_id = a.ride_id GROUP BY t.month ORDER BY t.month
WITH RECURSIVE t AS ( SELECT 1 AS month UNION ALL SELECT month + 1 FROM t WHERE month < 12), t2 AS (SELECT DISTINCT month, COUNT(driver_id) OVER (PARTITION BY month) active_drivers FROM t LEFT JOIN (SELECT driver_id,join_date, CASE WHEN YEAR(Drivers.join_date) < 2020 THEN '2020-01-01' ELSE join_date END AS join_date_new FROM Drivers) Drivers ON t.month = MONTH(Drivers.join_date_new) AND YEAR(Drivers.join_date_new) = 2020), t3 AS (SELECT DISTINCT month, COUNT(ride_id) OVER (PARTITION BY t.month) accepted_rides FROM t LEFT JOIN Rides ON t.month = MONTH(Rides.requested_at) AND YEAR(Rides.requested_at) = 2020 AND Rides.ride_id IN (SELECT ride_id FROM AcceptedRides)) SELECT DISTINCT t2.month, SUM(active_drivers) OVER(ORDER BY t2.month) active_drivers, accepted_rides FROM t2 LEFT JOIN t3 ON t2.month = t3.month
WITH RECURSIVE t AS ( SELECT 1 AS month UNION ALL SELECT month + 1 FROM t WHERE month < 12), t2 AS (SELECT DISTINCT month, COUNT(driver_id) OVER (PARTITION BY month) active_drivers FROM t LEFT JOIN (SELECT driver_id,join_date, CASE WHEN YEAR(Drivers.join_date) = 2019 THEN '2020-01-01' ELSE join_date END AS join_date_new FROM Drivers) Drivers ON t.month = MONTH(Drivers.join_date_new) AND YEAR(Drivers.join_date_new) = 2020), t3 AS (SELECT DISTINCT month, COUNT(ride_id) OVER (PARTITION BY t.month) accepted_rides FROM t LEFT JOIN Rides ON t.month = MONTH(Rides.requested_at) AND YEAR(Rides.requested_at) = 2020 AND Rides.ride_id IN (SELECT ride_id FROM AcceptedRides)) SELECT DISTINCT t2.month, SUM(active_drivers) OVER(ORDER BY t2.month) active_drivers, accepted_rides FROM t2 LEFT JOIN t3 ON t2.month = t3.month
WITH RECURSIVE t1 AS ( SELECT 1 As m, 0 AS n UNION SELECT m+1, n FROM t1 WHERE m < 12 ), t2 AS ( SELECT COUNT(*) AS existing_drivers FROM Drivers WHERE join_date < "2020-1-1" ), t3 AS ( SELECT MONTH(join_date) AS m, COUNT(*) AS n_new FROM Drivers WHERE join_date BETWEEN "2020-1-1" AND "2020-12-31" GROUP BY MONTH(join_date) ), t4 AS ( SELECT t1.m, t1.n+ifnull(t3.n_new, 0) AS n FROM t1 LEFT JOIN t3 on t1.m = t3.m ), t5 AS ( SELECT m, SUM(n) OVER(ORDER BY m) + t2.existing_drivers AS n FROM t4, t2 GROUP BY m ), t6 AS ( SELECT MONTH(inb.requested_at) AS m, COUNT(*) AS n FROM AcceptedRides AS ina, Rides AS inb WHERE ina.ride_id = inb.ride_id AND inb.requested_at BETWEEN "2020-1-1" AND "2020-12-31" GROUP BY MONTH(inb.requested_at) ), t7 AS ( SELECT t1.m, t1.n+ifnull(t6.n, 0) AS n FROM t1 LEFT JOIN t6 on t1.m = t6.m ) SELECT t5.m AS month, t5.n AS active_drivers, t7.n AS accepted_rides FROM t5, t7 WHERE t5.m = t7.m
WITH RECURSIVE t1 AS ( SELECT 1 As m, 0 AS n UNION SELECT m+1, n FROM t1 WHERE m < 12 ), t2 AS ( SELECT driver_id, CASE WHEN join_date < "2020-1-1" THEN 1 ELSE MONTH(join_date) END AS m FROM Drivers WHERE join_date < "2021-1-1" ), t3 AS ( SELECT ina.ride_id, MONTH(ina.requested_at) AS m FROM Rides AS ina, AcceptedRides AS inb WHERE ina.ride_id = inb.ride_id AND ina.requested_at BETWEEN "2020-1-1" AND "2020-12-31" ) SELECT t1.m AS 'month', COUNT(DISTINCT t2.driver_id) AS active_drivers, COUNT(DISTINCT t3.ride_id) AS accepted_rides FROM t1 LEFT JOIN t2 ON t1.m >= t2.m LEFT JOIN t3 ON t1.m = t3.m GROUP BY t1.m
WITH RECURSIVE t1 as( select 1 as month union select month+1 from t1 where month<12 ), t2 as ( select case when year(join_date)<2020 then 1 else month(join_date) end as month, count(driver_id) as cnt from Drivers where year(join_date)<=2020 group by month ), t3 as ( select t1.month, sum(ifnull(cnt,0)) over(order by t1.month) as all_drivers from t1 left join t2 on t1.month = t2.month ), t4 as ( select month(requested_at) as month, count( driver_id) as accepted_rides from Rides a right join AcceptedRides b on a.ride_id = b.ride_id where year(requested_at) = 2020 group by month(requested_at) ) select t3.month, all_drivers as active_drivers, coalesce(accepted_rides,0) as accepted_rides from t3 left join t4 on t3.month = t4.month
WITH RECURSIVE temp1 AS ( SELECT 1 AS month UNION ALL SELECT month +1 FROM temp1 WHERE month <12 ), temp2 AS ( SELECT *, CASE WHEN YEAR(join_date) < 2020 THEN 1 WHEN YEAR(join_date) > 2020 THEN 0 ELSE MONTH(join_date) END AS month FROM Drivers ), temp3 AS ( SELECT *, CASE WHEN YEAR(requested_at) <> 2020 THEN 0 ELSE MONTH(requested_at) END AS month FROM Rides ), temp4 AS ( SELECT DISTINCT temp1.month, COUNT(driver_id) OVER(ORDER BY temp1.month) AS active_drivers FROM temp1 LEFT JOIN temp2 ON temp1.month = temp2.month ), temp5 AS ( SELECT temp1.month, COUNT(ride_id) AS accepted_rides FROM temp1 LEFT JOIN temp3 ON temp1.month = temp3.month WHERE ride_id IN (SELECT ride_id FROM AcceptedRides) GROUP BY temp1.month ) SELECT temp4.month, active_drivers, IFNULL(accepted_rides, 0) AS accepted_rides FROM temp4 LEFT JOIN temp5 ON temp4.month = temp5.month ORDER BY temp4.month
WITH RECURSIVE year_cte AS ( SELECT MIN(YEAR(join_date)) year, MAX(YEAR(join_date)) max_year FROM drivers UNION ALL SELECT year + 1, max_year FROM year_cte WHERE year < max_year ), header AS ( SELECT year, 1 month, 12 max_month FROM year_cte UNION ALL SELECT year, month + 1, max_month FROM header WHERE month < max_month ), drivers_count AS( SELECT MAX(YEAR(join_date)) 'year', MAX(MONTH(join_date)) 'month', COUNT(driver_id) drivers_count FROM drivers GROUP BY LEFT(join_date, 7) ), rides_count AS ( SELECT MAX(YEAR(r.requested_at)) 'year', MAX(MONTH(r.requested_at)) 'month', COUNT(a.ride_id) accepted_rides FROM rides r LEFT JOIN acceptedrides a ON r.ride_id = a.ride_id GROUP BY LEFT(r.requested_at, 7) ) SELECT month, active_drivers, accepted_rides FROM ( SELECT t1.month, t1.year, IFNULL(SUM(t2.drivers_count) OVER (ORDER BY t1.year, t1.month), 0) active_drivers, IFNULL(t3.accepted_rides, 0) accepted_rides FROM header t1 LEFT JOIN drivers_count t2 ON t1.year = t2.year AND t1.month = t2.month LEFT JOIN rides_count t3 ON t1.year = t3.year AND t1.month = t3.month ) temp WHERE year = 2020
WITH Recursive CTE AS ( SELECT 1 AS month UNION ALL SELECT month + 1 FROM CTE WHERE month < 12 ), t1 AS ( SELECT MONTH(join_date) AS month, COUNT(driver_id) OVER(ORDER BY LEFT(join_date, 7)) AS active_drivers FROM Drivers WHERE YEAR(join_date) <= 2020 ), t2 AS ( SELECT MONTH(r.requested_at) AS month, COUNT(r.ride_id) AS accepted_rides FROM Rides r WHERE r.ride_id IN (SELECT ride_id FROM AcceptedRides) AND YEAR(r.requested_at) = 2020 GROUP BY month ) SELECT DISTINCT CTE.month, IFNULL(MAX(t1.active_drivers) OVER (ORDER BY CTE.month), 0) AS active_drivers, IFNULL(t2.accepted_rides, 0) AS accepted_rides FROM CTE LEFT JOIN t1 ON CTE.month = t1.month LEFT JOIN t2 ON CTE.month = t2.month
WITH Recursive CTE AS ( SELECT 1 AS month UNION ALL SELECT month + 1 FROM CTE WHERE month < 12 ), t1 AS ( SELECT MONTH(join_date) AS month, COUNT(driver_id) OVER(ORDER BY join_date) AS active_drivers FROM Drivers WHERE YEAR(join_date) <= 2020 ), t2 AS ( SELECT MONTH(r.requested_at) AS month, COUNT(r.ride_id) AS accepted_rides FROM Rides r WHERE r.ride_id IN (SELECT ride_id FROM AcceptedRides) AND YEAR(r.requested_at) = 2020 GROUP BY month ) SELECT DISTINCT CTE.month, IFNULL(MAX(t1.active_drivers) OVER (ORDER BY CTE.month), 0) AS active_drivers, IFNULL(t2.accepted_rides, 0) AS accepted_rides FROM CTE LEFT JOIN t1 ON CTE.month = t1.month LEFT JOIN t2 ON CTE.month = t2.month
WITH Recursive CTE AS ( SELECT 1 AS month UNION ALL SELECT month + 1 FROM CTE WHERE month < 12 ), t1 AS ( SELECT a.month, COUNT(a.ride_id) AS accepted_rides FROM ( SELECT r.ride_id, MONTH(r.requested_at) AS month FROM Rides r JOIN AcceptedRides a ON r.ride_id = a.ride_id WHERE YEAR(r.requested_at) = 2020 ) a GROUP BY 1 ORDER BY 1 ), t2 AS ( SELECT driver_id, join_date, LEFT(join_date, 7), COUNT(driver_id) OVER(ORDER BY LEFT(join_date, 7)) AS active_drivers FROM Drivers ORDER BY join_date ), t3 AS ( SELECT MONTH(t2.join_date) AS month, t2.active_drivers FROM t2 WHERE YEAR(t2.join_date) = 2020 ) SELECT CTE.month, IFNULL(MAX(t3.active_drivers) OVER (ORDER BY CTE.month), 0) AS active_drivers, IFNULL(t1.accepted_rides, 0) AS accepted_rides FROM CTE LEFT JOIN t1 ON CTE.month = t1.month LEFT JOIN t3 ON CTE.month = t3.month GROUP BY CTE.month
WITH Recursive CTE AS ( SELECT 1 as month UNION SELECT month + 1 as month FROM CTE WHERE month < 12 ), tab_driver as (SELECT month,driver_id, join_date FROM CTE LEFT JOIN Drivers d ON ((CTE.month = MONTH(d.join_date) AND YEAR(join_date) = 2020) OR (CTE.month = 1 AND YEAR(d.join_date) <2020 ) ) AND YEAR(d.join_date) <2021 ), drivers as (SELECT DISTINCT month,COUNT(driver_id) OVER(ORDER BY month) as active_drivers FROM tab_driver), requested as (SELECT MONTH(requested_at) as month, COUNT(*) as accepted_rides FROM Rides r JOIN AcceptedRides a ON r.ride_id = a.ride_id WHERE YEAR(requested_at) = 2020 GROUP BY MONTH(requested_at) ) SELECT d.month, d.active_drivers, COALESCE(r.accepted_rides,0) as accepted_rides FROM drivers d LEFT JOIN requested r ON d.month = r.month
WITH Recursive CTE AS ( SELECT 1 as month UNION SELECT month + 1 as month FROM CTE WHERE month < 12 ), tab_drivers as (SELECT CASE WHEN YEAR(join_date) < 2020 THEN 1 WHEN YEAR(join_date) = 2020 THEN MONTH(join_date) END as month, driver_id FROM Drivers WHERE YEAR(join_date) < 2021 ), tab_driver as (SELECT c.month, t.driver_id FROM CTE c LEFT JOIN tab_drivers t ON c.month = t.month), drivers as (SELECT DISTINCT month,COUNT(driver_id) OVER(ORDER BY month) as active_drivers FROM tab_driver), requested as (SELECT MONTH(requested_at) as month, COUNT(*) as accepted_rides FROM Rides r JOIN AcceptedRides a ON r.ride_id = a.ride_id WHERE YEAR(requested_at) = 2020 GROUP BY MONTH(requested_at) ) SELECT d.month, d.active_drivers, COALESCE(r.accepted_rides,0) as accepted_rides FROM drivers d LEFT JOIN requested r ON d.month = r.month
WITH c1 AS (SELECT CASE WHEN YEAR(join_date) < 2020 THEN 1 ELSE MONTH(join_date) END AS month ,COUNT(driver_id) AS active_drivers FROM Drivers WHERE YEAR(join_date) <= 2020 GROUP BY 1) ,c2 AS (WITH RECURSIVE se AS (SELECT 1 AS month UNION ALL SELECT month+1 AS month FROM se WHERE month < 12) SELECT * FROM se) ,c3 AS (SELECT MONTH(requested_at) AS month ,SUM(CASE WHEN ride_id IN (SELECT ride_id FROM AcceptedRides) THEN 1 ELSE 0 END) AS accepted_rides FROM Rides WHERE YEAR(requested_at) = 2020 GROUP BY 1) ,c4 AS ( SELECT c2.month ,IFNULL(c1.active_drivers,0) AS active_drivers ,IFNULL(c3.accepted_rides,0) AS accepted_rides FROM c2 LEFT JOIN c1 ON c2.month = c1.month LEFT JOIN c3 ON c2.month = c3.month) SELECT month ,SUM(active_drivers) OVER (ORDER BY month) AS active_drivers ,accepted_rides FROM c4 ORDER BY 1
WITH cte AS ( SELECT month(join_date) as month, ifnull(max(cnt),0) as cnt FROM ( SELECT join_date, count(driver_id) over (ORDER BY join_date) as cnt FROM drivers ) as t1 WHERE year(join_date) = '2020' GROUP BY 1 ), cte2 AS ( SELECT month(requested_at) as month, count(a.ride_id) as ride_cnt FROM rides as r JOIN acceptedrides as a ON r.ride_id = a.ride_id WHERE year(r.requested_at) = '2020' GROUP BY 1 ), cte3 AS ( SELECT 1 AS month UNION ALL SELECT 2 AS month UNION ALL SELECT 3 AS month UNION ALL SELECT 4 AS month UNION ALL SELECT 5 AS month UNION ALL SELECT 6 AS month UNION ALL SELECT 7 AS month UNION ALL SELECT 8 AS month UNION ALL SELECT 9 AS month UNION ALL SELECT 10 AS month UNION ALL SELECT 11 AS month UNION ALL SELECT 12 AS month ) SELECT cte3.month, CASE WHEN cte.cnt IS NULL THEN ifnull(max(cnt) over (order by month),0) ELSE cnt END as active_drivers, ifnull(cte2.ride_cnt, 0) as accepted_rides FROM cte3 LEFT JOIN cte ON cte3.month = cte.month LEFT JOIN cte2 ON cte3.month = cte2.month
WITH d1 AS ( SELECT CASE WHEN YEAR(join_date) < 2020 THEN 1 ELSE MONTH(join_date) END AS month ,COUNT(driver_id) AS driver_count FROM Drivers WHERE YEAR(join_date) <= 2020 GROUP BY 1) ,d2 AS (WITH RECURSIVE se AS (SELECT 1 AS month UNION ALL SELECT month+1 AS month FROM se WHERE month < 12) SELECT * FROM se) ,d3 AS ( SELECT MONTH(r.requested_at) AS month ,COUNT(a.ride_id) AS accepted_rides FROM Rides r LEFT JOIN AcceptedRides a ON r.ride_id = a.ride_id WHERE YEAR(requested_at) = 2020 GROUP BY 1) SELECT d2.month ,SUM(IFNULL(d1.driver_count,0)) OVER (ORDER BY month) AS active_drivers ,IFNULL(d3.accepted_rides,0) AS accepted_rides FROM d2 LEFT JOIN d1 ON d2.month = d1.month LEFT JOIN d3 ON d2.month = d3.month ORDER BY 1
WITH month_col AS( select 1 as month union select 2 as month union select 3 as month union select 4 as month union select 5 as month union select 6 as month union select 7 as month union select 8 as month union select 9 as month union select 10 as month union select 11 as month union select 12 as month ), new_driver AS ( SELECT MONTH(join_date) as month, COUNT(driver_id) as new FROM Drivers WHERE YEAR(join_date)=2020 GROUP BY 1 ), tmp as ( SELECT MONTH(r.requested_at) as month, COUNT(r.ride_id) as accepted_rides FROM Rides r JOIN AcceptedRides a ON a.ride_id = r.ride_id WHERE YEAR(r.requested_at) = 2020 GROUP BY 1) SELECT m.month, (SELECT COUNT(driver_id) FROM Drivers WHERE YEAR(join_date)<2020) + SUM(IFNULL(n.new,0)) OVER(ORDER BY m.month) AS active_drivers, IFNULL(tmp.accepted_rides,0) AS accepted_rides FROM month_col m LEFT JOIN new_driver n ON m.month = n.month LEFT JOIN tmp ON m.month = tmp.month
WITH month_ends AS ( SELECT DATE('2020-01-31') AS month_dates UNION ALL SELECT DATE('2020-02-29') AS month_dates UNION ALL SELECT DATE('2020-03-31') AS month_dates UNION ALL SELECT DATE('2020-04-30') AS month_dates UNION ALL SELECT DATE('2020-05-31') AS month_dates UNION ALL SELECT DATE('2020-06-30') AS month_dates UNION ALL SELECT DATE('2020-07-31') AS month_dates UNION ALL SELECT DATE('2020-08-31') AS month_dates UNION ALL SELECT DATE('2020-09-30') AS month_dates UNION ALL SELECT DATE('2020-10-31') AS month_dates UNION ALL SELECT DATE('2020-11-30') AS month_dates UNION ALL SELECT DATE('2020-12-31') AS month_dates), active_drivers AS (SELECT month_dates, COUNT(driver_id) AS active_drivers FROM month_ends m LEFT JOIN Drivers d ON m.month_dates >= d.join_date GROUP BY 1), accepted_rides AS ( SELECT month_dates, COUNT(ride_id) AS accepted_rides FROM month_ends m LEFT JOIN ( SELECT r.ride_id, r.requested_at FROM Rides r INNER JOIN AcceptedRides a ON r.ride_id = a.ride_id ) a ON MONTH(m.month_dates) = MONTH(a.requested_at) AND YEAR(a.requested_at) = 2020 GROUP BY 1) SELECT MONTH(d.month_dates) AS month, d.active_drivers, a.accepted_rides FROM active_drivers d INNER JOIN accepted_rides a ON d.month_dates = a.month_dates ORDER BY month
WITH months AS ( SELECT 1 AS month UNION ALL SELECT 2 AS month UNION ALL SELECT 3 AS month UNION ALL SELECT 4 AS month UNION ALL SELECT 5 AS month UNION ALL SELECT 6 AS month UNION ALL SELECT 7 AS month UNION ALL SELECT 8 AS month UNION ALL SELECT 9 AS month UNION ALL SELECT 10 AS month UNION ALL SELECT 11 AS month UNION ALL SELECT 12 AS month ), drivermonth AS ( SELECT driver_id, IF(join_date < '2020-01-01', 1, MONTH(join_date)) AS join_month FROM Drivers WHERE join_date <= '2020-12-31' ), months_with_drivers AS ( SELECT M.month, IFNULL(COUNT(D.driver_id),0) AS active_drivers FROM months M LEFT OUTER JOIN drivermonth D ON M.month >= D.join_month GROUP BY M.month ), ridesmonth AS ( SELECT MONTH(R.requested_at) AS requested_month, COUNT(A.ride_id) AS accepted_rides FROM AcceptedRides A INNER JOIN Rides R ON A.ride_id = R.ride_id WHERE R.requested_at BETWEEN '2020-01-01' AND '2020-12-31' GROUP BY requested_month ), finaltable AS ( SELECT M.month, M.active_drivers, IFNULL(R.accepted_rides,0) AS accepted_rides FROM months_with_drivers M LEFT OUTER JOIN ridesmonth R ON M.month = R.requested_month ) SELECT * FROM finaltable
WITH rec AS ( WITH recursive seq AS ( SELECT 1 AS month UNION SELECT month + 1 FROM seq WHERE month < 12 ) SELECT * FROM seq ), d_agg AS ( SELECT CASE WHEN YEAR(join_date) < 2020 THEN 1 WHEN YEAR(join_date) > 2020 THEN null ELSE MONTH(join_date) END AS join_month_2020, COUNT(DISTINCT driver_id) AS ct FROM drivers GROUP BY 1 ), ac_d AS ( SELECT r.month, SUM(COALESCE(d.ct, 0)) OVER (ORDER BY r.month) AS ac_drivers FROM rec AS r LEFT JOIN d_agg AS d ON r.month = d.join_month_2020 ), ac_r AS ( SELECT MONTH(r.requested_at) AS month, COUNT(DISTINCT ar.ride_id) AS ac_rides FROM acceptedrides AS ar JOIN rides AS r ON ar.ride_id = r.ride_id AND YEAR(r.requested_at) = 2020 GROUP BY 1 ) SELECT ac_d.month AS month, ac_d.ac_drivers AS active_drivers, COALESCE(ac_r.ac_rides, 0) AS accepted_rides FROM ac_d LEFT JOIN ac_r ON ac_d.month = ac_r.month
WITH recursive Month_CTE AS ( SELECT 1 AS Month UNION ALL SELECT Month+1 FROM Month_CTE WHERE Month < 12 ), Ride_cte AS( SELECT MONTH(r.requested_at) AS Month, COUNT(DISTINCT(r.ride_id)) AS accepted_rides FROM AcceptedRides a INNER JOIN Rides r ON a.ride_id = r.ride_id WHERE YEAR(r.requested_at)=2020 GROUP BY MONTH(r.requested_at) ), driver_cte as ( SELECT t2.Month, COUNT(DISTINCT t2.driver_id) AS active_drivers FROM (SELECT* FROM Month_CTE m LEFT JOIN( SELECT CASE WHEN YEAR(join_date)=2019 THEN 1 ELSE MONTH(join_date) End AS Month_d, driver_id FROM Drivers d WHERE YEAR(join_date) < 2021 )d ON m.Month >= d.Month_d) t2 GROUP BY t2.Month ) select t1.*, ifnull(t2.accepted_rides,0) as accepted_rides from driver_cte t1 left join ride_cte t2 on t1.month = t2.month
WITH recursive Months AS ( SELECT 1 AS month UNION SELECT month + 1 FROM Months WHERE month < 12 ), ActiveDrivers AS ( SELECT IF( T.join_date IS NULL, 2020, YEAR(T.join_date) ) AS year, T.month, COUNT(T.driver_id) OVER( ORDER BY IF( T.join_date IS NULL, 2020, YEAR(T.join_date) ) ASC, T.month ASC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW ) AS active_drivers FROM ( SELECT * FROM Months AS M LEFT JOIN Drivers AS D ON M.month = MONTH(D.join_date) AND YEAR(D.join_date) = 2020 UNION SELECT * FROM Months AS M INNER JOIN Drivers AS D ON M.month = MONTH(D.join_date) AND YEAR(D.join_date) < 2020 ) AS T ), AcceptedRidesPerMonth AS ( SELECT M.month, COUNT(A.ride_id) AS accepted_rides FROM AcceptedRides AS A INNER JOIN Rides AS R ON A.ride_id = R.ride_id AND YEAR(R.requested_at) = 2020 RIGHT JOIN Months AS M ON M.month = MONTH(R.requested_at) GROUP BY M.month ) SELECT AD.month, MAX(AD.active_drivers) AS active_drivers, MAX(AR.accepted_rides) AS accepted_rides FROM ActiveDrivers AS AD INNER JOIN AcceptedRidesPerMonth AS AR ON AD.month = AR.month AND AD.year = 2020 GROUP BY AD.month
WITH recursive Months AS ( SELECT 1 AS month UNION SELECT month + 1 FROM Months WHERE month < 12 ), DriversWithMonths AS ( SELECT driver_id, IF( YEAR(join_date) < 2020, 1, MONTH(join_date) ) AS month FROM Drivers WHERE YEAR(join_date) <= 2020 ), AcceptedRidesWithMonth AS ( SELECT A.ride_id, MONTH(R.requested_at) AS month FROM AcceptedRides AS A INNER JOIN Rides AS R ON A.ride_id = R.ride_id AND YEAR(R.requested_at) = 2020 ) SELECT M.month, COUNT(DISTINCT D.driver_id) AS active_drivers, COUNT(DISTINCT A.ride_id) AS accepted_rides FROM Months AS M LEFT JOIN DriversWithMonths AS D ON D.month <= M.month LEFT JOIN AcceptedRidesWithMonth AS A ON M.month = A.month GROUP BY M.month
WITH recursive active_drivers AS ( SELECT mth, active_drivers FROM ( SELECT yr, mth, SUM(new_drivers) OVER (ORDER BY yr, mth ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS active_drivers FROM ( SELECT DISTINCT EXTRACT(year FROM join_date) AS yr, EXTRACT(MONTH FROM join_date) AS mth, COUNT(*) OVER (PARTITION BY EXTRACT(YEAR FROM join_date), EXTRACT(month FROM join_date)) AS new_drivers FROM drivers ) AS new_drivers_by_month ) AS active_drivers_cumulative WHERE yr = 2020 ), months(mth) AS ( SELECT 1 UNION ALL SELECT mth + 1 FROM months WHERE mth < 12 ), active_drivers_2020 AS ( SELECT months.mth, COALESCE(active_drivers.active_drivers, COALESCE(MAX(active_drivers) OVER (order BY mth ROWS BETWEEN UNBOUNDED PRECEDING AND 1 PRECEDING), 0)) AS active_drivers FROM months LEFT JOIN active_drivers ON months.mth = active_drivers.mth ), accepted_rides_2020 AS ( SELECT mth, COUNT(*) AS accepted_rides FROM ( SELECT AcceptedRides.ride_id, EXTRACT(YEAR FROM requested_at) AS yr, EXTRACT(MONTH FROM requested_at) AS mth FROM AcceptedRides LEFT JOIN Rides ON AcceptedRides.ride_id = Rides.ride_id ) AS accepted_rides_dated WHERE yr = 2020 GROUP BY mth ) SELECT active_drivers_2020.mth AS month, active_drivers, COALESCE(accepted_rides, 0) AS accepted_rides FROM active_drivers_2020 LEFT JOIN accepted_rides_2020 ON active_drivers_2020.mth = accepted_rides_2020.mth
WITH recursive calendar AS ( SELECT 1 as month UNION ALL SELECT month + 1 FROM calendar WHERE month < 12), year_2020 AS ( SELECT join_date, COUNT(driver_id) OVER (ORDER BY join_date) as cnt FROM drivers WHERE join_date < '2021-01-01'), after_2019 AS (SELECT join_date, cnt FROM year_2020 WHERE join_date > '2019-12-31' ), accepted AS (SELECT MONTH(requested_at) as month, COUNT(a.ride_id) as accepted_cnt FROM acceptedrides as a INNER JOIN rides as r ON a.ride_id = r.ride_id WHERE requested_at < '2021-01-01' AND requested_at > '2019-12-31' GROUP BY month), parts AS ( SELECT calendar.month, cnt, SUM(CASE WHEN cnt is NULL THEN 0 ELSE 1 END) OVER (ORDER BY month) as c_partition, COALESCE(accepted_cnt, 0) as accepted_rides FROM calendar LEFT JOIN after_2019 ON calendar.month = MONTH(after_2019.join_date) LEFT JOIN accepted ON calendar.month = accepted.month) SELECT DISTINCT month, COALESCE(first_value(cnt) OVER (PARTITION BY c_partition ORDER BY month), 0) as active_drivers, accepted_rides FROM parts ORDER BY month
WITH recursive cte (n) AS ( SELECT 1 UNION ALL SELECT n + 1 FROM cte WHERE n < 12 ), rides_by_month AS ( SELECT MONTH(requested_at) AS month, COUNT(Rides.ride_id) AS accepted_rides FROM Rides JOIN AcceptedRides ON AcceptedRides.ride_id = Rides.ride_id WHERE YEAR(requested_at) = '2020' GROUP BY 1 ORDER BY 1 ), active_drivers AS ( SELECT IF(YEAR(join_date)<='2019', 1, MONTH(join_date)) As join_month, COUNT(driver_id) AS active_drivers FROM Drivers WHERE YEAR(join_date) <= '2020' GROUP BY 1 ) SELECT n AS month, SUM(COALESCE(active_drivers,0)) OVER(ORDER BY n ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS active_drivers, COALESCE(accepted_rides, 0) AS accepted_rides FROM cte LEFT JOIN rides_by_month ON rides_by_month.month = cte.n LEFT JOIN active_drivers ON active_drivers.join_month = cte.n
WITH recursive cte1 AS (SELECT 1 AS month UNION ALL SELECT month + 1 AS month FROM cte1 WHERE month < 12), cte2 AS (SELECT CASE WHEN YEAR(join_date) = 2019 THEN 1 ELSE MONTH(join_date) END AS month, COUNT(driver_id) AS driver_nums FROM Drivers WHERE YEAR(join_date) < 2021 GROUP BY 1), cte3 AS (SELECT MONTH(requested_at) AS month, COUNT(r.ride_id) AS accepted_rides FROM Rides r JOIN AcceptedRides a ON r.ride_id = a.ride_id WHERE YEAR(requested_at) = 2020 GROUP BY 1) SELECT cte1.month AS month, IFNULL(SUM(driver_nums) OVER(ORDER BY month), 0) AS active_drivers, IFNULL(accepted_rides, 0) AS accepted_rides FROM cte1 LEFT JOIN cte2 ON cte1.month = cte2.month LEFT JOIN cte3 ON cte1.month = cte3.month
WITH recursive month AS (SELECT 1 AS month UNION SELECT 1+month FROM month WHERE month<12), new_drivers AS (SELECT MONTH(join_date) AS month,COUNT(driver_id) AS new_drivers FROM Drivers WHERE YEAR(join_date)=2020 GROUP BY MONTH(join_date)), accepted_rides AS (SELECT MONTH(requested_at) AS month, COUNT(ride_id) AS accepted_rides FROM Rides JOIN AcceptedRides USING(ride_id) WHERE YEAR(requested_at)=2020 GROUP BY MONTH(requested_at) ) SELECT temp.month AS month, active_drivers,IFNULL(accepted_rides,0)AS accepted_rides FROM (SELECT m.month AS month, IFNULL(SUM(nd2.new_drivers)+(SELECT COUNT(driver_id) FROM Drivers WHERE YEAR(join_date)<2020),0) AS active_drivers FROM month m LEFT JOIN new_drivers nd1 ON m.month=nd1.month LEFT JOIN new_drivers nd2 ON m.month>=nd2.month GROUP BY m.month) AS temp LEFT JOIN accepted_rides a ON temp.month=a.month
WITH recursive month_table AS ( SELECT 1 AS month UNION SELECT month+1 AS month FROM month_table WHERE month <12 ), available_drivers AS ( SELECT driver_id, CASE WHEN YEAR(join_date) < '2020' THEN '1' ELSE MONTH(join_date) END AS month FROM Drivers WHERE YEAR(join_date) <= '2020' ), accumulated_drivers AS ( SELECT DISTINCT month_table.month, COUNT(driver_id) OVER(ORDER BY month ASC) AS active_drivers FROM month_table LEFT JOIN available_drivers ON month_table.month = available_drivers.month ), accepted_rides_per_month AS ( SELECT MONTH(requested_at) AS month, COUNT(*) AS accepted_rides FROM AcceptedRides JOIN Rides ON AcceptedRides.ride_id = Rides.ride_id AND YEAR(requested_at) = '2020' GROUP BY MONTH(requested_at) ) SELECT month_table.month, active_drivers, IFNULL(accepted_rides, 0) AS accepted_rides FROM month_table LEFT JOIN accumulated_drivers ON month_table.month = accumulated_drivers.month LEFT JOIN accepted_rides_per_month ON month_table.month = accepted_rides_per_month.month ORDER BY month ASC
WITH recursive months AS ( select 1 as month union all select month + 1 from months where month < 12), active_drivers as( select date_format(join_date,'%Y-%m-01') join_month, count(driver_id) as driver_cnt from Drivers group by 1 ), cum_drivers as ( select join_month, sum(driver_cnt) over(order by join_month) as cum_driver_cnt from active_drivers ), active_driver_cnt as( select month, sum(driver_cnt) over(order by month) as cum_driver_cnt from( select month, case when driver_cnt is null then 0 else driver_cnt end as driver_cnt from( select a.month, b.cum_driver_cnt, case when a.month=1 then b.cum_driver_cnt else c.driver_cnt end as driver_cnt from months as a left join cum_drivers as b on a.month=extract(month from b.join_month) and extract(year from b.join_month)='2020' left join active_drivers as c on a.month=extract(month from c.join_month) and extract(year from c.join_month)='2020' ) as c ) as d ), accepted_rides as( select requested_month, count(ride_id) as ride_cnt from( select e.requested_at, date_format(e.requested_at,'%Y-%m-01') as requested_month, e.ride_id from Rides as e inner join AcceptedRides as f on e.ride_id=f.ride_id where extract(year from e.requested_at)=2020 ) as g group by 1 ) select h.month, h.cum_driver_cnt as active_drivers, case when i.ride_cnt is null then 0 else i.ride_cnt end as accepted_rides from active_driver_cnt as h left join accepted_rides as i on h.month=extract(month from i.requested_month)
WITH recursive monthtable (month) AS( SELECT 1 UNION ALL SELECT month+1 FROM monthtable WHERE month<12 ), drivertable AS( SELECT month(join_date) as month, COUNT(driver_id) OVER(ORDER BY year(join_date)*100+month(join_date)) as num_drivers FROM Drivers WHERE year(join_date)<=2020 ), ridetable AS( SELECT month(r.requested_at) as month, COUNT(a.ride_id) AS accepted_rides FROM Rides as r JOIN AcceptedRides as a ON r.ride_id=a.ride_id WHERE year(r.requested_at)=2020 GROUP BY month(r.requested_at) ) SELECT DISTINCT m.month, IFNULL(MAX(d.num_drivers)OVER(ORDER BY m.month), 0) AS active_drivers, IFNULL(r.accepted_rides, 0) as accepted_rides FROM monthtable as m LEFT JOIN drivertable as d using (month) LEFT JOIN ridetable as r using (month) ORDER BY month
WITH recursive monthtable AS( SELECT 1 AS month UNION ALL SELECT month+1 FROM monthtable WHERE month<12 ), drivertable AS ( SELECT month(join_date) as month, COUNT(driver_id)OVER(ORDER BY year(join_date)*100+month(join_date)) as active_drivers FROM Drivers WHERE year(join_date)<=2020 ), ridetable AS( SELECT month(r.requested_at) month, count(a.ride_id) as accepted_rides FROM AcceptedRides as a JOIN rides as r ON a.ride_id=r.ride_id WHERE year(requested_at)=2020 GROUP BY month(r.requested_at) ) SELECT DISTINCT m.month, IFNULL(MAX(active_drivers) OVER(ORDER BY m.month), 0) as active_drivers , IFNULL(accepted_rides , 0) as accepted_rides FROM monthtable as m LEFT JOIN drivertable using (month) LEFT JOIN ridetable using (month)
WITH recursive t1 as ( select 1 as month union all select month + 1 from t1 where month < 12 ) , t2 as ( select (case when year(join_date) < 2020 then 1 when year(join_date) = 2020 then month(join_date) else 0 end) as driver_month from Drivers ) , t3 as ( select t1.month, count(*) c1 from t1 join t2 on t1.month = t2.driver_month group by 1 ) , t4 as ( select month(r.requested_at) as month, count(*) c2 from Rides r join AcceptedRides a on r.ride_id = a.ride_id where year(requested_at) = 2020 group by 1 ) select t1.month, sum(coalesce(t3.c1,0)) OVER(order by t1.month rows between unbounded preceding and current row) as active_drivers, sum(coalesce(t4.c2,0)) as accepted_rides from t1 left join t3 on t1.month = t3.month left join t4 on t1.month = t4.month group by 1
WITH recursive t2 as ( select 1 as m union all select m+1 as m from t2 where m < 12 ) , t3 as ( SELECT m, SUM( CASE WHEN (YEAR(join_date) <= 2019) OR (YEAR(join_date) = 2020 and MONTH(join_date) <= m) THEN 1 ELSE 0 END ) as available_drivers FROM t2 a JOIN drivers b GROUP BY a.m ), t1 as ( select count(*) as c, month(requested_at) as m from rides a join acceptedrides b on a.ride_id = b.ride_id where requested_at between "2020-01-01" and "2020-12-31" group by month(requested_at) ) select t2.m as month, t3.available_drivers as active_drivers, COALESCE(t1.c,0) as accepted_rides from t2 left join t1 on t2.m = t1.m left join t3 on t2.m = t3.m
WITH ride_accepted as ( SELECT extract(month from AGG.requested_at) as fy_month , count(agg.ride_id) as accepted_rides FROM ( Select ar.ride_id , ar.driver_id , ar.ride_distance , ar.ride_duration , r.requested_at from AcceptedRides AR INNER JOIN Rides R ON AR.ride_id = R.ride_id AND extract(YEAR from r.requested_at) = 2020 ) AGG group by extract(month from AGG.requested_at) ) , months_table as ( ( SELECT 1 as fy_month ) UNION ( SELECT 2 as fy_month ) UNION ( SELECT 3 as fy_month ) UNION ( SELECT 4 as fy_month ) UNION ( SELECT 5 as fy_month ) UNION ( SELECT 6 as fy_month ) UNION ( SELECT 7 as fy_month ) UNION ( SELECT 8 as fy_month ) UNION ( SELECT 9 as fy_month ) UNION ( SELECT 10 as fy_month ) UNION ( SELECT 11 as fy_month ) UNION ( SELECT 12 as fy_month ) ) , drivers_active as ( SELECT agg.fy_month , COUNT(agg.driver_id) as active_drivers FROM ( Select CASE WHEN extract(year from d.join_date) < 2020 then 1 else extract(month from d.join_date) END AS fy_month , driver_id FROM drivers d where extract(year from d.join_date) <= 2020 ) AGG group by agg.fy_month ) Select agg.* from ( SELECT mt.fy_month as "month" , IFNULL(SUM(da.active_drivers),0) AS active_drivers , IFNULL(ra.accepted_rides,0) AS accepted_rides FROM months_table MT LEFT JOIN drivers_active da ON mt.fy_month >= da.fy_month LEFT JOIN ride_accepted ra ON ra.fy_month = mt.fy_month group by mt.fy_month , IFNULL(ra.accepted_rides,0) ) AGG order by "month"
With A as ( Select 2020 as year, 1 as Month, 0 as driver_num UNION Select 2020 as year, 2 as Month, 0 as driver_num UNION Select 2020 as year, 3 as Month, 0 as driver_num UNION Select 2020 as year, 4 as Month, 0 as driver_num UNION Select 2020 as year, 5 as Month, 0 as driver_num UNION Select 2020 as year, 6 as Month, 0 as driver_num UNION Select 2020 as year, 7 as Month, 0 as driver_num UNION Select 2020 as year, 8 as Month, 0 as driver_num UNION Select 2020 as year, 9 as Month, 0 as driver_num UNION Select 2020 as year, 10 as Month, 0 as driver_num UNION Select 2020 as year, 11 as Month, 0 as driver_num UNION Select 2020 as year, 12 as Month, 0 as driver_num), D AS ( SELECT EXTRACT(year FROM requested_at) as year, EXTRACT(month FROM requested_at) as month, COUNT(B.ride_id) as ride_num FROM AcceptedRides B INNER JOIN Rides C ON B.ride_id = C.ride_id GROUP BY EXTRACT(year FROM requested_at), EXTRACT(month FROM requested_at) ), E AS ( SELECT COUNT(driver_id) as driver_num, EXTRACT(year FROM join_date) as year, EXTRACT(month FROM join_date) as month FROM Drivers GROUP BY EXTRACT(year FROM join_date), EXTRACT(month FROM join_date) ), F AS ( SELECT driver_num, year, month FROM A UNION SELECT * FROM E), G AS ( SELECT year, month, SUM(driver_num) AS driver_num2 FROM F GROUP BY year, month ORDER BY year, month), H AS (SELECT year, month, SUM(driver_num2) OVER (ORDER BY year, month) as active_drivers FROM G) Select H.month, active_drivers, COALESCE(ride_num, 0) as accepted_rides FROM H LEFT JOIN D ON H.year = D.year AND H.month = D.month WHERE H.year = 2020 ORDER BY H.month
With Month_Table as ( Select 1 as Month UNION Select 2 as Month UNION Select 3 as Month UNION Select 4 as Month UNION Select 5 as Month UNION Select 6 as Month UNION Select 7 as Month UNION Select 8 as Month UNION Select 9 as Month UNION Select 10 as Month UNION Select 11 as Month UNION Select 12 as Month), Driver_Table as ( Select driver_id, (Case when YEAR(join_date)=2019 then 1 else MONTH(join_date) end) as Month From Drivers where YEAR(join_date)<2021), AcceptedRides_Table as ( Select a.ride_id, Month(requested_at) as Month From AcceptedRides a Inner Join Rides r On r.ride_id=a.ride_id where YEAR(r.requested_at)=2020 ) Select m.Month, COUNT(distinct d.driver_id) as active_drivers, COUNT(distinct ac.ride_id) as accepted_rides From Month_Table m Left Join Driver_Table d On m.Month>=d.Month Left JOIN AcceptedRides_Table ac On m.Month=ac.Month Group by m.Month Order by m.Month
With RECURSIVE m as ( SELECT 1 as mon UNION ALL SELECT mon + 1 FROM m WHERE mon < 12), t1 as ( SELECT CASE WHEN join_date < '2020-1-1' THEN 1 ELSE month(join_date) END as jd, COUNT(*) as ad FROM Drivers WHERE join_date < '2021-1-1' GROUP BY 1), t2 as ( SELECT month(requested_at) as mon, COUNT(r.ride_id) as accepted_rides FROM Rides r JOIN AcceptedRides ar ON r.ride_id = ar.ride_id WHERE requested_at BETWEEN '2020-1-1' AND '2020-12-31' GROUP BY 1) SELECT m.mon as month, IFNULL(SUM(ad) OVER(ORDER BY m.mon), 0) as active_drivers, IFNULL(t2.accepted_rides, 0) as accepted_rides FROM m LEFT JOIN t1 ON m.mon = t1.jd LEFT JOIN t2 ON m.mon = t2.mon
With RECURSIVE month as ( SELECT 1 as m UNION SELECT m + 1 FROM month WHERE m < 12), ad as ( SELECT driver_id, CASE WHEN join_date <= '2020-1-1' THEN '1' ELSE month(join_date) END as join_month FROM Drivers WHERE join_date < '2021-1-1'), ar as ( SELECT month(requested_at) as m, COUNT(distinct ride_id) as accepted_rides FROM Rides WHERE year(requested_at) = '2020' AND ride_id IN (SELECT ride_id FROM AcceptedRides) GROUP BY 1 ) SELECT month.m as month, COUNT(DISTINCT ad.driver_id) as active_drivers, IFNULL(accepted_rides, 0) AS accepted_rides FROM month LEFT JOIN ad ON month.m >= ad.join_month LEFT JOIN ar ON month.m = ar.m GROUP BY 1 ORDER BY 1
With RECURSIVE month as ( SELECT 1 as m UNION SELECT m + 1 FROM month WHERE m < 12), ad as ( SELECT driver_id, CASE WHEN join_date <= '2020-1-1' THEN 1 ELSE month(join_date) END as join_month FROM Drivers WHERE join_date < '2021-1-1'), ar as ( SELECT month(requested_at) as m, COUNT(distinct ride_id) as accepted_rides FROM Rides WHERE year(requested_at) = '2020' AND ride_id IN (SELECT ride_id FROM AcceptedRides) GROUP BY 1 ) SELECT DISTINCT month.m as month, COUNT(ad.driver_id) as active_drivers, IFNULL(accepted_rides, 0) AS accepted_rides FROM month LEFT JOIN ad ON month.m >= ad.join_month LEFT JOIN ar ON month.m = ar.m GROUP BY 1 ORDER BY 1
With recursive CET as (SELECT 1 as month UNION ALL SELECT month+1 as month FROM CET where month<=11 ), CET2 as (SELECT month, active_drivers, 0 as accepted_rides FROM (select join_date, month(join_date) as month, count(driver_id) over(order by left(join_date,7)) as active_drivers from Drivers)p1 where year(join_date)=2020), CET3 as (select month(requested_at) as month, 0 as active_drivers, count(a.ride_id) as accepted_rides from AcceptedRides a left join Rides r on a.ride_id =r.ride_id where year(requested_at)=2020 group by month(requested_at)) select distinct m.month, ifnull(max(t1.active_drivers) over (order by m.month),0) as active_drivers, ifnull(t2.accepted_rides, 0) as accepted_rides from CET m left join CET2 t1 on m.month = t1.month left join CET3 t2 on m.month = t2.month
select 1 as month UNION ALL select month + 1 from m where month < 12 ), d_stat as ( Select m.month, count(driver_id) as active_drivers from m left join Drivers d on (date_add(concat('2020-', m.month, '-01'), INTERVAL 1 MONTH) > d.join_date) group by month ), a_rides2020 as ( select month(requested_at) as month, count(*) as accepted_rides from AcceptedRides a join Rides USING(ride_id) where year(requested_at) = '2020' group by month ) select month, active_drivers, coalesce(accepted_rides, 0) as accepted_rides from d_stat left join a_rides2020 USING(month)
select 1 as month UNION ALL select month + 1 from m where month < 12 ), d_stat as ( Select m.month, count(driver_id) as active_drivers from m left join Drivers d on (date_add(concat('2020-', m.month, '-01'), INTERVAL 1 MONTH) > d.join_date) group by month ), a_rides2020 as ( select month(requested_at) as month, count(*) as accepted_rides from AcceptedRides a join Rides USING(ride_id) where year(requested_at) = '2020' group by month ) select month, active_drivers, count(ride_id) as accepted_rides from d_stat d left join (AcceptedRides join Rides USING(ride_id)) ON (d.month = Month(requested_at) and Year(requested_at) = '2020') group by month
select t.month, count(distinct driver_id) active_drivers, count(distinct rides.ride_id) accepted_rides from ( (select 1 as month) union (select 2 as month) union (select 3 as month) union (select 4 as month) union (select 5 as month) union (select 6 as month) union (select 7 as month) union (select 8 as month) union (select 9 as month) union (select 10 as month) union (select 11 as month) union (select 12 as month) ) t left join ( select driver_id, (case when year(join_date)=2019 then '1' else month(join_date) end) `month` from Drivers where year(join_date)<=2020 ) d on d.month <= t.month left join ( select month(requested_at) as `month`, a.ride_id from AcceptedRides a join Rides r on r.ride_id = a.ride_id where year(requested_at)=2020 ) rides on t.month = rides.month group by t.month order by t.month
select t.month, count(distinct driver_id) active_drivers, count(distinct rides.ride_id) accepted_rides from ((select 1 as month) union (select 2 as month) union (select 3 as month) union (select 4 as month) union (select 5 as month) union (select 6 as month) union (select 7 as month) union (select 8 as month) union (select 9 as month) union (select 10 as month) union (select 11 as month) union (select 12 as month)) t left join (select driver_id, (case when year(join_date) = 2019 then '1' else month(join_date) end) `month` from Drivers where year(join_date) <= 2020) d on d.month <= t.month left join (select month(requested_at) as `month`, a.ride_id from AcceptedRides a join Rides r on r.ride_id = a.ride_id where year(requested_at) = 2020) rides on t.month = rides.month group by t.month order by t.month
select t1.month, count(distinct t2.driver_id) as active_drivers, count(distinct t3.ride_id) as accepted_rides from ( select 1 as month union select 2 as month union select 3 as month union select 4 as month union select 5 as month union select 6 as month union select 7 as month union select 8 as month union select 9 as month union select 10 as month union select 11 as month union select 12 as month ) t1 left join ( select driver_id, case when year(join_date) < 2020 then 1 else month(join_date) end as month from drivers where year(join_date) <= 2020 ) t2 on t2.month <= t1.month left join ( select t1.ride_id, month(t2.requested_at) as month from acceptedrides t1 join rides t2 on t2.ride_id = t1.ride_id where year(t2.requested_at) = 2020 ) t3 on t3.month = t1.month group by t1.month
select t1.month, count(distinct t2.driver_id) as active_drivers, count(distinct t3.ride_id) as accepted_rides from ( select 1 as month union select 2 as month union select 3 as month union select 4 as month union select 5 as month union select 6 as month union select 7 as month union select 8 as month union select 9 as month union select 10 as month union select 11 as month union select 12 as month ) t1 left outer join ( select driver_id, case when year(join_date) = 2019 then 1 else month(join_date) end as month from drivers where year(join_date) <= 2020 ) t2 on t2.month <= t1.month left outer join ( select ar.ride_id, month(r.requested_at) as month from acceptedrides ar join rides r on r.ride_id = ar.ride_id where year(r.requested_at) = 2020 ) t3 on t3.month = t1.month group by t1.month order by t1.month asc
select t1.month, t1.active_drivers, ifnull(t2.accepted_rides,0) as accepted_rides from (select m.month, count(d.driver_id) as active_drivers from ((select 1 as month) union (select 2 as month) union (select 3 as month) union (select 4 as month) union (select 5 as month) union (select 6 as month) union (select 7 as month) union (select 8 as month) union (select 9 as month) union (select 10 as month) union (select 11 as month) union (select 12 as month)) as m left join drivers as d on d.join_date <= last_day(concat('2020-',m.month,'-1')) group by m.month) as t1 left join (select month(r.requested_at) as month, count(ar.ride_id) as accepted_rides from rides as r join acceptedrides as ar on r.ride_id=ar.ride_id and year(r.requested_at)=2020 group by month(r.requested_at)) as t2 on t1.month=t2.month order by t1.month
select t1.month,sum(ifnull(t2.d_ct,0)) over (order by t1.month) active_drivers, ifnull(accepted_rides, 0) accepted_rides from (select 1 as month union select 2 as month union select 3 as month union select 4 as month union select 5 as month union select 6 as month union select 7 as month union select 8 as month union select 9 as month union select 10 as month union select 11 as month union select 12 as month) t1 left outer join (select if(year(join_date) <2020, 1, month(join_date)) month, count(driver_id) d_ct from drivers where year(join_date) <=2020 group by 1) t2 on t1.month = t2.month left outer join (select month(requested_at) as month, count(a.ride_id) accepted_rides from acceptedrides a left join rides r on a.ride_id = r.ride_id where year(requested_at) = 2020 group by 1) t3 on t1.month = t3.month order by 1
with A as ( select 1 as month union select 2 union select 3 union select 4 union select 5 union select 6 union select 7 union select 8 union select 9 union select 10 union select 11 union select 12 ), B as ( select ar.ride_id, month(r.requested_at) as req_month from rides r join AcceptedRides ar on r.ride_id = ar.ride_id where r.requested_at between '2020-01-01' and '2020-12-31' ) select A.month, ifnull(count(distinct d.driver_id), 0) as active_drivers, ifnull(count(distinct B.ride_id), 0) as accepted_rides from A left join drivers d on d.join_date <= last_day(concat('2020-', A.month, '-01')) left join B on B.req_month = A.month group by A.month order by A.month
with RECURSIVE a as ( select distinct '2020-01-01' as m_start from drivers union all select date_add(m_start, interval +1 month) from a where m_start < '2020-12-01' ), b as( select * , if(date_format(join_date,'%Y-%m') <= date_format(m_start,'%Y-%m'), 1, 0) as joined from drivers cross join a), t1 as ( select m_start , sum(joined) as active_drivers from b group by m_start), t2 as ( select m_start, count(ride_id) as accepted_rides from( select ar.ride_id, DATE_SUB(r.requested_at, interval dayofmonth(r.requested_at)-1 day) as m_start from rides as r right join acceptedrides as ar on r.ride_id = ar.ride_id) as temp group by m_start) select month(t1.m_start) as month , t1.active_drivers , if(t2.accepted_rides is null, 0, t2.accepted_rides) as accepted_rides from t1 left join t2 on t1.m_start=t2.m_start order by t1.m_start asc
with RECURSIVE dat as ( select 1 month union all select month+1 from dat where month<12 ) select month, count(distinct(d.driver_id)) as active_drivers, count(distinct (if(ride_distance is not null,r.ride_id,null ))) accepted_rides from dat m left join Drivers d on (m.month >= month(d.join_date) and year(d.join_date) = 2020) or year(d.join_date) < 2020 left join rides r on m.month = month(r.requested_at) and year(r.requested_at) = 2020 left join acceptedrides ar on r.ride_id = ar.ride_id group by month
with Recursive cte as (select 1 as month union all select month+1 as month from cte where month<12) , accepted_rides as (select Month(requested_at) as month, count(AR.ride_id) as accepted_rides from Rides R join AcceptedRides AR on YEAR(R.requested_at)='2020' and R.ride_id=AR.ride_id group by month) ,active_drivers as (select C.month, coalesce(count(driver_id),0) as active_drivers from cte C left join drivers D on Date_format(D.join_date,"%Y-%m")<= Date_format(concat('2020-',C.month,'-01'),"%Y-%m") group by month) select AD.month, active_drivers, coalesce(accepted_rides,0) as accepted_rides from active_drivers AD left join accepted_rides AR on AD.month=AR.month
with Recursive getdates as (select 1 as month ,LAST_DAY(concat('2020-','1','-01')) as last_day ,concat('2020-','1','-01') as first_day union all select month +1 as month , last_day(concat('2020-',month+1,'-01')) as last_day ,concat('2020-',month+1,'-01') as first_day from getdates where month <12), Goodrides as (select AcceptedRides.ride_id, Rides.requested_at from AcceptedRides left outer join Rides on AcceptedRides.ride_id = Rides.ride_id), resultrides as ( select month , count(Goodrides.ride_id) as accepted_rides from getdates LEFT OUTER JOIN Goodrides ON getdates.last_day >= Goodrides.requested_at and getdates.first_day <= Goodrides.requested_at group by month), resultdrivers as ( select month , count(Drivers.driver_id) as active_drivers from getdates LEFT OUTER JOIN Drivers ON getdates.last_day >= Drivers.join_date group by month) select getdates.month,resultdrivers.active_drivers,resultrides.accepted_rides from getdates left outer join resultrides on getdates.month = resultrides.month left outer join resultdrivers on getdates.month = resultdrivers.month
with act_driver as (select count(case when join_date <= '2020-1-31' then d.driver_id end) as Jan, count(case when join_date <= '2020-2-29' then d.driver_id end) as Feb, count(case when join_date <= '2020-3-31' then d.driver_id end) as Mar, count(case when join_date <= '2020-4-30' then d.driver_id end) as Apr, count(case when join_date <= '2020-5-31' then d.driver_id end) as May, count(case when join_date <= '2020-6-30' then d.driver_id end) as Jun, count(case when join_date <= '2020-7-31' then d.driver_id end) as Jul, count(case when join_date <= '2020-8-31' then d.driver_id end) as Aug, count(case when join_date <= '2020-9-30' then d.driver_id end) as Sep, count(case when join_date <= '2020-10-31' then d.driver_id end) as Oct, count(case when join_date <= '2020-11-30' then d.driver_id end) as Nov, count(case when join_date <= '2020-12-31' then d.driver_id end) as `Dec` from drivers d ), num_acc_rides as (select count(case when requested_at between '2020-1-1' and '2020-1-31' then ac.ride_id end) as Jan_acc, count(case when requested_at between '2020-2-1' and '2020-2-29' then ac.ride_id end) as Feb_acc, count(case when requested_at between '2020-3-1' and '2020-3-31' then ac.ride_id end) as Mar_acc, count(case when requested_at between '2020-4-1' and '2020-4-30' then ac.ride_id end) as Apr_acc, count(case when requested_at between '2020-5-1' and '2020-5-31' then ac.ride_id end) as May_acc, count(case when requested_at between '2020-6-1' and '2020-6-30' then ac.ride_id end) as Jun_acc, count(case when requested_at between '2020-7-1' and '2020-7-31' then ac.ride_id end) as Jul_acc, count(case when requested_at between '2020-8-1' and '2020-8-31' then ac.ride_id end) as Aug_acc, count(case when requested_at between '2020-9-1' and '2020-9-30' then ac.ride_id end) as Sep_acc, count(case when requested_at between '2020-10-1' and '2020-10-31' then ac.ride_id end) as Oct_acc, count(case when requested_at between '2020-11-1' and '2020-11-30' then ac.ride_id end) as Nov_acc, count(case when requested_at between '2020-12-1' and '2020-12-31' then ac.ride_id end) as Dec_acc from rides r left join AcceptedRides ac on r.ride_id = ac.ride_id), active_drivers_col as (select Jan as active_drivers, 1 as month from act_driver union all select Feb, 2 as month from act_driver union all select Mar, 3 as month from act_driver union all select Apr, 4 as month from act_driver union all select May, 5 as month from act_driver union all select Jun, 6 as month from act_driver union all select Jul, 7 as month from act_driver union all select Aug, 8 as month from act_driver union all select Sep, 9 as month from act_driver union all select Oct, 10 as month from act_driver union all select Nov, 11 as month from act_driver union all select `Dec`, 12 as month from act_driver), acc_rides_col as (select Jan_acc as accepted_rides, 1 as month from num_acc_rides union all select Feb_acc, 2 as month from num_acc_rides union all select Mar_acc, 3 as month from num_acc_rides union all select Apr_acc, 4 as month from num_acc_rides union all select May_acc, 5 as month from num_acc_rides union all select Jun_acc, 6 as month from num_acc_rides union all select Jul_acc, 7 as month from num_acc_rides union all select Aug_acc, 8 as month from num_acc_rides union all select Sep_acc, 9 as month from num_acc_rides union all select Oct_acc, 10 as month from num_acc_rides union all select Nov_acc, 11 as month from num_acc_rides union all select Dec_acc, 12 as month from num_acc_rides) select t1.month, active_drivers ,accepted_rides from active_drivers_col t1 join acc_rides_col t2 on t1.month = t2.month
with act_r as ( select month(requested_at) as month, count(AcceptedRides.ride_id) as accepted_rides from Rides join AcceptedRides on Rides.ride_id = AcceptedRides.ride_id and year(requested_at) = 2020 group by 1 ), m as ( select 1 as month, '2020-01-31' as end_day from Drivers union select 2 as month, '2020-02-29' as end_day from Drivers union select 3 as month, '2020-03-31' as end_day from Drivers union select 4 as month, '2020-04-30' as end_day from Drivers union select 5 as month, '2020-05-31' as end_day from Drivers union select 6 as month, '2020-06-30' as end_day from Drivers union select 7 as month, '2020-07-31' as end_day from Drivers union select 8 as month, '2020-08-31' as end_day from Drivers union select 9 as month, '2020-09-30' as end_day from Drivers union select 10 as month, '2020-10-31' as end_day from Drivers union select 11 as month, '2020-11-30' as end_day from Drivers union select 12 as month, '2020-12-31' as end_day from Drivers ), act_d as (select month, count(driver_id) as active_drivers from m left join Drivers d on join_date <= end_day group by 1 ) select m.month, active_drivers, coalesce(accepted_rides,0) as accepted_rides from m inner join act_d on m.month = act_d.month left join act_r on m.month = act_r.month order by 1
with active_dr as ( select left(join_date, 7) as join_month , year(join_date) as join_year , month(join_date) as join_month_num , count(*) as num_drivers from drivers where join_date < '2021-01-01' group by left(join_date, 7) ) , active_cts as ( select * , sum(num_drivers) over(order by join_month) as total_active_drivers from active_dr ) , nums as ( select row_number() over() as num from information_schema.columns ) , months as ( select num from nums where num <= 12 ) , active_month_join as ( select mn.num, max(ac.join_month_num) as max_join_month_num from months as mn left join active_cts as ac on mn.num >= ac.join_month_num and ac.join_year = 2020 group by mn.num ) , accept_rds as ( select month(requested_at) as month_num, count(*) as total_rides from rides as r inner join ( select ride_id from acceptedrides group by ride_id ) as ar on r.ride_id = ar.ride_id where r.requested_at >= '2020-01-01' and r.requested_at < '2021-01-01' group by month(requested_at) ) select mn.num as month , coalesce(ac.total_active_drivers, 0) as active_drivers , coalesce(ar.total_rides, 0) as accepted_rides from months as mn left join accept_rds as ar on mn.num = ar.month_num left join active_month_join as amj on mn.num = amj.num left join active_cts as ac on amj.max_join_month_num = ac.join_month_num and ac.join_year = 2020
with cte as ( select month(join_date) as month, count(driver_id) over (order by join_date) as rnk from drivers where year(join_date) <= 2020), cte2 as (select month, count(*) as cnt from(select y.ride_id, month(requested_at) as month from Rides x join AcceptedRides y on x.ride_id = y.ride_id where year(requested_at) = 2020) a group by 1), cte3 as( with recursive cte as ( select 1 as month union all select month+1 as month from cte where month <= 11 ) select * from cte ) select x.month, max(ifnull(y.rnk,0)) as active_drivers, max(ifnull(z.cnt ,0)) as accepted_rides from cte3 x left join cte y on x.month >= y.month left join cte2 z on x.month = z.month group by 1
with cte as ( with recursive cte1 as (select 1 as month union all select month+1 as month from cte1 where month<12 ) select * from cte1) , drivers as (select case when year(join_date)<2020 then 1 else month(join_date) end as month, count(distinct driver_id) as active_drivers from Drivers where year(join_date) <= 2020 group by 1 order by 1), rides as ( select month(b.requested_at) as month, count(distinct a.ride_id) as accepted_rides from AcceptedRides a left join Rides b on a.ride_id = b.ride_id where year(requested_at) = 2020 group by 1 ) select cte.month, ifnull(sum(active_drivers) over(order by cte.month),0) as active_drivers, ifnull(c.accepted_rides,0) as accepted_rides from cte left join drivers a on cte.month = a.month left join rides c on cte.month = c.month
with cte as (select 1 as month union (select 2 as month) union (select 3 as month) union (select 4 as month) union (select 5 as month) union (select 6 as month) union (select 7 as month) union (select 8 as month) union (select 9 as month) union (select 10 as month) union (select 11 as month) union (select 12 as month)) select cte.month, count(distinct d.driver_id) as active_drivers, count(distinct a.ride_id) as accepted_rides from cte left join (select driver_id, (case when year(join_date) ='2019' then 1 else month(join_date) end) as month from Drivers where join_date<='2020-12-31') d on cte.month >= d.month left join ( select ride_id, requested_at from Rides where requested_at BETWEEN '2020-01-01' AND '2020-12-31') r on cte.month = month(r.requested_at) left join AcceptedRides a on a.ride_id = r.ride_id group by 1
with cte as (select 1 as mth union select 2 as mth union select 3 as mth union select 4 as mth union select 5 as mth union select 6 as mth union select 7 as mth union select 8 as mth union select 9 as mth union select 10 as mth union select 11 as mth union select 12 as mth ) select cte.mth as "month" , (select count(*) from drivers d2 where (month(join_date) <=cte.mth or year(join_date)<2020) and year(join_date)<2021 )as "active_drivers", sum((case when ar.ride_id is null then 0 else 1 end )) as "accepted_rides" from cte left join rides r on cte.mth = month(r.requested_at) and year(r.requested_at) = 2020 left join (select ar1.* from acceptedrides ar1 join drivers d on d.driver_id = ar1.driver_id ) ar on r.ride_id = ar.ride_id group by 1 order by 1
with cte1 as ( (select 1 as month) union (select 2 as month) union (select 3 as month) union (select 4 as month) union (select 5 as month) union (select 6 as month) union (select 7 as month) union (select 8 as month) union (select 9 as month) union (select 10 as month) union (select 11 as month) union (select 12 as month)), cte2 as ( select driver_id, case when year(join_date)=2019 then 1 else month(join_date) end as 'month' from Drivers where year(join_date) <=2020 ), cte3 as ( select a.ride_id, b.driver_id, month(requested_at) as 'month' from Rides a join AcceptedRides b using(ride_id) where year(requested_at)=2020 ) select cte1.month, count(distinct cte2.driver_id) as 'active_drivers', count(distinct ride_id) as 'accepted_rides' from cte1 left join cte2 on cte1.month>=cte2.month left join cte3 on cte1.month = cte3.month and cte2.driver_id = cte3.driver_id group by cte1.month
with cte_spine as ( with recursive cte_recursive as ( select 0 as `month` union all select `month`+1 from cte_recursive where `month`<12 ) select * from cte_recursive ), cte_drivers as ( select case when year(join_date) < 2020 then 0 else month(join_date) end as `month`, count(driver_id) as Ndrivers from drivers where year(join_date)<=2020 group by `month` ), cte_rides as ( select month(requested_at) as `month`,count(distinct ar.ride_id) as Nrides from acceptedrides ar inner join rides on (ar.ride_id=rides.ride_id) where year(requested_at)=2020 group by month(requested_at) order by `month` ), cte_allmonths as ( select cte_spine.`month`, ifnull(Ndrivers,0) as Ndrivers, ifnull(Nrides,0) as accepted_rides from cte_spine left join cte_drivers on (cte_spine.month=cte_drivers.month) left join cte_rides on (cte_spine.month=cte_rides.month) ), cte_allmonths_cum as ( select `month`, sum(Ndrivers) over (order by `month` range between unbounded preceding and current row) as active_drivers, accepted_rides from cte_allmonths ) select * from cte_allmonths_cum where `month` > 0
with dates as ( select @start_date := @start_date + interval 1 month as `year_month` from rides r1, rides r2, (select @start_date := '2019-11-01') s1 where @start_date < '2020-12-01' ), tmp as ( select `year_month`, count(driver_id) over(order by `year_month` rows between unbounded preceding and current row) as active_drivers from dates left join drivers d on dates.year_month = date_format(d.join_date, '%Y-%m-01') ), spine as ( select `year_month`, max(active_drivers) as active_drivers from tmp group by `year_month` ), r as ( select date_format(requested_at, '%Y-%m-01') as `year_month`, count(*) as accepted_rides from rides join acceptedrides on rides.ride_id = acceptedrides.ride_id group by `year_month` ) select extract(month from spine.year_month) as month, active_drivers, ifnull(accepted_rides, 0) as accepted_rides from spine left join r on spine.year_month = r.year_month where extract(year from spine.year_month) = 2020
with month as (select 1 as month union select 2 as month union select 3 as month union select 4 as month union select 5 as month union select 6 as month union select 7 as month union select 8 as month union select 9 as month union select 10 as month union select 11 as month union select 12 as month ) select m.month as month, count( distinct d.driver_id) as active_drivers , count(distinct ar.ride_id) as accepted_rides from month m left join Rides r on (month(r.requested_at) = m.month and year(r.requested_at) = 2020) left join AcceptedRides ar on (r.ride_id = ar.ride_id ) left join (select driver_id, (case when year(join_date)=2019 then '1' else month(join_date) end) `month` from Drivers where year(join_date)<=2020 ) d on (m.month >= d.month ) group by m.month order by m.month
with months (month) as ( select * from (VALUES ROW(1), ROW(2), ROW(3), ROW(4), ROW(5), ROW(6), ROW(7), ROW(8), ROW(9), ROW(10), ROW(11), ROW(12)) v) , valid_rides as (select ride_id, requested_at as ride_date from AcceptedRides natural left join Rides where year(requested_at) = 2020) , ride_count as (select month, count(ride_id) as accepted_rides from months left join valid_rides on month = month(ride_date) group by month ) , drivers_count as (select month, count(driver_id) as active_drivers from months cross join Drivers where (year(join_date) = 2020 and month(join_date) <= month) or year(join_date) < 2020 group by month order by month ) select month, coalesce(active_drivers,0) as active_drivers, coalesce(accepted_rides,0) as accepted_rides from ride_count natural left join drivers_count order by 1
with months as ( select 1 as month UNION select 2 as month UNION select 3 as month UNION select 4 as month UNION select 5 as month UNION select 6 as month UNION select 7 as month UNION select 8 as month UNION select 9 as month UNION select 10 as month UNION select 11 as month UNION select 12 as month ), drivers_joined as (select a.month, coalesce(count(distinct driver_id),0) n_drivers from months a left join (select * from Drivers where Year(join_date)<=2020) b on a.month=(case when YEAR(b.join_date)<2020 then 1 else Month(b.join_date) end) group by 1 ) select a.month, sum(n_drivers) over(order by a.month ASC) as active_drivers ,coalesce(n_rides,0) as accepted_rides from drivers_joined a left join (select Month(requested_at) as month, count(*) as n_rides from AcceptedRides AR inner join Rides R on AR.ride_id=R.ride_id where YEAR(requested_at)=2020 group by 1) b on a.month=b.month
with months as ( select 1 as month union select 2 union select 3 union select 4 union select 5 union select 6 union select 7 union select 8 union select 9 union select 10 union select 11 union select 12 ) ,active_drivers_pt1 as ( select d.driver_id, case when year(join_date) < 2020 then 1 else month(join_date) end as month from Drivers d where year(join_date) < 2021 ) ,active_drivers_pt2 as ( select m.month, count(distinct driver_id) as cnt from months m left join active_drivers_pt1 a1 on a1.month = m.month group by m.month ) ,active_drivers as ( select a2.month, sum(coalesce(cnt,0)) over (order by month asc) as active_drivers from active_drivers_pt2 a2 ) ,accepted_rides as ( select month(r.requested_at) as month, count(distinct ar.ride_id) as accepted_rides from AcceptedRides ar inner join Rides r on r.ride_id = ar.ride_id where year(r.requested_at) = 2020 group by month(r.requested_at) ) select ad.month, ad.active_drivers, coalesce(ar.accepted_rides,0) as accepted_rides from active_drivers ad left join accepted_rides ar on ad.month = ar.month order by ad.month
with months as ((select 1 as month) union (select 2 as month) union (select 3 as month) union (select 4 as month) union (select 5 as month) union (select 6 as month) union (select 7 as month) union (select 8 as month) union (select 9 as month) union (select 10 as month) union (select 11 as month) union (select 12 as month)), z as (select m.month, ifnull(count(distinct(d.driver_id)), 0) month_drivers from (select (case when year(join_date) < 2020 then 1 else month(join_date) END) as month, driver_id from Drivers where year(join_date) < 2021) d right join months m on d.month <= m.month group by (m.month)) select z.month, z.month_drivers as active_drivers, ifnull(a.month_count, 0) as accepted_rides from z left join (select month(r.requested_at) month, count(*) as month_count from AcceptedRides a join Rides r on a.ride_id = r.ride_id where year(r.requested_at) = 2020 group by month(r.requested_at)) a on z.month = a.month order by z.month
with months_2020 as ( select '2020-01-31' as dt UNION select '2020-02-29' as dt UNION select '2020-03-31' as dt UNION select '2020-04-30' as dt UNION select '2020-05-31' as dt UNION select '2020-06-30' as dt UNION select '2020-07-31' as dt UNION select '2020-08-31' as dt UNION select '2020-09-30' as dt UNION select '2020-10-31' as dt UNION select '2020-11-30' as dt UNION select '2020-12-31' as dt ) ,drivers_2020 as ( select month(m.dt) as month, count(distinct case when d.join_date <= m.dt then d.driver_id else null end) as active_drivers from months_2020 m, Drivers d group by month(m.dt) ) ,rides_2020 as ( select month(m.dt) as month, count(distinct case when month(r.requested_at) = month(m.dt) and year(r.requested_at) = 2020 then r.ride_id else null end) as accepted_rides from months_2020 m, AcceptedRides a JOIN Rides r on a.ride_id = r.ride_id group by month(m.dt) ) select d.month, d.active_drivers, r.accepted_rides from drivers_2020 d JOIN rides_2020 r on d.month = r.month
with months_2020 as ( select '2020-01-31' as dt UNION select '2020-02-29' as dt UNION select '2020-03-31' as dt UNION select '2020-04-30' as dt UNION select '2020-05-31' as dt UNION select '2020-06-30' as dt UNION select '2020-07-31' as dt UNION select '2020-08-31' as dt UNION select '2020-09-30' as dt UNION select '2020-10-31' as dt UNION select '2020-11-30' as dt UNION select '2020-12-31' as dt ) ,drivers_2020 as ( select month(m.dt) as month, count(distinct d.driver_id) as active_drivers from months_2020 m, Drivers d where d.join_date <= m.dt group by month(m.dt) ) ,rides_2020 as ( select month(m.dt) as month, count(distinct r.ride_id) as accepted_rides from months_2020 m, AcceptedRides a JOIN Rides r on a.ride_id = r.ride_id where month(r.requested_at) = month(m.dt) and year(r.requested_at) = 2020 group by month(m.dt) ) select month(m.dt) as month, COALESCE(d.active_drivers,0) as active_drivers, COALESCE(r.accepted_rides,0) as accepted_rides from months_2020 m LEFT JOIN drivers_2020 d on month(m.dt) = d.month LEFT JOIN rides_2020 r on month(m.dt) = r.month
with recursive 2020_m(months) as ( select 1 union all select months+1 from 2020_m where months<12), mth_cnt as( select m.months, sum(dv_cnt) over(order by m.months) cur_cnt from 2020_m m left join( select if(join_date<"2020-01-01",1,month(join_date)) as m,count(driver_id) as dv_cnt from Drivers where join_date<"2021-01-01" group by 1) c on m.months = c.m ) select m.months as month, ifnull(m.cur_cnt,0) as active_drivers, ifnull(acc.acc_cnt,0) as accepted_rides from mth_cnt m left join( select month(requested_at) mth, count(ride_id) as acc_cnt from rides r join AcceptedRides ac using (ride_id) where requested_at>"2019-12-31" and requested_at <"2021-01-01" group by 1 ) acc on m.months = acc.mth order by 1
with recursive 2020month as ( select 1 as mon ,last_day(concat('2020-',1,'-01')) as lastday union all select mon+1 as mon ,last_day(concat('2020-',mon+1,'-01')) as lastday from 2020month where mon < 12 ) select acceptedrides.month as month ,activedriver.active_drivers ,acceptedrides.accepted_rides from( select 2020mon.mon as month ,ifnull(count(drivers.driver_id),0) as active_drivers from 2020month 2020mon left join Drivers drivers on 2020mon.lastday >= drivers.join_date group by 2020mon.mon ) activedriver join( select 2020mon.mon as month ,ifnull(count(acctrides.ride_id),0) as accepted_rides from 2020month 2020mon left join Rides rides on month(rides.requested_at) = 2020mon.mon and year(rides.requested_at) = 2020 left join AcceptedRides acctrides on rides.ride_id = acctrides.ride_id group by 2020mon.mon ) acceptedrides on activedriver.month = acceptedrides.month order by month
with recursive CTE1 as ( select 1 as month union all select 1 + month from CTE1 where 1 + month <= 12 ), CTE2 as ( select driver_id, case when year(join_date) < 2020 then 1 else month(join_date) end as month from Drivers where year(join_date) <= 2020 ), CTE3 as ( select distinct CTE1.month, count(CTE2.driver_id) over (order by CTE1.month asc) as active_drivers from CTE1 left outer join CTE2 on CTE1.month = CTE2.month ), CTE4 as ( select month(R.requested_at) as month, A.driver_id from Rides as R, AcceptedRIdes as A where R.ride_id = A.ride_id and year(R.requested_at) = 2020 ), CTE5 as ( select distinct CTE1.month, count(CTE4.driver_id) over (partition by CTE1.month) as accepted_rides from CTE1 left outer join CTE4 on CTE1.month = CTE4.month ) select CTE5.month, CTE3.active_drivers, CTE5.accepted_rides from CTE5, CTE3 where CTE5.month = CTE3.month
with recursive CTE1 as ( select 1 as month union all select 1 + month from CTE1 where 1 + month <= 12 ), CTE2 as ( select driver_id, case when year(join_date) < 2020 then 1 else month(join_date) end as month from Drivers where year(join_date) <= 2020 ), CTE3 as ( select distinct CTE1.month, count(CTE2.driver_id) over (order by CTE1.month asc) as active_drivers from CTE1 left outer join CTE2 on CTE1.month = CTE2.month ), CTE4 as ( select month(R.requested_at) as month, A.ride_id from Rides as R, AcceptedRIdes as A where R.ride_id = A.ride_id and year(R.requested_at) = 2020 ), CTE5 as ( select distinct CTE1.month, count(CTE4.ride_id) over (partition by CTE1.month) as accepted_rides from CTE1 left outer join CTE4 on CTE1.month = CTE4.month ) select CTE5.month, CTE3.active_drivers, CTE5.accepted_rides from CTE5, CTE3 where CTE5.month = CTE3.month
with recursive CTE1 as ( select 1 as month union all select 1 + month from CTE1 where month < 12 ), CTE2 as ( select month(R.requested_at) as month, A.ride_id from Rides as R, AcceptedRides as A where R.ride_id = A.ride_id and year(R.requested_at) = 2020 ), CTE3 as ( select CTE1.month, count(CTE2.ride_id) as accepted_rides from CTE2 right outer join CTE1 on CTE2.month = CTE1.month group by CTE1.month ), CTE4 as ( select case when year(join_date) < 2020 then 1 else month(join_date) end as month, driver_id from Drivers where year(join_date) <= 2020 ), CTE5 as ( select CTE1.month, count(CTE4.driver_id) over (order by CTE1.month) as active_drivers from CTE4 right outer join CTE1 on CTE4.month = CTE1.month ) select distinct CTE3.month, CTE5.active_drivers, CTE3.accepted_rides from CTE5, CTE3 where CTE5.month = CTE3.month
with recursive M as ( select 1 as month union all select month+1 as month from M where month<12 ), D1 as ( select driver_id, case when date_format(join_date,'%Y-%m')='2020-01' then 1 when date_format(join_date,'%Y-%m')='2020-02' then 2 when date_format(join_date,'%Y-%m')='2020-03' then 3 when date_format(join_date,'%Y-%m')='2020-04' then 4 when date_format(join_date,'%Y-%m')='2020-05' then 5 when date_format(join_date,'%Y-%m')='2020-06' then 6 when date_format(join_date,'%Y-%m')='2020-07' then 7 when date_format(join_date,'%Y-%m')='2020-08' then 8 when date_format(join_date,'%Y-%m')='2020-09' then 9 when date_format(join_date,'%Y-%m')='2020-10' then 10 when date_format(join_date,'%Y-%m')='2020-11' then 11 when date_format(join_date,'%Y-%m')='2020-12' then 12 else 1 end as month from Drivers where join_date<'2021-01-01' ), D2 as ( select month, count(driver_id) as active_drivers from D1 group by month ), MD1 as ( select M.month, ifnull(D2.active_drivers,0) as active_drivers from M left join D2 on M.month=D2.month ), MD2 as ( select month, sum(active_drivers) over(order by month asc) as active_drivers from MD1 ), R1 as ( select ride_id, case when date_format(requested_at,'%Y-%m')='2020-01' then 1 when date_format(requested_at,'%Y-%m')='2020-02' then 2 when date_format(requested_at,'%Y-%m')='2020-03' then 3 when date_format(requested_at,'%Y-%m')='2020-04' then 4 when date_format(requested_at,'%Y-%m')='2020-05' then 5 when date_format(requested_at,'%Y-%m')='2020-06' then 6 when date_format(requested_at,'%Y-%m')='2020-07' then 7 when date_format(requested_at,'%Y-%m')='2020-08' then 8 when date_format(requested_at,'%Y-%m')='2020-09' then 9 when date_format(requested_at,'%Y-%m')='2020-10' then 10 when date_format(requested_at,'%Y-%m')='2020-11' then 11 when date_format(requested_at,'%Y-%m')='2020-12' then 12 end as month from Rides where year(requested_at)=2020 and ride_id in (select ride_id from AcceptedRides) ), R2 as ( select month, count(ride_id) as accepted_rides from R1 group by month ) select MD2.month, MD2.active_drivers, ifnull(R2.accepted_rides,0) as accepted_rides from MD2 left join R2 on MD2.month=R2.month
with recursive a as ( select 1 as month, (select count(driver_id) from Drivers where join_date < '2020-02-01') as active_drivers, (select count(Rides.ride_id) from Rides join AcceptedRides using (ride_id) where requested_at >= concat('2020-', 1, '-01') and requested_at < concat('2020-', 2, '-01')) as accepted_rides union all select month + 1, (select count(driver_id) from Drivers where join_date < if(month + 2 > 12, '2021-01-01', concat('2020-', month + 2, '-01'))) as active_drivers, (select count(Rides.ride_id) from Rides join AcceptedRides using (ride_id) where requested_at >= concat('2020-', if(month + 2 > 12, 12, month + 1), '-01') and requested_at < if(month + 2 > 12, '2021-01-01', concat('2020-', month + 2, '-01'))) as accepted_rides from a where month < 12 ) select * from a
with recursive a as ( select 1 as month, (select count(driver_id) from Drivers where join_date < '2020-02-01') as active_drivers, (select count(Rides.ride_id) from Rides join AcceptedRides using (ride_id) where requested_at between '2020-01-01' and '2020-01-31') as accepted_rides union all select month + 1, (select count(driver_id) from Drivers where join_date < if(month + 2 > 12, '2021-01-01', concat('2020-', month + 2, '-01'))) as active_drivers, (select count(Rides.ride_id) from Rides join AcceptedRides using (ride_id) where requested_at >= concat('2020-', if(month + 2 > 12, 12, month + 1), '-01') and requested_at < if(month + 2 > 12, '2021-01-01', concat('2020-', month + 2, '-01'))) as accepted_rides from a where month < 12 ) select * from a
with recursive a as( select 1 as month union all select month + 1 from a where month < 12), b as ( select driver_id, join_date, case when year(join_date) < 2020 then '2020-01-01' else join_date end as driver_active_date from drivers), c as ( select distinct a.month, count(b.driver_id) over(partition by a.month) as active_driver from a left join b on a.month = month(b.driver_active_date) and year(b.driver_active_date) = 2020), d as ( select distinct a.month, count(r.ride_id) over(partition by a.month) as accepted_rides from a left join rides r on a.month = month(r.requested_at) and year(r.requested_at) = 2020 and r.ride_id in (select ride_id from acceptedrides)) select c.month, sum(c.active_driver) over(order by c.month) as active_drivers, accepted_rides from c left join d on c.month = d.month
with recursive all_months as ( select 1 as month union all select month+1 from all_months where month<12 ), monthly_joined_drivers as ( select (case when year(join_date) <2020 then 1 else month(join_date) end ) as join_month, count(driver_id) as joined_drivers FROM Drivers where year(join_date)<=2020 group by join_month), monthly_AcceptedRides as ( SELECT month(r.requested_at) as ride_month, count(ar.ride_id) as AcceptedRides_month FROM AcceptedRides as ar join Rides as r ON ar.ride_id = r.ride_id where year(requested_at)=2020 group by ride_month) SELECT month , active_drivers, ifnull(AcceptedRides_month,0) as accepted_rides FROM (SELECT am.month , sum(ifnull(joined_drivers,0)) as active_drivers FROM all_months as am left join monthly_joined_drivers as mjd on am.month >=mjd.join_month group by am.month) as arm_all left join monthly_AcceptedRides as mar on arm_all.month = mar.ride_month
with recursive all_months0 as ( select '2020-02-01' as "the_month" union all select date_add(the_month, interval 1 month) as "the_month" from all_months0 where the_month < '2020-12-31' ), all_months as ( select date_sub(the_month, interval 1 day) as the_month from all_months0 ), drivers_count as ( select extract(month from a.the_month) as "the_month", count(driver_id) "driver_count" from all_months a left join drivers d on d.join_date <= a.the_month group by 1 ), accepted_rides as ( select extract(month from r.requested_at) "the_month", count(a.ride_id) "ride_count" from acceptedrides a join rides r on a.ride_id = r.ride_id where requested_at between '2020-01-01' and '2020-12-31' group by 1 ) select d.the_month "month", ifnull(d.driver_count, 0) "active_drivers", ifnull(a.ride_count, 0) "accepted_rides" from drivers_count d left join accepted_rides a on d.the_month = a.the_month
with recursive calendar as( select 1 as month union all select month+1 from calendar where month<12), ad as ( select c.month,count(driver_id) as active_drivers from calendar c left join drivers d on concat('2020',LPAD(c.month,2,0))>=DATE_FORMAT(d.join_date,'%Y%m') group by c.month), ar as( select c.month,count(a.ride_id) as accepted_rides from calendar c left join rides r on c.month=month(r.requested_at) and year(r.requested_at)='2020' left join AcceptedRides a on r.ride_id=a.ride_id group by c.month ) select * from ad inner join ar using (month)
with recursive cte (month) as ( select 1 as month union all select month+1 from cte where month <12 ), driver as ( select date_format(join_date, '%Y-%m-01') as month, sum(count(*)) over (order by date_format(join_date, '%Y-%m-01')) as active_drivers from drivers where join_date <= '2020-12-31' group by 1 ), driver_2020 as ( select month, active_drivers from driver where date_format(driver.month, '%Y') = 2020 ), accepted_rides as ( select date_format(rides.requested_at, '%Y-%m-01') as month, count(AcceptedRides.driver_id) as accepted_rides from rides inner join AcceptedRides using(ride_id) where rides.requested_at between '2020-01-01' and '2020-12-31' group by 1 ) select cte.month, ifnull(max(driver_2020.active_drivers) over (order by cte.month),0) as active_drivers, ifnull(accepted_rides.accepted_rides,0) as accepted_rides from cte left join driver_2020 on cte.month = date_format(driver_2020.month, '%c') left join accepted_rides on cte.month = date_format(accepted_rides.month, '%c')
with recursive cte as ( select '2020-01-01' as month union all select date_add(month,interval 1 month) from cte where month < '2020-12-01' ) select month(cte.month) as month, count(distinct driver_id) as active_drivers, ifnull(b.accepted_rides,0) as accepted_rides from cte as cte left join ( select month (b.requested_at) as month, count(distinct a.ride_id) as accepted_rides from acceptedrides as a join rides as b on a.ride_id = b.ride_id where year(requested_at) = 2020 group by 1 ) as b on month(cte.month) = b.month left join drivers as c on last_day(cte.month) >=c.join_date group by 1 order by 1
with recursive cte as ( select 1 as m union select m+1 from cte where m<12) select t3.m as month, active_drivers, accepted_rides from (select m, sum(cnt)over(order by m) as active_drivers from (select distinct m, count(join_month)over(partition by m order by m) as cnt from cte left join (select if(year(join_date)<2020, 1, month(join_date)) as join_month from drivers where year(join_date)<2021) as t1 on m = join_month) as t2) t3 join (select m, count(ar.ride_id) as accepted_rides from cte left join (select * from rides where year(requested_at) = 2020 ) as r on cte.m = month(r.requested_at) left join acceptedrides as ar on ar.ride_id = r.ride_id group by m) as t4 using (m)
with recursive cte as ( select 1 as month from dual union all select month+1 from cte where month < 12 ),cte1 as ( select count(*) as driver_id,1 as month from drivers where year(join_date) < 2020 union all select 1 as driver_id,month(join_date) as month from drivers where year(join_date) = 2020 union all select 0 as driver_id,month from cte where month not in ( select month(join_date) from drivers where year(join_date) = 2020 ) ),cte2 as ( select distinct month,sum(driver_id) over (order by month) as active_drivers from cte1 ),cte3 as ( select ride_id,month(requested_at) as month from Rides where ride_id in (select ride_id from AcceptedRides) and year(requested_at) = 2020 ), cte4 as ( select month,count(*) as accepted_rides from cte3 group by month ) select cte2.month,active_drivers,ifnull(accepted_rides,0) as accepted_rides from cte2 left join cte4 on cte2.month = cte4.month order by cte2.month
with recursive cte as ( select 1 as month union all select month + 1 from cte where month < 12 ), temp as ( select MONTH(a.join_date) as month, count(distinct b.driver_id) as drivers from Drivers as a join Drivers as b where YEAR(a.join_date) < 2021 and YEAR(a.join_date) > 2019 and to_days(a.join_date) >= to_days(b.join_date) group by MONTH(a.join_date) ), temp1 as ( select cte.month, case when drivers is null then 0 else drivers end as drivers from cte left join temp on cte.month = temp.month ), temp2 as ( select a.month, max(b.drivers) as active_drivers from temp1 as a join temp1 as b where a.month >= b.month group by a.month order by a.month ), temp3 as ( select MONTH(requested_at) as month, count(ride_id) as rides from Rides where ride_id in (select ride_id from AcceptedRides) and YEAR(requested_at) > 2019 and YEAR(requested_at) < 2021 group by MONTH(requested_at) ) select temp2.*, case when temp3.rides is NULL then 0 else temp3.rides end as accepted_rides from temp2 left join temp3 on temp2.month = temp3.month order by month
with recursive cte as ( select 1 as month union all select month + 1 from cte where month < 12 ), temp as ( select MONTH(join_date) as month, max(drivers) as drivers from (select join_date, count(driver_id) over (order by join_date) as drivers from Drivers) as t where join_date >= '2020-01-01' and join_date <= '2020-12-31' group by MONTH(join_date) ), temp1 as ( select month, max(drivers) over (order by month) as drivers from (select cte.month, case when drivers is NULL then 0 else drivers end as drivers from cte left join temp on cte.month = temp.month) as t ), temp2 as ( select MONTH(requested_at) as month, count(a.ride_id) as rides from Rides as r join AcceptedRides as a on r.ride_id = a.ride_id where requested_at >= '2020-01-01' and requested_at <= '2020-12-31' group by MONTH(requested_at) ) select temp1.month, drivers as active_drivers, case when rides is NULL then 0 else rides end as accepted_rides from temp1 left join temp2 on temp1.month = temp2.month order by month
with recursive cte as ( select 1 as month union all select month+1 from cte where month < 12 ) select c.month, max(ifnull(ndriver,0)) as active_drivers , max(ifnull(nride,0)) as accepted_rides from cte c left join (select trim(both '-' from right(left(requested_at, 7),2)) as month, count(r.ride_id) as nride from rides r join AcceptedRides a on r.ride_id= a.ride_id where left(requested_at,4)='2020' group by trim(both '-' from right(left(requested_at, 7),2)) ) r on c.month=r.month left join ( select left(join_date, 7) as ymonth, count(driver_id) over ( order by left(join_date, 7) ) as ndriver from Drivers ) d on trim(both '-' from right(d.ymonth,2)) <= c.month and left(d.ymonth, 4) = '2020' group by month order by c.month
with recursive cte as ( select 1 as month union all select month+1 from cte where month < 12 ), active as ( select month(d.join_date) as month, count(d.driver_id) over(order by d.join_date) as active_drivers from Drivers d where year(d.join_date) < 2021 ), accepted as ( select month(r.requested_at) as month, count(distinct r.ride_id) as accepted_rides from Rides r where r.ride_id in (select ride_id from AcceptedRides) and year(r.requested_at) = 2020 group by month(r.requested_at) ) select distinct c.month, ifnull(max(a.active_drivers) over (order by c.month), 0) as active_drivers, ifnull(ac.accepted_rides, 0) as accepted_rides from cte c left join active a on c.month = a.month left join accepted ac on c.month = ac.month
with recursive cte as ( select 1 as month union all select month+1 from cte where month <12 ) SELECT month, ( SELECT COUNT(*) FROM Drivers WHERE join_date < '2021-01-01' AND (join_date < '2020-01-01' OR Month(join_date) <= month) ) as active_drivers, ( SELECT COUNT(*) FROM AcceptedRides, Rides WHERE AcceptedRides.ride_id = Rides.ride_id AND requested_at < '2021-01-01' AND requested_at >= '2020-01-01' AND Month(requested_at) = month ) as accepted_rides FROM cte
with recursive cte as ( select 1 as month, 0 as driver_cnt union all select month + 1 as month, 0 as driver_cnt from cte where month < 12 ), cte1 as ( select month, count(driver_id) as driver_cnt from ( select driver_id, month(case when year(join_date) < 2020 then '2020-1-1' else join_date end ) as month from Drivers where year(join_date) <= 2020 )t group by month ), cte2 as ( select month, count(ride_id) as ride_cnt from( select a.ride_id, r.requested_at, month(r.requested_at) as month from AcceptedRides a left join Rides r on a.ride_id = r.ride_id where year(r.requested_at) = 2020 )t group by month ) select t1.month, sum(driver_cnt) over(order by t1.month) as active_drivers, ifnull(ride_cnt,0) as accepted_rides from ( select month, sum(driver_cnt) as driver_cnt from( select * from cte union all select * from cte1 )t0 group by month )t1 left join cte2 t2 on t1.month = t2.month order by t1.month
with recursive cte as ( select 1 month union all select month + 1 from cte where month < 12 ), tmp_cnt as ( select month, count(*) d_cnt from ( select driver_id, case when year(join_date) < 2020 then 1 else month(join_date) end month from Drivers where year(join_date) < 2021 ) T group by month ), acc_cnt as ( select month, sum(total) over(order by month) active_drivers from ( select a.month, if(b.d_cnt is null, 0, b.d_cnt) total from cte a left join tmp_cnt b on a.month = b.month ) T ), order_cnt as ( select month(a.requested_at) month, count(*) accepted_rides from Rides a join AcceptedRides b on a.ride_id = b.ride_id and year(a.requested_at) = 2020 group by month(a.requested_at) ) select a.*, if(b.accepted_rides is not null, b.accepted_rides, 0) accepted_rides from acc_cnt a left join order_cnt b on a.month = b.month
with recursive cte as ( select 2020 year, CAST( 01 as SIGNED) as month from dual union all select 2020,month+1 from cte where month<12 ), cte1 as ( select 2019 year, CAST( 01 as UNSIGNED) as month from dual union all select 2019,month+1 from cte1 where month<12 ), ac_rides as( select year(requested_at) yrr, LPAD(month(requested_at), 2, '0') month, count(distinct a.ride_id) accepted_rides from AcceptedRides a, rides r where a.ride_id = r.ride_id and requested_at between '2020-01-01' and '2020-12-31' group by 1,2 order by 1,2 asc) select distinct mn month, Ifnull(active_drivers,0) active_drivers,ifnull(accepted_rides,0) accepted_rides from ( select concat(cc.year,cc.month) , cc.year yr,cc.month mn, sum(ct) over(order by cc.year,cc.month ) active_drivers from (select * from cte union select * from cte1 ) cc left outer join ( select driver_id, join_date, count(driver_id) ct from drivers group by join_date) x on concat(cc.year,cc.month) = concat(year(join_date), month(join_date) ) order by concat(cc.year,cc.month) ) xx left join ac_rides on ac_rides.yrr = xx.yr and ac_rides.month = xx.mn where yr != '2019' order by mn
with recursive cte as ( select r.ride_id, month(r.requested_at) month, a.driver_id from Rides r left join AcceptedRides a on r.ride_id = a.ride_id where year(r.requested_at) = 2020 ), month_cte as ( select 1 as month UNION ALL select month+1 from month_cte where month <= 11 ), active_driver_cte as ( select mc.month, count(d.driver_id) dcount from month_cte mc left join Drivers d on d.join_date <= LAST_DAY(concat('2020-', mc.month, '-', '01')) group by mc.month ) select mc.month, CASE WHEN a.dcount is null THEN 0 ELSE a.dcount END active_drivers , count(c.driver_id) accepted_rides from month_cte mc left join active_driver_cte a on mc.month = a.month left join cte c on mc.month = c.month group by mc.month order by mc.month
with recursive cte as (select 1 as m union all select m+1 as m from cte where m<=11) ,tb2 as (select cte.m, count(driver_id)+(select count(driver_id) from drivers where year(join_date)<2020) as ct from cte left join drivers on month(join_date)<=cte.m and year(join_date)=2020 group by cte.m) select tb2.m as `month`, ct as active_drivers, ifnull(accepted_rides,0) as accepted_rides from tb2 left join (select month(requested_at) as m, count(a.ride_id) as accepted_rides from acceptedrides a left join rides r on a.ride_id=r.ride_id where year(requested_at)=2020 group by month(requested_at)) tb3 on tb2.m=tb3.m
with recursive cte as (select 1 as month union all select 1+month from cte where month < 12), cte2 as (select ifnull(count(a.ride_id),0) as accepted_rides, month(requested_at) as month from acceptedrides a join rides r on a.ride_id = r.ride_id where Year(requested_at) = 2020 group by month(requested_at)), cte3 as (select cte.month, ifnull(ncnt, max(ncnt) over(order by month)) as active_drivers from ( select month(join_date) as month, max(cnt) as ncnt from (select join_date, count(driver_id) over(order by join_date rows between unbounded preceding and current row) as cnt from drivers order by join_date)a where year(join_date) = 2020 group by month(join_date))b right join cte on b.month = cte.month) select cte3.month, ifnull(active_drivers,0) as active_drivers, ifnull(accepted_rides,0) as accepted_rides from cte3 left join cte2 on cte3.month = cte2.month
with recursive cte as (select 1 as month union all select month+1 from cte where month < 12), cte2 as (select month(r.requested_at) as month, count(a.ride_id) as cnt from acceptedrides a join rides r on a.ride_id = r.ride_id where year(r.requested_at) = 2020 group by 1) select foo.*, ifnull(cte2.cnt, 0) as accepted_rides from (select cte.month, count(d.driver_id) as active_drivers from cte left join drivers d on year(d.join_date) = 2020 and month(d.join_date) <= cte.month or year(d.join_date) < 2020 group by 1) foo left join cte2 on foo.month = cte2.month order by foo.month
with recursive cte as (select 1 as month union all select month+1 from cte where month<12), active_drivers as (select cte.month, count(driver_id) as cnt from cte left join (select driver_id, case when join_date<'2020-01-01' then 1 else date_format(join_date,'%m') end as month from drivers where join_date<'2021-01-01')c on cte.month>=c.month group by cte.month), accepted_rides as (select cte.month,count(ride_id) as cntr from cte left join (select a.ride_id,month(requested_at) as month from acceptedrides a left join rides b on a.ride_id=b.ride_id where requested_at like '2020%')d on cte.month=d.month group by cte.month) select m.month,cnt as active_drivers,cntr as accepted_rides from active_drivers m left join accepted_rides n on m.month=n.month
with recursive cte as (select 1 as month union all select month+1 from cte where month<12), driver1 as (select driver_id, case when year(join_date)=2019 then '1' else month(join_date) end as month from Drivers where year(join_date)<=2020), driver2 as (select month, count(distinct driver_id) as driver_per_month from driver1 group by month), accepted as (select count(distinct a.ride_id) as accepted_ride, month(requested_at) month from AcceptedRides a join Rides r on r.ride_id = a.ride_id where year(requested_at) = '2020' group by month(requested_at)), t as (select cte.month, ifnull(driver_per_month,0) as driver_per_month from cte left join driver2 on cte.month=driver2.month) select t.month, sum(driver_per_month)over(order by t.month) as active_drivers, ifnull(accepted_ride,0) accepted_rides from t left join accepted a on t.month=a.month order by 1
with recursive cte as (select 1 as month union select month + 1 from cte where month < 12), t1 as ( select month(join_date) as month, count(driver_id) over(order by join_date) as active_drivers from drivers where year(join_date) <= 2020 ), t2 as ( select count(r.ride_id) as accepted_rides, month(requested_at) as month from rides r join AcceptedRides ar on r.ride_id = ar.ride_id where year(requested_at) = 2020 group by month ) select distinct c.month, ifnull(max(t1.active_drivers) over (order by c.month), 0) as active_drivers, ifnull(accepted_rides, 0) as accepted_rides from cte c left join t1 on c.month = t1.month left join t2 on c.month = t2.month order by c.month
with recursive cte as (select 1 as month union select month+1 as month from cte where month<12), cte2 as (select month, count(driver_id) as active_drivers from (select driver_id, (case when year(join_date)=2019 then '1' else month(join_date) end) as `month` from Drivers where year(join_date)<=2020) as a group by 1), cte3 as (select month(c.requested_at) as join_month,count(b.ride_id) as accepted_rides from acceptedrides as b inner join rides as c on b.ride_id=c.ride_id where year(c.requested_at)=2020 group by 1) select month, sum(active_drivers) over (order by month) as active_drivers,accepted_rides from (select d.month,coalesce(e.active_drivers,0) as active_drivers,coalesce(f.accepted_rides,0) as accepted_rides from cte as d left join cte2 as e on d.month=e.month left join cte3 as f on d.month=f.join_month) as y order by month
with recursive cte as (select 1 as month union select month+1 from cte where month<12), t1 as (select *, case when year(join_date)<2020 then 1 else month(join_date) end as month from drivers where year(join_date)<=2020), t2 as (select month, count(driver_id) as cnt from t1 group by month) select cte.month, sum(ifnull(cnt, 0)) over(order by month) as active_drivers, ifnull(accepted_rides, 0) as accepted_rides from cte left join t2 using (month) left join (select month(requested_at) as month, count(ar.ride_id) as accepted_rides from rides as r join acceptedrides as ar on r.ride_id = ar.ride_id where year(r.requested_at) = 2020 group by month(requested_at)) as t3 on cte.month = t3.month
with recursive cte as( select 0 as month union select month + 1 as month from cte where month < 12 ), active_drivers as ( SELECT 0 as month, count(driver_id) as cnt FROM Drivers WHERE join_date < '2020-01-01' UNION SELECT date_format(join_date, '%m') as month, count(driver_id) as cnt FROM Drivers WHERE join_date like '2020%' GROUP BY 1), accept as( SELECT date_format(requested_at, '%m') as month, count(c.ride_id) as accepted_rides FROM Rides b LEFT JOIN AcceptedRides c using (ride_id) WHERE requested_at LIKE '2020%' GROUP BY 1) SELECT month, active_drivers, accepted_rides FROM ( SELECT cte.month, sum(cnt) over(order by cte.month) as active_drivers, ifnull(accepted_rides,0) as accepted_rides FROM cte LEFT JOIN active_drivers a using (month) LEFT JOIN accept ON cte.month = accept.month )t WHERE month >0
with recursive cte as( select 0 ride_id, 0 user_id, '2020-01-01' as requested_at UNION ALL select 0 ride_id, 0 user_id, date_add(requested_at, interval 1 month) as requested_at from cte where requested_at < '2021-01-01' ), ridesx as ( select * from cte UNION ALL select * from Rides ) select month(r.requested_at) month, (select count(*) from Drivers where date_format(join_date, '%Y-%m') <= date_format(r.requested_at, '%Y-%m')) active_drivers, count(ar.ride_id) accepted_rides from ridesx r left join AcceptedRides ar on r.ride_id = ar.ride_id where year(r.requested_at) = '2020' group by 1 order by 1
with recursive cte as( select 1 as month union all select month +1 from cte where month <=11) select c.month, count(distinct d.driver_id) as active_drivers, count(distinct r.ride_id) as accepted_rides from cte c left join ( select driver_id, case when join_date < '2020-01-01' then '2020-01-01' else join_date end as join_date from Drivers ) d on c.month >= month(d.join_date) and year(d.join_date) < 2021 left join AcceptedRides a on d.driver_id = a.driver_id left join Rides r on a.ride_id = r.ride_id and c.month = month(r.requested_at) and year(r.requested_at) = 2020 group by 1 order by 1
with recursive cte as( select 1 as month union all select month+1 as month from cte where month<12), driver_cnt as (select month, ifnull(driver_cnt,0) as driver_cnt from cte a left join (select join_date_2, count(*) as driver_cnt from (select driver_id, case when year(join_date)<2020 then 1 else month(join_date) end as join_date_2 from Drivers where year(join_date)<=2020) temp group by 1) b on a.month=b.join_date_2) select e.month, e.cum_cnt as active_drivers, ifnull(f.accp_cnt,0) as accepted_rides from (select a.month, sum(b.driver_cnt) as cum_cnt from driver_cnt a join driver_cnt b on a.month>=b.month group by 1) e left join (select month(requested_at) as month, count(d.ride_id) as accp_cnt from rides c join acceptedrides d on c.ride_id=d.ride_id where year(requested_at)=2020 group by 1) f on e.month=f.month order by month
with recursive cte as( select 1 as month union all select month+1 from cte where month<12), rides2 as(select month(requested_at) as month,count(*) as rides from Rides r1 left join AcceptedRides a1 on a1.ride_id=r1.ride_id where a1.driver_id is not null and requested_at like '2020%' group by 1), monthsTable as(select c1.month,r1.rides from cte c1 left join rides2 r1 on r1.month=c1.month), driversTable as(select month(join_date) as month,count(*) as drivers,row_number() over(order by join_date) as rowNum from Drivers where join_date like '2020%' group by 1), driversTable2 as(select month,case when rowNum=1 then drivers+(select count(*) from Drivers where year(join_date)<2020) else drivers end as drivers2 from driversTable) select m1.month,coalesce(SUM(drivers2) over(order by m1.month),0) as active_drivers,coalesce(m1.rides,0) as accepted_rides from monthsTable m1 left join driversTable2 d1 on m1.month=d1.month
with recursive cte as( select 1 n union all select n+1 n from cte where n<12 ), acc as( select requested_at from acceptedrides a join rides r on a.ride_id=r.ride_id where year(requested_at)=2020 ), totdrivers as( select n month, (select count(*) from drivers where ((year(join_date)=2020 and month(join_date)<=c.n) or (year(join_date)<2020))) active_drivers, (select count(*) from acc where (month(requested_at)=c.n)) accepted_rides from cte c ) select * from totdrivers
with recursive cte(month) as ( select 1 union all select month + 1 from cte where month < 12 ), ride as ( select month(a.requested_at) as month , count(a.ride_id) as rides_cnt from Rides as a inner join AcceptedRides as b on a.ride_id = b.ride_id where year(a.requested_at) = 2020 group by month ) select x.month , case when x.driver_cnt is null then 0 else x.driver_cnt end as active_drivers , case when y.rides_cnt is null then 0 else y.rides_cnt end as accepted_rides from ( select a.month , sum(b.cnt) as driver_cnt from cte as a left join ( select if (year(join_date) < 2020, 1, month(join_date)) as month , count(driver_id) as cnt from Drivers where year(join_date) <= 2020 group by month ) as b on b.month <= a.month group by a.month ) as x left join ride as y on x.month = y.month order by x.month
with recursive cte(month) as( select 1 union all select month+1 from cte where month<12 ), cte2 as ( select distinct m, count(ride_id) over (partition by m) as accepted_rides from ( select A.ride_id, month(requested_at) as m from Rides R join AcceptedRides A on A.ride_id=R.ride_id where year(requested_at)='2020') z order by m), cte3 as ( select month(join_date) as driver_month, count(driver_id) over (partition by driver_id) as n_driver from (select * from Drivers where join_date<'2021-01-01' and join_date>'2019-12-31')z union all (select 1 as driver_month, count(driver_id) as nu from Drivers where join_date<'2020-01-01') order by driver_month ), cte4 as ( select distinct month as driver_month, sum(n_driver) over (order by month) as n from( select month, ifnull(n_driver,0) as n_driver from cte left join cte3 on cte.month=cte3.driver_month)z) select driver_month as month, n as active_drivers, ifnull(accepted_rides,0) as accepted_rides from cte4 left join cte2 on cte4.driver_month=cte2.m
with recursive cte(month) as( select 1 union select month+1 from cte where month<12 ), ad as( select month, count(driver_id) as cnt from (select month(join_date) as month, driver_id from Drivers where join_date between date('2020-01-01') and date('2020-12-31') union all select month, null as driver_id from cte) t1 group by month ), ar as( select month, count(ride_id) as cnt2 from (select month(r.requested_at) as month, a.ride_id from AcceptedRides as a join Rides as r on a.ride_id = r.ride_id where r.requested_at between date('2020-01-01') and date('2020-12-31') union all select month, null as ride_id from cte) t2 group by month ) select ad.month, sum(ad.cnt) over (order by ad.month) + (select count(driver_id) from Drivers where join_date < date('2020-01-01')) as active_drivers, ar.cnt2 as accepted_rides from ad join ar on ad.month = ar.month
with recursive cte(n) as ( select cast('2020-01-01' as date) union all select DATE_ADD(n, INTERVAL 1 month) from cte where DATE_ADD(n, INTERVAL 1 month) <= '2020-12-31' ) select month(cte_day) as month, active_drivers, accepted_rides from (select cte_day, sum(active_drivers) over(order by cte_day asc) as active_drivers, coalesce(total_rides,0) as accepted_rides from (select last_day(n) as cte_day, td1.active_drivers, td2.total_rides from cte left join (select t1.date_time as date_time, t1.total_drivers as active_drivers from (select date_time, num_drivers as total_drivers from (select last_day(join_date) as date_time, count(driver_id) as num_drivers from drivers group by last_day(join_date)) as tmp1 ) as t1 ) as td1 on td1.date_time = last_day(cte.n) left join (select last_day(requested_at) as date_time2, count(user_id) as total_rides from AcceptedRides inner join rides on AcceptedRides.ride_id = rides.ride_id group by last_day(requested_at) ) as td2 on td2.date_time2 = last_day(cte.n) union all select cast('2019-12-31' as date) as date_time, count(driver_id) as active_drivers, 0 as accepted_rides from drivers where join_date < '2020-01-01' ) as combo ) as combo2 where year(cte_day) = 2020
with recursive cte1 (month) as ( select 1 as month union all select month+1 from cte1 where month < 12 ), cte2 as ( select month(requested_at) as month, r.ride_id from Rides r join AcceptedRides a on r.ride_id= a.ride_id where extract(year from requested_at)= 2020 ), cte3 as ( select count(c2.ride_id) as accepted_rides, c1.month from cte1 c1 left join cte2 c2 on c1.month= c2.month group by 2 ), cte4 as ( select case when year(join_date) < 2020 then 1 else month(join_date) end as month, driver_id from Drivers d where extract(year from join_date) <= 2020 ), cte5 as ( select distinct cte1.month, count(driver_id) over(order by cte1.month) as active_drivers from cte1 left join cte4 on cte1.month= cte4.month ) select cte3.month, cte5.active_drivers, cte3.accepted_rides from cte3 join cte5 on cte3.month= cte5.month
with recursive cte1(day) as ( select str_to_date('2020-01-31', '%Y-%m-%d') union all select last_day(date_add(day, INTERVAL 1 MONTH)) from cte1 where day<'2020-12-1' ), cte2 as ( select month(day) month, count(driver_id) active_drivers from cte1 left join drivers on join_date <= day group by month ), cte3 as ( select month(requested_at) month, count(ride_id) accepted_rides from AcceptedRides natural join Rides where year(requested_at) = 2020 group by month ) select cte2.month, active_drivers, ifnull(accepted_rides,0) accepted_rides from cte2 left join cte3 on cte2.month=cte3.month
with recursive cte_month as ( select 1 as month union select month + 1 from cte_month where month < 12 ), cte_active_drivers as ( select driver_id, case when year(join_date) <= 2019 then 1 else month(join_date) end as month from drivers where join_date < '2021-01-01' ), cte_accepted_rides as ( select ar.ride_id, month(r.requested_at) as month from acceptedrides ar join rides r on ar.ride_id=r.ride_id where year(r.requested_at)=2020 group by 1 ) select cte_month.month, count(distinct cad.driver_id) as active_drivers, count(distinct car.ride_id) as accepted_rides from cte_month left join cte_active_drivers cad on cte_month.month >= cad.month left join cte_accepted_rides car on cte_month.month = car.month group by cte_month.month
with recursive cte_month_spine as ( select 1 as n union all select n + 1 as n from cte_month_spine where n < 12 ), cte_drivers as ( select ms.n as month, count(driver_id) as active_drivers from cte_month_spine as ms left join Drivers as d on last_day(concat('2020-', ms.n, '-01')) >= d.join_date group by 1 ), cte_accepted_rides as ( select ms.n as month, count(ar.ride_id) as accepted_rides from cte_month_spine as ms left join Rides as r on r.requested_at between concat('2020-', ms.n, '-01') and last_day(concat('2020-', ms.n, '-01')) left join AcceptedRides as ar on r.ride_id = ar.ride_id group by 1 ), cte_final as ( select d.month, active_drivers, accepted_rides from cte_drivers as d join cte_accepted_rides as ar on d.month = ar.month order by 1 ) select * from cte_final
with recursive cte_spine as ( select 1 as month_num union all select 1 + month_num from cte_spine where month_num < 12 ), cte_accepted_rides as ( select month(requested_at) as month, count(*) as accepted_rides from Rides as r join AcceptedRides as ar on r.ride_id = ar.ride_id where year(requested_at) = 2020 group by 1 ), cte_monthly_drivers as ( select s.month_num as month, count(driver_id) as active_drivers from cte_spine as s left join Drivers as d on last_day( str_to_date( concat('2020-', lpad(s.month_num, 2, '0'), '-01'), '%Y-%m-%d' ) ) >= d.join_date group by 1 ), cte_assemble as ( select s.month_num as month, md.active_drivers, coalesce(ar.accepted_rides, 0) as accepted_rides from cte_spine as s left join cte_accepted_rides as ar on s.month_num = ar.month left join cte_monthly_drivers as md on s.month_num = md.month order by 1 ) select * from cte_assemble
with recursive datedim as ( select str_to_date('20200101','%Y%m%d') as datevalue union all select date_add(datevalue, interval 1 month) from datedim where datevalue<'20201201' ) , active_driver_per_month as ( select last_day(dd.datevalue) as datevalue, count(d.join_date) active_drivers from datedim dd left outer join drivers d on d.join_date<=last_day(dd.datevalue) group by dd.datevalue ) , accepted_ride_per_month as ( select last_day(requested_at) requestDate, count(ar.ride_id) AcceptedRides from acceptedrides ar inner join rides r on r.ride_id=ar.ride_id where year(r.requested_at)=2020 group by last_day(requested_at) ) select month(adr.datevalue) as month, adr.active_drivers , coalesce(ar.AcceptedRides,0) as accepted_rides from active_driver_per_month adr left outer join accepted_ride_per_month ar on ar.requestDate=adr.datevalue order by 1
with recursive dates as( select '2020-01-01' as dates union all select date_add(dates, interval +1 day) as dates from dates where dates < '2020-12-31' ), monthly_driver as ( select month(dates) as month ,count(distinct driver_id, join_date) as dr_cnt from dates m1, (select driver_id, join_date from drivers where join_date <= '2020-12-31') d2 where m1.dates >= d2.join_date group by month(dates) ), monthly_accept as( select month(requested_at) as month, count(*) as ac_cnt from rides r inner join AcceptedRides a on r.ride_id = a.ride_id where requested_at between '2020-01-01' and '2020-12-31' group by 1 order by 1 ) select m.month, ifnull(dr_cnt,0) as active_drivers, ifnull(ac_cnt,0) as accepted_rides from (select distinct month(dates) as month from dates) m left join monthly_accept a on m.month = a.month left join monthly_driver d on m.month = d.month
with recursive dte as (Select 1 as Month union Select month+1 as Month from dte where Month<12),cte as (Select left(join_date,7) as Month,count(driver_id) as Total from Drivers where join_date<='2020-12-31' group by left(join_date,7) ), ete as (select Month,sum(Total) over (order by Month) as Total from cte), fte as (Select right(Month,2) as Month,Total as active_drivers from ete where left(Month,4)='2020'), gte as (Select dte.Month,ifnull(active_drivers,0) as active_drivers from dte left join fte on dte.month=fte.month), hte as (Select Month,max(active_drivers) over (order by Month) as active_drivers from gte), ite as (Select month(requested_At) as Month,count(AcceptedRides.ride_id) as accepted_rides from Rides inner join Acceptedrides on Rides.ride_id=AcceptedRides.ride_id where year(requested_At)='2020' group by month(requested_at)) Select hte.month,active_drivers,ifnull(accepted_rides,0) as accepted_rides from hte left join ite on hte.month=ite.month
with recursive full_month as ( select 1 as month union select month+1 from full_month where month <12) , newdrivers_permonth as ( select (case when year(join_date)=2019 then '1' else month(join_date) end) as month ,count(driver_id) as count_driver_month from Drivers where year(join_date)<=2020 group by 1) ,drivers_fullmonth as ( select month, ifnull(count_driver_month,0) as driver_month from full_month left join newdrivers_permonth using (month) order by 1) ,month_active_drivers as (select month, sum(driver_month) over (order by month) as active_drivers from drivers_fullmonth) , month_accepted_rides as (select month(requested_at) as month, count(*) as accepted_rides from rides join AcceptedRides using(ride_id) where left(requested_at,4) ='2020' group by 1 order by 1) select month ,active_drivers ,ifnull(accepted_rides,0) as accepted_rides from month_active_drivers left join month_accepted_rides using (month) order by month
with recursive idx as ( select 1 as month union select month+1 from idx where month<12 ) select idx.month, count(distinct(drivers.driver_id)) active_drivers, count(distinct(rides.ride_id)) accepted_rides from idx left join drivers on year(drivers.join_date)<=2020 and (idx.month >= month(drivers.join_date) or year(drivers.join_date)<=2019) left join Rides on rides.ride_id in (select ride_id from AcceptedRides) and year(rides.requested_at) = 2020 and month(rides.requested_at) = idx.month group by idx.month
with recursive m as (select 1 as month union all select month + 1 as month from m where month < 12), wau as (select join_date,driver_id from Drivers where year(join_date) <2021 ) select m.month, count(distinct wau.driver_id) as active_drivers, count(distinct a.ride_id) as accepted_rides from m left join wau on (m.month >= month(wau.join_date) and year(join_date) = 2020) or year(wau.join_date) < 2020 left join rides as r on year(r.requested_at) = 2020 and month(r.requested_at) = m.month left join acceptedrides as a on a.ride_id = r.ride_id group by m.month order by m.month asc
with recursive m as (select 1 as month union select month +1 from m where month <12 ), driver as ( select month(join_date) as join_month, count(driver_id) as num_drivers from (select driver_id, (Case when join_Date < '2020-01-01' then '2020-01-01' else join_date end) as join_date from drivers where join_date < '2021-01-01') as t1 group by 1 ), Ac_ride as ( select month(requested_at) as ride_month, count(ride_id) as num_ride from rides where ride_id in (select ride_id from AcceptedRides) and year(requested_at ) = '2020' group by 1 ) select month, ifnull(sum(num_drivers) over(order by month) ,0)as active_drivers, ifnull(num_ride,0) as accepted_rides from m left join driver on driver.join_month = m.month left join Ac_ride on Ac_ride.ride_month = m.month
with recursive m as (select 1 as mth union all select mth+1 mth from m where mth <12), accept_ride as (select month(r.requested_at) as month, count(a.ride_id) as num_rides from Rides r join AcceptedRides a on a.ride_id = r.ride_id and year(r.requested_at) = 2020 group by 1) select distinct m.mth as month, ifnull(max(sub2.cum_driver) over (order by m.mth),0) as active_drivers, ifnull(ac.num_rides,0) as accepted_rides from (select month(sub.join_date) as month, sub.cum_driver from (select d.join_date , count(d.driver_id) over (order by d.join_date) as cum_driver from Drivers d where year(d.join_date) <= 2020) sub where year(sub.join_date) = 2020) sub2 right join m on m.mth = sub2.month left join accept_ride ac on ac.month = m.mth
with recursive m as (select 1 as mth union all select mth+1 mth from m where mth <12), accept_ride as (select month(r.requested_at) as month, count(a.ride_id) as num_rides from Rides r join AcceptedRides a on a.ride_id = r.ride_id and year(r.requested_at) = 2020 group by 1) select m.mth as month, ifnull(max(sub2.cum_driver) over (order by m.mth),0) as active_drivers, ifnull(ac.num_rides,0) as accepted_rides from (select month(sub.join_date) as month, max(sub.cum_driver) as cum_driver from (select d.join_date , count(d.driver_id) over (order by d.join_date) as cum_driver from Drivers d where year(d.join_date) <= 2020) sub where year(sub.join_date) = 2020 group by 1) sub2 right join m on m.mth = sub2.month left join accept_ride ac on ac.month = m.mth
with recursive mons as ( select 1 as month,2020 as year union all select month+1,2020 as year from mons where (month+1) <=12 ), ars as ( select month(r.requested_at) as month, count(ar.ride_id) as accepted_rides from acceptedrides ar join rides r on ar.ride_id = r.ride_id and year(requested_at) = 2020 group by 1 ), jds as ( select month(join_date) as month, year(join_date) as year, count(driver_id) as joined_drivers from drivers group by 1,2 ), jds1 as ( select month,year,joined_drivers from jds union all (select mons.month,mons.year,0 as joined_drivers from mons left join jds on jds.month=mons.month and jds.year=mons.year where jds.month is null ) ), ads as ( select month,year, sum(joined_drivers) over( order by year,month range between unbounded preceding and current row) as active_drivers from jds1 ) select ads.month, coalesce(active_drivers,0) as active_drivers, coalesce(accepted_rides,0) as accepted_rides from ars right join ads on ars.month = ads.month where ads.year = 2020
with recursive mont_cte as ( select 1 as start_mon union all select start_mon+1 as start_mon from mont_cte where start_mon < 12 ) , driver as ( select distinct case when year(join_date) = 2019 then 1 else month(join_date) end driver_month, driver_id from mont_cte mct left join Drivers d on mct.start_mon = case when year(join_date) = 2019 then 1 else month(join_date) end and year(join_date) <= 2020 ) , ride as ( select month(requested_at) as month, a.ride_id from AcceptedRides a join Rides r on r.ride_id = a.ride_id where year(requested_at)=2020 ) select mc.start_mon month, count(distinct driver_id) active_drivers, count(distinct ride_id ) accepted_rides from mont_cte mc left join driver d on mc.start_mon >= d.driver_month left join ride r on mc.start_mon = r.month group by 1 order by 1
with recursive month as ( select 1 as mon union all select mon+1 from month where mon<12 ), driver as ( select jmonth, sum(dcount) as dcount from (select month(join_date) as jmonth, count(driver_id) as dcount from drivers where date_format(join_date,'%Y') = '2020' group by 1 union all select 1 as jmonth,(select count(driver_id) from drivers where join_date<'2020-01-1') as dcount) a group by jmonth ), acceptedr as ( select month(r.requested_at) as rmonth, count(ar.ride_id) as acount from rides r join acceptedrides ar on r.ride_id = ar.ride_id where date_format(r.requested_at,'%Y') = '2020' group by 1 ) select mon as month, sum(dcount) over(order by mon) as active_drivers, ifnull(acount,0) as accepted_rides from month m left join driver d on m.mon = d.jmonth left join acceptedr ar on m.mon = ar.rmonth group by 1 order by 1
with recursive month as ( select 1 as month union all select month+1 as month from month where month<12), driver as (select driver_id, case when join_date<'2020-01-01' then 1 else month(join_date) end as join_month from Drivers where join_date<='2020-12-31' ), activedriver as ( select t2.month, count(distinct t2.driver_id) as active_drivers from( select * from Month m left join ( select join_month, driver_id from driver ) as j on m.Month>=j.join_month ) t2 group by t2.month ), sumride as ( select month.month, ifnull(m.accepted_rides,0) accepted_rides from month month left join ( select month(b.requested_at) as month, count(a.ride_id) accepted_rides from AcceptedRides a inner join Rides b on a.ride_id=b.ride_id where b.requested_at between '2020-01-01' and '2020-12-31' group by month(b.requested_at) order by 1 ) as m on month.month=m.month) select a.*, b.accepted_rides from activedriver a left join sumride b on a.month=b.month order by 1
with recursive month as ( select 1 as month union select month + 1 as month from month where month < 12 ), drivers_modifieddate as ( select case when year(join_date) = 2019 then '1' else month(join_date) end as month from Drivers where year(join_date) <= 2020 ), ride_modifieddate as ( select month(requested_at) as request_month from Rides join AcceptedRides on Rides.ride_id = AcceptedRides.ride_id where year(Rides.requested_at) = 2020 ) select t1.month, t1.active_drivers, count(ride_modifieddate.request_month) as accepted_rides from ( select month.month, count(drivers_modifieddate.month) as active_drivers from month left join drivers_modifieddate on month.month >= drivers_modifieddate.month group by month.month ) t1 left join ride_modifieddate on ride_modifieddate.request_month = t1.month group by t1.month
with recursive month as ( select 1 as month union select month + 1 from month where month < 12), cte as ( select month(r.requested_at) as month, count(distinct ar.ride_id) as accepted_rides from rides r join AcceptedRides ar on r.ride_id = ar.ride_id where year(r.requested_at) = 2020 group by 1 ), current_driver as( select month(join_date) as month, count(driver_id) over(order by join_date) as active_drivers from Drivers where year(join_date) <= 2020 ) select distinct m.month, ifnull(max(cd.active_drivers) over(order by m.month),0) as active_drivers, ifnull(c.accepted_rides, 0) as accepted_rides from month m left join current_driver cd on m.month = cd.month left join cte c on m.month = c.month order by m.month
with recursive month as ( select 1 as month union select month+1 as month from month where month < 12), active as (select count(driver_id) as drivecounts, year(join_date) as year,month(join_date) as month from drivers group by year,month ), activecounts as ( select sum(d1.drivecounts) as activedrivers, m.month as month from month as m, active as d1 where ((d1.year = 2019) OR (d1.year = 2020 and m.month >= d1.month)) group by m.month ) select m.month, ifnull(d.activedrivers,0) as active_drivers, ifnull(tmp2.acceptedcounts,0) as accepted_rides from month as m left join activecounts as d on m.month = d.month left join (select month(requested_at) as request_month, count(distinct ride_id) as acceptedcounts from (select a.*, r.requested_at from acceptedrides as a join rides as r on r.ride_id = a.ride_id where year(r.requested_at) = 2020) as tmp group by month(requested_at) order by month(requested_at)) as tmp2 on tmp2.request_month = m.month order by m.month
with recursive month as ( select 1 as month union select month+1 as month from month where month <12 ), t as ( select m.month,ifnull(max(active_drivers)over(order by month),0) as active_drivers from month m left join( select month(join_date) as month, count(driver_id)over(order by join_date) as active_drivers from drivers where year(join_date)<=2020) a using (month) ) select distinct t.month,t.active_drivers, ifnull(t1.accepted_rides,0) as accepted_rides from t left join (select month(r.requested_at) as month, count(ac.ride_id) as accepted_rides from rides r join acceptedrides ac using (ride_id) where year(requested_at)=2020 group by 1 )t1 using (month)
with recursive month as ( select 1 as month union select month+1 as month from month where month<12), active_driver as ( select month(join_date) as month, count(driver_id) over (order by join_date) as active_drivers from drivers where year(join_date) <= 2020 ), accepted_rides as ( select month(requested_at) as month, count(acceptedrides.ride_id) as accepted_rides from acceptedrides join rides on rides.ride_id = acceptedrides.ride_id where year(requested_at)=2020 group by month(requested_at) ) select distinct m.month, ifnull(max(t1.active_drivers) over (order by m.month),0) as active_drivers, ifnull(t2.accepted_rides, 0) as accepted_rides from month m left join active_driver t1 on m.month = t1.month left join accepted_rides t2 on m.month = t2.month
with recursive month as ( select 1 as n, cast('2020-01-31' as date) as eom_Date union all select n+1, date_add(cast('2020-01-31' as date), interval n month) from month where n<12 ) select o.month, o.active_drivers, coalesce(k.accepted_rides,0) as accepted_rides from (select month(eom_Date) as month,count(join_date) as active_drivers from month left join drivers on join_date <= eom_Date group by eom_Date order by eom_Date)o left join ( select month(requested_at) as month_,count(*) as accepted_rides from rides join AcceptedRides using(ride_id) where year(requested_at) =2020 group by month(requested_at) )k on o.month = k.month_
with recursive month as ( select 1 as num union all select num+1 from month where num+1<=12 ) , temp2 as ( select driver_id, case when year(join_date)<2020 then 1 else month(join_date) end as mnth from Drivers where year(join_date)<=2020 ) , temp3 as ( select num as month, count(driver_id) over(order by num) as active_drivers from month left outer join temp2 on month.num=temp2.mnth ) , temp4 as ( select month(requested_at) as mnth, count(distinct AcceptedRides.ride_id) as accepted_rides from Rides inner join AcceptedRides on Rides.ride_id=AcceptedRides.ride_id where year(requested_at)=2020 group by 1 ) select distinct month, active_drivers, coalesce(accepted_rides,0) as accepted_rides from temp3 left outer join temp4 on temp3.month=temp4.mnth
with recursive month as( select 1 as mnth union select mnth + 1 from month where mnth <12 ), total_active_drivers as( select distinct month(join_date) as month, count(driver_id) over (order by join_date) as active_drivers from drivers where year(join_date) <= 2020), total_accepted_rides as ( select distinct month(requested_at) as month, count(ar.ride_id) over (partition by month(requested_at)) as accepted_rides from acceptedrides ar join rides r on ar.ride_id = r.ride_id where year(requested_at) = 2020 order by month(requested_at)) select distinct m.mnth as month, ifnull((max(ad.active_drivers) over (order by m.mnth)), 0) as active_drivers, ifnull(ar.accepted_rides, 0) as accepted_rides from month m left join total_active_drivers ad on ad.month = mnth left join total_accepted_rides ar on m.mnth = ar.month
with recursive month(m) as( select 1 union select m+1 from month where m<12 ), driver_month as ( select driver_id, extract(month from join_date) mon, extract(year from join_date) yea, join_date from Drivers where year(join_date)<2021 ), driver as( select mon, active from( select join_date,mon,yea, count(driver_id)over(order by yea,mon) active from driver_month) d where yea=2020 ), ride_month as( select ride_id, month(requested_at) mon from Rides where year(requested_at)=2020 and ride_id in ( select ride_id from AcceptedRides ) ), ride as( select mon, count(ride_id) active from ride_month group by mon ) select distinct month.m month, ifnull(max(driver.active)over(order by month.m),0) active_drivers, ifnull(ride.active,0) accepted_rides from month left join driver On month.m=driver.mon left join ride On month.m=ride.mon
with recursive month_2020 as ( select 1 as month union all select month + 1 from month_2020 where month < 12 ) select m.month, count(distinct driver_id) as active_drivers, count(distinct ride_id) as accepted_rides from month_2020 as m left join (select driver_id, (case when year(join_date)=2019 then 1 else month(join_date) end) `month` from Drivers where year(join_date)<=2020) d on d.month <= m.month left join ( select r.ride_id, month(requested_at) `month` from Rides r join AcceptedRides a on r.ride_id=a.ride_id where year(requested_at) = 2020 ) accepts on m.month = accepts.month group by m.month
with recursive month_2020 as ( select 1 as month union all select month+1 from month_2020 where month < 12 ), driver as ( select driver_id, case when year(join_date) <= 2019 then 1 else month(join_date) end as month from Drivers where join_date <= '2020-12-31' ), act_ride as ( select a.ride_id, month(r.requested_at) as month from rides r join AcceptedRides a on r.ride_id = a.ride_id and r.requested_at between '2020-01-01' and '2020-12-31' ) select m.month, count(distinct d.driver_id) as active_drivers, count(distinct a.ride_id) as accepted_rides from month_2020 m left join driver d on m.month >= d.month left join act_ride a on m.month = a.month group by m.month
with recursive month_2020 as (select 1 as month UNION select month+1 as month from month_2020 where month<12) ,cte as (select distinct m.month, count(temp.month) over(Order by month) as active_drivers from month_2020 m left join (select CASE WHEN Extract(year from join_date) <2020 THEN 1 ELSE Extract(MONTH from join_date) END as month from Drivers where join_date <= '2020-12-31') temp ON m.month = temp.month), cte2 as (select Extract(MONTH from requested_at) as month, count(a.ride_id) as accepted_rides from Rides r join AcceptedRides a ON r.ride_id = a.ride_id where Extract(year from requested_at) = 2020 group by Extract(MONTH from requested_at)) select c1.month, active_drivers, IFNULL(accepted_rides, 0) as accepted_rides from cte c1 left join cte2 c2 ON c1.month = c2.month order by c1.month
with recursive month_2020 as (select 1 as month union all select month+1 from month_2020 where month < 12 ), active_drivers as (select driver_id, (case when year(join_date) < 2020 then 1 else month(join_date) end) as month from drivers where join_date <= '2020-12-31' ), accepts as (select a.ride_id, month(requested_at) as month from acceptedrides a join rides r on a.ride_id = r.ride_id where requested_at >= '2020-01-01' and requested_at <= '2020-12-31' ) select m.month, count(distinct driver_id) as active_drivers, count(distinct ride_id) as accepted_rides from month_2020 m left join active_drivers d on m.month >= d.month left join accepts a on m.month = a.month group by m.month
with recursive month_count as ( select 1 month union all select month+1 month from month_count where month<12 ) select m.month, count(distinct d.driver_id) active_drivers, count(distinct ar.ride_id) accepted_rides from month_count m left join Drivers d on (m.month >= month(d.join_date) and year(d.join_date) =2020) or year(d.join_date)<2020 left join Rides r on m.month = month(r.requested_at) and year(r.requested_at) =2020 left join AcceptedRides ar on r.ride_id = ar.ride_id group by month
with recursive month_sequence as ( select 1 as inc UNION select inc + 1 from month_sequence where inc <= 11 ), months_of_2020 as ( select date_format('2019-12-01' + interval inc month, '%Y-%m-01') as `year_month` from month_sequence ), driver_per_month as ( select date_format(join_date, '%Y-%m-01') as `year_month`, COUNT(1) as driver_num from drivers GROUP BY 1 ), active_drivers as ( select `year_month`, SUM(driver_num) over (order by `year_month`) as active_drivers from ( SELECT `year_month`, driver_num FROM driver_per_month UNION SELECT `year_month`, 0 as driver_num FROM months_of_2020 where `year_month` not in ( select `year_month` FROM driver_per_month ) ) as active_drivers_2020 ), accepted_rides as ( select month(requested_at) as month, count(1) as accepted_rides from rides r join acceptedRides a on r.ride_id = a.ride_id where requested_at between '2020-01-01' and '2020-12-31' group by 1 ) select month(d.year_month) as month, d.active_drivers, ifnull(r.accepted_rides, 0) as accepted_rides from active_drivers d left join accepted_rides r on month(d.year_month) = r.month where d.year_month between '2020-01-01' and '2020-12-31'
with recursive month_tab as( select 1 as month, 0 as active_drivers union select month+1 as month, 0 from month_tab where month < 12 ), tab_driver as ( select cast(substr(yymm, 6,2) as signed) as month, max(active_drivers) as active_drivers from ( SELECT DATE_FORMAT(join_date, '%Y-%m') as yymm, driver_id, count(driver_id) over (order by join_date) as active_drivers from drivers ) a where a.yymm > '2019-12' and a.yymm < '2021-01' group by yymm), tab_ride as ( select cast(date_format(requested_at, '%m') as signed) as month, date_format(requested_at, '%Y-%m') as yymm, count(rides.ride_id) as accepted_rides from acceptedrides join rides on acceptedrides.ride_id = rides.ride_id group by date_format(requested_at, '%Y-%m') having yymm > '2019-12' and yymm < '2021-01' ), tab4 as ( select month_tab.month, month_tab.active_drivers + ifnull(tab_driver.active_drivers, 0) as active_drivers, ifnull(tab_ride.accepted_rides,0) as accepted_rides from month_tab left join tab_driver on month_tab.month = tab_driver.month left join tab_ride on month_tab.month = tab_ride.month) select tab4.month, max(tab4.active_drivers) over (order by tab4.month) as active_drivers, accepted_rides from tab4
with recursive month_table as ( select 1 as month union all select month+1 from month_table where month < 12) select md.month, md.active_drivers, mr.accepted_rides from( select m.month, count(driver_id) as active_drivers from month_table as m left join ( select driver_id, case when year(join_date) = 2019 then 1 else month(join_date) end as "month" from Drivers where year(join_date) < 2021 ) as d on d.month <= m.month group by m.month ) as md join( select m.month, count(r.ride_id) as accepted_rides from month_table as m left join ( select r.ride_id, month(requested_at) as "month" from Rides as r join AcceptedRides as ar on r.ride_id = ar.ride_id where year(r.requested_at) = 2020 ) as r on m.month = r.month group by m.month ) as mr on md.month = mr.month
with recursive monthcount as ( select 1 month union all select month+1 month from monthcount where month < 12 ) select month, count(distinct d.driver_id) active_drivers, count(distinct ar.ride_id) accepted_rides from monthcount m left join drivers d on (m.month >= month(d.join_date) and year(d.join_date) = 2020) or year(d.join_date) < 2020 left join rides r on m.month = month(r.requested_at) and year(r.requested_at) = 2020 left join acceptedrides ar on r.ride_id = ar.ride_id group by month
with recursive monthcount as ( select 1 month union all select month+1 month from monthcount where month < 12) select month, count(distinct d.driver_id) active_drivers, count(distinct ar.ride_id) accepted_rides from monthcount m left join drivers d on (m.month >= month(d.join_date) and year(d.join_date) = 2020) or year(d.join_date) < 2020 left join rides r on m.month = month(r.requested_at) and year(r.requested_at) = 2020 left join acceptedrides ar on r.ride_id = ar.ride_id group by month
with recursive monthcount as( select 1 month union all select month+1 month from monthcount where month<12) select month, count(distinct d.driver_id) as active_drivers, count(distinct ar.ride_id) as accepted_rides from monthcount m left join drivers d on ( m.month>=month(d.join_date) and year(d.join_date)=2020) or year(d.join_date)<2020 left join rides r on m.month=month(r.requested_at) and year(r.requested_at)=2020 left join acceptedrides ar on r.ride_id=ar.ride_id group by month
with recursive monthdim as ( select 1 as m union select m+1 from monthdim where m<12 ) , activeDr as ( select driver_id, join_date from drivers union all select driver_id, adddate(join_date, interval 1 month) from activeDr where join_date<str_to_date('20201201','%Y%m%d') ) select md.m as month, coalesce(ad.active_drivers,0) active_drivers, coalesce(ar.accepted_rides,0) accepted_rides from monthdim md left outer join ( select month(r.requested_at) requestedmonth, count(distinct ar.ride_id ) accepted_rides from acceptedrides ar inner join rides r on r.ride_id=ar.ride_id where year(r.requested_at)=2020 group by month(r.requested_at) )ar on md.m=ar.requestedmonth left outer join ( select month(join_date) as joinMonth, count(distinct driver_id) active_drivers from activeDr where year(join_date)=2020 group by month(join_date) )ad on joinMonth=md.m
with recursive monthid as ( select 1 as m union select m+1 as m from monthid where m<12), t as (select driver_id, join_date from Drivers union all select driver_id,adddate(join_date,interval 1 month) from t where join_date<str_to_date('20201201',"%Y%m%d")), t2 as (select date_format(join_date,"%Y-%m-01") date ,count(distinct driver_id) counts from t where date_format(join_date,"%Y-%m")<="2020-12" and date_format(join_date,"%Y-%m")>="2020-01" group by 1), t3 as (select month(date) months,counts from t2 group by 1), t4 as (select driver_id,requested_at from Rides join AcceptedRides using(ride_id)), t5 as (select month(requested_at) months,count(driver_id) counts from t4 where date_format(requested_at,"%Y-%m")<="2020-12" and date_format(requested_at,"%Y-%m")>="2020-01" group by 1) select m as month,ifnull(t3.counts,0) as active_drivers, ifnull(t5.counts,0) as accepted_rides from monthid left join t3 on m=t3.months left join t5 on m=t5.months group by 1 order by 1
with recursive months (month) as (select 1 union select month + 1 from months where month < 12), cte0 as (select distinct * from drivers order by join_date asc), cte1 as (select join_date, count(driver_id) over (rows between unbounded preceding and current row) as active_drivers from cte0), cte2 as (select month(join_date) as month, active_drivers from cte1 where join_date between '2020-01-01' and '2020-12-31'), cte3 as (select a.month, (case when b.active_drivers is null and a.month = 1 then 0 when b.active_drivers is null and a.month <> 1 then max(b.active_drivers) over (rows between unbounded preceding and current row) else b.active_drivers end) as active_drivers from months as a left join cte2 as b on a.month = b.month), cte00 as (select distinct * from rides order by requested_at asc), cte000 as (select distinct * from acceptedrides), cte4 as (select a.ride_id, a.requested_at from cte00 as a join cte000 as b on a.ride_id = b.ride_id where a.requested_at between '2020-01-01' and '2020-12-31'), cte5 as (select month(requested_at) as month, count(ride_id) as accepted_rides from cte4 group by month), cte6 as (select a.month, ifnull(b.accepted_rides, 0) as accepted_rides from months as a left join cte5 as b on a.month = b.month) select a.month, max(a.active_drivers) as active_drivers, b.accepted_rides from cte3 as a join cte6 as b on a.month = b.month group by a.month
with recursive months (month) as (select 1 union select month + 1 from months where month < 12), cte1 as (select join_date, count(driver_id) over (rows between unbounded preceding and current row) as active_drivers from (select distinct * from drivers order by join_date asc) as temp), cte2 as (select month(join_date) as month, active_drivers from cte1 where join_date between '2020-01-01' and '2020-12-31'), cte3 as (select a.month, (case when b.active_drivers is null and a.month = 1 then 0 when b.active_drivers is null and a.month <> 1 then max(b.active_drivers) over (rows between unbounded preceding and current row) else b.active_drivers end) as active_drivers from months as a left join cte2 as b on a.month = b.month), cte4 as (select a.ride_id, a.requested_at from rides as a join acceptedrides as b on a.ride_id = b.ride_id where a.requested_at between '2020-01-01' and '2020-12-31'), cte5 as (select month(requested_at) as month, count(ride_id) as accepted_rides from cte4 group by month), cte6 as (select a.month, ifnull(b.accepted_rides, 0) as accepted_rides from months as a left join cte5 as b on a.month = b.month) select a.month, max(a.active_drivers) as active_drivers, b.accepted_rides from cte3 as a join cte6 as b on a.month = b.month group by a.month
with recursive months (n) as (select 1 union all select 1+n from months where n<12), driver_rides as (select ar.driver_id, month(r.requested_at) as ride_month, count(r.ride_id) as cnt from Rides r, AcceptedRides ar where year(r.requested_at) = 2020 and ar.ride_id = r.ride_id group by driver_id, ride_month ) select n as month, count(d.driver_id) as active_drivers, ifnull(sum(dr.cnt),0) as accepted_rides from months left join Drivers d on year(join_date)=2020 and month(join_date)<=n or year(join_date)<2020 left join driver_rides dr on d.driver_id = dr.driver_id and n = dr.ride_month group by month order by month asc
with recursive months as ( select 1 as month UNION ALL Select month+1 as month From months where month<12 ), t1 as ( select month(join_date) as month, count(driver_id) over (order by join_date) as active_drivers from drivers where year(join_date) <= 2020 ), t2 as ( select month(requested_at) as month, count(ride_id) as accepted_rides from rides r where ride_id in (select ride_id from AcceptedRides) and year(requested_at) = 2020 group by month ) select distinct m.month, ifnull(max(t1.active_drivers) over (order by m.month),0) as active_drivers, ifnull(t2.accepted_rides, 0) as accepted_rides from months m left join t1 on m.month = t1.month left join t2 on m.month = t2.month
with recursive months as ( select 1 as month union all select (month + 1) as month from months where month < 12), mau as ( select month, sum(monthly_new_driver) over(order by month) as mau from (select a.month, coalesce(monthly_new_driver, 0) as monthly_new_driver from months a left join (select case when year(join_date) < 2020 then 1 else month(join_date) end as month, count(driver_id) as monthly_new_driver from Drivers where join_date < '2021-01-01' group by 1) b on a.month = b.month order by 1) c ), accept as ( select a.month, coalesce(accept_driver, 0) as accept_driver from months a left join (select month(requested_at) as month, count(*) as accept_driver from Rides a join AcceptedRides b on a.ride_id = b.ride_id where requested_at between '2020-01-01' and '2020-12-31' group by 1) c on a.month = c.month ) select a.month, mau as active_drivers, accept_driver as accepted_rides from accept a join mau b on a.month = b.month
with recursive months as ( select 1 as month union all select month + 1 as month from months where month < 12 ), driver as (select cast(substr(d2.join_month, 6, 2) AS UNSIGNED) as month, sum(d1.driver_count) as active_drivers from (select date_format(join_date, "%Y-%m") as join_month, count(*) as driver_count from Drivers group by date_format(join_date, "%Y-%m")) d1, (select date_format(join_date, "%Y-%m") as join_month, count(*) as driver_count from Drivers group by date_format(join_date, "%Y-%m")) d2 where d1.join_month <= d2.join_month and d2.join_month between "2020-01" and "2020-12" group by d2.join_month order by d2.join_month), ride as (select month(requested_at) as month, count(*) as accepted_rides from AcceptedRides a left join Rides r on a.ride_id = r.ride_id where requested_at between "2020-01-01" and "2020-12-31" group by date_format(requested_at, "%Y-%m")) select t.*, ifnull(r.accepted_rides, 0) as accepted_rides from (select m.month, ifnull(d.active_drivers, 0) as active_drivers from months m left join driver d on d.month <= m.month group by m.month) t left join ride r on t.month = r.month order by t.month
with recursive months as ( select 1 as month union all select month + 1 from months where month < 12 ), acctive_drivers as ( select month, sum(driver_num) over (order by month asc) as active_driver_num from ( select m.*, coalesce(d.driver_num,0) as driver_num from months as m left join (select case when year(join_date)=2020 then month(join_date) else 1 end as month, count(*) as driver_num from Drivers where join_date< date('2021-01-01') group by 1) as d on m.month = d.month ) as a ), accepted_rides as ( select m.month, coalesce(ar.accepted_ride,0) as accepted_ride from months as m left join ( select month(requested_at) as month, count(*) as accepted_ride from AcceptedRides as ar inner join Rides as r on ar.ride_id = r.ride_id where year(r.requested_at)=2020 group by month ) as ar on m.month = ar.month ) select ad.month,ad.active_driver_num as active_drivers,ar.accepted_ride as accepted_rides from acctive_drivers as ad join accepted_rides as ar on ad.month = ar.month
with recursive months as ( select 1 as month union all select month + 1 from months where month < 12 ), active_rides as ( select month(r.requested_at) as month, count(distinct ar.ride_id) as accepted_rides from rides r join AcceptedRides ar on r.ride_id = ar.ride_id where year(r.requested_at) = 2020 group by 1 ), active_users as ( select case when year(join_date) = 2019 then 1 else month(join_date) end as month, count(distinct driver_id) as counts from drivers where year(join_date) <= 2020 group by 1 ) select distinct m.month, ifnull(sum(counts) over (order by m.month), 0) as active_drivers, ifnull(ar.accepted_rides, 0) as accepted_rides from months m left join active_rides ar on m.month = ar.month left join active_users au on m.month = au.month order by m.month
with recursive months as ( select 1 as month union all select month+1 from months where month<12 ) select t.month, (select count(distinct driver_id) from drivers where join_date < '2021-01-01' and (join_date < '2020-01-01' or month(join_date) <= t.month)) active_drivers, (select count(distinct a.ride_id) from rides a join acceptedrides b on a.ride_id = b.ride_id and a.requested_at between '2020-01-01' and '2020-12-31' and month(a.requested_at) = t.month) accepted_rides from months t
with recursive months as ( select 1 as month union all select month+1 from months where month<12 ), t1 as ( select (case when year(join_date)<2020 then 1 else month(join_date) end) as month,driver_id from Drivers where year(join_date)<=2020 ), t2 as ( select month(r.requested_at) as month,a.ride_id as accepted_rides from rides as r join acceptedrides as a on r.ride_id=a.ride_id where year(r.requested_at)=2020 ) select m.month,count(distinct t1.driver_id) as active_drivers,count(distinct accepted_rides) as accepted_rides from months as m left join t1 on t1.month<=m.month left join t2 on t2.month=m.month group by m.month order by m.month
with recursive months as ( select 1 as month union select month + 1 as month from months where month < 12 ) select t1.month, count(distinct t2.driver_id) as active_drivers, count(distinct t3.ride_id) as accepted_rides from months t1 left outer join ( select driver_id, case when year(join_date) = 2019 then 1 else month(join_date) end as month from drivers where year(join_date) <= 2020 ) t2 on t2.month <= t1.month left outer join ( select ar.ride_id, month(r.requested_at) as month from acceptedrides ar join rides r on r.ride_id = ar.ride_id where year(r.requested_at) = 2020 ) t3 on t3.month = t1.month group by t1.month order by t1.month asc
with recursive months as ( select 1 as month union select month + 1 from months where month < 12 ) select m.month as month, count(distinct d.driver_id) as active_drivers, count(distinct a.ride_id) as accepted_rides from months m left join drivers d on last_day(str_to_date(concat(2020, m.month), '%Y%m')) >= d.join_date left join rides r on m.month = month(r.requested_at) and year(r.requested_at) = 2020 left join acceptedrides a on r.ride_id = a.ride_id group by 1 order by 1
with recursive months as ( select 1 month union select month + 1 from months where month < 12) , tmpp as ( select tmp.ride_id, if (YEAR(requested_at) != 2020, -1, MONTH(requested_at)) as join_month from ( select ride_id from AcceptedRides inner join Drivers on AcceptedRides.driver_id = Drivers.driver_id) tmp left join Rides on tmp.ride_id = Rides.ride_id ) select a.month, sum(month_drivers) OVER (order by month asc) as active_drivers, ifnull(b.accepted_rides, 0) as accepted_rides from ( select months.month, ifnull(month_drivers, 0) as month_drivers from months left join (select count(driver_id) as month_drivers, if (YEAR(join_date) < 2020, 1, MONTH(join_date)) as join_month from Drivers where YEAR(join_date) < 2021 group by join_month) tmp on months.month = tmp.join_month) a left join (select count(ride_id) as accepted_rides, join_month as month from tmpp group by month) b on a.month = b.month
with recursive months as (select 1 as month union all select month + 1 as month from months where month < 12), rides_updated as (select ride_id, month(requested_at) as month from Rides where year(requested_at) = 2020 order by 2), rides_rideId as (select m.month, ifnull(real_drive.ride_id,0) as ride_id from months as m left join ( select ride_id, month from rides_updated where ride_id in (select ride_id from AcceptedRides)) as real_drive on m.month = real_drive.month), accepted_rides as (select month, case when ride_id = 0 then 0 else count(*) end as accepted_rides from rides_rideId group by month order by month), drivers_updated as (select driver_id, case when year(join_date) < 2020 then 1 else month(join_date) end as month from Drivers where year(join_date) <= 2020 order by 2), drivers_counted as (select m.month, ifnull(nd.number_driver, 0) as driver_number from months as m left join ( select month, count(*) as number_driver from drivers_updated group by month) as nd on m.month = nd.month), active_drive as (select month, sum(driver_number) over (order by month) as active_drivers from drivers_counted) select ad.month, ar.active_drivers, ad.accepted_rides from accepted_rides as ad join active_drive as ar on ad.month = ar.month
with recursive months as (select 1 as month union all select month + 1 as month from months where month < 12), t1 as (select month(join_date) as month, count(driver_id) over (order by join_date) as active_drivers from Drivers where year(join_date)<= 2020), t2 as (select month(requested_at) as month, count(ride_id) as accepted_rides from Rides where ride_id in (select ride_id from AcceptedRides) and year(requested_at) = 2020 group by month ) select distinct M.month, ifnull(max(t1.active_drivers) over (order by m.month), 0) as active_drivers, ifnull(accepted_rides,0) as accepted_rides from Months M left join t1 on M.month=t1.month left join t2 on M.month = t2.month
with recursive months as (select 1 as month union all select month + 1 from months where month < 12 ), driver_count as ( select month(join_date) as month, count(driver_id) over (order by join_date) as active_drivers from drivers where year(join_date) <= 2020 ), acc_count as ( select month(requested_at) as month, count(ride_id) as accepted_rides from rides r where ride_id in (select ride_id from AcceptedRides) and year(requested_at) = 2020 group by month ) select distinct m.month, ifnull(max(d.active_drivers) over (order by m.month),0) as active_drivers, ifnull(a.accepted_rides, 0) as accepted_rides from months m left join driver_count d on m.month = d.month left join acc_count a on m.month = a.month
with recursive months as (select 1 as month union all select month + 1 from months where month < 12 ), t1 as ( select month(join_date) as month, count(driver_id) over (order by join_date) as active_drivers from drivers where year(join_date) <= 2020 ), t2 as ( select month(requested_at) as month, count(ride_id) as accepted_rides from rides r where ride_id in (select ride_id from AcceptedRides) and year(requested_at) = 2020 group by month ) select distinct m.month, ifnull(max(t1.active_drivers) over (order by m.month),0) as active_drivers, ifnull(t2.accepted_rides, 0) as accepted_rides from months m left join t1 on m.month = t1.month left join t2 on m.month = t2.month
with recursive months as (select 1 as month union all select month +1 as month from months where month < 12), all_yr_m as (select date_format(str_to_date(concat(yt.join_year, '-', a.month), '%Y-%m'),'%Y-%m') as yr_month from (select distinct year(join_date) join_year from Drivers where year(join_date) <= 2020) yt cross join months a where date_format(str_to_date(concat(yt.join_year, '-', a.month), '%Y-%m'),'%Y-%m') >= (select min(date_format(join_date, '%Y-%m')) from Drivers) and yt.join_year <= 2020), num_drivers as (select c.yr_month, sum(ifnull(count(distinct d.driver_id),0)) over(order by c.yr_month) active_drivers from (select date_format(join_date, '%Y-%m') yr_month, driver_id from Drivers) d right join all_yr_m as c using(yr_month) group by 1), acc_rides as (select a.month, n.ride_id from months a left join (select x.ride_id, month(y.requested_at) as req_month from AcceptedRides x left join Rides y using (ride_id) where year(y.requested_at) = 2020) n on a.month = n.req_month ) select ar.month, ifnull(ad.active_drivers,0) as active_drivers, ar.accepted_rides from (select month(str_to_date(yr_month, '%Y-%m')) as join_month, active_drivers from num_drivers where year(str_to_date(yr_month, '%Y-%m')) = 2020) as ad right join (select month, count(distinct ride_id) as accepted_rides from acc_rides group by month) ar on ad.join_month = ar.month
with recursive months as (select 1 as month union all select month +1 as month from months where month < 12), driver as (select cast(substr(d2.join_month, 6, 2) AS UNSIGNED) as month, sum(d1.driver_count) as active_drivers from (select date_format(join_date, "%Y-%m") as join_month, count(*) as driver_count from Drivers group by date_format(join_date, "%Y-%m")) d1, (select date_format(join_date, "%Y-%m") as join_month, count(*) as driver_count from Drivers group by date_format(join_date, "%Y-%m")) d2 where d1.join_month <= d2.join_month and d2.join_month between "2020-01" and "2020-12" group by d2.join_month order by d2.join_month), ride as (select month(requested_at) as month, count(*) as accepted_rides from AcceptedRides a left join Rides r on a.ride_id = r.ride_id where requested_at between "2020-01-01" and "2020-12-31" group by date_format(requested_at, "%Y-%m")) select t.*, ifnull(r.accepted_rides, 0) as accepted_rides from (select m.month, ifnull(d.active_drivers, 0) as active_drivers from months m left join driver d on d.month <= m.month group by m.month) t left join ride r on t.month = r.month order by t.month
with recursive months as (select 1 as month union all select month+1 from months where month<12) select t.month, (select count(distinct driver_id) from drivers where join_date < '2021-01-01' and (join_date < '2020-01-01' or month(join_date) <= t.month)) active_drivers, (select count(distinct a.ride_id) from rides a join acceptedrides b on a.ride_id = b.ride_id and year(a.requested_at) = 2020 and month(a.requested_at) = t.month) accepted_rides from months t
with recursive months as( select 1 as month union all select month+1 from months where month <12 ) select m.month , count(distinct d.driver_id) as active_drivers , count(distinct r.ride_id) as accepted_rides from months as m left join drivers as d on last_day(STR_TO_DATE(CONCAT(2020, m.month), "%Y%m")) >= d.join_date left join rides as r on left(r.requested_at, 4) = 2020 and m.month = date_format(r.requested_at, "%c") and ride_id in (select ride_id from acceptedrides) group by 1 order by 1
with recursive months as( select 1 as month union all select month+1 from months where month <12) select m.month, count(distinct d.driver_id) as "active_drivers", ifnull(count(distinct r.ride_id),0) as "accepted_rides" from months m left join Drivers d on last_day(str_to_date(concat(2020,m.month),"%Y%m")) >= d.join_date left join Rides r on m.month = month(r.requested_at) and r.ride_id in (select ride_id from AcceptedRides) and year(r.requested_at) = 2020 group by m.month
with recursive months as( select 1 as month union all select month+1 from months where month <12), acceptedmonth as ( select month(r.requested_at) as "amonth", count(ar.ride_id) as "accepted_rides" from Rides r, AcceptedRides ar where r.ride_id = ar.ride_id and year(r.requested_at) = 2020 group by year(r.requested_at), month(r.requested_at)) select m.month, count(distinct d.driver_id) as "active_drivers", ifnull(a.accepted_rides,0) as "accepted_rides" from months m left join Drivers d on last_day(str_to_date(concat(2020,m.month),"%Y%m")) >= d.join_date left join acceptedmonth a on m.month = a.amonth group by m.month
with recursive months(month) as ( select 1 union all select month + 1 from months where month < 12 ), c2 as( select month(join_date) month, count(driver_id) over (order by join_date) cnt from drivers where year(join_date) <= 2020 ), c3 as( select month(requested_at) m, count(r.ride_id) cnt2 from rides r join AcceptedRides a on r.ride_id = a.ride_id where year(requested_at) = 2020 group by m ) select distinct m.month, ifnull(max(cnt) over (order by month),0) active_drivers, ifnull(cnt2,0) accepted_rides from months m left join c2 on m.month = c2.month left join c3 on m.month = c3.m
with recursive months(month) as ( select 1 union all select month + 1 from months where month < 12 ), t1 as ( select month(join_date) as month, count(driver_id) over (order by join_date) as active_drivers from drivers where year(join_date) <= 2020 ), t2 as ( select month(requested_at) as month, count(ride_id) as accepted_rides from rides r where ride_id in (select ride_id from AcceptedRides) and year(requested_at) = 2020 group by month ) select distinct m.month, ifnull(max(t1.active_drivers) over (order by m.month),0) as active_drivers, ifnull(t2.accepted_rides, 0) as accepted_rides from months m left join t1 on m.month = t1.month left join t2 on m.month = t2.month
with recursive months(month) as (select 1 union all select month+1 from months where month < 12) , active_driver as (select month(join_date) as month, count(driver_id) over (order by join_date) as driver_cnt from Drivers where year(join_date)<=2020) , accepted_rides as (select month(requested_at) as month, count(distinct ride_id) as ride_cnt from Rides join AcceptedRides using(ride_id) where year(requested_at) = 2020 group by month(requested_at) ) select distinct months.month, ifnull(max(driver_cnt) over (order by months.month),0) as active_drivers, ifnull(ride_cnt,0) as accepted_rides from months left join active_driver on months.month = active_driver.month left join accepted_rides on months.month = accepted_rides.month order by months.month
with recursive months_in_year as ( select 1 as month_num union select month_num+1 from months_in_year where month_num < 12 ) select month_num as month, sum(active_drivers) over(order by month_num) as active_drivers, ifnull(accepted_rides,0) as accepted_rides from( select month_num, ifnull(active_drivers,0) as active_drivers from months_in_year left join( select monthly, case when monthly=1 then active_drivers+(select count(driver_id) from Drivers where YEAR(join_date)<2020) else active_drivers end as active_drivers from( select MONTH(join_date) as monthly, count(driver_id) as active_drivers from Drivers where YEAR(join_date)=2020 group by monthly ) active_driver_subset ) active_drivers on month_num = monthly order by month_num ) active_drivers_cascaded left join( select MONTH(requested_at) as monthly_rides, count(AR.ride_id) as accepted_rides from Rides R join AcceptedRides AR on R.ride_id = AR.ride_id where YEAR(requested_at) = 2020 group by monthly_rides ) accepted_rides_data on month_num = monthly_rides order by month_num
with recursive months_in_year as ( select 1 as month_num union select month_num+1 from months_in_year where month_num < 12 ) select month_num as month, sum(active_drivers) over(order by month_num) as active_drivers, ifnull(count(ride_id),0) as accepted_rides from( select month_num, ifnull(active_drivers,0) as active_drivers from months_in_year left join( select monthly, case when monthly=1 then active_drivers+(select count(driver_id) from Drivers where YEAR(join_date)<2020) else active_drivers end as active_drivers from( select MONTH(join_date) as monthly, count(driver_id) as active_drivers from Drivers where YEAR(join_date)=2020 group by monthly ) active_driver_subset ) active_drivers on month_num = monthly ) active_drivers_cascaded left join( select MONTH(requested_at) as monthly_rides, AR.ride_id as ride_id from Rides R join AcceptedRides AR on R.ride_id = AR.ride_id where YEAR(requested_at) = 2020 ) accepted_rides_data on month_num = monthly_rides group by month_num order by month_num
with recursive months_in_year as ( select 1 as month_num union select month_num+1 from months_in_year where month_num < 12 ) select month_num as month, sum(active_drivers) over(order by month_num) as active_drivers, ifnull(count(ride_id),0) as accepted_rides from( select month_num, ifnull(active_drivers,0) as active_drivers from months_in_year left join( select monthly, case when monthly=1 then active_drivers+(select count(driver_id) from Drivers where YEAR(join_date)<2020) else active_drivers end as active_drivers from( select MONTH(join_date) as monthly, count(driver_id) as active_drivers from Drivers where YEAR(join_date)=2020 group by monthly ) active_driver_subset ) active_drivers on month_num = monthly order by month_num ) active_drivers_cascaded left join( select MONTH(requested_at) as monthly_rides, AR.ride_id as ride_id from Rides R join AcceptedRides AR on R.ride_id = AR.ride_id where YEAR(requested_at) = 2020 ) accepted_rides_data on month_num = monthly_rides group by month_num order by month_num
with recursive monthtab as ( select 1 as month union select month + 1 as month from monthtab where month < 12 ) select monthtab.month, count(distinct driver_id) active_drivers, count(distinct rides.ride_id) accepted_rides from monthtab left join ( select driver_id, (case when year(join_date)=2019 then '1' else month(join_date) end) `month` from Drivers where year(join_date)<=2020 ) d on d.month <= monthtab.month left join ( select month(requested_at) as `month`, a.ride_id from AcceptedRides a join Rides r on r.ride_id = a.ride_id where year(requested_at)=2020 ) rides on monthtab.month = rides.month group by monthtab.month order by monthtab.month
with recursive monthtable as( select 1 as month, 2020 as year union all select month+1, year from monthtable where month<12 ),ridetable as( select month(requested_at) as month, count(ride_id) as numrides from acceptedrides join rides using (ride_id) where year(requested_at)=2020 group by month(requested_at) ) select distinct m.month, ifnull(max(d.active_drivers)over(order by m.month),0) as active_drivers, ifnull(r.numrides, 0) as accepted_rides from monthtable as m left JOIN( select year(join_date)*12+month(join_date), month(join_date) as month,year(join_date) as year, count(driver_id)over(order by year(join_date)*12+month(join_date)) as active_drivers from drivers where year(join_date)<=2020 ) as d on m.month=d.month and m.year=d.year left join ridetable as r on m.month=r.month order by m.month
with recursive monthtbl as (select 1 as month union all select month + 1 from monthtbl where month < 12), driver as (select join_month as mon, count(driver_id) as num_driver from (select case when year(join_date)<2020 then 1 else month(join_date) end as join_month, driver_id from drivers where year(join_date) <= 2020)temp group by mon), ride as (select month(requested_at) as ridemon, count(a.ride_id) as num_accp from rides r join AcceptedRides a on r.ride_id = a.ride_id where year(requested_at) = '2020' group by ridemon) select month, sum(num_driver) over(order by month asc) as active_drivers, accepted_rides from (select month, ifnull(num_driver, 0) as num_driver, ifnull(num_accp, 0) as accepted_rides from monthtbl m left join driver d on m.month = d.mon left join ride r on m.month = r.ridemon) t1 order by month
with recursive r as ( select 1 as month union select 1+ month from r where month < 12), a as ( select month(join_date) month, count(*) over (order by join_date) active_drivers from drivers where year(join_date) <= '2020' ), b as ( select month(requested_at) month, count(ride_id) accepted_rides from rides join acceptedrides using (ride_id) where year(requested_at) ='2020' group by 1 ) select distinct r.month, ifnull(max(active_drivers) over (order by month),0) active_drivers, ifnull(accepted_rides,0) accepted_rides from r left join a using (month) left join b using (month)
with recursive r as (select 1 as month union select month+1 from r where month<12), b as (select month(join_date) as month, active_drivers from (select join_date, count(driver_id) over (order by join_date) as active_drivers from drivers where join_date<='2020-12-31') a where year(join_date)=2020), c as (select month(requested_at) as month, count(a.ride_id) as accepted_rides from acceptedrides a left join rides r on a.ride_id=r.ride_id where year(requested_at)=2020 group by month(requested_at)) select r.month, ifnull(max(b.active_drivers) over (order by r.month),0) as active_drivers, ifnull(c.accepted_rides,0) as accepted_rides from r left join b on r.month=b.month left join c on r.month=c.month group by r.month
with recursive r_month as ( select 1 as month union all select month+1 from r_month where month < 12 ), available_drivers as ( select b.month, COALESCE(sum(a.available_drivers) over (order by b.month), 0) as active_drivers from ( select case when join_date < '2020-01-01' then 1 else CAST(date_format(join_date, '%m') AS UNSIGNED) end as month, count(distinct driver_id) as available_drivers from drivers where join_date < '2021-01-01' group by 1 ) a right join r_month b using (month) ), accepted_rides as ( select CAST(date_format(r.requested_at, '%m') AS UNSIGNED) as month, count(ar.ride_id) as accepted_rides from rides r inner join acceptedrides ar using (ride_id) where r.requested_at between '2020-01-01' and '2020-12-31' group by 1 ) select ad.*, COALESCE(ar.accepted_rides, 0) as accepted_rides from available_drivers ad left join accepted_rides ar using (month)
with recursive seq as ( SELECT 1 AS N_row UNION ALL SELECT N_row + 1 FROM seq WHERE N_row < 12 ), new_drivers as ( select date_format(join_date, "%m") as join_month, count(distinct driver_id) as N_drivers from Drivers d where date_format(join_date,"%Y") = "2020" group by 1 ), ride_count as ( select date_format(requested_at,"%m") as ride_month, count(distinct ride_id) as accepted_rides from AcceptedRides ar left join Rides r using(ride_id) where date_format(requested_at,"%Y") = "2020" group by 1 ) select N_row as month, sum(coalesce(N_drivers,0)) over (order by N_row asc rows between unbounded preceding and current row) + N_before as active_drivers, ifnull(accepted_rides,0) as accepted_rides from seq left join new_drivers nd on seq.N_row = cast(nd.join_month as signed) left join ride_count rc on seq.N_row = cast(rc.ride_month as signed) cross join (select count(distinct driver_id) as N_before from Drivers where date_format(join_date,"%Y") < "2020") as history order by 1
with recursive seq as (select 1 as month union all select month + 1 from seq where month < 12 ), new_driver as (select case when join_date < '2020-01-01' then 1 else CONVERT(substring(join_date,6,2), unsigned integer) end as month, count(distinct driver_id) as n_join from drivers where join_date <= '2020-12-31' group by 1), monthly_new_driver as (select seq.month, ifnull(n1.n_join,0) as n_join from seq left join new_driver n1 on seq.month = n1.month), active_driver as (select n1.month, sum(n2.n_join) as active_drivers from monthly_new_driver n1 left join monthly_new_driver n2 on n1.month >= n2.month group by 1), ride as (select convert(substring(r.requested_at,6,2),unsigned INTEGER) as month, count(distinct a.ride_id) as accepted_rides from rides r left join AcceptedRides a on r.ride_id = a.ride_id where LEFT(r.requested_at,4) = '2020' group by 1) select a.month, a.active_drivers, ifnull(r.accepted_rides,0) as accepted_rides from active_driver a left join ride r on a.month = r.month
with recursive seq as (select 1 as month union select month + 1 from seq where month < 12), driver_m as (select d.*, case when year(d.join_date) < 2020 then 1 else month(d.join_date) end as month from drivers d where d.join_date < '2021-01-01'), seq_dri as (select seq.month, count(d.month) as active_drivers from seq left join driver_m d on seq.month >= d.month group by seq.month ), acc_rides as (select month(r.requested_at) as month, count(*) as accepted_rides from rides r, acceptedrides ar where r.ride_id = ar.ride_id and r.requested_at between '2020-01-01' and '2020-12-31' group by month(r.requested_at)) select dm.month, dm.active_drivers, case when ar.accepted_rides is null then 0 else ar.accepted_rides end as accepted_rides from seq_dri dm left join acc_rides ar on dm.month = ar.month order by dm.month
with recursive seq as(select 1 as v union select v+1 from seq where v < 12), drive as (select driver_id, case when year(join_date) < 2020 then 1 else month(join_date) end as month from Drivers where year(join_date) <= 2020), Acc_ride as (select a.ride_id, month(requested_at) as month from AcceptedRides a left join Rides b on a.ride_id = b.ride_id where year(requested_at) = 2020) select a.v as month, count(distinct b.driver_id) as active_drivers, count(distinct c.ride_id) as accepted_rides from seq a left join drive b on a.v >= b.month left join Acc_ride c on a.v = c.month group by 1 order by 1
with recursive t as ( select 1 as month union all select month+1 from t where month <12 ) ,t2 as (select distinct t.month, count(driver_id) over (partition by t.month) active_drivers from t left join (select driver_id, case when join_date < "2020-01-01" then "2020-01-01" else join_date end as date_new from drivers) drivers on t.month = month(drivers.date_new) and year(Drivers.date_new) = 2020) , t3 as (select distinct t.month, count(AcceptedRides.ride_id) over(partition by t.month) accepted_rides from rides right join AcceptedRides on rides.ride_id = AcceptedRides.ride_id right join t on month(requested_At) = t.month and year(requested_At) =2020 ) select t2.month, sum(active_drivers) over(order by t2.month) as active_drivers, accepted_rides from t2 join t3 on t2.month = t3.month
with recursive t as ( select 1 as month union all select month+1 from t where month<12 ) select m.*, coalesce(r.accepted_rides,0) as accepted_rides from (select t.month, count(d.driver_id) as active_drivers from t left outer join Drivers d on str_to_date(concat('2020-', t.month,'-01'),'%Y-%m-%d')>=DATE_FORMAT(d.join_date,'%Y-%m-01') group by t.month) m left outer join (select month(requested_at) as month, count(*) as accepted_rides from AcceptedRides ar inner join Rides r on ar.ride_id=r.ride_id and year(requested_at)=2020 group by month(requested_at)) r on m.month=r.month
with recursive t as ( select 1 as month union all select month+1 from t where month<12 ) select t.month, count(distinct driver_id) active_drivers, count(distinct rides.ride_id) accepted_rides from t left join ( select driver_id, (case when year(join_date)=2019 then '1' else month(join_date) end) `month` from Drivers where year(join_date)<=2020 ) d on d.month <= t.month left join ( select month(requested_at) as `month`, a.ride_id from AcceptedRides a join Rides r on r.ride_id = a.ride_id where year(requested_at)=2020 ) rides on t.month = rides.month group by t.month order by t.month
with recursive t as (select 1 month union all select month+1 from t where month<12), t2 as (select *, if(year(join_date)<2020,1,month(join_date)) month from drivers where year(join_date) <= 2020), t3 as (select *, month(requested_at) month from rides where year(requested_at) = 2020 and ride_id in (select ride_id from acceptedrides)) select t.month, sum(ifnull(count(distinct t2.driver_id),0)) over(order by month) active_drivers, ifnull(count(distinct t3.ride_id),0) accepted_rides from t left join t2 on t.month = t2.month left join t3 on t.month = t3.month group by t.month
with recursive t0 (m) as (select "2020-02-01" as m union all select date_add(m, interval 1 month) from t0 where m < "2021-01-01"), t1 as (select date_sub(m, interval 1 day) as mon from t0), t2 as (select t1.mon, count(driver_id) as active_drivers from t1 left join Drivers d on t1.mon >= d.join_date group by 1), t3 as (select t1.mon, count(ride_id) as accepted_rides from t1 left join (select a.ride_id, r.requested_at from AcceptedRides a left join Rides r on a.ride_id = r.ride_id) tmp on requested_at <= t1.mon and date_format(requested_at, "%Y-%m") = date_format(t1.mon, "%Y-%m") group by 1 ) select month(t2.mon) as month, active_drivers, accepted_rides from t2 join t3 on t2.mon = t3.mon
with recursive t1 as ( select 1 as month union all select 1 + month as month from t1 where month<12 ), t2 as ( select month, count(distinct driver_id) as nbr_drivers from ( select *, case when join_date<='2019-12-31' then 1 else extract(month from join_date) end as month from Drivers where join_date<='2020-12-31' ) a group by month ), t3 as ( select t1.month, sum(coalesce(t2.nbr_drivers,0)) over (order by t1.month rows unbounded preceding) as active_drivers from t1 left join t2 on t1.month=t2.month ) , t4 as ( select extract(month from r.requested_at) as month,count(distinct a.ride_id) as accepted_rides from AcceptedRides a left join Rides r on a.ride_id = r.ride_id where r.requested_at between '2020-01-01' and '2020-12-31' group by extract(month from r.requested_at) ) select t3.month,t3.active_drivers,coalesce(t4.accepted_rides,0) as accepted_rides from t3 left join t4 on t3.month = t4.month
with recursive t1 as ( select 1 as month union select month+1 from t1 where month < 12 ), t2 as ( select if(year(join_date)=2019, 1, month(join_date)) as 'month', count(distinct driver_id) as 'active_drivers' from Drivers where year(join_date)<=2020 group by month ), t3 as ( select month(requested_at) as 'month', count(distinct Rides.ride_id) as 'accepted_rides' from Rides join AcceptedRides on Rides.ride_id=AcceptedRides.ride_id where year(requested_at)=2020 group by month ) select t1.month, ifnull(sum(t2.active_drivers), 0) as active_drivers, ifnull(t3.accepted_rides, 0) as accepted_rides from t1 left join t2 on t1.month>=t2.month left join t3 on t1.month=t3.month group by t1.month order by t1.month
with recursive t1 as ( select 1 as month union select month+1 from t1 where month < 12 ), t2 as ( select if(year(join_date)=2019, 1, month(join_date)) as 'month', ifnull(count(distinct driver_id), 0) as 'active_drivers' from Drivers where year(join_date)<=2020 group by month ), t3 as ( select month(requested_at) as 'month', ifnull(count(distinct Rides.ride_id), 0) as 'accepted_rides' from Rides join AcceptedRides on Rides.ride_id=AcceptedRides.ride_id where year(requested_at)=2020 group by month ) select t1.month, ifnull(sum(t2.active_drivers), 0) as active_drivers, ifnull(t3.accepted_rides, 0) as accepted_rides from t1 left join t2 on t1.month>=t2.month left join t3 on t1.month=t3.month group by t1.month order by t1.month
with recursive t1 as (select 1 as month union all select month + 1 from t1 where month < 12), t2 as (select case when year(join_date) < 2020 then 1 when year(join_date) = 2020 then month(join_date) else 0 end as driver_month from drivers), t3 as (select month, count(*) as cnt1 from t1 join t2 on month = driver_month group by month), t4 as (select month(requested_at) as month, count(*) as cnt2 from rides a join acceptedrides b on a.ride_id = b.ride_id where year(requested_at) = 2020 group by month) select t1.month, sum(ifnull(cnt1, 0)) over (order by t1.month rows between unbounded preceding and current row) as active_drivers, ifnull(cnt2, 0) as accepted_rides from t1 left join t3 on t1.month = t3.month left join t4 on t1.month = t4.month
with recursive t1 as (select 1 as month, 2020 as year union all select month + 1, year from t1 where month < 12) , active as ( Select m.month, SUM(case when year(d.join_date)<2020 or month(d.join_date)<=m.month then 1 else 0 end) as total From Drivers d, t1 m where d.join_date<'2021-01-01' group by 1 ), ride_total as( Select a.ride_id, a.driver_id, r.requested_at as date from AcceptedRides a left join Rides r on a.ride_id = r.ride_id where r.requested_at between '2020-01-01' and '2020-12-31' ) Select a.month, a.total as active_drivers, SUM(case when MONTH(r.date)=a.month then 1 else 0 end) as accepted_rides from active a ,ride_total r group by 1,2 order by 1
with recursive tab as ( select 1 as month union select 1+month from tab where month < 12), adrivers as (select driver_id, join_date, 0 as join_month from drivers where year(join_date) < 2020 union all select driver_id, join_date, MONTH(join_date) as join_month from drivers where year(join_date) = 2020), arides as (select a.ride_id, MONTH(requested_at) as req_month from rides a join AcceptedRides b on a.ride_id = b.ride_id where year(requested_at ) = 2020) select a.month, count(distinct b.driver_id) as active_drivers, count(distinct c.ride_id) as accepted_rides from tab a left join adrivers b on a.month>=b.join_month left join arides c on a.month = c.req_month group by a.month order by a.month
with recursive table1 as ( select 1 as month union all select month+1 from table1 where month<12) select t.month, count(distinct a.driver_id) as active_drivers, count(distinct b.ride_id) as accepted_rides from table1 t left join (select driver_id, (case when year(join_date)=2019 then '1' else month(join_date) end) `month` from Drivers where year(join_date)<=2020) a on a.month <= t.month left join ( select month(requested_at) as `month`, a.ride_id from AcceptedRides a join Rides r on r.ride_id = a.ride_id where year(requested_at)=2020) b on b.month=t.month group by 1
with recursive temp as ( select 1 as month union all select month+1 from temp where month < 12), b as ( select driver_id, join_date, case when year(join_date) < 2020 then '2020-01-01' else join_date end as driver_date from drivers), c as ( select t.month, count(b.driver_id) as active_drivers from temp t left join b on t.month = month(b.driver_date) and year(b.driver_date) = 2020 group by 1), d as ( select t.month, count(ride_id) as accepted_rides from temp t left join rides r on t.month = month(r.requested_at) and year(r.requested_at) = 2020 and r.ride_id in (select ride_id from acceptedrides) group by 1) select c.month, sum(c.active_drivers) over(order by c.month) as active_drivers, d.accepted_rides from c left join d on c.month = d.month
with recursive temp0 as ( select 1 as month union all select month + 1 as month from temp0 where month < 12 ) , temp1 as ( select a.driver_id,b.requested_at from AcceptedRides a join Rides b on a.ride_id = b.ride_id where b.requested_at between "2020-01-01" and "2020-12-31" ) , temp2 as ( select a.month, b.driver_id,c.driver_id as accepted from temp0 a left join Drivers b on a.month+2020*12 >= year(b.join_date)*12+month(b.join_date) left join temp1 c on c.driver_id = b.driver_id and year(c.requested_at) = 2020 and month(c.requested_at) = a.month ) select month, count(distinct driver_id) as active_drivers, count(accepted) as accepted_rides from temp2 group by 1 order by 1
with recursive temp3 as ( select 1 as month union all select month + 1 from temp3 where month < 12 ) , temp1 as ( select year(a.join_date) as join_year, month(a.join_date) as join_month, count(distinct b.driver_id) as active_drivers from Drivers a left join Drivers b on a.join_date >= b.join_date group by 1, 2 order by 1, 2 ) , temp2 as ( select month(b.requested_at) as requested_month ,count(distinct a.ride_id) as accepted_rides from AcceptedRides a join Rides b on a.ride_id = b.ride_id where year(b.requested_at) = 2020 group by 1 order by 1 ) , temp4 as ( select c.month, max(a.active_drivers) as active_drivers from temp3 c left join temp1 a on c.month >= a.join_month and a.join_year = 2020 group by 1 order by 1 ) select c.month, coalesce(c.active_drivers,0) as active_drivers, coalesce(b.accepted_rides,0) as accepted_rides from temp4 c left join temp2 b on c.month = b.requested_month order by 1
with recursive temp_table(n) as ( SELECT 1 union all SELECT n+1 FROM temp_table where n<12 ), t2 as ( SELECT join_year ,join_month FROM ( SELECT 2019 join_year, n join_month FROM temp_table union SELECT 2020, n FROM temp_table union SELECT 2021, n FROM temp_table ) t1 WHERE join_year*100+join_month between 201912 and 202101 ), t3 as ( SELECT year(join_date) join_year, month(join_date) join_month, count(driver_id) active_drivers FROM Drivers GROUP BY year(join_date), month(join_date) ), t4 as ( SELECT year(r.requested_at) join_year, month(r.requested_at) join_month, count(1) cnt FROm Rides r inner join AcceptedRides a on r.ride_id =a.ride_id GROUP BY year(r.requested_at), month(r.requested_at) ), t5 as ( SELECT t2.join_year, t2.join_month, SUM(COALESCE(active_drivers, 0)) OVER (ORDER BY t2.join_year, t2.join_month) active_drivers, COALESCE(cnt, 0) accepted_rides FROM t2 LEFT OUTER JOIN t3 on t2.join_year = t3.join_year and t2.join_month = t3.join_month LEFT OUTER JOIN t4 on t2.join_year = t4.join_year and t2.join_month = t4.join_month ) SELECT join_month month ,active_drivers ,accepted_rides FROM t5 WHERE join_year = 2020
with recursive tim as (select 1 as mon union all select mon+1 from tim where mon < 12), tb1 as (select *, month(requested_at) mon from rides where year(requested_at)=2020), tb2 as (select mon, ride_id from tb1 where ride_id in (select ride_id from AcceptedRides)), tb3 as (select *, month(join_date) mon from drivers where year(join_date)=2020), tb4 as (select distinct mon, count(driver_id)over(partition by mon) ct from tb3), tb5 as (select tim.mon mon, ifnull(tb4.ct,0) ct from tim left join tb4 on tim.mon=tb4.mon), tb6 as (select 1 as mon, count(driver_id) as d19 from drivers where year(join_date)<2020), tb7 as (select tb5.mon, (ifnull(tb6.d19,0)+tb5.ct) ct from tb5 left join tb6 using(mon)), tb8 as (select distinct mon, sum(ct)over(order by mon) dr from tb7 ), tb9 as (select distinct mon, count(ride_id)over(partition by mon) num from tb2) select tb8.mon month,dr as active_drivers, ifnull(num,0) as accepted_rides from tb8 left join tb9 using(mon)
with recursive tmp as (select 1 as month union all select month + 1 as month from tmp where month < 12 ) select a.month, count(driver_id) as active_drivers, ifnull(accepted_rides,0) as accepted_rides from tmp a left join drivers b on (year(join_date)=2020 and month(join_date)<=month) or year(join_date)<2020 left join (select month(requested_at) as month, count(ride_id) as accepted_rides from rides a inner join acceptedrides b using (ride_id) where year(requested_at)=2020 group by 1) c on a.month=c.month group by 1 order by 1
with recursive tmp as (select 1 as month, '2020-01-01' as day union all select month + 1 as month, date_add(day,interval 1 month) from tmp where month<12 ) select month, count(b.driver_id) as active_drivers, ifnull(ride_cnt,0) as accepted_rides from tmp a left join drivers b on left(join_date,7) <= left(day,7) left join (select left(requested_at,7) as mon, count(ride_id) as ride_cnt from rides a inner join AcceptedRides b using (ride_id) where year(requested_at)=2020 group by 1) c on mon = left(day,7) group by 1,3 order by 1
with recursive tmp as (select mon, sum(id_cnt) over(order by mon) as cum_id_cnt from( select cast(date_format(join_date,'%Y-%m-01') as date) as mon, count(driver_id) as id_cnt from drivers group by 1) t ), tmp2 as (select cast(date_format(requested_at,'%Y-%m-01') as date) as mon, count(a.ride_id) as accepted_rides from rides a inner join acceptedrides b on a.ride_id=b.ride_id where year(requested_at)=2020 group by 1 ), tmp3 as (select 1 as month union all select month + 1 as month from tmp3 where month<12 ) select f.month, ifnull(t.active_drivers,0) as active_drivers, ifnull(accepted_rides,0) as accepted_rides from tmp3 f left join ( select a.month, max(cum_id_cnt) as active_drivers from tmp3 a, (select * from tmp where year(mon)=2020) b where a.month>=month(b.mon) group by 1) t on f.month=t.month left join tmp2 c on t.month=month(c.mon) order by 1
with recursive tmp as( select 1 as month union all select month + 1 from tmp where month < 12 ), tmp2 as ( select * from drivers where year(join_date) = 2020 ), tmp3 as( select requested_at from acceptedrides natural join rides where year(requested_at) = 2020 ), tmp4 as( select month, sum(count(driver_id)) over(order by month) + (select count(*) from drivers where year(join_date) < 2020) as active_drivers from tmp2 right join tmp on month(join_date) = month group by 1 ), tmp5 as( select month, count(requested_at) as accepted_rides from tmp left join tmp3 on month = month(requested_at) group by 1 ) select month, active_drivers, accepted_rides from tmp4 natural join tmp5 group by 1
with t as ( with t as ( with t as ( select month(join_date) m, count(*) c from drivers where year(join_date) = 2020 group by month(join_date) union all select 1, count(*) c from drivers where year(join_date) < 2020 union all select 1, 0 union all select 2, 0 union all select 3, 0 union all select 4, 0 union all select 5, 0 union all select 6, 0 union all select 7, 0 union all select 8, 0 union all select 9, 0 union all select 10, 0 union all select 11, 0 union all select 12, 0 ) select m, sum(c) as c from t group by m ) select m, sum(c) over (order by m ) as c from t ) , k as ( select month(b.requested_at) m, count(*) c from AcceptedRides a join rides b on a.ride_id = b.ride_id where year(b.requested_at) = 2020 group by month(b.requested_at) ) select t.m as month, t.c as active_drivers, ifnull(k.c, 0) as accepted_rides from t left join k on k.m = t.m order by t.m
with tbM as ( select 1 as month union select 2 union select 3 union select 4 union select 5 union select 6 union select 7 union select 8 union select 9 union select 10 union select 11 union select 12 ), tbR as ( select tbM.month, count(drivers.driver_id) as active_drivers from drivers right join tbM on (year(drivers.join_date) < 2020 or (year(drivers.join_date) = 2020 and month(drivers.join_date) <= tbM.month)) group by tbM.month ) select tbR.month, tbR.active_drivers, count(ar.ride_id) as accepted_rides from tbR left join rides as r on year(r.requested_at) = 2020 and month(r.requested_at) = tbR.month left join AcceptedRides as ar on r.ride_id = ar.ride_id group by tbR.month
with temp1 as ( select year(a.join_date) as join_year, month(a.join_date) as join_month, count(distinct b.driver_id) as active_drivers from Drivers a left join Drivers b on a.join_date >= b.join_date group by 1, 2 order by 1, 2 ) , temp2 as ( select month(b.requested_at) as requested_month ,count(distinct a.ride_id) as accepted_rides from AcceptedRides a join Rides b on a.ride_id = b.ride_id where year(b.requested_at) = 2020 group by 1 order by 1 ) , temp3 as ( select 1 as month union select 2 as month union select 3 as month union select 4 as month union select 5 as month union select 6 as month union select 7 as month union select 8 as month union select 9 as month union select 10 as month union select 11 as month union select 12 as month ) , temp4 as ( select c.month, max(a.active_drivers) as active_drivers from temp3 c left join temp1 a on c.month >= a.join_month and a.join_year = 2020 group by 1 order by 1 ) select c.month, coalesce(c.active_drivers,0) as active_drivers, coalesce(b.accepted_rides,0) as accepted_rides from temp4 c left join temp2 b on c.month = b.requested_month order by 1
with tmp as( select count(*) as ct from drivers where year(join_date) < 2020 ), tmp2 as( with recursive rec as( select 1 as month union all select month + 1 from rec where month < 12 ) select * from rec ), tmp3 as ( select * from drivers where year(join_date) = 2020 ), tmp4 as( select requested_at from acceptedrides natural join rides where year(requested_at) = 2020 ), tmp5 as( select month, sum(count(driver_id)) over(order by month) + (select ct from tmp) as active_drivers from tmp3 right join tmp2 on month(join_date) = month group by 1 ), tmp6 as( select month, count(requested_at) as accepted_rides from tmp2 left join tmp4 on month = month(requested_at) group by 1 ) select month, active_drivers, accepted_rides from tmp5 natural join tmp6 group by 1
with tp as( select m.month, sum(count(driver_id)) over(order by m.month) as active_drivers from (select 1 as month union select 2 union select 3 union select 4 union select 5 union select 6 union select 7 union select 8 union select 9 union select 10 union select 11 union select 12 ) m left join ( select driver_id, case when join_date < date('2020-01-01') then 1 else month(join_date) end as clean_month from drivers where join_date < date('2021-01-01') ) s on s.clean_month = m.month group by 1 ) select tp.*, case when s.cnt is null then 0 else s.cnt end as accepted_rides from tp left join ( select month(requested_at) as mm, count(a.ride_id) as cnt from rides r join AcceptedRides a on r.ride_id = a.ride_id where requested_at >= date('2020-01-01') and requested_at <= date('2020-12-31') group by 1) s on tp.month = s.mm
