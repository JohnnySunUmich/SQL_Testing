SELECT mon AS month, ROUND(AVG(tt_dis) OVER (ORDER BY mon ROWS BETWEEN CURRENT ROW AND 2 FOLLOWING),2) AS average_ride_distance, ROUND(AVG(tt_du) OVER (ORDER BY mon ROWS BETWEEN CURRENT ROW AND 2 FOLLOWING),2) AS average_ride_duration FROM ( SELECT t1.mon, SUM(IFNULL(ride_distance,0)) AS tt_dis, SUM(IFNULL(ride_duration,0)) AS tt_du FROM ( SELECT 1 AS mon FROM Rides UNION SELECT 2 AS mon FROM Rides UNION SELECT 3 AS mon FROM Rides UNION SELECT 4 AS mon FROM Rides UNION SELECT 5 AS mon FROM Rides UNION SELECT 6 AS mon FROM Rides UNION SELECT 7 AS mon FROM Rides UNION SELECT 8 AS mon FROM Rides UNION SELECT 9 AS mon FROM Rides UNION SELECT 10 AS mon FROM Rides UNION SELECT 11 AS mon FROM Rides UNION SELECT 12 AS mon FROM Rides ) AS t1 LEFT OUTER JOIN ( SELECT ride_id, ride_distance, ride_duration, YEAR(requested_at) AS yr, MONTH(requested_at) AS mon FROM Rides NATURAL JOIN AcceptedRides WHERE YEAR(requested_at) = 2020 ORDER BY mon ) AS t2 ON (t1.mon = t2.mon) GROUP BY mon ) AS t3 LIMIT 10
WITH RECURSIVE A as ( SELECT 1 as month UNION SELECT month + 1 FROM A WHERE month < 12 ), monthly_stats as ( SELECT month(r.requested_at) as month, SUM(ride_distance) as monthly_distance, SUM(ride_duration) as monthly_duration FROM Rides r JOIN AcceptedRides a ON r.ride_id = a.ride_id WHERE YEAR(r.requested_at) = '2020' GROUP BY 1 ORDER BY 1), rolling_3_months_stats as( SELECT a.month, SUM(IFNULL(monthly_distance,0)) OVER(ROWS BETWEEN CURRENT ROW AND 2 FOLLOWING) as ttl_3_month_dis, SUM(IFNULL(monthly_duration,0)) OVER(ROWS BETWEEN CURRENT ROW AND 2 FOLLOWING) as ttl_3_month_dur FROM A a LEFT JOIN monthly_stats b ON a.month = b.month) SELECT month, ROUND(ttl_3_month_dis * 1.00 / 3,2) as average_ride_distance, ROUND(ttl_3_month_dur * 1.00 / 3,2) as average_ride_duration FROM rolling_3_months_stats WHERE month <= 10
WITH RECURSIVE A as ( SELECT 1 as month UNION SELECT month + 1 FROM A WHERE month < 12 ), monthly_stats as ( SELECT month(r.requested_at) as month, SUM(ride_distance) as monthly_distance, SUM(ride_duration) as monthly_duration FROM Rides r JOIN AcceptedRides a ON r.ride_id = a.ride_id WHERE r.requested_at BETWEEN '2020-01-01' AND '2020-12-31' GROUP BY 1 ORDER BY 1), rolling_3_months_stats as( SELECT a.month, SUM(IFNULL(monthly_distance,0)) OVER(ROWS BETWEEN CURRENT ROW AND 2 FOLLOWING) as ttl_3_month_dis, SUM(IFNULL(monthly_duration,0)) OVER(ROWS BETWEEN CURRENT ROW AND 2 FOLLOWING) as ttl_3_month_dur FROM A a LEFT JOIN monthly_stats b ON a.month = b.month) SELECT month, ROUND(ttl_3_month_dis * 1.00 / 3,2) as average_ride_distance, ROUND(ttl_3_month_dur * 1.00 / 3,2) as average_ride_duration FROM rolling_3_months_stats WHERE month <= 10
WITH RECURSIVE A1 AS (SELECT 1 AS MON UNION ALL SELECT MON + 1 FROM A1 WHERE MON < 12), CET AS (SELECT MONTH(requested_at) AS MON, SUM(ride_distance) AS ride_distance, SUM(ride_duration) AS ride_duration FROM AcceptedRides A JOIN Rides R ON R.ride_id = A.ride_id WHERE YEAR(requested_at) = 2020 GROUP BY 1) SELECT A1.MON AS month, ROUND((IFNULL(T1.ride_distance, 0)+IFNULL(T2.ride_distance, 0)+IFNULL(T3.ride_distance, 0))/3, 2) AS average_ride_distance, ROUND((IFNULL(T1.ride_duration, 0)+IFNULL(T2.ride_duration, 0)+IFNULL(T3.ride_duration, 0))/3, 2) AS average_ride_duration FROM A1 LEFT JOIN CET T1 ON A1.MON = T1.MON LEFT JOIN CET T2 ON A1.MON = T2.MON-1 LEFT JOIN CET T3 ON A1.MON = T3.MON-2 WHERE A1.MON <= 10
WITH RECURSIVE CTE AS ( SELECT 1 AS month UNION ALL SELECT 1 + month FROM CTE WHERE month < 12 ), CTE2 AS ( SELECT EXTRACT(month FROM d1.requested_at) as month, SUM(d2.ride_distance) as sum_ride_distance, SUM(d2.ride_duration) as sum_ride_duration FROM Rides as d1 JOIN AcceptedRides as d2 ON d1.ride_id = d2.ride_id WHERE d1.requested_at BETWEEN '2020-01-01' AND '2020-12-31' GROUP BY EXTRACT(month FROM d1.requested_at) ), CTE3 AS ( SELECT d1.month, IFNULL(d2.sum_ride_distance,0) AS sum_ride_distance, IFNULL(d2.sum_ride_duration,0) AS sum_ride_duration FROM CTE as d1 LEFT JOIN CTE2 as d2 ON d1.month = d2.month ) SELECT d1.month, ROUND(SUM(d2.sum_ride_distance)/3,2) AS average_ride_distance, ROUND(SUM(d2.sum_ride_duration)/3,2) AS average_ride_duration FROM CTE3 as d1 JOIN CTE3 as d2 ON d2.month BETWEEN d1.month AND d1.month + 2 WHERE d1.month <= 10 GROUP BY d1.month
WITH RECURSIVE CTE AS ( SELECT 1 AS month UNION ALL SELECT month+1 AS month FROM CTE WHERE month < 10 ), b AS ( SELECT MONTH(r.requested_at) AS month, SUM(a.ride_distance) AS monthly_distance, SUM(a.ride_duration) AS monthly_duration FROM Rides r LEFT JOIN AcceptedRides a ON r.ride_id = a.ride_id WHERE YEAR(r.requested_at) = 2020 GROUP BY 1 ) SELECT c.month, IFNULL(ROUND(SUM(monthly_distance)/3, 2), 0) AS average_ride_distance, IFNULL(ROUND(SUM(monthly_duration)/3, 2), 0) AS average_ride_duration FROM CTE c LEFT JOIN b ON b.month = c.month OR b.month = c.month + 1 OR b.month = c.month + 2 GROUP BY 1 ORDER BY 1
WITH RECURSIVE CTE AS( SELECT 1 AS month UNION ALL SELECT month+1 FROM CTE WHERE month<12 ) SELECT t.month, ROUND(AVG(IFNULL(b.monthly_distance,0.00)) OVER(ORDER BY month ROWS BETWEEN CURRENT ROW AND 2 FOLLOWING),2) AS 'average_ride_distance', ROUND(AVG(IFNULL(b.monthly_duration,0.00)) OVER(ORDER BY month ROWS BETWEEN CURRENT ROW AND 2 FOLLOWING),2) AS 'average_ride_duration' FROM CTE t LEFT JOIN( SELECT month(a.requested_at) AS month, SUM(b.ride_distance) AS monthly_distance, SUM(b.ride_duration) AS monthly_duration FROM rides a JOIN acceptedRides b on a.ride_id = b.ride_id WHERE YEAR(a.requested_at) = 2020 GROUP BY month ) b on t.month = b.month ORDER BY 1 LIMIT 10
WITH RECURSIVE CTE1 (month) AS ( SELECT 1 UNION ALL SELECT month + 1 AS month FROM CTE1 WHERE month < 12 ) , CTE2 AS ( SELECT ride_distance, ride_duration, MONTH(requested_at) AS month FROM AcceptedRides A LEFT JOIN Rides B ON A.ride_id = B.ride_id WHERE YEAR(requested_at) = 2020 ) , CTE3 AS ( SELECT A.month, SUM(COALESCE(ride_distance, 0)) AS ride_distance, SUM(COALESCE(ride_duration, 0)) AS ride_duration FROM CTE1 A LEFT JOIN CTE2 B ON A.month = B.month GROUP BY A.month ) SELECT * FROM ( SELECT month, ROUND(AVG(ride_distance) OVER three_month_period, 2) AS average_ride_distance, ROUND(AVG(ride_duration) OVER three_month_period, 2) AS average_ride_duration FROM CTE3 WINDOW three_month_period AS (ORDER BY month ROWS BETWEEN CURRENT ROW AND 2 FOLLOWING) ) T WHERE month <= 10
WITH RECURSIVE CTE1 AS ( SELECT 1 AS month UNION SELECT month + 1 FROM CTE1 WHERE month < 12 ), CTE2 AS ( SELECT a.ride_id, a.ride_distance, a.ride_duration, EXTRACT(MONTH FROM r.requested_at) AS ride_month FROM AcceptedRides a INNER JOIN Rides r ON a.ride_id = r.ride_id WHERE r.requested_at <= '2020-12-31' AND r.requested_at >= '2020-01-01' ), CTE3 AS ( SELECT CTE1.month, COALESCE(temp_tb.total_ride_distance, 0) AS total_ride_distance FROM CTE1 LEFT JOIN (SELECT ride_month, SUM(ride_distance) AS total_ride_distance FROM CTE2 GROUP BY ride_month) AS temp_tb ON CTE1.month = temp_tb.ride_month ), CTE4 AS ( SELECT CTE1.month, COALESCE(temp_tb.total_ride_duration, 0) AS total_ride_duration FROM CTE1 LEFT JOIN (SELECT ride_month, SUM(ride_duration) AS total_ride_duration FROM CTE2 GROUP BY ride_month) AS temp_tb ON CTE1.month = temp_tb.ride_month ), CTE5 AS ( SELECT CTE3.month, CTE3.total_ride_distance, CTE4.total_ride_duration FROM CTE3 INNER JOIN CTE4 ON CTE3.month = CTE4.month ), CTE6 AS ( SELECT month, ROUND((SUM(total_ride_distance) OVER(ORDER BY month ROWS BETWEEN CURRENT ROW AND 2 FOLLOWING)) / 3,2) AS average_ride_distance, ROUND((SUM(total_ride_duration) OVER(ORDER BY month ROWS BETWEEN CURRENT ROW AND 2 FOLLOWING)) / 3,2) AS average_ride_duration FROM CTE5 ) SELECT * FROM CTE6 WHERE month <= 10
WITH RECURSIVE CTE1 AS ( SELECT 1 as month UNION SELECT 1 + month FROM CTE1 WHERE month < 12 ), CTE2 AS ( SELECT month(requested_at) as month, SUM(ride_distance) as sum_ride_distance, SUM(ride_duration) as sum_ride_duration FROM Rides as d1 JOIN AcceptedRides as d2 ON d1.ride_id = d2.ride_id WHERE YEAR(d1.requested_at) = 2020 GROUP BY 1 ) SELECT month, ROUND(1.00*(sum_ride_distance + sum_ride_distance_lead1 + sum_ride_distance_lead2)/3,2) as average_ride_distance, ROUND(1.00*(sum_ride_duration + sum_ride_duration_lead1 + sum_ride_duration_lead2)/3,2) as average_ride_duration FROM ( SELECT d1.month, IFNULL(d2.sum_ride_distance,0) as sum_ride_distance, IFNULL(d2.sum_ride_duration,0) as sum_ride_duration, LEAD(IFNULL(d2.sum_ride_distance,0),1) OVER(ORDER BY d1.month ASC) as sum_ride_distance_lead1, LEAD(IFNULL(d2.sum_ride_distance,0),2) OVER(ORDER BY d1.month ASC) as sum_ride_distance_lead2, LEAD(IFNULL(d2.sum_ride_duration,0),1) OVER(ORDER BY d1.month ASC) as sum_ride_duration_lead1, LEAD(IFNULL(d2.sum_ride_duration,0),2) OVER(ORDER BY d1.month ASC) as sum_ride_duration_lead2 FROM CTE1 as d1 LEFT JOIN CTE2 as d2 ON d1.month = d2.month ) as sub WHERE sum_ride_distance + sum_ride_distance_lead1 + sum_ride_distance_lead2 IS NOT NULL
WITH RECURSIVE CTE1 AS ( SELECT MONTH(requested_at) AS month, SUM(ride_distance) AS ride_distance, SUM(ride_duration) AS ride_duration FROM Rides JOIN AcceptedRides ON Rides.ride_id = AcceptedRides.ride_id WHERE YEAR(requested_at) = 2020 GROUP BY MONTH(requested_at) ), CTE2 AS ( SELECT 1 AS month UNION ALL SELECT 1+month FROM CTE2 WHERE month<12 ), CTE3 AS ( SELECT CTE2.month, IFNULL(ride_distance, 0) AS distance, IFNULL(ride_duration, 0) AS duration FROM CTE2 LEFT JOIN CTE1 ON CTE2.month = CTE1.month) SELECT A.month, ROUND((A.distance+B.distance+C.distance)/3, 2) AS average_ride_distance, ROUND((A.duration+B.duration+C.duration)/3, 2) AS average_ride_duration FROM CTE3 AS A, CTE3 AS B, CTE3 AS C WHERE C.month = A.month+2 AND B.month = A.month+1 ORDER BY month
WITH RECURSIVE CTE1(MONTH) AS ( SELECT 1 AS MONTH UNION ALL SELECT MONTH + 1 FROM CTE1 WHERE MONTH < 12 ) , CTE2 AS ( SELECT RIDE_DISTANCE, RIDE_DURATION, MONTH(REQUESTED_AT) MONTH FROM ACCEPTEDRIDES A JOIN RIDES R USING(RIDE_ID) WHERE YEAR(REQUESTED_AT) = 2020 ) , CTE3 AS ( SELECT CTE1.MONTH, SUM(IFNULL(RIDE_DISTANCE, 0)) RIDE_DISTANCE, SUM(IFNULL(RIDE_DURATION, 0)) RIDE_DURATION FROM CTE1 LEFT JOIN CTE2 USING(MONTH) GROUP BY CTE1.MONTH ) , CTE4 AS ( SELECT MONTH, ROUND((RIDE_DISTANCE + LEAD(RIDE_DISTANCE, 1) OVER(ORDER BY MONTH) + LEAD(RIDE_DISTANCE, 2) OVER(ORDER BY MONTH))/3, 2) average_ride_distance, ROUND((RIDE_DURATION + LEAD(RIDE_DURATION, 1) OVER(ORDER BY MONTH) + LEAD(RIDE_DURATION, 2) OVER(ORDER BY MONTH))/3, 2) average_ride_duration FROM CTE3 ) SELECT * FROM CTE4 WHERE MONTH < 11
WITH RECURSIVE M AS ( SELECT 1 AS month UNION SELECT month + 1 FROM M WHERE month < 12 ), S AS ( SELECT c.*, IFNULL(d.ride_distance, 0) AS ride_distance, IFNULL(d.ride_duration, 0) AS ride_duration FROM M c LEFT JOIN ( SELECT MONTH(a.requested_at) AS month, SUM(b.ride_distance) AS ride_distance, SUM(b.ride_duration) AS ride_duration FROM Rides a INNER JOIN AcceptedRides b ON a.ride_id = b.ride_id WHERE YEAR(a.requested_at) = 2020 GROUP BY month ORDER BY month ) d ON c.month = d.month ), T AS ( SELECT a.*, b.ride_distance AS dist1, b.ride_duration AS dura1, c.ride_distance AS dist2, c.ride_duration AS dura2 FROM S a, S b, S c WHERE a.month = b.month - 1 AND a.month = c.month - 2 ) SELECT month, ROUND((ride_distance + dist1 + dist2) / 3,2) AS average_ride_distance, ROUND((ride_duration + dura1 + dura2) / 3,2) AS average_ride_duration FROM T
WITH RECURSIVE M AS ( SELECT 1 AS month UNION SELECT month + 1 FROM M WHERE month < 12 ), S AS ( SELECT c.*, IFNULL(d.ride_distance, 0) AS ride_distance, IFNULL(d.ride_duration, 0) AS ride_duration FROM M c LEFT JOIN ( SELECT MONTH(a.requested_at) AS month, SUM(b.ride_distance) AS ride_distance, SUM(b.ride_duration) AS ride_duration FROM Rides a INNER JOIN AcceptedRides b ON a.ride_id = b.ride_id WHERE YEAR(a.requested_at) = 2020 GROUP BY month ORDER BY month ) d ON c.month = d.month ), T AS ( SELECT a.*, b.ride_distance AS dist1, b.ride_duration AS dura1, c.ride_distance AS dist2, c.ride_duration AS dura2 FROM S a, S b, S c WHERE a.month = b.month - 1 AND a.month = c.month - 2 ) SELECT month, ROUND((ride_distance + dist1 + dist2) / 3,2) AS average_ride_distance, ROUND((ride_duration + dura1 + dura2) / 3,2) AS average_ride_duration FROM T ORDER BY 1
WITH RECURSIVE M AS(SELECT 1 AS MONTH UNION SELECT MONTH+1 FROM M WHERE MONTH<12), TEMP AS (SELECT M.MONTH, SUM(COALESCE(AR.RIDE_DISTANCE,0)) AS DISTANCE_SUM, SUM(COALESCE(AR.RIDE_DURATION,0)) AS DURATION_SUM FROM M LEFT OUTER JOIN RIDES R ON M.MONTH=MONTH(R.REQUESTED_AT) AND YEAR(R.REQUESTED_AT)=2020 LEFT OUTER JOIN ACCEPTEDRIDES AR ON R.RIDE_ID = AR.RIDE_ID GROUP BY M.MONTH), TEMP2 AS (SELECT MONTH, AVG(DISTANCE_SUM) OVER (ORDER BY MONTH RANGE BETWEEN CURRENT ROW AND 2 FOLLOWING) AS AVERAGE_RIDE_DISTANCE, AVG(DURATION_SUM) OVER (ORDER BY MONTH RANGE BETWEEN CURRENT ROW AND 2 FOLLOWING) AS AVERAGE_RIDE_DURATION FROM TEMP) SELECT MONTH, ROUND(COALESCE(AVERAGE_RIDE_DISTANCE,0),2) AS AVERAGE_RIDE_DISTANCE, ROUND(COALESCE(AVERAGE_RIDE_DURATION,0),2) AS AVERAGE_RIDE_DURATION FROM TEMP2 WHERE MONTH<=10 ORDER BY 1
WITH RECURSIVE MONTH AS ( SELECT 1 AS month UNION SELECT month +1 FROM MONTH WHERE month < 12 ), T1 AS ( SELECT MONTH(R.requested_at) as month, SUM(IFNULL(A.ride_distance,0)) as distance, SUM(IFNULL(A.ride_duration,0)) as duration From Rides R INNER JOIN AcceptedRides A ON R.ride_id = A.ride_id WHERE YEAR(R.requested_at) =2020 GROUP BY month ), T2 AS ( SELECT M.month, AVG(IFNULL(T1.distance,0)) OVER (ORDER BY M.month ASC ROWS Between CURRENT ROW AND 2 FOLLOWING) AS average_ride_distance, AVG(IFNULL(T1.duration,0)) OVER (ORDER BY M.month ASC ROWS Between CURRENT ROW AND 2 FOLLOWING) AS average_ride_duration FROM MONTH M LEFT JOIN T1 ON M.month = T1.month ) SELECT month, ROUND(average_ride_distance,2) AS average_ride_distance, ROUND(average_ride_duration,2) AS average_ride_duration FROM T2 WHERE month <=10
WITH RECURSIVE MonthSeq AS (SELECT 1 MONTH_NUM UNION ALL SELECT MONTH_NUM+1 FROM MonthSeq WHERE MONTH_NUM < 12), AcceptedRides2 AS (SELECT A1.*, MONTH(R1.requested_at) MONTH_NUM FROM AcceptedRides A1 JOIN Rides R1 ON A1.ride_id = R1.ride_id WHERE YEAR(requested_at) = 2020), AcceptedRides3 AS (SELECT MONTH_NUM, SUM(ride_distance) monthly_ride_distance, SUM(ride_duration) monthly_ride_duration FROM AcceptedRides2 GROUP BY MONTH_NUM ) SELECT * FROM (SELECT M1.MONTH_NUM month, ROUND((SUM(IFNULL(monthly_ride_distance,0)) OVER(ORDER BY M1.MONTH_NUM rows between current row and 2 following))/3,2) average_ride_distance, ROUND(AVG(IFNULL(monthly_ride_duration,0)) OVER(ORDER BY M1.MONTH_NUM rows between current row and 2 following),2) average_ride_duration FROM MonthSeq M1 LEFT JOIN AcceptedRides3 A2 ON M1.MONTH_NUM = A2.MONTH_NUM) T1 WHERE month <= 10
WITH RECURSIVE MonthSeq AS (SELECT 1 MONTH_NUM UNION ALL SELECT MONTH_NUM+1 FROM MonthSeq WHERE MONTH_NUM < 12), AcceptedRides2 AS (SELECT A1.*, MONTH(R1.requested_at) MONTH_NUM FROM AcceptedRides A1 JOIN Rides R1 ON A1.ride_id = R1.ride_id WHERE YEAR(requested_at) = 2020), AcceptedRides3 AS (SELECT MONTH_NUM, SUM(ride_distance) monthly_ride_distance, SUM(ride_duration) monthly_ride_duration FROM AcceptedRides2 GROUP BY MONTH_NUM ) SELECT * FROM (SELECT M1.MONTH_NUM month, ROUND(AVG(IFNULL(monthly_ride_distance,0)) OVER(ORDER BY M1.MONTH_NUM rows between current row and 2 following),2) average_ride_distance, ROUND(AVG(IFNULL(monthly_ride_duration,0)) OVER(ORDER BY M1.MONTH_NUM rows between current row and 2 following),2) average_ride_duration FROM MonthSeq M1 LEFT JOIN AcceptedRides3 A2 ON M1.MONTH_NUM = A2.MONTH_NUM) T1 WHERE month <= 10
WITH RECURSIVE MonthSeq AS (SELECT 1 MONTH_NUM UNION ALL SELECT MONTH_NUM+1 FROM MonthSeq WHERE MONTH_NUM < 12), AcceptedRides2 AS (SELECT A1.*, MONTH(R1.requested_at) MONTH_NUM FROM AcceptedRides A1 JOIN Rides R1 ON A1.ride_id = R1.ride_id WHERE YEAR(requested_at) = 2020), AcceptedRides3 AS (SELECT MONTH_NUM, SUM(ride_distance) monthly_ride_distance, SUM(ride_duration) monthly_ride_duration FROM AcceptedRides2 GROUP BY MONTH_NUM ) SELECT * FROM (SELECT M1.MONTH_NUM month, ROUND(SUM(IFNULL(monthly_ride_distance,0)) OVER(ORDER BY M1.MONTH_NUM rows between current row and 2 following)/3,2) average_ride_distance, ROUND(AVG(IFNULL(monthly_ride_duration,0)) OVER(ORDER BY M1.MONTH_NUM rows between current row and 2 following),2) average_ride_duration FROM MonthSeq M1 LEFT JOIN AcceptedRides3 A2 ON M1.MONTH_NUM = A2.MONTH_NUM) T1 WHERE month <= 10
WITH RECURSIVE Months AS ( SELECT 1 AS month UNION ALL SELECT month + 1 FROM Months WHERE month < 12 ), RideAverages AS ( SELECT M.month, ROUND( AVG(IFNULL(SUM(ride_distance), 0.0)) OVER W, 2 ) AS average_ride_distance, ROUND( AVG(IFNULL(SUM(ride_duration), 0.0)) OVER W, 2 ) AS average_ride_duration FROM Rides AS R INNER JOIN AcceptedRides AS A ON R.ride_id = A.ride_id AND year(R.requested_at) = 2020 RIGHT JOIN Months AS M ON M.month = MONTH(R.requested_at) GROUP BY M.month WINDOW W AS ( ORDER BY M.month ASC RANGE BETWEEN CURRENT ROW AND 2 FOLLOWING ) ) SELECT * FROM RideAverages ORDER BY month ASC LIMIT 10
WITH RECURSIVE Months AS ( SELECT 1 AS month UNION ALL SELECT month+1 FROM Months WHERE month < 12 ) SELECT m.month-2 AS month, ROUND(IFNULL(SUM(a.ride_distance)/3, 0), 2) AS average_ride_distance, ROUND(IFNULL(SUM(a.ride_duration)/3, 0), 2) AS average_ride_duration FROM Months m LEFT JOIN Rides r ON LEFT(r.requested_at, 4) = 2020 AND m.month >= DATE_FORMAT(r.requested_at, '%c') AND DATE_FORMAT(r.requested_at, '%c') >= (m.month - 2) LEFT JOIN AcceptedRides a ON r.ride_id = a.ride_id WHERE m.month > 2 GROUP BY 1 ORDER BY 1
WITH RECURSIVE Tab AS (SELECT 1 as month UNION ALL SELECT month+1 FROM Tab WHERE month<=11), TOT AS ( SELECT t.month, IFNULL(SUM(ride_distance),0) as dist, IFNULL(SUM(ride_duration),0) as dur FROM Rides r JOIN AcceptedRides a ON a.ride_id = r.ride_id AND YEAR(requested_at)=2020 RIGHT JOIN Tab t ON MONTH(r.requested_at) = t.month GROUP BY 1 ORDER BY 1) SELECT a.month, ROUND((a.dist+b.dist+c.dist)/3,2) as average_ride_distance, ROUND((a.dur+b.dur+c.dur)/3,2) as average_ride_duration FROM TOT a JOIN TOT b ON a.month=b.month-1 JOIN TOT c ON a.month=c.month-2 GROUP BY 1 ORDER BY 1
WITH RECURSIVE all_month AS ( SELECT 1 AS month UNION ALL SELECT month+1 AS month FROM all_month WHERE month < 12 ), rides_2020 AS ( SELECT ride_id, MONTH(requested_at) AS request_month FROM Rides WHERE YEAR(requested_at)=2020 ), t AS ( SELECT month, request_month, SUM(IFNULL(ride_distance,0)) AS ride_distance, SUM(IFNULL(ride_duration,0)) AS ride_duration FROM all_month am LEFT JOIN (rides_2020 r INNER JOIN AcceptedRides ar ON r.ride_id=ar.ride_id) ON am.month=r.request_month GROUP BY month) SELECT month, ROUND(AVG(ride_distance) OVER(ORDER BY month ROWS BETWEEN CURRENT ROW AND 2 FOLLOWING),2) AS average_ride_distance, ROUND(AVG(ride_duration) OVER(ORDER BY month ROWS BETWEEN CURRENT ROW AND 2 FOLLOWING),2) AS average_ride_duration FROM t LIMIT 10
WITH RECURSIVE all_months AS ( SELECT 1 AS month UNION ALL SELECT month+1 FROM all_months WHERE month<12), monthly_rides AS ( SELECT month(r.requested_at) as ride_month , sum(ride_distance) as monthly_rdis , sum(ride_duration) as monthly_rdur FROM AcceptedRides as ar JOIN Rides as r ON r.ride_id = ar.ride_id WHERE YEAR(r.requested_at)=2020 group by ride_month) SELECT month , round(avg(ifnull(monthly_rdis,0)) over (order by month ASC rows between current row and 2 following),2) as average_ride_distance, round(avg(ifnull(monthly_rdur,0)) over (order by month ASC rows between current row and 2 following),2) as average_ride_duration FROM all_months as am LEFT JOIN monthly_rides as mr on am.month = mr.ride_month limit 10
WITH RECURSIVE all_months AS( SELECT 1 AS MONTH UNION SELECT MONTH+1 AS MONTH FROM all_months WHERE MONTH<12 ) SELECT MONTH, round(AVG(ifnull(MONTH_DIST,0)) OVER (ORDER BY MONTH ROWS BETWEEN CURRENT ROW AND 2 FOLLOWING),2) AS average_ride_distance , round(AVG(ifnull(MONTH_DUR,0)) OVER (ORDER BY MONTH ROWS BETWEEN CURRENT ROW AND 2 FOLLOWING),2) AS average_ride_duration FROM ALL_MONTHS LEFT JOIN ( SELECT MONTH(REQUESTED_AT) AS MONTH, SUM(RIDE_DISTANCE) AS MONTH_DIST, SUM(RIDE_DURATION) AS MONTH_DUR FROM ACCEPTEDRIDES A NATURAL JOIN RIDES R WHERE REQUESTED_AT BETWEEN '2020-1-1' AND '2020-12-31' GROUP BY MONTH(REQUESTED_AT), YEAR(REQUESTED_AT)) SUB USING(MONTH) limit 10
WITH RECURSIVE all_months AS(SELECT 1 month UNION ALL SELECT month+1 month FROM all_months WHERE month<12), all_table AS(SELECT MONTH(requested_at) month, SUM(ride_distance) ride_distance, SUM(ride_duration) ride_duration FROM AcceptedRides a JOIN Rides r ON a.ride_id=r.ride_id WHERE requested_at BETWEEN '2020-1-1' AND '2020-12-31' GROUP BY 1 ORDER BY 1) SELECT a2.month, ROUND((COALESCE(ride_distance,0)+COALESCE(LEAD(ride_distance,1) OVER(),0)+COALESCE(LEAD(ride_distance,2) OVER(),0))/3,2) average_ride_distance, ROUND((COALESCE(ride_duration,0)+COALESCE(LEAD(ride_duration,1) OVER(),0)+COALESCE(LEAD(ride_duration,2) OVER(),0))/3,2) average_ride_duration FROM all_table a1 RIGHT JOIN all_months a2 ON a1.month=a2.month LIMIT 10
WITH RECURSIVE cte AS ( SELECT 1 AS month UNION ALL SELECT month + 1 FROM cte WHERE month < 12 ), base AS ( SELECT cte.month, SUM(IFNULL(a.ride_distance, 0)) AS dis, SUM(IFNULL(a.ride_duration, 0)) AS dur FROM cte LEFT JOIN Rides r ON cte.month = MONTH(r.requested_at) AND YEAR(r.requested_at) = 2020 LEFT JOIN AcceptedRides a ON r.ride_id = a.ride_id GROUP BY cte.month ) SELECT t.month, average_ride_distance, average_ride_duration FROM (SELECT b.month, ROUND(AVG(b.dis) OVER(ROWS BETWEEN CURRENT ROW AND 2 FOLLOWING), 2) AS average_ride_distance, ROUND(AVG(b.dur) OVER(ROWS BETWEEN CURRENT ROW AND 2 FOLLOWING), 2) AS average_ride_duration FROM base b ORDER BY b.month ) t WHERE t.month <= 10
WITH RECURSIVE cte AS ( SELECT 1 AS month UNION ALL SELECT month+1 FROM cte WHERE month < 12 ) SELECT cte.month, ROUND(SUM(COALESCE(dis,0)) OVER (ORDER BY cte.month ROWS BETWEEN CURRENT ROW AND 2 FOLLOWING)/3,2) AS average_ride_distance, ROUND(SUM(COALESCE(dur,0)) OVER (ORDER BY cte.month ROWS BETWEEN CURRENT ROW AND 2 FOLLOWING)/3,2) AS average_ride_duration FROM (SELECT MONTH(requested_at) AS mon, SUM(ride_distance) AS dis, SUM(ride_duration) AS dur FROM Rides r INNER JOIN AcceptedRides a ON r.ride_id = a.ride_id WHERE YEAR(requested_at) = 2020 GROUP BY mon) sub RIGHT JOIN cte ON sub.mon = cte.month ORDER BY cte.month LIMIT 10
WITH RECURSIVE cte AS ( SELECT 1 AS month UNION SELECT month+1 FROM cte WHERE month < 12 ), temp1 AS ( SELECT cte.month, COALESCE(dis,0) AS dis, COALESCE(dur,0) AS dur FROM cte LEFT JOIN ( SELECT MONTH(requested_at) AS month, SUM(ride_distance) AS dis, SUM(ride_duration) AS dur FROM Rides r INNER JOIN AcceptedRides a ON r.ride_id = a.ride_id WHERE YEAR(requested_at) = 2020 GROUP BY MONTH(requested_at) ) sub ON cte.month = sub.month ) SELECT month, ROUND(SUM(dis) OVER (ORDER BY month ROWS BETWEEN CURRENT ROW AND 2 FOLLOWING)/3,2) AS average_ride_distance, ROUND(SUM(dur) OVER (ORDER BY month ROWS BETWEEN CURRENT ROW AND 2 FOLLOWING)/3,2) AS average_ride_duration FROM temp1 LIMIT 10
WITH RECURSIVE cte(month) AS (SELECT 1 UNION ALL SELECT month + 1 FROM cte WHERE month < 12), Monthly AS (SELECT MONTH(r.requested_at) AS month, SUM(ar.ride_distance) AS monthly_distance, SUM(ride_duration) AS monthly_duration FROM Rides AS r JOIN AcceptedRides AS ar ON r.ride_id = ar.ride_id WHERE YEAR(r.requested_at) = 2020 GROUP BY month) SELECT c.month, ROUND(AVG(IFNULL(m.monthly_distance,0)) OVER(ORDER BY month ROWS BETWEEN CURRENT ROW AND 2 FOLLOWING), 2) AS average_ride_distance, ROUND(AVG(IFNULL(m.monthly_duration,0)) OVER(ORDER BY month ROWS BETWEEN CURRENT ROW AND 2 FOLLOWING), 2) AS average_ride_duration FROM cte AS c LEFT JOIN Monthly AS m ON c.month = m.month LIMIT 10
WITH RECURSIVE cte1 AS ( SELECT 1 AS month UNION ALL SELECT month + 1 FROM cte1 WHERE month < 12 ), cte2 AS ( SELECT month(r.requested_at) AS month, SUM(a.ride_distance) AS ride_distance, SUM(a.ride_duration) AS ride_duration FROM AcceptedRides a JOIN Rides r ON a.ride_id = r.ride_id WHERE LEFT(r.requested_at, 4) = '2020' GROUP BY month ), cte3 AS ( SELECT cte1.month, COALESCE(cte2.ride_distance, 0) AS ride_distance, COALESCE(cte2.ride_duration, 0) AS ride_duration FROM cte1 LEFT JOIN cte2 ON cte1.month = cte2.month ), cte4 AS ( SELECT month, ROUND(SUM(ride_distance) OVER (ORDER BY month ROWS BETWEEN CURRENT ROW AND 2 FOLLOWING) / 3, 2) AS average_ride_distance, ROUND(SUM(ride_duration) OVER (ORDER BY month ROWS BETWEEN CURRENT ROW AND 2 FOLLOWING) / 3, 2) AS average_ride_duration FROM cte3 ) SELECT * FROM cte4 WHERE month < 11 ORDER BY month
WITH RECURSIVE cte1 AS ( SELECT 1 AS month UNION ALL SELECT month+1 FROM cte1 WHERE month<12 ), cte2 AS ( SELECT MONTH(requested_at) MONTH, COUNT(DISTINCT a.ride_id) cnt, SUM(ride_distance) dist, SUM(ride_duration) duration FROM AcceptedRides a LEFT JOIN Rides b ON a.ride_id=b.ride_id WHERE YEAR(requested_at)=2020 GROUP BY MONTH(requested_at) ) SELECT a.month, COALESCE(ROUND(SUM(dist)/3,2),0) average_ride_distance, ROUND(COALESCE(SUM(duration)/3,0),2) average_ride_duration FROM cte1 a LEFT JOIN cte2 b ON a.month BETWEEN b.month-2 AND b.month WHERE a.month<11 GROUP BY a.month ORDER BY a.month
WITH RECURSIVE cte1 AS( SELECT 1 AS month UNION ALL SELECT month + 1 AS month FROM cte1 WHERE month < 12 ), cte2 AS( SELECT YEAR(requested_at) AS Year, MONTH(requested_at) AS Month, SUM(ride_distance) AS total_ride_distance, SUM(ride_duration) AS total_ride_duration FROM AcceptedRides JOIN Rides ON AcceptedRides.ride_id = Rides.ride_id GROUP BY Year, Month HAVING Year = 2020 ORDER BY Year, Month ), cte3 AS( SELECT cte1.month, ROUND(SUM(IFNULL(total_ride_distance,0)) OVER(ORDER BY cte1.month ROWS BETWEEN CURRENT ROW AND 2 FOLLOWING) / 3, 2) AS average_ride_distance, ROUND(SUM(IFNULL(total_ride_duration,0)) OVER(ORDER BY cte1.month ROWS BETWEEN CURRENT ROW AND 2 FOLLOWING) / 3, 2) AS average_ride_duration FROM cte1 LEFT JOIN cte2 ON cte1.month = cte2.Month ) SELECT * FROM cte3 WHERE month <= 10
WITH RECURSIVE cte_count (n) AS ( SELECT 1 UNION ALL SELECT n + 1 FROM cte_count WHERE n < 12 ) SELECT * FROM ( SELECT n as month, COALESCE(ROUND(SUM(average_ride_distance) OVER(ORDER BY N RANGE BETWEEN CURRENT ROW AND 2 FOLLOWING)/3,2),0) AS average_ride_distance , COALESCE(ROUND(SUM(average_ride_duration) OVER(ORDER BY N RANGE BETWEEN CURRENT ROW AND 2 FOLLOWING)/3,2),0) AS average_ride_duration FROM cte_count LEFT JOin (SELECT EXTRACT(Month FROM requested_at) AS Month, SUM(ride_distance ) AS average_ride_distance, SUM(ride_duration) AS average_ride_duration FROM RIDES JOIN AcceptedRides USING(ride_id) WHERE YEAR(requested_at) = "2020" Group by EXTRACT(Month FROM requested_at)) as Month_Calculation ON cte_count.n = Month_Calculation.Month )fINAL WHERE month<11 ORDER BY month
WITH RECURSIVE full_year AS ( SELECT 1 as month UNION ALL SELECT month+1 FROM full_year WHERE month < 10 ), tb as ( select month(r.requested_at)as month, sum(ar.ride_distance ) as s_dist, sum(ar.ride_duration ) as s_dur from Rides as r join AcceptedRides as ar on r.ride_id = ar.ride_id where r.requested_at between '2020-01-01' and '2020-12-31' group by month(r.requested_at) ) select full_year.month, round( (ifnull(t1.s_dist,0) + ifnull(t2.s_dist,0) + ifnull(t3.s_dist,0))/3,2) as average_ride_distance , round( (ifnull(t1.s_dur,0) + ifnull(t2.s_dur,0) + ifnull(t3.s_dur,0))/3,2) as average_ride_duration from full_year left join tb as t1 on full_year.month = t1.month left join tb as t2 on full_year.month = t2.month-1 left join tb as t3 on full_year.month = t3.month-2
WITH RECURSIVE full_year AS ( SELECT 1 as month UNION ALL SELECT month+1 FROM full_year WHERE month < 12 ), CTE_1 AS ( SELECT ride_id,MONTH(requested_at) AS Month, YEAR(requested_at) AS Year FROM Rides ), CTE_2 AS (SELECT CTE_1.ride_id, CTE_1.Year, CTE_1.Month, ride_distance, ride_duration FROM AcceptedRides LEFT JOIN CTE_1 ON AcceptedRides.ride_id = CTE_1.ride_id WHERE CTE_1.Year = 2020), CTE_3 AS ( SELECT ride_id,Year,full_year.month,COALESCE(ride_distance, 0 ) AS ride_distance,COALESCE(ride_duration, 0 ) AS ride_duration FROM CTE_2 RIGHT JOIN full_year ON full_year.month = CTE_2.Month ORDER BY full_year.month), CTE_4 AS ( SELECT month, SUM(ride_distance) AS ride_distance, SUM(ride_duration) AS ride_duration FROM CTE_3 GROUP BY month ), CTE_5 AS ( SELECT month, AVG(ride_distance) OVER(ORDER BY month ROWS BETWEEN CURRENT ROW AND 2 FOLLOWING) AS ride_distance, AVG(ride_duration) OVER(ORDER BY month ROWS BETWEEN CURRENT ROW AND 2 FOLLOWING) AS ride_duration FROM CTE_4 ) SELECT month, ROUND(ride_distance,2) AS average_ride_distance, ROUND(ride_duration,2) AS average_ride_duration FROM CTE_5 WHERE month <= 10
WITH RECURSIVE full_year AS ( SELECT 1 as month UNION ALL SELECT month+1 FROM full_year WHERE month < 12 ), cte1 AS ( SELECT MONTH(requested_at) AS month, sum(ride_distance) AS ride_distance , SUM(ride_duration) AS ride_duration FROM Rides r JOIN AcceptedRides a ON r.ride_id = a.ride_id WHERE requested_at >= '2020-01-01' AND requested_at < '2021-01-01' GROUP BY month ORDER BY requested_at ), cte2 AS ( SELECT full_year.month, ride_distance , ride_duration, LEAD(ride_distance, 1) OVER(ORDER BY full_year.month) ride_distance_next, LEAD(ride_distance, 2) OVER(ORDER BY full_year.month) ride_distance_next_next, LEAD(ride_duration, 1) OVER(ORDER BY full_year.month) ride_duration_next, LEAD(ride_duration, 2) OVER(ORDER BY full_year.month) ride_duration_next_next FROM full_year LEFT JOIN cte1 ON full_year.month = cte1.month ORDER BY full_year.month ) SELECT month, ROUND((IFNULL(ride_distance,0) + IFNULL(ride_distance_next,0) + IFNULL(ride_distance_next_next,0))/3,2) AS average_ride_distance, ROUND((IFNULL(ride_duration,0) + IFNULL(ride_duration_next,0) + IFNULL(ride_duration_next_next,0))/3, 2) AS average_ride_duration FROM cte2 WHERE month <= 10
WITH RECURSIVE full_year AS ( SELECT 1 as month UNION ALL SELECT month+1 FROM full_year WHERE month < 12), temp as (select sum(ride_distance) as total_dis, sum(ride_duration) as total_dur, month(requested_at) as month from Rides join AcceptedRides on Rides.ride_id=AcceptedRides.ride_id where year(requested_at)=2020 group by month(requested_at) ), temp2 as (select full_year.month, ifnull(total_dur,0) as total_dur, ifnull(total_dis, 0) as total_dis from temp right join full_year on full_year.month=temp.month), temp3 as (select *, lead(temp2.total_dur,1,null)over(order by month) as lead2_total_dur, lead(temp2.total_dur,2,null)over(order by month) as lead3_total_dur, lead(temp2.total_dis,1,null)over(order by month) as lead2_total_dis, lead(temp2.total_dis,2,null)over(order by month) as lead3_total_dis from temp2) select temp3.month, round((total_dis+lead2_total_dis+lead3_total_dis)/3,2) as average_ride_distance ,round((total_dur+lead2_total_dur+lead3_total_dur)/3,2) as average_ride_duration from temp3 where temp3.month<=10
WITH RECURSIVE m AS ( SELECT 1 AS month UNION SELECT month + 1 FROM m WHERE month < 12 ) , v AS ( SELECT MONTH(requested_at) AS m_number, SUM(ride_distance) AS ride_distance, SUM(ride_duration) AS ride_duration FROM Rides AS ina, AcceptedRides AS inb WHERE ina.ride_id = inb.ride_id AND requested_at BETWEEN "2020-01-01" AND "2020-12-31" GROUP BY MONTH(requested_at) ), tmp AS ( SELECT month, ifnull(ride_distance, 0) AS ride_distance, ifnull(ride_duration, 0) AS ride_duration FROM m LEFT JOIN v ON m.month=v.m_number ) SELECT ina.month, ROUND((ina.ride_distance+inb.ride_distance+inc.ride_distance)/3, 2) AS average_ride_distance, ROUND((ina.ride_duration+inb.ride_duration+inc.ride_duration)/3, 2) AS average_ride_duration FROM tmp AS ina, tmp AS inb, tmp AS inc WHERE ina.month + 1 = inb.month AND inb.month + 1 = inc.month AND ina.month <= 10 GROUP BY ina.month
WITH RECURSIVE m AS ( SELECT 1 month UNION SELECT month+1 month FROM m WHERE month<=11 ), t AS ( SELECT DATE_FORMAT(requested_at,'%m') month, SUM(ride_distance) total_distance, SUM(ride_duration) total_duration FROM rides r JOIN acceptedrides a ON r.ride_id=a.ride_id WHERE DATE_FORMAT(requested_at,'%Y')=2020 GROUP BY DATE_FORMAT(requested_at,'%m') ) SELECT m.month month, ROUND(IFNULL(SUM(total_distance) OVER(ORDER BY month ROWS BETWEEN CURRENT ROW AND 2 FOLLOWING),0)/3,2) average_ride_distance, ROUND(IFNULL(SUM(total_duration) OVER(ORDER BY month ROWS BETWEEN CURRENT ROW AND 2 FOLLOWING),0)/3,2) average_ride_duration FROM t RIGHT JOIN m ON t.month=m.month ORDER BY month LIMIT 10
WITH RECURSIVE month (month) AS ( SELECT 1 month UNION ALL SELECT month + 1 FROM month WHERE month < 12 ), month_rides AS ( SELECT MONTH(requested_at) month, SUM(ride_distance) ride_distance, SUM(ride_duration) ride_duration FROM Rides JOIN AcceptedRides USING (ride_id) WHERE YEAR(requested_at)=2020 GROUP BY month ), every_month_rides AS ( SELECT month.month month, IFNULL(ride_distance, 0) ride_distance, IFNULL(ride_duration, 0) ride_duration FROM month LEFT JOIN month_rides ON month.month=month_rides.month ) SELECT t1.month month, ROUND((t1.ride_distance + t2.ride_distance + t3.ride_distance)/3,2) AS average_ride_distance, ROUND((t1.ride_duration + t2.ride_duration + t3.ride_duration)/3,2) AS average_ride_duration FROM every_month_rides t1 JOIN every_month_rides t2 JOIN every_month_rides t3 ON t1.month=t2.month-1 AND t2.month=t3.month-1
WITH RECURSIVE month as ( select 1 as month union select month + 1 as month from month where month < 10 ), monthly_rides AS(SELECT MONTH(r.requested_at) AS month, SUM(ar.ride_distance) AS ride_distance, SUM(ar.ride_duration) AS ride_duration FROM rides r JOIN AcceptedRides ar ON r.ride_id = ar.ride_id AND YEAR(r.requested_at) = 2020 GROUP BY MONTH(r.requested_at)) SELECT m.month, IFNULL(ROUND(SUM(mr.ride_distance)/3, 2), 0) AS average_ride_distance, IFNULL(ROUND(SUM(mr.ride_duration)/3, 2), 0) AS average_ride_duration FROM month m LEFT JOIN monthly_rides mr ON mr.month-m.month BETWEEN 0 AND 2 GROUP BY m.month ORDER BY m.month
WITH RECURSIVE month_list AS ( SELECT 1 AS month, '2020-04-01' AS next_month UNION ALL SELECT month+1 AS month, CASE WHEN month<9 THEN CONCAT('2020-',month+4, '-01') ELSE '2021-01-01' END AS next_month FROM month_list WHERE month<10) SELECT month, ROUND(SUM(COALESCE(ride_distance,0))/3,2) AS average_ride_distance, ROUND(SUM(COALESCE(ride_duration,0))/3,2) AS average_ride_duration FROM month_list LEFT JOIN (SELECT r.ride_id, r.requested_at, ride_distance, ride_duration FROM AcceptedRides ar JOIN Rides r ON ar.ride_id = r.ride_id) rs ON DATE_ADD(rs.requested_at, INTERVAL 3 MONTH)>=next_month AND rs.requested_at< next_month GROUP BY month
WITH RECURSIVE month_list(month) AS ( SELECT 1 UNION SELECT month+1 FROM month_list WHERE month<12 ), main AS ( SELECT month, IFNULL(ride_distance,0) AS ride_distance, IFNULL(ride_duration,0) AS ride_duration, requested_at, ride_id FROM month_list LEFT JOIN Rides ON YEAR(requested_at) = 2020 AND MONTH(requested_at)=month LEFT JOIN AcceptedRides USING(ride_id) ) SELECT month, ROUND((AVG(SUM(ride_distance)) OVER(ORDER BY month RANGE BETWEEN CURRENT ROW AND 2 FOLLOWING)),2) AS average_ride_distance, ROUND((AVG(SUM(ride_duration)) OVER(ORDER BY month RANGE BETWEEN CURRENT ROW AND 2 FOLLOWING)),2) AS average_ride_duration FROM main GROUP BY month ORDER BY month LIMIT 10
WITH RECURSIVE month_table AS ( SELECT 1 AS month UNION ALL SELECT month + 1 FROM month_table WHERE month < 12), table2 AS (SELECT m.month, IFNULL(A.distance, 0) AS `distance`, IFNULL(A.duration, 0) AS `duration` FROM (SELECT MONTH(r.requested_at) AS `month`, SUM(a.ride_distance) AS distance, SUM(a.ride_duration) AS duration FROM Rides r JOIN AcceptedRides a ON r.ride_id = a.ride_id WHERE YEAR(r.requested_at) = '2020' GROUP BY month) AS A RIGHT JOIN month_table m ON A.month = m.month ) SELECT d1.month, ROUND(AVG(d2.distance), 2) AS average_ride_distance, ROUND(AVG(d2.duration), 2) AS average_ride_duration FROM table2 d1 LEFT JOIN table2 d2 ON d1.month <= d2.month AND d2.month < d1.month + 3 GROUP BY d1.month HAVING COUNT(d1.month) = 3
WITH RECURSIVE monthcount as ( SELECT 1 month UNION SELECT month+1 month FROM monthcount WHERE month < 12), t AS( SELECT month, ROUND(sum(di) over(order by month rows between current row and 2 following)/3,2) as average_ride_distance, ROUND(sum(dU) over(order by month rows between current row and 2 following)/3,2) as average_ride_duration FROM (SELECT month,SUM(IFNULL(ride_distance,0)) AS di,SUM(IFNULL(ride_duration,0)) AS du FROM monthcount m LEFT JOIN Rides r ON (m.month=MONTH(r.requested_at) AND YEAR(r.requested_at)=2020) LEFT JOIN AcceptedRides a ON a.ride_id=r.ride_id GROUP BY 1)a) SELECT * FROM t WHERE t.month<=10
WITH RECURSIVE monthly_ride_stats AS ( SELECT ride_month, SUM(dist) AS monthly_distance, SUM(duration) AS monthly_duration FROM ( SELECT ride_distance AS dist, ride_duration AS duration, requested_at AS ride_date, EXTRACT(MONTH FROM requested_at) AS ride_month FROM AcceptedRides LEFT JOIN Rides ON AcceptedRides.ride_id = Rides.ride_id WHERE ((EXTRACT(YEAR FROM requested_at)>2019) AND (EXTRACT(YEAR FROM requested_at)<2021)) ORDER BY EXTRACT(MONTH FROM requested_at) ) AS rides_details GROUP BY ride_month ), month_vals (mth) AS ( SELECT 1 UNION ALL SELECT mth + 1 FROM month_vals WHERE mth <12 ), monthly_ride_stats_12_months AS ( SELECT mth, COALESCE(monthly_distance, 0) as dist, COALESCE(monthly_duration, 0) as dur FROM month_vals LEFT JOIN monthly_ride_stats AS mrs ON month_vals.mth = mrs.ride_month ) SELECT mth AS month, ROUND(AVG(dist) OVER (ORDER BY mth ROWS BETWEEN CURRENT ROW AND 2 FOLLOWING), 2) AS average_ride_distance, ROUND(AVG(dur) OVER (ORDER BY mth ROWS BETWEEN CURRENT ROW AND 2 FOLLOWING), 2) AS average_ride_duration FROM monthly_ride_stats_12_months AS mrs12 LIMIT 10
WITH RECURSIVE months (month) AS ( SELECT 1 UNION ALL SELECT month + 1 FROM months WHERE month < 12 ), t1 AS ( SELECT MONTH(requested_at) AS month, SUM(ride_distance) AS ride_distance, SUM(ride_duration) AS ride_duration FROM Rides r JOIN AcceptedRides a ON r.ride_id = a.ride_id WHERE YEAR(requested_at) = 2020 GROUP BY MONTH(requested_at) ), tmp AS( SELECT m.month, IFNULL(ride_distance, 0) AS ride_distance, IFNULL(ride_duration, 0) AS ride_duration FROM months m LEFT JOIN t1 ON m.month = t1.month ) SELECT t1.month, ROUND((t1.ride_distance + t2.ride_distance + t3.ride_distance) / 3, 2) AS average_ride_distance, ROUND((t1.ride_duration + t2.ride_duration + t3.ride_duration) / 3, 2) AS average_ride_duration FROM tmp t1 LEFT JOIN tmp t2 ON t1.month = t2.month - 1 LEFT JOIN tmp t3 ON t1.month = t3.month - 2 WHERE t1.month <= 10
WITH RECURSIVE months AS ( SELECT 1 AS month UNION ALL SELECT month + 1 FROM months WHERE month < 12 ) , sum_rides AS ( SELECT MONTH(r.requested_at) AS month , SUM(ride_duration) AS monthly_ride_duration , SUM(ride_distance) AS monthly_ride_distance FROM Rides r INNER JOIN AcceptedRides a USING(ride_id) WHERE YEAR(r.requested_at) = 2020 GROUP BY MONTH(r.requested_at) ) , every_month_rides AS ( SELECT m.month , IFNULL(monthly_ride_duration,0) AS monthly_ride_duration , IFNULL(monthly_ride_distance,0) AS monthly_ride_distance FROM months m LEFT JOIN sum_rides USING(month) ) SELECT t1.month , ROUND((t1.monthly_ride_distance + t2.monthly_ride_distance + t3.monthly_ride_distance)/3,2) AS average_ride_distance , ROUND((t1.monthly_ride_duration + t2.monthly_ride_duration + t3.monthly_ride_duration)/3,2) AS average_ride_duration FROM every_month_rides t1 ,every_month_rides t2 ,every_month_rides t3 WHERE t1.month = t2.month-1 AND t2.month = t3.month-1
WITH RECURSIVE months AS ( SELECT 1 AS month UNION ALL SELECT month + 1 FROM months WHERE month < 12 ) ,cte AS ( SELECT m.month ,SUM(CASE WHEN a.ride_distance IS NOT NULL THEN a.ride_distance ELSE 0 END) AS total_distance ,SUM(CASE WHEN a.ride_duration IS NOT NULL THEN a.ride_duration ELSE 0 END) AS total_duration FROM Rides r INNER JOIN AcceptedRides a ON r.ride_id = a.ride_id AND YEAR(r.requested_at) = 2020 RIGHT JOIN months m ON MONTH(r.requested_at) = m.month GROUP BY m.month ) SELECT month ,average_ride_distance ,average_ride_duration FROM ( SELECT c1.month ,ROUND(AVG(c2.total_distance), 2) AS average_ride_distance ,ROUND(AVG(c2.total_duration), 2) AS average_ride_duration FROM cte c1, cte c2 WHERE c2.month >= c1.month AND c2.month <= c1.month + 2 GROUP BY c1.month ) t WHERE month <= 10 ORDER BY month
WITH RECURSIVE months AS ( SELECT 1 AS month UNION ALL SELECT month + 1 FROM months WHERE month < 12 ) select * from ( select month ,round( (ifnull (sum(ride_distance),0) + ifnull(lead(sum(ride_distance)) over ( order by month ) , 0) + ifnull(lead(sum(ride_distance),2) over ( order by month ),0))/3 , 2) as average_ride_distance , round( (ifnull (sum( ride_duration),0) + ifnull(lead(sum(ride_duration)) over ( order by month ) , 0) + ifnull(lead(sum(ride_duration),2) over ( order by month ),0))/3 , 2) as average_ride_duration from months left join (select extract(month from requested_at) as ride_month , ride_id from Rides where requested_at between '2020-01-01' and '2020-12-31') r on month = ride_month left join AcceptedRides ar on r.ride_id = ar.ride_id group by month ) a where month <=10
WITH RECURSIVE months AS ( SELECT 1 AS month UNION ALL SELECT month + 1 FROM months WHERE month < 12 ), monthly_rides AS ( SELECT mo.month, IFNULL(SUM(ar.ride_distance), 0) AS total_distance, IFNULL(SUM(ar.ride_duration), 0) AS total_duration FROM months mo LEFT JOIN ( AcceptedRides ar JOIN Rides r ON ar.ride_id = r.ride_id AND YEAR(r.requested_at) = 2020 ) ON mo.month = MONTH(r.requested_at) GROUP BY mo.month ) SELECT mo.month, ROUND(AVG(mr.total_distance), 2) AS average_ride_distance, ROUND(AVG(mr.total_duration), 2) AS average_ride_duration FROM monthly_rides mr JOIN months mo ON mr.month BETWEEN mo.month AND mo.month + 2 WHERE mo.month < 11 GROUP BY mo.month
WITH RECURSIVE months AS ( SELECT 1 AS month UNION SELECT month + 1 AS month FROM months WHERE month < 12), distance_duration AS ( SELECT MONTH(r.requested_at) AS month, SUM(ride_distance) AS distance, SUM(ride_duration) AS duration FROM Rides r JOIN AcceptedRides ar ON r.ride_id = ar.ride_id WHERE YEAR(r.requested_at) = 2020 GROUP BY month) SELECT month, ROUND(AVG(distance) OVER (ORDER BY month RANGE BETWEEN CURRENT ROW AND 2 FOLLOWING), 2) AS average_ride_distance, ROUND(AVG(duration) OVER (ORDER BY month RANGE BETWEEN CURRENT ROW AND 2 FOLLOWING), 2) AS average_ride_duration FROM (SELECT m.month, IFNULL(d.distance, 0) AS distance, IFNULL(d.duration, 0) AS duration FROM months m LEFT JOIN distance_duration d ON m.month = d.month) t1 ORDER BY month LIMIT 10
WITH RECURSIVE months AS( SELECT 1 AS month UNION ALL SELECT month + 1 FROM months WHERE month < 12 ), every_month_sum AS ( SELECT MONTH(requested_at) AS month , SUM(ride_distance) AS sum_distance , SUM(ride_duration) AS sum_duration FROM Rides r JOIN AcceptedRides a USING (ride_id) WHERE YEAR(requested_at) = 2020 GROUP BY MONTH(requested_at) ) SELECT t.month , ROUND(AVG(IFNULL(sum_distance,0)) OVER(ORDER BY t.month ROWS BETWEEN CURRENT ROW AND 2 FOLLOWING),2) AS average_ride_distance , ROUND(AVG(IFNULL(sum_duration,0)) OVER(ORDER BY t.month ROWS BETWEEN CURRENT ROW AND 2 FOLLOWING),2) AS average_ride_duration FROM months t LEFT JOIN every_month_sum e USING (month) ORDER BY t.month LIMIT 10
WITH RECURSIVE months as( select 1 as month union all select month+1 from months where month<12) , monthly_average as ( SELECT MONTH(r.requested_at) month, SUM(ride_distance) total_distance, SUM(ride_duration) total_duration FROM AcceptedRides a JOIN Rides r ON a.ride_id = r.ride_id WHERE YEAR(r.requested_at) = 2020 group by month ) SELECT t.month, ROUND(AVG(cast(ifnull(m.total_distance,0) as float)) OVER(ORDER BY t.month rows BETWEEN CURRENT ROW AND 2 FOLLOWING),2 ) AS average_ride_distance, ROUND(AVG(cast(ifnull(m.total_duration,0) as float)) OVER(ORDER BY t.month rows BETWEEN CURRENT ROW AND 2 FOLLOWING),2 ) AS average_ride_duration FROM months t LEFT JOIN monthly_average m ON t.month = m.month LIMIT 10
WITH RECURSIVE months(month) AS ( SELECT 1 AS month UNION ALL SELECT month+1 AS month FROM months WHERE month < 10 ), rides_with_month AS ( SELECT MONTH(R.requested_at) AS requested_month, SUM(A.ride_distance) AS ride_distance, SUM(A.ride_duration) AS ride_duration FROM Rides R INNER JOIN AcceptedRides A ON R.ride_id = A.ride_id WHERE requested_at BETWEEN '2020-01-01' AND '2020-12-31' GROUP BY requested_month ), joined_table AS ( SELECT M.month, ROUND(IFNULL(SUM(R.ride_distance), 0) / 3,2) AS average_ride_distance, ROUND(IFNULL(SUM(R.ride_duration), 0) / 3,2) AS average_ride_duration FROM months M LEFT OUTER JOIN rides_with_month R ON M.month = R.requested_month OR M.month = R.requested_month - 1 OR M.month = R.requested_month - 2 GROUP BY M.month ) SELECT * FROM joined_table
WITH RECURSIVE months(month) as ( SELECT 1 UNION ALL SELECT month+1 FROM months WHERE month<12 ), t1 AS (SELECT sum(ride_distance) monthly_distance, sum(ride_duration) monthly_duration, month(requested_at) month FROM Rides JOIN AcceptedRides USING(ride_id) WHERE year(requested_at)=2020 GROUP BY month ) select m.month, ifnull(round(sum(monthly_distance)/3,2),0) as average_ride_distance, ifnull(round(sum(monthly_duration)/3,2),0) as average_ride_duration from months m left join t1 on ((t1.month - m.month = 0) or (t1.month - m.month = 1) or (t1.month - m.month = 2)) group by 1 order by 1 limit 10
WITH RECURSIVE months_list AS ( SELECT 1 as months, 0 as dist, 0 as dur UNION ALL SELECT months + 1 as months, 0 as dist, 0 as dur FROM months_list WHERE months < 12 ) select * from ( SELECT m as month , round(sum(dist) over (order by m ROWS BETWEEN CURRENT ROW AND 2 FOLLOWING)/3,2) as average_ride_distance , round(sum(dur) over (order by m ROWS BETWEEN CURRENT ROW AND 2 FOLLOWING)/3,2) as average_ride_duration FROM( SELECT t.months as m , sum(dist) as dist , sum(dur) as dur FROM (SELECT * FROM months_list UNION ALL SELECT month(requested_at) as months , sum(ride_distance) as dist , sum(ride_duration) as dur FROM AcceptedRides acc JOIN Rides r on acc.ride_id = r.ride_id WHERE requested_at between '2020-01-01' and '2020-12-31' GROUP by month(requested_at))t GROUP BY t.months)t2 ) T3 where month <11
WITH RECURSIVE t AS ( SELECT DATE_FORMAT(requested_at,'%m') month, SUM(ride_distance) total_distance, SUM(ride_duration) total_duration FROM rides r JOIN acceptedrides a ON r.ride_id=a.ride_id WHERE DATE_FORMAT(requested_at,'%Y')=2020 GROUP BY DATE_FORMAT(requested_at,'%m') ), m AS ( SELECT 1 month UNION SELECT month+1 month FROM m WHERE month<=11 ) SELECT m.month month, ROUND(IFNULL(SUM(total_distance) OVER(ORDER BY month ROWS BETWEEN CURRENT ROW AND 2 FOLLOWING),0)/3,2) average_ride_distance, ROUND(IFNULL(SUM(total_duration) OVER(ORDER BY month ROWS BETWEEN CURRENT ROW AND 2 FOLLOWING),0)/3,2) average_ride_duration FROM t RIGHT JOIN m ON t.month=m.month ORDER BY month LIMIT 10
WITH RECURSIVE t AS( SELECT 1 AS month UNION ALL SELECT month + 1 FROM t WHERE month < 12), t1 AS( SELECT month,SUM(ride_distance) ride_distance, SUM(ride_duration) ride_duration FROM t LEFT JOIN ( SELECT requested_at, IFNULL(ride_distance,0) ride_distance, IFNULL(ride_duration,0) ride_duration FROM Rides RIGHT JOIN AcceptedRides ON Rides.ride_id = AcceptedRides.ride_id AND YEAR(Rides.requested_at) = 2020 ) Rides ON t.month = MONTH(Rides.requested_at) GROUP BY month) SELECT month, IFNULL(average_ride_distance,0) average_ride_distance, IFNULL(average_ride_duration,0) average_ride_duration FROM(SELECT month, ROUND(SUM(ride_distance) OVER(ORDER BY month ROWS BETWEEN CURRENT ROW AND 2 FOLLOWING)/3,2) AS average_ride_distance, ROUND(SUM(ride_duration) OVER(ORDER BY month ROWS BETWEEN CURRENT ROW AND 2 FOLLOWING)/3,2) AS average_ride_duration FROM t1) final WHERE month < 11
WITH Recursive month as ( select 1 as month union select month + 1 as month from month where month <= 12 ), CTE as (select m.month as mon, ifnull(d.distance, 0) as distance, ifnull(d.duration,0) as duration from month m left join (select mon, sum(ride_distance) as distance, sum(ride_duration) as duration from (select a.*, month(b.requested_at) as mon from AcceptedRides a left join Rides b on a.ride_id = b.ride_id and requested_at >= '2020-01-01' and requested_at <= '2020-12-31') c group by mon) d on m.month=d.mon) select a.mon as month, round((distance+distance_lead1+distance_lead2)/3,2) as average_ride_distance, round((duration+duration_lead1+duration_lead2)/3,2) as average_ride_duration from (select mon,distance, duration, lead(distance,1) over (order by mon) as distance_lead1, lead(distance,2) over (order by mon) as distance_lead2, lead(duration,1) over (order by mon) as duration_lead1, lead(duration,2) over (order by mon) as duration_lead2 from CTE) a order by mon limit 10
WITH c1 AS (SELECT MONTH(r.requested_at) AS month ,SUM(IFNULL(a.ride_distance,0)) AS ride_distance ,SUM(IFNULL(a.ride_duration,0)) AS ride_duration FROM Rides r LEFT JOIN AcceptedRides a ON r.ride_id = a.ride_id WHERE YEAR(r.requested_at) = 2020 GROUP BY 1) ,c2 AS (WITH RECURSIVE se AS (SELECT 1 AS month UNION ALL SELECT month+1 AS month FROM se WHERE month < 12) SELECT * FROM se) ,c3 AS (SELECT c2.month ,IFNULL(c1.ride_distance,0) AS ride_distance ,IFNULL(c1.ride_duration,0) AS ride_duration FROM c2 LEFT JOIN c1 ON c2.month = c1.month) ,c4 AS (SELECT month ,ROUND(SUM(ride_distance) OVER (ORDER BY month ROWS BETWEEN CURRENT ROW AND 2 FOLLOWING)/3,2) AS average_ride_distance ,ROUND(SUM(ride_duration) OVER (ORDER BY month ROWS BETWEEN CURRENT ROW AND 2 FOLLOWING)/3,2) AS average_ride_duration FROM c3 ORDER BY 1) SELECT * FROM c4 WHERE month <= 10
WITH month AS (SELECT 1 AS month UNION ALL SELECT 2 AS month UNION ALL SELECT 3 AS month UNION ALL SELECT 4 AS month UNION ALL SELECT 5 AS month UNION ALL SELECT 6 AS month UNION ALL SELECT 7 AS month UNION ALL SELECT 8 AS month UNION ALL SELECT 9 AS month UNION ALL SELECT 10 AS month UNION ALL SELECT 11 AS month UNION ALL SELECT 12 AS month), Rides_final AS (SELECT MONTH(R.requested_at) AS month, SUM(A.ride_distance) AS distance, SUM(A.ride_duration) AS duration, COUNT(A.ride_id) AS ct FROM Rides R JOIN AcceptedRides A ON R.ride_id = A.ride_id WHERE YEAR(R.requested_at)=2020 GROUP BY month), data_final AS (SELECT M.month, IFNULL(distance,0) AS distance, IFNULL(duration,0) AS duration, IFNULL(ct,0) AS ct FROM Month M LEFT JOIN Rides_final R ON R.month=M.month) SELECT A.month AS month, ROUND((A.distance+B.distance+C.distance)/3,2) AS average_ride_distance, ROUND((A.duration+B.duration+C.duration)/3,2) AS average_ride_duration FROM data_final A JOIN data_final B ON A.month+1 = B.month JOIN data_final C ON A.month+2 = C.month
WITH month AS (SELECT 1 as month, sum(CASE WHEN month(requested_at) = 1 THEN ride_distance ELSE 0 END) as ride_distance, sum(CASE WHEN month(requested_at) = 1 THEN ride_duration ELSE 0 END) as ride_duration FROM rides r JOIN acceptedrides a ON r.ride_id = a.ride_id WHERE year(requested_at) = 2020 UNION ALL SELECT 2, sum(CASE WHEN month(requested_at) = 2 THEN ride_distance ELSE 0 END) as ride_distance, sum(CASE WHEN month(requested_at) = 2 THEN ride_duration ELSE 0 END) as ride_duration FROM rides r JOIN acceptedrides a ON r.ride_id = a.ride_id WHERE year(requested_at) = 2020 UNION ALL SELECT 3, sum(CASE WHEN month(requested_at) = 3 THEN ride_distance ELSE 0 END) as ride_distance, sum(CASE WHEN month(requested_at) = 3 THEN ride_duration ELSE 0 END) as ride_duration FROM rides r JOIN acceptedrides a ON r.ride_id = a.ride_id WHERE year(requested_at) = 2020 UNION ALL SELECT 4, sum(CASE WHEN month(requested_at) = 4 THEN ride_distance ELSE 0 END) as ride_distance, sum(CASE WHEN month(requested_at) = 4 THEN ride_duration ELSE 0 END) as ride_duration FROM rides r JOIN acceptedrides a ON r.ride_id = a.ride_id WHERE year(requested_at) = 2020 UNION ALL SELECT 5, sum(CASE WHEN month(requested_at) = 5 THEN ride_distance ELSE 0 END) as ride_distance, sum(CASE WHEN month(requested_at) = 5 THEN ride_duration ELSE 0 END) as ride_duration FROM rides r JOIN acceptedrides a ON r.ride_id = a.ride_id WHERE year(requested_at) = 2020 UNION ALL SELECT 6, sum(CASE WHEN month(requested_at) = 6 THEN ride_distance ELSE 0 END) as ride_distance, sum(CASE WHEN month(requested_at) = 6 THEN ride_duration ELSE 0 END) as ride_duration FROM rides r JOIN acceptedrides a ON r.ride_id = a.ride_id WHERE year(requested_at) = 2020 UNION ALL SELECT 7, sum(CASE WHEN month(requested_at) = 7 THEN ride_distance ELSE 0 END) as ride_distance, sum(CASE WHEN month(requested_at) = 7 THEN ride_duration ELSE 0 END) as ride_duration FROM rides r JOIN acceptedrides a ON r.ride_id = a.ride_id WHERE year(requested_at) = 2020 UNION ALL SELECT 8, sum(CASE WHEN month(requested_at) = 8 THEN ride_distance ELSE 0 END) as ride_distance, sum(CASE WHEN month(requested_at) = 8 THEN ride_duration ELSE 0 END) as ride_duration FROM rides r JOIN acceptedrides a ON r.ride_id = a.ride_id WHERE year(requested_at) = 2020 UNION ALL SELECT 9, sum(CASE WHEN month(requested_at) = 9 THEN ride_distance ELSE 0 END) as ride_distance, sum(CASE WHEN month(requested_at) = 9 THEN ride_duration ELSE 0 END) as ride_duration FROM rides r JOIN acceptedrides a ON r.ride_id = a.ride_id WHERE year(requested_at) = 2020 UNION ALL SELECT 10, sum(CASE WHEN month(requested_at) = 10 THEN ride_distance ELSE 0 END) as ride_distance, sum(CASE WHEN month(requested_at) = 10 THEN ride_duration ELSE 0 END) as ride_duration FROM rides r JOIN acceptedrides a ON r.ride_id = a.ride_id WHERE year(requested_at) = 2020 UNION ALL SELECT 11, sum(CASE WHEN month(requested_at) = 11 THEN ride_distance ELSE 0 END) as ride_distance, sum(CASE WHEN month(requested_at) = 11 THEN ride_duration ELSE 0 END) as ride_duration FROM rides r JOIN acceptedrides a ON r.ride_id = a.ride_id WHERE year(requested_at) = 2020 UNION ALL SELECT 12, sum(CASE WHEN month(requested_at) = 12 THEN ride_distance ELSE 0 END) as ride_distance, sum(CASE WHEN month(requested_at) = 12 THEN ride_duration ELSE 0 END) as ride_duration FROM rides r JOIN acceptedrides a ON r.ride_id = a.ride_id WHERE year(requested_at) = 2020) SELECT month, round(avg(ride_distance)over(order by month rows between current row and 2 following),2) as average_ride_distance, round(avg(ride_duration)over(order by month rows between current row and 2 following),2) as average_ride_duration FROM month LIMIT 10
WITH rec AS ( WITH recursive seq AS ( SELECT 1 AS month UNION ALL SELECT month + 1 FROM seq WHERE month < 12 ) SELECT * FROM seq ), agg AS ( SELECT MONTH(r.requested_at) AS month, SUM(a.ride_distance) AS distance, SUM(a.ride_duration) AS duration FROM acceptedrides AS a JOIN rides AS r ON a.ride_id = r.ride_id WHERE YEAR(requested_at) = 2020 GROUP BY MONTH(r.requested_at) ) SELECT r.month, ROUND((AVG(COALESCE(a.distance, 0)) OVER (ORDER BY r.month ASC ROWS BETWEEN CURRENT ROW AND 2 FOLLOWING)), 2) AS average_ride_distance, ROUND((AVG(COALESCE(a.duration, 0)) OVER (ORDER BY r.month ASC ROWS BETWEEN CURRENT ROW AND 2 FOLLOWING)), 2) AS average_ride_duration FROM rec AS r LEFT JOIN agg AS a ON r.month = a.month ORDER BY r.month ASC LIMIT 10
WITH recursive CTE1 AS ( SELECT 1 AS month UNION SELECT month + 1 AS month FROM CTE1 WHERE month < 10 ), CTE2 AS ( SELECT month(r.requested_at) AS month, SUM(a.ride_distance) AS tot_dist, SUM(a.ride_duration) AS tot_duration FROM AcceptedRides a JOIN Rides r ON a.ride_id = r.ride_id WHERE year(r.requested_at) = 2020 GROUP BY month(r.requested_at) ) SELECT c1.month, ROUND(IFNULL(SUM(c2.tot_dist)/3,0),2) AS average_ride_distance, ROUND(IFNULL(SUM(c2.tot_duration)/3,0),2) AS average_ride_duration FROM CTE1 c1 LEFT JOIN CTE2 c2 ON c2.month BETWEEN c1.month AND c1.month + 2 GROUP BY c1.month
WITH recursive MonthTable AS (SELECT 1 MONTH UNION SELECT MONTH + 1 FROM MonthTable WHERE MONTH < 12), MonthlyTotal AS (SELECT MONTH(T1.requested_at) MONTH, SUM(T2.ride_distance) sum_ride_distance, SUM(T2.ride_duration) sum_ride_duration FROM Rides T1 JOIN AcceptedRides T2 ON T1.ride_id = T2.ride_id WHERE YEAR(requested_at) = 2020 GROUP BY MONTH(T1.requested_at)) SELECT T1.MONTH, ROUND(AVG(IFNULL(sum_ride_distance,0)) OVER(ORDER BY T1.MONTH rows between current row and 2 following),2) average_ride_distance, ROUND(AVG(IFNULL(sum_ride_duration,0)) OVER(ORDER BY T1.MONTH rows between current row and 2 following),2) average_ride_duration FROM MonthTable T1 LEFT JOIN MonthlyTotal T2 ON T1.MONTH = T2.MONTH ORDER BY T1.MONTH LIMIT 10
WITH recursive cte AS (SELECT 1 AS month UNION ALL SELECT month + 1 AS month FROM cte WHERE month < 12), ride_tbl AS (SELECT MONTH(requested_at) AS month, SUM(ride_distance) AS distance, SUM(ride_duration) AS duration FROM Rides r JOIN AcceptedRides a ON r.ride_id = a.ride_id WHERE YEAR(requested_at) = 2020 GROUP BY 1) SELECT c.month, ROUND(AVG(IFNULL(distance, 0)) OVER(ORDER BY month ROWS BETWEEN CURRENT ROW AND 2 FOLLOWING), 2) AS average_ride_distance, ROUND(AVG(IFNULL(duration, 0)) OVER(ORDER BY month ROWS BETWEEN CURRENT ROW AND 2 FOLLOWING), 2) AS average_ride_duration FROM cte c LEFT JOIN ride_tbl r ON c.month = r.month LIMIT 10
WITH recursive month AS ( SELECT 1 AS month UNION ALL SELECT month + 1 AS month FROM month WHERE month < 12 ) , month_rides AS ( SELECT MONTH(r.requested_at) AS request_month, SUM(a.ride_distance) AS total_distance, SUM(a.ride_duration) AS total_duration FROM ( SELECT * FROM Rides WHERE DATE_FORMAT(requested_at, "%Y") = 2020) r INNER JOIN AcceptedRides a ON r.ride_id = a.ride_id GROUP BY request_month ) , every_month_rides AS ( SELECT m.month AS month, IFNULL(mr.total_distance, 0) AS total_distance, IFNULL(mr.total_duration, 0) AS total_duration FROM month m LEFT JOIN month_rides mr ON m.month = mr.request_month ) SELECT t1.month AS month, ROUND((t1.total_distance + IFNULL(t2.total_distance, 0) + IFNULL(t3.total_distance, 0)) / 3, 2) AS average_ride_distance, ROUND((t1.total_duration + IFNULL(t2.total_duration, 0) + IFNULL(t3.total_duration, 0)) / 3, 2) AS average_ride_duration FROM every_month_rides t1 JOIN every_month_rides t2 ON t1.month = t2.month - 1 JOIN every_month_rides t3 ON t2.month = t3.month - 1
WITH recursive month as ( select 1 as month union select month + 1 as month from month where month < 12), TEMP AS ( SELECT DISTINCT month(b.requested_at) AS month, SUM(a.ride_distance) AS ride_distance, SUM(a.ride_duration) AS ride_duration FROM AcceptedRides a JOIN (SELECT * FROM Rides WHERE requested_at BETWEEN '2020-01-01' AND '2020-12-31') b ON a.ride_id=b.ride_id GROUP BY 1), TEMP2 AS( SELECT m.month, IFNULL(TEMP.ride_distance,0) AS ride_distance, IFNULL(TEMP.ride_duration,0) AS ride_duration FROM month m LEFT JOIN TEMP ON m.month=TEMP.month ORDER BY 1) SELECT month, ROUND((SUM(ride_distance) OVER(ROWS BETWEEN CURRENT ROW AND 2 FOLLOWING)/3),2) AS average_ride_distance, ROUND((SUM(ride_duration) OVER(ROWS BETWEEN CURRENT ROW AND 2 FOLLOWING)/3),2) AS average_ride_duration FROM TEMP2 GROUP BY 1 ORDER BY 1 LIMIT 10
WITH recursive month as ( select 1 as month union select month + 1 as month from month where month < 12), orders AS (SELECT MONTH(requested_at) AS month,SUM(ride_distance) AS ride_distance,SUM(ride_duration) AS ride_duration FROM Rides JOIN AcceptedRides USING(ride_id) WHERE YEAR(requested_at)=2020 GROUP BY MONTH(requested_at)), orders_all AS (SELECT m.month,IFNULL(ride_distance,0) AS ride_distance,IFNULL(ride_duration,0) AS ride_duration FROM month m LEFT JOIN orders o ON m.month=o.month) SELECT o1.month AS month,ROUND(SUM(o2.ride_distance)/3,2) AS average_ride_distance,ROUND(SUM(o2.ride_duration)/3,2) AS average_ride_duration FROM orders_all o1 LEFT JOIN orders_all o2 ON o1.month=o2.month OR o1.month=o2.month-1 OR o1.month=o2.month-2 GROUP BY o1.month ORDER BY o1.month LIMIT 10
WITH recursive month_tbl AS (SELECT 1 AS 'month' UNION ALL SELECT month + 1 FROM month_tbl WHERE month < 12), ride_info AS (SELECT MONTH(R.requested_at) AS 'month', SUM(A.ride_distance) AS 'monthly_distance', SUM(A.ride_duration) AS 'monthly_duration' FROM AcceptedRides A LEFT JOIN Rides R ON A.ride_id = R.ride_id WHERE YEAR(R.requested_at) = 2020 GROUP BY MONTH(R.requested_at)), ride_all AS (SELECT M.month, CAST(IFNULL(R.monthly_distance, 0) AS FLOAT) AS 'monthly_distance', CAST(IFNULL(R.monthly_duration, 0) AS FLOAT) AS 'monthly_duration' FROM month_tbl M LEFT JOIN ride_info R ON M.month = R.month) SELECT month, ROUND(AVG(monthly_distance) OVER (ORDER BY month ROWS BETWEEN CURRENT ROW AND 2 FOLLOWING), 2) AS 'average_ride_distance', ROUND(AVG(monthly_duration) OVER (ORDER BY month ROWS BETWEEN CURRENT ROW AND 2 FOLLOWING), 2) AS 'average_ride_duration' FROM ride_all order by month limit 10
WITH recursive months (month) AS ( SELECT 1 month UNION ALL SELECT month + 1 AS month FROM months WHERE month < 12 ), temp as ( select month(requested_at) as month, sum(ride_distance) as ride_distance, sum(ride_duration) as ride_duration from rides r join acceptedrides ar on r.ride_id=ar.ride_id where year(requested_at) = 2020 group by 1 order by 1) select * from ( select m.month, round(avg(coalesce(t.ride_distance, 0)) over (order by month rows between current row and 2 following),2) as average_ride_distance, round(avg(coalesce(t.ride_duration, 0)) over (order by month rows between current row and 2 following),2) as average_ride_duration from months m left join temp t on m.month=t.month group by 1) a where month<11
WITH recursive months (month) AS ( SELECT 1 month UNION ALL SELECT month + 1 AS month FROM months WHERE month < 12 ), temp as ( select month(requested_at) as month, sum(ride_distance) as ride_distance, sum(ride_duration) as ride_duration from rides r join acceptedrides ar on r.ride_id=ar.ride_id where year(requested_at) = 2020 group by 1 order by 1) select * from ( select m.month, round(sum(coalesce(t.ride_distance, 0)) over (order by month rows between current row and 2 following)/3,2) as average_ride_distance, round(sum(coalesce(t.ride_duration, 0)) over (order by month rows between current row and 2 following)/3,2) as average_ride_duration from months m left join temp t on m.month=t.month group by 1) a where month<11
WITH recursive months AS ( SELECT 1 as 'month' UNION SELECT month + 1 as 'month' FROM months WHERE month < 12 ), cte AS ( SELECT a.ride_id, r.requested_at, a.ride_distance, a.ride_duration FROM acceptedrides a JOIN rides r on a.ride_id = r.ride_id AND r.requested_at between '2020-01-01' and '2020-12-31' ), cte2 AS ( SELECT MONTH(requested_at) as 'month', SUM(ride_distance) as total_distance, SUM(ride_duration) as total_duration FROM cte GROUP BY 1 ORDER By 1 asc ), clean AS ( SELECT m.month, c.total_distance, c.total_duration FROM months m LEFT JOIN cte2 c on (m.month = c.month) ) SELECT month, ROUND(total_distance / 3,2) as average_ride_distance, ROUND(total_duration / 3,2) as average_ride_duration FROM ( SELECT c1.month, (IFNULL(c1.total_distance,0) + IFNULL(c2.total_distance,0) + IFNULL(c3.total_distance,0)) as total_distance, (IFNULL(c1.total_duration,0) + IFNULL(c2.total_duration,0) + IFNULL(c3.total_duration,0)) as total_duration FROM clean c1 JOIN clean c2 on c1.month = c2.month-1 JOIN clean c3 on c1.month = c3.month-2 GROUP BY 1 ) as x ORDER BY 1 asc
WITH recursive t(month) as ( select 1 union all select month+1 from t where month < 12 ) SELECT DISTINCT t.month, IFNULL(ROUND(SUM(ride_distance)OVER(ORDER BY t.month RANGE BETWEEN CURRENT ROW AND 2 following)/3,2),0) AS average_ride_distance, IFNULL(ROUND(SUM(ride_duration)OVER(ORDER BY t.month RANGE BETWEEN CURRENT ROW AND 2 following)/3,2),0) AS average_ride_duration FROM t left join (SELECT r.ride_id,MONTH(requested_at) month,ride_distance,ride_duration FROM Rides r LEFT JOIN AcceptedRides a ON r.ride_id = a.ride_id WHERE datediff(requested_at,'2020-01-01') >= 0 AND datediff(requested_at,'2020-12-31') <= 0 AND ride_distance IS NOT NULL)f ON t.month = f.month ORDER BY 1 LIMIT 10
WITH recursive t2 AS ( SELECT 0 as r_dist, 0 as r_dur, 1 as m UNION ALL SELECT 0 as r_dist, 0 as r_dur, m+1 as m FROM t2 WHERE m < 12 ), t1 AS ( SELECT SUM(ride_distance) as r_dist, SUM(ride_duration) as r_dur, m FROM ( SELECT ride_distance, ride_duration, MONTH(requested_at) as m FROM AcceptedRides a JOIN rides b ON a.ride_id = b.ride_id WHERE requested_at BETWEEN "2020-01-01" and "2020-12-31" ) a GROUP BY m ORDER BY m ), t3 AS ( SELECT COALESCE(b.r_dist,0) as r_dist, COALESCE(b.r_dur,0) as r_dur, a.m FROM t2 a LEFT JOIN t1 b ON a.m = b.m ) SELECT a.m as month, ROUND((a.r_dist + b.r_dist + c.r_dist)/3,2) as average_ride_distance, ROUND((a.r_dur + b.r_dur + c.r_dur)/3,2) as average_ride_duration FROM t3 a LEFT JOIN t3 b ON a.m = b.m-1 LEFT JOIN t3 c ON a.m = c.m-2 WHERE a.m <= 10
WITH tbl AS ( SELECT MONTH(r.requested_at) AS month, SUM(a.ride_distance) AS total_ride_distance, SUM(a.ride_duration) AS total_ride_duration FROM AcceptedRides a INNER JOIN Rides r ON a.ride_id = r.ride_id AND r.requested_at BETWEEN '2020-01-01' AND '2020-12-31' GROUP BY month ), months AS ( SELECT 1 AS month UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8 UNION ALL SELECT 9 UNION ALL SELECT 10 ) SELECT months.month, ROUND((COALESCE(t1.total_ride_distance, 0) + COALESCE(t2.total_ride_distance, 0) + COALESCE(t3.total_ride_distance, 0)) / 3, 2) AS average_ride_distance, ROUND((COALESCE(t1.total_ride_duration, 0) + COALESCE(t2.total_ride_duration, 0) + COALESCE(t3.total_ride_duration, 0)) / 3, 2) AS average_ride_duration FROM months LEFT JOIN tbl t1 ON months.month = t1.month LEFT JOIN tbl t2 ON months.month + 1 = t2.month LEFT JOIN tbl t3 ON months.month + 2 = t3.month
WITH tbl AS ( SELECT MONTH(r.requested_at) AS month, SUM(a.ride_distance) AS total_ride_distance, SUM(a.ride_duration) AS total_ride_duration FROM AcceptedRides a INNER JOIN Rides r ON a.ride_id = r.ride_id AND r.requested_at BETWEEN '2020-01-01' AND '2020-12-31' GROUP BY month ), months AS ( SELECT 1 AS month UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8 UNION ALL SELECT 9 UNION ALL SELECT 10 UNION ALL SELECT 11 UNION ALL SELECT 12 ) SELECT * FROM ( SELECT months.month, ROUND(COALESCE((SUM(tbl.total_ride_distance) OVER(ORDER BY months.month ROWS BETWEEN CURRENT ROW AND 2 FOLLOWING)) / 3, 0), 2) AS average_ride_distance, ROUND(COALESCE((SUM(tbl.total_ride_duration) OVER(ORDER BY months.month ROWS BETWEEN CURRENT ROW AND 2 FOLLOWING)) / 3, 0), 2) AS average_ride_duration FROM months LEFT JOIN tbl ON months.month = tbl.month ) t1 WHERE t1.month <= 10
With Date_Bin As (Select "2020-01-01" as start_date, Adddate("2020-01-01", Interval 3 month) as end_date Union Select "2020-02-01" as start_date, Adddate("2020-02-01", Interval 3 month) as end_date Union Select "2020-03-01" as start_date, Adddate("2020-03-01", Interval 3 month) as end_date Union Select "2020-04-01" as start_date, Adddate("2020-04-01", Interval 3 month) as end_date Union Select "2020-05-01" as start_date, Adddate("2020-05-01", Interval 3 month) as end_date Union Select "2020-06-01" as start_date, Adddate("2020-06-01", Interval 3 month) as end_date Union Select "2020-07-01" as start_date, Adddate("2020-07-01", Interval 3 month) as end_date Union Select "2020-08-01" as start_date, Adddate("2020-08-01", Interval 3 month) as end_date Union Select "2020-09-01" as start_date, Adddate("2020-09-01", Interval 3 month) as end_date Union Select "2020-10-01" as start_date, Adddate("2020-10-01", Interval 3 month) as end_date) Select month(c.start_date) as month, Round(sum(ifnull(b.ride_distance,0))/3,2) as average_ride_distance, Round(sum(ifnull(b.ride_duration,0))/3,2) as average_ride_duration From Rides as a Join AcceptedRides as b On a.ride_id = b.ride_id Right Join Date_Bin as c On a.requested_at >= c.start_date And a.requested_at < c.end_date Group By month(c.start_date)
With RECURSIVE m as ( SELECT 1 as mon UNION SELECT mon + 1 as mon FROM m WHERE mon < 12), t as ( SELECT month(requested_at) as month, SUM(ride_distance) as rd, SUM(ride_duration) as rdu FROM Rides r JOIN AcceptedRides ar ON r.ride_id = ar.ride_id WHERE requested_at BETWEEN '2020-1-1' AND '2020-12-31' GROUP BY 1) SELECT mon as month, ROUND(avg(IFNULL(rd, 0)) over(order by mon ROWS BETWEEN CURRENT ROW AND 2 FOLLOWING),2) as average_ride_distance, ROUND(avg(IFNULL(rdu, 0)) over(order by mon ROWS BETWEEN CURRENT ROW AND 2 FOLLOWING),2) as average_ride_duration FROM m LEFT JOIN t ON m.mon = t.month LIMIT 10
With RECURSIVE month AS (SELECT 1 mon UNION ALL SELECT mon+1 FROM month WHERE mon < 12), t1 AS (SELECT MONTH(requested_at) mon, sum(ride_distance) sd, sum(ride_duration) st FROM acceptedRides a LEFT JOIN rides r ON a.ride_id = r.ride_id WHERE YEAR(requested_at) = 2020 GROUP BY MONTH(requested_at)), t2 AS (SELECT m.mon, ifnull(sd, 0) sd, ifnull(st, 0)st FROM month m LEFT JOIN t1 ON m.mon = t1.mon) SELECT t2.mon month, round(sum(tt2.sd)/3,2) average_ride_distance, round(sum(tt2.st)/3,2)average_ride_duration FROM t2 JOIN t2 tt2 ON (tt2.mon - t2.mon) between 0 and 2 GROUP BY t2.mon HAVING t2.mon <= 10
With RECURSIVE month as ( SELECT 1 as m UNION SELECT m + 1 FROM month WHERE m < 12), ar as ( SELECT month.m as m, IFNULL(SUM(ride_distance), 0) as rd, IFNULL(SUM(ride_duration), 0) as rdr FROM month LEFT JOIN Rides r ON month.m = month(r.requested_at) LEFT JOIN AcceptedRides ar ON r.ride_id = ar.ride_id AND year(requested_at) = '2020' GROUP BY 1 ) SELECT * FROM (SELECT m as month, ROUND(AVG(IFNULL(rd, 0)) OVER(ORDER BY m ROWS BETWEEN CURRENT ROW AND 2 FOLLOWING),2) as average_ride_distance, ROUND(AVG(IFNULL(rdr, 0)) OVER(ORDER BY m ROWS BETWEEN CURRENT ROW AND 2 FOLLOWING),2) as average_ride_duration FROM ar ORDER BY 1) tmp WHERE tmp.month <= 10
With Recursive Months(Month) as (Select 1 Union All Select Month+1 From Months Where Month < 12 ), T1 as (Select Month(Rides.requested_at) as month, Sum(ride_distance) as ride_distance, Sum(ride_duration) as ride_duration From AcceptedRides Left Join Rides On AcceptedRides.ride_id = Rides.ride_id Where Year(Rides.requested_at) = 2020 Group By Month(Rides.requested_at)) Select month, Round(Ifnull((ride_distance+ride_distance_1+ride_distance_2)/3,0),2) as average_ride_distance, Round(Ifnull((ride_duration+ride_duration_1+ride_duration_2)/3,0),2) as average_ride_duration From (Select Months.month, Ifnull(ride_distance,0) as ride_distance, Ifnull(ride_duration,0) as ride_duration, Ifnull(Lead(ride_distance, 1) Over (Order By Months.month),0) as ride_distance_1, Ifnull(Lead(ride_distance, 2) Over (Order By Months.month),0) as ride_distance_2, Ifnull(Lead(ride_duration, 1) Over (Order By Months.month),0) as ride_duration_1, Ifnull(Lead(ride_duration, 2) Over (Order By Months.month),0) as ride_duration_2 From Months Left Join T1 On Months.month = T1.month) as T2 Where month <= 10
select 1 as month, coalesce(round(sum(ride_distance) / 3, 2), 0) as average_ride_distance, coalesce(round(sum(ride_duration) / 3, 2), 0) as average_ride_duration from rides, acceptedrides where rides.ride_id = acceptedrides.ride_id and month(rides.requested_at) in (1, 2, 3) and year(rides.requested_at) = 2020 union select 2 as month, coalesce(round(sum(ride_distance) / 3, 2), 0) as average_ride_distance, coalesce(round(sum(ride_duration) / 3, 2), 0) as average_ride_duration from rides, acceptedrides where rides.ride_id = acceptedrides.ride_id and month(rides.requested_at) in (2, 3, 4) and year(rides.requested_at) = 2020 union select 3 as month, coalesce(round(sum(ride_distance) / 3, 2), 0) as average_ride_distance, coalesce(round(sum(ride_duration) / 3, 2), 0) as average_ride_duration from rides, acceptedrides where rides.ride_id = acceptedrides.ride_id and month(rides.requested_at) in (3, 4, 5) and year(rides.requested_at) = 2020 union select 4 as month, coalesce(round(sum(ride_distance) / 3, 2), 0) as average_ride_distance, coalesce(round(sum(ride_duration) / 3, 2), 0) as average_ride_duration from rides, acceptedrides where rides.ride_id = acceptedrides.ride_id and month(rides.requested_at) in (4, 5, 6) and year(rides.requested_at) = 2020 union select 5 as month, coalesce(round(sum(ride_distance) / 3, 2), 0) as average_ride_distance, coalesce(round(sum(ride_duration) / 3, 2), 0) as average_ride_duration from rides, acceptedrides where rides.ride_id = acceptedrides.ride_id and month(rides.requested_at) in (5, 6, 7) and year(rides.requested_at) = 2020 union select 6 as month, coalesce(round(sum(ride_distance) / 3, 2), 0) as average_ride_distance, coalesce(round(sum(ride_duration) / 3, 2), 0) as average_ride_duration from rides, acceptedrides where rides.ride_id = acceptedrides.ride_id and month(rides.requested_at) in (6, 7, 8) and year(rides.requested_at) = 2020 union select 7 as month, coalesce(round(sum(ride_distance) / 3, 2), 0) as average_ride_distance, coalesce(round(sum(ride_duration) / 3, 2), 0) as average_ride_duration from rides, acceptedrides where rides.ride_id = acceptedrides.ride_id and month(rides.requested_at) in (7, 8, 9) and year(rides.requested_at) = 2020 union select 8 as month, coalesce(round(sum(ride_distance) / 3, 2), 0) as average_ride_distance, coalesce(round(sum(ride_duration) / 3, 2), 0) as average_ride_duration from rides, acceptedrides where rides.ride_id = acceptedrides.ride_id and month(rides.requested_at) in (8, 9, 10) and year(rides.requested_at) = 2020 union select 9 as month, coalesce(round(sum(ride_distance) / 3, 2), 0) as average_ride_distance, coalesce(round(sum(ride_duration) / 3, 2), 0) as average_ride_duration from rides, acceptedrides where rides.ride_id = acceptedrides.ride_id and month(rides.requested_at) in (9, 10, 11) and year(rides.requested_at) = 2020 union select 10 as month, coalesce(round(sum(ride_distance) / 3, 2), 0) as average_ride_distance, coalesce(round(sum(ride_duration) / 3, 2), 0) as average_ride_duration from rides, acceptedrides where rides.ride_id = acceptedrides.ride_id and month(rides.requested_at) in (10, 11, 12) and year(rides.requested_at) = 2020
select month, coalesce(round(sum(ride_distance)/3,2),0) as average_ride_distance, coalesce(round(sum(ride_duration)/3,2),0) as average_ride_duration from ( select months.month, ride_id from Rides right join ( select "2020-1-1" as start, "2020-3-31" as last, 1 as month union select "2020-2-1", "2020-4-30", 2 union select "2020-3-1", "2020-5-31", 3 union select "2020-4-1", "2020-6-30", 4 union select "2020-5-1", "2020-7-31", 5 union select "2020-6-1", "2020-8-31", 6 union select "2020-7-1", "2020-9-30", 7 union select "2020-8-1", "2020-10-31", 8 union select "2020-9-1", "2020-11-30", 9 union select "2020-10-1", "2020-12-31", 10 ) as months on months.start <= requested_at and months.last >= requested_at ) total left join AcceptedRides as a on total.ride_id=a.ride_id group by month order by month
select t1.month,round(avg(ifnull(t2.ride_distance,0)) over (order by t1.month asc rows BETWEEN CURRENT ROW and 2 following),2) average_ride_distance, round(avg(ifnull(t2.ride_duration,0)) over (order by t1.month asc rows BETWEEN CURRENT ROW and 2 following),2) average_ride_duration from (SELECT 1 AS MONTH UNION SELECT 2 AS MONTH UNION SELECT 3 AS MONTH UNION SELECT 4 AS MONTH UNION SELECT 5 AS MONTH UNION SELECT 6 AS MONTH UNION SELECT 7 AS MONTH UNION SELECT 8 AS MONTH UNION SELECT 9 AS MONTH UNION SELECT 10 AS MONTH UNION SELECT 11 AS MONTH UNION SELECT 12 AS MONTH) t1 left outer join ( select month(r.requested_at) as month, sum(a.ride_distance) as ride_distance, sum(a.ride_duration) as ride_duration from acceptedrides a left outer join rides r on a.ride_id = r.ride_id where year(requested_at) = 2020 group by 1 order by 1 ) t2 on t1.month = t2.month order by 1 limit 10
select t2.month, round(ifnull(sum(t1.ride_distance), 0) / 3, 2) as average_ride_distance, round(ifnull(sum(t1.ride_duration), 0) / 3, 2) as average_ride_duration from ( select a.ride_id, a.ride_distance, a.ride_duration, month(r.requested_at) as month from rides r join AcceptedRides a on r.ride_id = a.ride_id where r.requested_at >= '2020-01-01' and r.requested_at <= '2020-12-31' ) t1 right join (select 1 as month union select 2 union select 3 union select 4 union select 5 union select 6 union select 7 union select 8 union select 9 union select 10) t2 on t1.month <= t2.month + 2 and t1.month >= t2.month group by t2.month order by t2.month
select t3.month, round(sum(case when t4.ride_distance is null then 0 else t4.ride_distance end)/3, 2) as average_ride_distance, round(sum(case when t4.ride_duration is null then 0 else t4.ride_duration end)/3, 2) as average_ride_duration from ((select 1 as month) union (select 2 as month) union (select 3 as month) union (select 4 as month) union (select 5 as month) union (select 6 as month) union (select 7 as month) union (select 8 as month) union (select 9 as month) union (select 10 as month)) t3 left join (select month(t2.requested_at) as month, sum(t1.ride_distance) as ride_distance, sum(t1.ride_duration) as ride_duration from AcceptedRides t1 left join Rides t2 on t1.ride_id = t2.ride_id AND left(t2.requested_at, 4) ="2020" group by 1) t4 on t4.month >= t3.month AND t4.month <= t3.month +2 group by 1 order by 1
select temp.month, round(ifnull(sum(t.ride_distance),0)/3,2) as average_ride_distance, round(ifnull(sum(t.ride_duration),0)/3,2) as average_ride_duration from ((select 1 as month) union (select 2 as month) union (select 3 as month) union (select 4 as month) union (select 5 as month) union (select 6 as month) union (select 7 as month) union (select 8 as month) union (select 9 as month) union (select 10 as month)) as temp left join (select R.ride_id, R.requested_at, AR.ride_distance, AR.ride_duration from Rides as R join AcceptedRides as AR on R.ride_id=AR.ride_id where LEFT(R.requested_at,4)=2020) as t on MONTH(t.requested_at) >= temp.month and MONTH(t.requested_at) <= temp.month+2 group by temp.month order by temp.month
with RECURSIVE a as ( select distinct '2020-01-01' as m_start from drivers union all select date_add(m_start, interval +1 month) from a where m_start < '2020-12-01' ), b as( select m_start , sum(ride_distance) as total_distance , sum(ride_duration) as total_duration from( select date_sub(r.requested_at, interval dayofmonth(r.requested_at)-1 day) as m_start , ar.ride_id, ar.ride_distance, ar.ride_duration from rides as r right join acceptedrides as ar on r.ride_id=ar.ride_id where year(r.requested_at)=2020 order by r.requested_at asc) as temp group by m_start), c as ( select a.m_start , ifnull(b.total_distance, 0) as total_distance , ifnull(b.total_duration, 0) as total_duration from a left join b on a.m_start = b.m_start) select * from( select month(m_start) as month , round(avg(total_distance) over (order by m_start asc rows between current row and 2 following),2) as average_ride_distance , round(avg(total_duration) over (order by m_start asc rows between current row and 2 following),2) as average_ride_duration from c) as temp where month<=10
with RECURSIVE datedim as ( select 1 as num union all select num+1 from datedim where num<12 ) , monthlysum as ( select month(r.requested_at) month, sum(ar.ride_distance)ride_dis_monthly, sum(ar.ride_duration)ride_dur_monthly from acceptedrides ar inner join rides r on r.ride_id=ar.ride_id where year(r.requested_at)=2020 group by month(r.requested_at) ) select * from ( select dd.num month, round(avg(coalesce(ms.ride_dis_monthly,0)) over(order by dd.num rows between current row and 2 following ),2) average_ride_distance, round(avg(coalesce(ms.ride_dur_monthly,0)) over(order by dd.num rows between current row and 2 following),2) average_ride_duration from datedim dd left outer join monthlysum ms on ms.month=dd.num )d where month<=10
with RECURSIVE month as( select 1 as m union all select m+1 from month where m<12 ), total as( select m.m as month,ifnull(sum(a.ride_distance),0) as distance, ifnull(sum(a.ride_duration),0) as duration from month m left join rides r on m.m = month(r.requested_at) and date_format(requested_at,'%Y') = 2020 left join AcceptedRides a on r.ride_id = a.ride_Id group by 1) select * from( select month, round((distance+lead(distance,1) over(order by month)+lead(distance,2) over(order by month))/3,2) as average_ride_distance, round((duration+lead(duration,1) over(order by month)+lead(duration,2) over(order by month))/3,2) as average_ride_duration from total) a where month<11
with RECURSIVE months as ( select 1 month UNION ALL select month+1 from months where month<12 ), ttls as (select MONTH(R.requested_at) as month, sum(ride_distance) as ttl_ride_distance , sum(ride_duration) as ttl_ride_duration from AcceptedRides AR inner join Rides R on AR.ride_id=R.ride_id where YEAR(R.requested_at)=2020 group by 1) select a.month, round((sum(coalesce(ttl_ride_distance,0)) over (order by a.month ASC ROWS between CURRENT ROW and 2 FOLLOWING))/3,2) as average_ride_distance, round((sum(coalesce(ttl_ride_duration,0)) over (order by a.month ASC ROWS between CURRENT ROW and 2 FOLLOWING))/3,2) as average_ride_duration from months a left join ttls b on a.month=b.month order by 1 limit 10
with Recursive CET1 as (select 1 as Month UNION select 1+Month from CET1 Where Month+1<=12), CET2 as ( SELECT month(requested_at) as Month, sum(ride_distance) as ride_distance, sum(ride_duration) as ride_duration from AcceptedRides a left join Rides r on a.ride_id= r.ride_id WHERE requested_at between '2020-1-01' and '2020-12-31' Group by month(requested_at) ), CET3 as (select CET1.Month, ifnull(ride_distance,0) as ride_distance, ifnull(ride_duration,0) as ride_duration from CET2 right join CET1 on CET1.Month=CET2.Month ) SELECT * FROM ( SELECT month, round((avg(ride_distance) over(order by Month rows between current row and 2 following)),2) as average_ride_distance, round((avg(ride_duration) over(order by Month rows between current row and 2 following)),2) as average_ride_duration from CET3 )p where Month<=10
with all_months as ( select 1 as month_id union select 2 union select 3 union select 4 union select 5 union select 6 union select 7 union select 8 union select 9 union select 10 union select 11 union select 12 ) ,sum_and_counts_per_month as ( select month(requested_at) as month_id ,sum(ride_distance) total_distance ,sum(ride_duration) total_duration from AcceptedRides a inner join Rides r on r.ride_id = a.ride_id where year(requested_at) = 2020 group by month(requested_at) ) ,all_months_sum_and_counts_per_month as ( select a.month_id, coalesce(total_distance,0) as total_distance, coalesce(total_duration,0) as total_duration from all_months a left join sum_and_counts_per_month s on a.month_id = s.month_id group by a.month_id ) select a1.month_id as month , round((a1.total_distance+a2.total_distance+a3.total_distance)/3,2) as average_ride_distance , round((a1.total_duration+a2.total_duration+a3.total_duration)/3,2) as average_ride_duration from all_months_sum_and_counts_per_month a1 left join all_months_sum_and_counts_per_month a2 on a2.month_id = a1.month_id + 1 left join all_months_sum_and_counts_per_month a3 on a3.month_id = a2.month_id + 1 where a1.month_id between 1 and 10
with calc_per_window as (select sum(coalesce((case when month(requested_at) in (1,2,3) then ride_distance end),0))/3 as Jan_dist, sum(coalesce((case when month(requested_at) in (2,3,4) then ride_distance end),0))/3 as Feb_dist, sum(coalesce((case when month(requested_at) in (3,4,5) then ride_distance end),0))/3 as Mar_dist, sum(coalesce((case when month(requested_at) in (4,5,6) then ride_distance end),0))/3 as Apr_dist, sum(coalesce((case when month(requested_at) in (5,6,7) then ride_distance end),0))/3 as May_dist, sum(coalesce((case when month(requested_at) in (6,7,8) then ride_distance end),0))/3 as Jun_dist, sum(coalesce((case when month(requested_at) in (7,8,9) then ride_distance end),0))/3 as Jul_dist, sum(coalesce((case when month(requested_at) in (8,9,10) then ride_distance end),0))/3 as Aug_dist, sum(coalesce((case when month(requested_at) in (9,10,11) then ride_distance end),0))/3 as Sep_dist, sum(coalesce((case when month(requested_at) in (10,11,12) then ride_distance end),0))/3 as Oct_dist, sum(coalesce((case when month(requested_at) in (1,2,3) then ride_duration end),0))/3 as Jan_dur, sum(coalesce((case when month(requested_at) in (2,3,4) then ride_duration end),0))/3 as Feb_dur, sum(coalesce((case when month(requested_at) in (3,4,5) then ride_duration end),0))/3 as Mar_dur, sum(coalesce((case when month(requested_at) in (4,5,6) then ride_duration end),0))/3 as Apr_dur, sum(coalesce((case when month(requested_at) in (5,6,7) then ride_duration end),0))/3 as May_dur, sum(coalesce((case when month(requested_at) in (6,7,8) then ride_duration end),0))/3 as Jun_dur, sum(coalesce((case when month(requested_at) in (7,8,9) then ride_duration end),0))/3 as Jul_dur, sum(coalesce((case when month(requested_at) in (8,9,10) then ride_duration end),0))/3 as Aug_dur, sum(coalesce((case when month(requested_at) in (9,10,11) then ride_duration end),0))/3 as Sep_dur, sum(coalesce((case when month(requested_at) in (10,11,12) then ride_duration end),0))/3 as Oct_dur from rides r left join acceptedrides ac on r.ride_id = ac.ride_id where year(requested_at ) = 2020) select 1 as month, round(Jan_dist,2) as average_ride_distance, round(Jan_dur,2) as average_ride_duration from calc_per_window union all select 2 as month, round(Feb_dist,2), round(Feb_dur,2) from calc_per_window union all select 3 as month, round(Mar_dist,2), round(Mar_dur,2) from calc_per_window union all select 4 as month, round(Apr_dist,2), round(Apr_dur,2) from calc_per_window union all select 5 as month, round(May_dist,2), round(May_dur,2) from calc_per_window union all select 6 as month, round(Jun_dist,2), round(Jun_dur,2) from calc_per_window union all select 7 as month, round(Jul_dist,2), round(Jul_dur,2) from calc_per_window union all select 8 as month, round(Aug_dist,2), round(Aug_dur,2) from calc_per_window union all select 9 as month, round(Sep_dist,2), round(Sep_dur,2) from calc_per_window union all select 10 as month, round(Oct_dist,2), round(Oct_dur,2) from calc_per_window
with cte as ( select month(requested_at) as month, sum(ride_distance) as dist, sum(ride_duration) as dur from Rides a join AcceptedRides b on a.ride_id = b.ride_id where year(requested_at) = 2020 group by 1), cte2 as ( with recursive cte as( select 1 as month union all select month+1 as month from cte where month <= 11 ) select * from cte ) select month, round(sum_dist/3,2) as average_ride_distance, round(sum_dur/3,2) as average_ride_duration from(select month, sum(dist) over(order by month asc rows between CURRENT ROW and 2 FOLLOWING) as sum_dist, sum(dur) over(order by month asc rows between CURRENT ROW and 2 FOLLOWING) as sum_dur from (select x.month, ifnull(dist,0) as dist, ifnull(dur,0) as dur from cte2 x left join cte y on x.month = y.month) a) b where month between 1 and 10
with cte as( select sum(ride_distance) as ride_distance, sum(ride_duration) as ride_duration, month from (select a.ride_distance, a.ride_duration, month(r.requested_at) as month from AcceptedRides as a join Rides as r on a.ride_id = r.ride_id where r.requested_at between date('2020-01-01') and date('2020-12-31') union all select * from (select 0 as ride_distance, 0 as ride_duration, 1 as month union select 0 as ride_distance, 0 as ride_duration, 2 as month union select 0 as ride_distance, 0 as ride_duration, 3 as month union select 0 as ride_distance, 0 as ride_duration, 4 as month union select 0 as ride_distance, 0 as ride_duration, 5 as month union select 0 as ride_distance, 0 as ride_duration, 6 as month union select 0 as ride_distance, 0 as ride_duration, 7 as month union select 0 as ride_distance, 0 as ride_duration, 8 as month union select 0 as ride_distance, 0 as ride_duration, 9 as month union select 0 as ride_distance, 0 as ride_duration, 10 as month union select 0 as ride_distance, 0 as ride_duration, 11 as month union select 0 as ride_distance, 0 as ride_duration, 12 as month)c )t group by month) select month, round((ride_distance + lead(ride_distance,1) over (order by month) + lead(ride_distance,2) over (order by month))/3,2) as average_ride_distance, round((ride_duration + lead(ride_duration,1) over (order by month) + lead(ride_duration,2) over (order by month))/3,2) as average_ride_duration from cte limit 10
with cte1 as ( select month(requested_at) as month ,sum(ride_distance) as ride_distance ,sum(ride_duration) as ride_duration from AcceptedRides a left join (select * from rides where requested_at > '2019-12-31' and requested_at < '2021-1-1') r on r.ride_id = a.ride_id group by month(requested_at) order by 1), cte_recur as ( WITH RECURSIVE tmp AS ( SELECT 1 as id UNION ALL SELECT id + 1 AS id FROM tmp WHERE id < 12 ) SELECT * FROM tmp ), cte2 as (select id ,ifnull(ride_distance,0) as ride_distance ,ifnull(ride_duration,0) as ride_duration from cte1 right join cte_recur on cte1.month = cte_recur.id) select * from ( select a.id as month, round((a.ride_distance + b.ride_distance + c.ride_distance) / 3,2) as average_ride_distance, round((a.ride_duration + b.ride_duration + c.ride_duration) / 3,2) as average_ride_duration from cte2 a left join cte2 b on a.id= b.id - 1 left join cte2 c on a.id = c.id - 2) t where month <= 10
with cte_monthly_total as ( select month(requested_at) as `month`, sum(ride_distance) as tot_ride_distance, sum(ride_duration) as tot_ride_duration from rides inner join acceptedRides on (rides.ride_id=acceptedRides.ride_id) where year(requested_at)=2020 group by month(requested_at) order by month(requested_at) ), cte_spine as ( with recursive mo as ( select 1 as n union all select n+1 from mo where n < 12 ) select * from mo ), cte_join as ( select n as `month`, round((sum(ifnull(tot_ride_distance,0)) over (order by n range between current row and 2 following))/3,2) as average_ride_distance, round((sum(ifnull(tot_ride_duration,0)) over (order by n range between current row and 2 following))/3,2) as average_ride_duration from cte_spine left join cte_monthly_total on (cte_spine.n=cte_monthly_total.month) ) select `month`, average_ride_distance, average_ride_duration from cte_join where `month`<=10
with months (month) as ( select * from (VALUES ROW(1), ROW(2), ROW(3), ROW(4), ROW(5), ROW(6), ROW(7), ROW(8), ROW(9), ROW(10)) v) , valid_rides as (select ride_id, ride_distance, ride_duration, requested_at from AcceptedRides natural join Rides where year(requested_at) = 2020) , result as (select month, round(sum(ride_distance)/3, 2) as average_ride_distance, round(sum(ride_duration)/3, 2) as average_ride_duration from months cross join valid_rides where -month + month(requested_at) between 0 and 2 group by month ) select month, coalesce(average_ride_distance, 0.00) as average_ride_distance, coalesce(average_ride_duration, 0.00) as average_ride_duration from months natural left join result order by month
with months (month) as ( select * from (VALUES ROW(1), ROW(2), ROW(3), ROW(4), ROW(5), ROW(6), ROW(7), ROW(8), ROW(9), ROW(10)) v) , valid_rides as (select ride_id, ride_distance, ride_duration, requested_at from AcceptedRides natural join Rides where year(requested_at) = 2020) , result as (select months.month, ifnull(round(sum(ride_distance)/3, 2),0) as average_ride_distance, ifnull(round(sum(ride_duration)/3, 2),0) as average_ride_duration from months left join valid_rides on -month + month(requested_at) between 0 and 2 group by month ) select * from result
with recursive 2020_m(m) as( select 1 union select m+1 from 2020_m where m<10) select m.m as month, round(ifnull(sum(ride_distance),0)/3,2) as average_ride_distance, round(ifnull(sum(ride_duration),0)/3,2) as average_ride_duration from 2020_m as m left join ( select requested_at, ride_distance, ride_duration from rides r join AcceptedRides acc using (ride_id) where requested_at between "2020-01-01" and "2020-12-31") apt on month(apt.requested_at)-m.m<3 and month(apt.requested_at)-m.m>=0 group by 1 order by 1
with recursive CTE1 as ( select 1 as month union all select 1 + month from CTE1 where 1 + month <= 12 ), CTE2 as ( select driver_id, case when year(join_date) < 2020 then 1 else month(join_date) end as month from Drivers where year(join_date) <= 2020 ), CTE3 as ( select distinct CTE1.month, count(CTE2.driver_id) over (order by CTE1.month asc) as active_drivers from CTE1 left outer join CTE2 on CTE1.month = CTE2.month ), CTE4 as ( select month(R.requested_at) as month, A.driver_id, A.ride_distance, A.ride_duration from Rides as R, AcceptedRIdes as A where R.ride_id = A.ride_id and year(R.requested_at) = 2020 ), CTE5 as ( select CTE1.month, coalesce(sum(CTE4.ride_distance),0) as ride_distance, coalesce(sum(CTE4.ride_duration),0) as ride_duration from CTE1 left outer join CTE4 on CTE1.month = CTE4.month group by CTE1.month ) select month, round(avg(ride_distance) over (order by month rows between current row and 2 following),2) as average_ride_distance, round(avg(ride_duration) over (order by month rows between current row and 2 following),2) as average_ride_duration from CTE5 limit 10
with recursive CTE1 as ( select 1 as month union all select 1 + month from CTE1 where 1 + month <= 12 ), CTE2 as ( select driver_id, case when year(join_date) < 2020 then 1 else month(join_date) end as month from Drivers where year(join_date) <= 2020 ), CTE3 as ( select distinct CTE1.month, count(CTE2.driver_id) over (order by CTE1.month asc) as active_drivers from CTE1 left outer join CTE2 on CTE1.month = CTE2.month ), CTE4 as ( select month(R.requested_at) as month, A.driver_id, A.ride_distance, A.ride_duration from Rides as R, AcceptedRIdes as A where R.ride_id = A.ride_id and year(R.requested_at) = 2020 ), CTE5 as ( select distinct CTE1.month, count(CTE4.driver_id) over (partition by CTE1.month) as accepted_rides from CTE1 left outer join CTE4 on CTE1.month = CTE4.month ), CTE6 as ( select CTE1.month, coalesce(sum(CTE4.ride_distance),0) as ride_distance, coalesce(sum(CTE4.ride_duration),0) as ride_duration from CTE1 left outer join CTE4 on CTE1.month = CTE4.month group by CTE1.month ) select month, round(avg(ride_distance) over (order by month rows between current row and 2 following),2) as average_ride_distance, round(avg(ride_duration) over (order by month rows between current row and 2 following),2) as average_ride_duration from CTE6 limit 10
with recursive Months as (select 1 as month union all select month + 1 from Months where month + 1 < 13 ), record AS( SELECT MONTH(requested_at) AS MONTH,sum(ride_distance) AS distance,sum(ride_duration) AS duration FROM AcceptedRides LEFT JOIN Rides ON AcceptedRides.ride_id = Rides.ride_id WHERE YEAR(requested_at) = 2020 GROUP BY MONTH), final_record AS( SELECT month, ROUND((distance + LEAD(distance) OVER (ORDER BY month) + LEAD(distance,2) OVER (ORDER BY month))/3,2) AS average_ride_distance, ROUND((duration + LEAD(duration) OVER (ORDER BY month) + LEAD(duration,2) OVER (ORDER BY month))/3,2) AS average_ride_duration FROM( SELECT Months.Month AS month, IFNULL(distance,0) AS DISTANCE, IFNULL(duration,0)AS duration FROM Months LEFT JOIN record ON Months.Month = record.Month) AS mth_record) SELECT * FROM final_record WHERE month <11
with recursive Months as (select 1 as month union all select month + 1 from Months where month + 1 < 13 ), record AS( SELECT MONTH(requested_at) AS MONTH,sum(ride_distance) AS distance,sum(ride_duration) AS duration FROM AcceptedRides LEFT JOIN Rides ON AcceptedRides.ride_id = Rides.ride_id WHERE YEAR(requested_at) = 2020 GROUP BY MONTH), final_record AS( SELECT month, ROUND(AVG(distance) OVER (ORDER BY MONTH ROWS between current row and 2 following) ,2) AS average_ride_distance, ROUND(AVG(duration) OVER (ORDER BY MONTH ROWS between current row and 2 following) ,2) AS average_ride_duration FROM( SELECT Months.Month AS month, IFNULL(distance,0) AS distance, IFNULL(duration,0)AS duration FROM Months LEFT JOIN record ON Months.Month = record.Month) AS mth_record) SELECT * FROM final_record WHERE month <11
with recursive a as ( select 1 as month union all select month + 1 from a where month < 12 ), b as ( select if(substring(requested_at, 6, 2) like '0%', substring(requested_at, 7, 1), substring(requested_at, 6, 2)) as month, sum(ride_distance) ride_distance, sum(ride_duration) ride_duration from Rides join AcceptedRides using (ride_id) where date_format(requested_at, '%Y') = 2020 group by 1 ), c as ( select a.month, ifnull(ride_distance, 0) distance, ifnull(ride_duration, 0) duration from a left join b using (month) ) select month, round(sum(distance) over (order by month rows between current row and 2 following) / 3, 2) as average_ride_distance, round(sum(duration) over (order by month rows between current row and 2 following) / 3, 2) as average_ride_duration from c limit 10
with recursive all_month(month_number) as ( select 1 union all select month_number+1 from all_month where month_number < 12 ) select month_number as month ,round((ifnull(lead(sum_distance,1) over(),0) + ifnull(lead(sum_distance,2) over (),0)+sum_distance)/3,2) as average_ride_distance ,round((ifnull(lead(sum_duration,1) over (),0) + ifnull(lead(sum_duration,2) over (),0)+sum_duration)/3,2) as average_ride_duration from( select month_number ,ifnull(sum_distance,0) sum_distance ,ifnull(sum_duration,0) sum_duration from all_month a left join( select month(requested_at) as ride_month ,sum(ride_distance) as sum_distance ,sum(ride_duration) as sum_duration from AcceptedRides accept join Rides ride on accept.ride_id = ride.ride_id where requested_at between '2020-01-01' and '2020-12-31' group by ride_month ) rides on a.month_number = rides.ride_month order by month_number ) final_sum group by month order by month limit 10
with recursive all_months as ( select 1 as mon union select mon + 1 as mon from all_months where mon < 10 ), requested as ( select month(requested_at) requested_month, sum(ride_distance) ride_distance, sum(ride_duration) ride_duration from rides r join acceptedrides a on r.ride_id = a.ride_id where year(requested_at) = 2020 group by requested_month ) select a.mon as month, coalesce(round(sum(ride_distance) / 3, 2), 0) average_ride_distance, coalesce(round(sum(ride_duration) / 3, 2), 0) average_ride_duration from all_months a left join requested r on r.requested_month - a.mon between 0 and 2 where a.mon <= 10 group by a.mon
with recursive all_months as ( select 1 as month union all select month + 1 as month from all_months where month < 10 ) select m.month, ifnull(r.avg_dis, 0) "average_ride_distance", ifnull(r.avg_dur, 0) "average_ride_duration" from all_months m left join (select m.month, round(sum(a.ride_distance) / 3, 2) "avg_dis", round(sum(a.ride_duration) / 3, 2) "avg_dur" from (select * from all_months) m join rides r on month(r.requested_at) between m.month and m.month + 2 join acceptedrides a on r.ride_id = a.ride_id where r.requested_at between '2020.01.01' and '2020.12.31' group by 1 ) r on m.month = r.month
with recursive all_months as ( select 1 as month union all select month + 1 as month from all_months where month < 10 ) select m.month, ifnull(r.avg_dis, 0) "average_ride_distance", ifnull(r.avg_dur, 0) "average_ride_duration" from all_months m left join (select m.month, round(sum(a.ride_distance) / 3, 2) "avg_dis", round(sum(a.ride_duration) / 3, 2) "avg_dur" from (select * from all_months) m join rides r on month(r.requested_at) between m.month and m.month + 2 join acceptedrides a on r.ride_id = a.ride_id where year(r.requested_at) = 2020 group by 1 ) r on m.month = r.month
with recursive all_months as ( select 1 as month union all select month + 1 as month from all_months where month < 10 ) select m.month, ifnull(r.avg_dis, 0) "average_ride_distance", ifnull(r.avg_dur, 0) "average_ride_duration" from all_months m left join (select m.month, round(sum(a.ride_distance) / 3, 2) "avg_dis", round(sum(a.ride_duration) / 3, 2) "avg_dur" from (select * from all_months) m left join rides r on month(r.requested_at) between m.month and m.month + 2 left join acceptedrides a on r.ride_id = a.ride_id where r.requested_at between '2020.01.01' and '2020.12.31' group by 1 ) r on m.month = r.month
with recursive all_months as ( select 1 as month union all select month + 1 as month from all_months where month < 10 ), result_table as ( select m.month, round(sum(a.ride_distance) / 3, 2) "avg_dis", round(sum(a.ride_duration) / 3, 2) "avg_dur" from (select * from all_months) m join rides r on month(r.requested_at) between m.month and m.month + 2 join acceptedrides a on r.ride_id = a.ride_id where year(r.requested_at) = 2020 group by 1 ) select m.month, ifnull(r.avg_dis, 0) "average_ride_distance", ifnull(r.avg_dur, 0) "average_ride_duration" from all_months m left join result_table r on m.month = r.month
with recursive all_months as ( select 1 as month union all select month + 1 as month from all_months where month < 10 ), result_table as ( select m.month, round(sum(a.ride_distance) / 3, 2) "avg_dis", round(sum(a.ride_duration) / 3, 2) "avg_dur" from all_months m join rides r on month(r.requested_at) between m.month and m.month + 2 join acceptedrides a on r.ride_id = a.ride_id where year(r.requested_at) = 2020 group by 1 ) select m.month, ifnull(r.avg_dis, 0) "average_ride_distance", ifnull(r.avg_dur, 0) "average_ride_duration" from all_months m left join result_table r on m.month = r.month
with recursive all_months as ( select 1 as month union all select month + 1 as month from all_months where month < 12 ), months_stats as ( select month(requested_at) as month, sum(ride_distance) as distance, sum(ride_duration) as duration from AcceptedRides a left join rides r on a.ride_id = r.ride_id where requested_at between '2020-01-01' and '2020-12-31' group by 1 ) select * from ( select month, round(avg(distance) over(order by month rows between current row and 2 following), 2) as average_ride_distance, round(avg(duration) over(order by month rows between current row and 2 following), 2) as average_ride_duration from ( select a.month, coalesce(distance, 0) as distance, coalesce(duration, 0) as duration from all_months a left join months_stats m on a.month = m.month ) f order by 1 ) g where month <= 10
with recursive all_months as ( select 1 as month union select month + 1 as month from all_months where month < 12 ) select * from ( select month, round((sum(ride_distance) over (order by month asc rows between 0 preceding and 2 following)) / 3, 2) as average_ride_distance, round((sum(ride_duration) over (order by month asc rows between 0 preceding and 2 following)) / 3, 2) as average_ride_duration from ( select t1.month, if(t2.ride_distance is null, 0, t2.ride_distance) as ride_distance, if(t2.ride_duration is null, 0, t2.ride_duration) as ride_duration from all_months t1 left join ( select month(t2.requested_at) as month, sum(t1.ride_distance) as ride_distance, sum(t1.ride_duration) as ride_duration from acceptedrides t1 join rides t2 on t2.ride_id = t1.ride_id where year(t2.requested_at) = 2020 group by month ) t2 on t2.month = t1.month ) t ) t where month <= 10
with recursive calendar as ( select 1 as m union all select m + 1 as m from calendar where m < 10 ) ,total as ( select month(r.requested_at) as m, sum(a.ride_distance) as dist, sum(a.ride_duration) as dur from AcceptedRides a join Rides r on a.ride_id = r.ride_id and year(r.requested_at) = 2020 group by 1 order by 1 ) select c.m as month, round((ifnull(t1.dist,0) + ifnull(t2.dist,0) + ifnull(t3.dist,0)) / 3,2) as average_ride_distance, round((ifnull(t1.dur,0) + ifnull(t2.dur,0) + ifnull(t3.dur,0)) / 3,2) as average_ride_duration from calendar c left join total t1 on c.m = t1.m left join total t2 on c.m = t2.m - 1 left join total t3 on c.m = t3.m - 2
with recursive cte (month) as ( select 1 union all select month+1 from cte where month<12 ) , cte2 as( select R.ride_id, month(requested_at) as m, ride_distance, ride_duration from Rides R join AcceptedRides A ON R.ride_id=A.ride_id where requested_at>='2020-01-01' and requested_at<='2020-12-31'), cte3 as ( select r.month as month, ifnull(sum(ride_distance),0) as ride_distance, ifnull(sum(ride_duration),0) as ride_duration from cte r left outer join cte2 c ON r.month=c.m group by month) select month, round(avg(ride_distance) over (order by month rows between current row and 2 following),2) as average_ride_distance, round(avg(ride_duration) over (order by month rows between current row and 2 following),2) as average_ride_duration from cte3 limit 10
with recursive cte as ( select '2020-01-01' as daymonth union all select date_add(daymonth, interval 1 month) as daymonth from cte where daymonth < '2020-12-01' ), cte1 as ( select a.ride_id, ride_distance, ride_duration, r.requested_at, month(requested_at) as requested_month from AcceptedRides a left join Rides r on a.ride_id = r.ride_id where r.requested_at between '2020-01-01' and '2020-12-31' ), cte2 as ( select month, ifnull(monthly_distance,0) as monthly_distance, ifnull(monthly_duration, 0) as monthly_duration from ( select month(daymonth) as month from cte )t left join ( select requested_month, sum(ride_distance) as monthly_distance, sum(ride_duration) as monthly_duration from cte1 group by requested_month )t2 on t.month = t2.requested_month ) select * from( select month, round(avg(monthly_distance) over(order by month asc range between 0 following and 2 following ),2) as average_ride_distance, round( avg(monthly_duration) over(order by month asc range between 0 following and 2 following),2) as average_ride_duration from cte2 order by month asc )t where month < 11
with recursive cte as ( select 01 month from dual union all select month+1 from cte where month<12 ) select * from ( select month, round((lead(ifnull(ride_distance,0),1) over (order by month) + lead(ifnull(ride_distance,0),2) over (order by month) + ifnull(ride_distance,0) )/3,2) as average_ride_distance ,round(( Ifnull(lead(ifnull(ride_duration,0),1) over (order by month),0) + ifnull(lead(ifnull(ride_duration,0),2) over (order by month),0) + ifnull(ride_duration,0) )/3,2) as average_ride_duration from cte left join ( select requested_at,sum(ifnull(ride_distance,0)) ride_distance, sum(ifnull(ride_duration,0)) ride_duration from acceptedrides a , rides r where a.ride_id = r.ride_id and year(requested_at) = 2020 group by month(requested_at) ) tt on month(tt.requested_at) = cte.month ) x where month<=10
with recursive cte as ( select 1 as month UNION ALL select month + 1 from cte where month <= 11 ), cte2 as ( select cte.month, sum(ride_distance) r_dist, sum(ride_duration) r_dur from cte left join (select * from Rides where year(requested_at) = '2020') r on cte.month = month(r.requested_at) left join AcceptedRides a on r.ride_id = a.ride_id group by cte.month ) select cte2.month, CASE WHEN round(sum(cte3.r_dist)/3, 2) is null THEN 0.00 ELSE round(sum(cte3.r_dist)/3, 2) END average_ride_distance , CASE WHEN round(sum(cte3.r_dur)/3, 2) is null THEN 0.00 ELSE round(sum(cte3.r_dur)/3, 2) END average_ride_duration from cte2 inner join cte2 as cte3 on cte2.month >= (cte3.month - 2) and cte2.month <= cte3.month where cte2.month <= 10 group by cte2.month order by cte2.month
with recursive cte as ( select 1 as month from dual union all select month+1 from cte where month < 12 ),cte1 as ( select month(requested_at) as month,sum(ride_distance) as ride_distance,sum(ride_duration) as ride_duration from Rides join AcceptedRides on Rides.ride_id = AcceptedRides.ride_id and year(requested_at) = 2020 group by month(requested_at) union all select month,0,0 from cte where month not in (select month(requested_at) from Rides join AcceptedRides on Rides.ride_id = AcceptedRides.ride_id where year(requested_at) = 2020 ) order by month ),CTE6 AS ( SELECT month, ROUND((SUM(ride_distance) OVER(ORDER BY month ROWS BETWEEN CURRENT ROW AND 2 FOLLOWING)) / 3,2) AS average_ride_distance, ROUND((SUM(ride_duration) OVER(ORDER BY month ROWS BETWEEN CURRENT ROW AND 2 FOLLOWING)) / 3,2) AS average_ride_duration FROM CTE1 ) SELECT * FROM CTE6 WHERE month <= 10
with recursive cte as ( select 1 as month from dual union all select month+1 from cte where month < 12 ),cte1 as ( select month(requested_at) as month,sum(ride_distance) as ride_distance,sum(ride_duration) as ride_duration from Rides join AcceptedRides on Rides.ride_id = AcceptedRides.ride_id and year(requested_at) = 2020 group by month(requested_at) union all select month,0,0 from cte where month not in (select month(requested_at) from Rides join AcceptedRides on Rides.ride_id = AcceptedRides.ride_id where year(requested_at) = 2020 ) order by month ),cte2 as ( select t1.month,t1.ride_distance as t1rd,t1.ride_duration as t1rdr,t2.ride_distance as t2rd,t2.ride_duration as t2rdr,t3.ride_distance as t3rd,t3.ride_duration as t3rdr from cte1 t1 join cte1 t2 join cte1 t3 on t1.month+1 = t2.month and t2.month+1 = t3.month and t1.month+2 = t3.month ) select cte2.month,round((t1rd+t2rd+t3rd)/3,2) as average_ride_distance,round((t1rdr+t2rdr+t3rdr)/3,2) as average_ride_duration from cte2
with recursive cte as ( select 1 as month union all select month + 1 as month from cte where month < 12 ) select distinct month, round(sum(ifnull(ride_distance, 0)) over (order by month range between current row and 2 following) / 3, 2) as average_ride_distance, round(sum(ifnull(ride_duration, 0)) over (order by month range between current row and 2 following) / 3, 2) as average_ride_duration from cte left join Rides r on month = month(requested_at) and year(requested_at) = 2020 left join AcceptedRides a on r.ride_id = a.ride_id order by month limit 10
with recursive cte as ( select 1 as month union all select month + 1 as month from cte where month < 12 ), cte0 as ( select a.ride_id, a.ride_distance, a.ride_duration, r.requested_at from AcceptedRides a left join Rides r on a.ride_id = r.ride_id and year(r.requested_at ) = 2020 ), cte2 as ( select rt.month, IFNULL(total_distance, 0) as total_distance, IFNULL(total_duration, 0) as total_duration from cte rt left join( select month(requested_at) as month, sum(ride_distance) as total_distance, sum(ride_duration) as total_duration from cte0 group by month )t on rt.month = t.month ) select * from ( select month, round(avg(total_distance) over(order by month range between 0 following and 2 following),2) as average_ride_distance, round(avg(total_duration) over(order by month range between 0 following and 2 following), 2) as average_ride_duration from cte2 order by 1 )t where month < 11
with recursive cte as ( select 1 as month union all select month + 1 as month from cte where month <= 9 ) select cte.month, round(sum(ifnull(ride_distance, 0))/3, 2) as average_ride_distance, round(sum(ifnull(ride_duration,0))/3, 2) as average_ride_duration from cte left join (select month(requested_at) as month, sum(ride_distance) as ride_distance, sum(ride_duration) as ride_duration from Rides r right join AcceptedRides a on r.ride_id = a.ride_id where requested_at between "2020-01-01" and "2020-12-31" group by month(requested_at)) t on cte.month <= t.month and t.month <= cte.month + 2 group by cte.month order by cte.month
with recursive cte as ( select 1 as month union all select month + 1 from cte where month +1 < 13 ) ,t as ( select month(requested_at) as month, sum(ride_distance) as ride_distance, sum(ride_duration) as ride_duration from AcceptedRides ar join rides r on ar.ride_id = r.ride_id and year(requested_at) = 2020 group by 1 ), t1 as ( select cte.month, coalesce(t.ride_distance,0) as ride_distance, coalesce(t.ride_duration,0) as ride_duration from t right join cte on t.month = cte.month ), t11 as ( select month, ride_distance as rd1, ride_duration as rm1, lead(ride_distance) over(order by month) as rd2 , lead(ride_duration) over(order by month) as rm2 from t1 ), t12 as ( select *, lead(rd2) over(order by month) as rd3 , lead(rm2) over(order by month) as rm3 from t11 ) ,t2 as ( select month, cast((rd1+rd2+rd3)/3.0 as decimal(36,2)) as average_ride_distance, cast((rm1+rm2+rm3)/3.0 as decimal(36,2)) as average_ride_duration from t12 ) select * from t2 where average_ride_distance is not null order by month
with recursive cte as ( select 1 as month union all select month + 1 from cte where month < 12 ) select t.month, round(avg(cast(ifnull(b.monthly_distance,0) as float)) over (order by month rows between current row and 2 following),2) average_ride_distance, round(avg(cast(ifnull(b.monthly_duration,0) as float)) over (order by month rows between current row and 2 following),2) average_ride_duration from cte t left join ( select month(a.requested_at) month, sum(b.ride_distance) monthly_distance, sum(ride_duration) monthly_duration from rides a join acceptedrides b on a.ride_id = b.ride_id where year(a.requested_at) = 2020 group by month ) b on t.month = b.month order by 1 limit 10
with recursive cte as ( select 1 as month union all select month + 1 from cte where month < 12 ) select t.month, round(avg(cast(ifnull(b.monthly_distance,0) as float))over(order by month rows between current row and 2 following),2) average_ride_distance, round(avg(cast(ifnull(b.monthly_duration,0) as float))over(order by month rows between current row and 2 following),2) average_ride_duration from cte t left join( select month(a.requested_at) month, sum(b.ride_distance) monthly_distance, sum(ride_duration) monthly_duration from rides a join acceptedrides b on a.ride_id = b.ride_id where year(a.requested_at) = 2020 group by month ) b on t.month = b.month limit 10
with recursive cte as ( select 1 as month union all select month + 1 from cte where month < 12 ) select t.month, round(avg(cast(ifnull(b.monthly_distance,0) as float))over(order by month rows between current row and 2 following),2) average_ride_distance, round(avg(cast(ifnull(b.monthly_duration,0) as float))over(order by month rows between current row and 2 following),2) average_ride_duration from cte t left join( select month(a.requested_at) month, sum(b.ride_distance) monthly_distance, sum(ride_duration) monthly_duration from rides a join acceptedrides b on a.ride_id = b.ride_id where year(a.requested_at) = 2020 group by month ) b on t.month = b.month order by 1 limit 10
with recursive cte as ( select 1 as month union all select month + 1 from cte where month < 12 ), temp as ( select driver_id, sum(ride_distance) as distance, sum(ride_duration) as duration, MONTH(requested_at) as month from AcceptedRides as a join Rides as r on a.ride_id = r.ride_id where date_format(requested_at, '%Y-%m') > '2019-12' and date_format(requested_at, '%Y-%m') < '2021-01' group by date_format(requested_at, '%Y-%m') ), temp1 as ( select cte.month, case when distance is NULL then 0 else distance end as distance, case when duration is NULL then 0 else duration end as duration from cte left join temp on cte.month = temp.month ) select t.month, round(sum(u.distance)/3,2) as average_ride_distance, round(sum(u.duration)/3,2) as average_ride_duration from temp1 as t join temp1 as u where t.month <= u.month and u.month - t.month < 3 and t.month <= 10 group by t.month order by t.month
with recursive cte as ( select 1 as month union all select month + 1 from cte where month < 12 ), temp as (select month(r.requested_at) as month,a.ride_distance,a.ride_duration from rides r join acceptedrides a using(ride_id) where year(r.requested_at) = 2020 ), temp2 as (select cte.month, case when temp.month is null then 0 else sum(temp.ride_distance) end as ride_distance, case when temp.month is null then 0 else sum(temp.ride_duration) end ride_duration from cte left join temp using(month) group by month) select month, round(sum(ride_distance) over (order by month rows between current row and 2 following)/3,2) as average_ride_distance, round(sum(ride_duration) over (order by month rows between current row and 2 following)/3,2) as average_ride_duration from temp2 order by month limit 10
with recursive cte as ( select 1 as month union all select month+1 from cte where month < 12 ) select c.month, ( SELECT ifnull(round(sum(ride_distance)/3,2),0) as average_ride_distance from acceptedrides ar left join rides r on ar.ride_id = r.ride_id where year(requested_at) = 2020 and month(requested_at) - c.month between 0 and 2 ) as 'average_ride_distance', ( SELECT ifnull(round(sum(ride_duration)/3,2),0) as average_ride_duration from acceptedrides ar left join rides r on ar.ride_id = r.ride_id where year(requested_at) = 2020 and month(requested_at) - c.month between 0 and 2 ) as 'average_ride_duration' from cte c where c.month <= 10
with recursive cte as ( select 1 as month union select month +1 from cte where month < 12 ), cte1 as ( select cte.month, ifnull(rd,0) as rd, ifnull(rdu,0) as rdu from cte left join (select month(requested_at) as month, sum(ride_distance) as rd, sum(ride_duration) as rdu from ( select * from rides where year(requested_at) = 2020) as r join acceptedrides as ar on r.ride_id = ar.ride_id group by month) as t1 using (month)) select a.month, round((a.rd+b.rd+c.rd)/3,2) as average_ride_distance, round((a.rdu+b.rdu+c.rdu)/3,2) as average_ride_duration from cte1 as a join cte1 as b on a.month = b.month-1 join cte1 as c on b.month = c.month-1 order by a.month
with recursive cte as ( select 1 as month union select month +1 from cte where month < 12 ), cte1 as ( select cte.month, ifnull(rd,0) as rd, ifnull(rdu,0) as rdu from cte left join (select month(requested_at) as month, sum(ride_distance) as rd, sum(ride_duration) as rdu from ( select * from rides where year(requested_at) = 2020) as r join acceptedrides as ar on r.ride_id = ar.ride_id group by month) as t1 using (month)) select a.month, round(avg(b.rd),2) as average_ride_distance, round(avg(b.rdu),2) as average_ride_duration from cte1 as a join cte1 as b on b.month- a.month between 0 and 2 group by a.month having count(b.rd) = 3 order by a.month
with recursive cte as ( select 1 as month union select month+1 as month from cte where month<10 ) select c.month, ifnull(round(sum(t.ride_distance)/3,2),0) as average_ride_distance, ifnull(round(sum(t.ride_duration)/3,2),0) as average_ride_duration from cte c left join (select month(r.requested_at) as month, a.ride_distance, a.ride_duration from AcceptedRides a left join Rides r on a.ride_id=r.ride_id where r.requested_at between '2020-01-01' and '2020-12-31') t on c.month+2>=t.month and t.month>=c.month group by 1
with recursive cte as ( select 1 as month union select month+1 as month from cte where month<12 ), a as( select right(left(requested_at,7),2) as ride_month, ride_distance, ride_duration from acceptedrides ar join rides r on ar.ride_id=r.ride_id where requested_at>='2020-01-01' and requested_at<='2020-12-31' order by requested_at), c as( select ride_month, sum(ride_distance) as sum_ride, sum(ride_duration) as sum_time from a group by ride_month) select * from( select month-2 as month, round(avg(sum_ride) over (order by month rows between 2 preceding and current row),2) as average_ride_distance, round(avg(sum_time) over (order by month rows between 2 preceding and current row),2) as average_ride_duration from( select cte.month, ifnull(sum_ride,0) as sum_ride, ifnull(sum_time,0) as sum_time from cte left join c on cte.month=c.ride_month) as temp) as temp2 where month>0
with recursive cte as ( select 1 as n union select n + 1 from cte where n < 12 ) select t1.n as month, round(avg(coalesce(t2.ride_distance,0)) over(order by t1.n rows between current row and 2 following),2) as average_ride_distance, round(avg(coalesce(t2.ride_duration,0)) over(order by t1.n rows between current row and 2 following ),2) as average_ride_duration from cte t1 left join( select month(r.requested_at) as month, coalesce(sum(a.ride_distance),0) as ride_distance, coalesce(sum(a.ride_duration),0) as ride_duration from rides r left join acceptedrides a on r.ride_id = a.ride_id where year(r.requested_at) = 2020 group by 1) t2 on t1.n = t2.month limit 10
with recursive cte as (select 1 as month union all select month + 1 as month from cte where month <= 11) select distinct month, round(sum(ifnull(ride_distance, 0)) over(order by month range between current row and 2 following )/3, 2) as average_ride_distance, round(sum(ifnull(ride_duration, 0)) over(order by month range between current row and 2 following )/3, 2) as average_ride_duration from cte left join rides on month = month(requested_at) and year(requested_at) = 2020 left join acceptedRides using(ride_id) order by 1 limit 10
with recursive cte as (select 1 as month union all select month + 1 as month from cte where month <= 11) select distinct month, round(sum(ifnull(ride_distance,0)) over(order by month range between current row and 2 following)/3,2) as average_ride_distance, round(sum(ifnull(ride_duration,0)) over(order by month range between current row and 2 following)/3,2) as average_ride_duration from cte left join rides on month = month(requested_at) and year(requested_at) = 2020 left join AcceptedRides using (ride_id) order by 1 limit 10
with recursive cte as (select 1 as month union all select month + 1 from cte where month + 1 < 13 ) select * from ( select a.month, round(ifnull(sum(ride_distance) over(order by month rows between current row and 2 following) / 3,0),2) average_ride_distance , round(ifnull(sum(ride_duration) over(order by month rows between current row and 2 following) / 3,0),2) average_ride_duration from cte a left join ( select month(r.requested_at) month, sum(ride_distance) ride_distance, sum(ride_duration) ride_duration from AcceptedRides a inner join Rides r on a.ride_id = r.ride_id where year(r.requested_at) = 2020 group by month(r.requested_at) ) b on a.month = b.month) result where month < 11
with recursive cte as (select 1 as month union all select month + 1 from cte where month + 1 < 13 ), cte2 as( select * from cte left join (select MONTH(requested_at) as month, sum(ride_distance) as ride_distance, sum(ride_duration) as ride_duration from Rides r join AcceptedRides a on r.ride_id = a.ride_id and r.requested_at between '2020-01-01' and '2020-12-31' group by month) temp using(month) ) select * from ( select month, round(avg(coalesce(ride_distance,0)) over(order by month rows between current row and 2 following ),2) average_ride_distance, round(avg(coalesce(ride_duration,0)) over(order by month rows between current row and 2 following ),2) average_ride_duration from cte2 ) res where month <= 10
with recursive cte as (select 1 as month union all select month+1 from cte where month<12), groupbymonth as (select a.ride_id, month(requested_at) month, sum(ride_distance) ts, sum(ride_duration) td from AcceptedRides a join Rides r on r.ride_id = a.ride_id where year(requested_at) = '2020' group by month(requested_at) ), t as (select cte.month, ifnull(ts,0) ts0,ifnull(td,0) td0 from cte left join groupbymonth on cte.month=groupbymonth.month ) select month, round(avg(ts0)over(order by month rows between current row and 2 following),2) as average_ride_distance, round(avg(td0)over(order by month rows between current row and 2 following),2) as average_ride_duration from t order by 1 limit 10
with recursive cte as (select 1 as month union select month + 1 from cte where month < 12) select c.month, round(avg(ifnull(monthly_distance,0)) over(order by c.month ROWS BETWEEN current row and 2 following),2) as average_ride_distance, round(avg(ifnull(monthly_duration,0)) over(order by month ROWS BETWEEN current row and 2 following),2) as average_ride_duration from (select month(requested_at) as month, sum(ride_distance) as monthly_distance, sum(ride_duration) as monthly_duration from rides r join AcceptedRides ar on r.ride_id = ar.ride_id where year(requested_at) = 2020 group by month) a right join cte c on a.month = c.month order by c.month limit 10
with recursive cte as (select Extract(MONTH FROM r.requested_at) as month, sum(ride_distance) as tot_distance, sum(ride_duration) as tot_duration from Rides r JOIN AcceptedRides a ON r.ride_id = a.ride_id where Extract(YEAR FROM r.requested_at) = 2020 group by Extract(MONTH FROM r.requested_at)), cte2 as (select 1 as month UNION SELECT month+1 from cte2 where month+1 <= (select max(month) from cte)) select c2.month, IFNULL(Round((sum(tot_distance) over(Order by c2.month rows between current row and 2 following))/3, 2), 0) as average_ride_distance, IFNULL(Round((sum(tot_duration) over(Order by c2.month rows between current row and 2 following))/3, 2), 0) as average_ride_duration from cte2 c2 left join cte c1 on c2.month = c1.month Order by month limit 10
with recursive cte as( SELECT MONTH(requested_at) AS month, SUM(ride_distance) AS ride_distance, SUM(ride_duration) AS ride_duration FROM AcceptedRides a JOIN Rides r ON a.ride_id=r.ride_id WHERE YEAR(requested_at) = '2020' GROUP BY MONTH(requested_at) ), months as ( SELECT 1 as month UNION ALL SELECT month+1 FROM months WHERE month<12 ), cte2 as( SELECT m.month, ride_distance, ride_duration FROM months m LEFT JOIN cte c ON m.month=c.month ), cte3 as( SELECT month, COALESCE(ROUND((SUM(ride_distance) OVER(ORDER BY month ASC ROWS BETWEEN CURRENT ROW AND 2 FOLLOWING))/3, 2), 0)as average_ride_distance, COALESCE(ROUND((SUM(ride_duration) OVER(ORDER BY month ASC ROWS BETWEEN CURRENT ROW AND 2 FOLLOWING))/3, 2), 0) as average_ride_duration FROM cte2 ) SELECT month, average_ride_distance, average_ride_duration FROM cte3 WHERE month < 11
with recursive cte as( SELECT MONTH(requested_at) AS month, SUM(ride_distance) AS ride_distance, SUM(ride_duration) AS ride_duration FROM AcceptedRides a JOIN Rides r ON a.ride_id=r.ride_id WHERE YEAR(requested_at) = '2020' GROUP BY MONTH(requested_at) ), months as ( SELECT 1 as month UNION ALL SELECT month+1 FROM months WHERE month<12 ), cte2 as( SELECT m.month, ride_distance, ride_duration FROM months m LEFT JOIN cte c ON m.month=c.month ), cte3 as( SELECT month, COALESCE(ROUND((SUM(ride_distance) OVER(ORDER BY month ASC ROWS BETWEEN CURRENT ROW AND 2 FOLLOWING))/3, 2), 0)as average_ride_distance, COALESCE(ROUND((SUM(ride_duration) OVER(ORDER BY month ASC ROWS BETWEEN CURRENT ROW AND 2 FOLLOWING))/3, 2), 0) as average_ride_duration FROM cte2 ) SELECT month, average_ride_distance, average_ride_duration FROM cte3 WHERE month+2 <= 12
with recursive cte as( select 1 as month union all select month +1 from cte where month <=11) select c.month, round(ifnull(sum(a.ride_distance),0)/3,2) as average_ride_distance, round(ifnull(sum(a.ride_duration),0)/3,2) as average_ride_duration from cte c left join Rides r on (month(r.requested_at) - c.month) between 0 and 2 and year(r.requested_at) = 2020 left join AcceptedRides a on r.ride_id = a.ride_id where c.month <= 10 group by 1 order by 1
with recursive cte as( select 1 as month union all select month+1 as month from cte where month<12), ridesStat as(select month(r1.requested_at) as month,SUM(a1.ride_distance) as distance,SUM(a1.ride_duration) as duration from AcceptedRides a1 left join Rides r1 on r1.ride_id=a1.ride_id where r1.requested_at like '2020%' group by 1), ridesStat2 as(select c1.month,coalesce(round(sum(r1.distance) over(order by c1.month rows between current row and 2 following)/3,2),0) as average_ride_distance,coalesce(round(SUM(r1.duration) over(order by c1.month rows between current row and 2 following)/3,2),0) as average_ride_duration from cte c1 left join ridesStat r1 on r1.month=c1.month) select * from ridesStat2 where month<=10
with recursive cte as( select 1 as month union select month + 1 as month from cte where month < 12 ), Ride2 as (SELECT date_format(requested_at, '%m') as month, ride_id, user_id FROM Rides WHERE requested_at LIKE '%2020%') SELECT * FROM ( SELECT month, ROUND(sum(ride_distance) OVER(ORDER BY month ROWS between current row and 2 following)/3,2) AS average_ride_distance, ROUND(sum(ride_duration) OVER(ORDER BY month ROWS between current row and 2 following)/3,2) AS average_ride_duration FROM ( SELECT month, sum(ride_distance) as ride_distance, sum(ride_duration) as ride_duration FROM ( SELECT cte.month, ifnull(ride_distance,0) as ride_distance, ifnull(ride_duration,0) as ride_duration FROM cte LEFT JOIN Ride2 using (month) LEFT JOIN AcceptedRides using (ride_id) )t GROUP BY 1 )y )a WHERE month <= 10
with recursive cte as( select 1 as month union select month + 1 as month from cte where month < 12 ), Ride2 as (SELECT date_format(requested_at, '%m') as month, ride_id, user_id FROM Rides WHERE requested_at LIKE '%2020%') SELECT * FROM ( SELECT month, ROUND(sum(ride_distance) over(order by month ROWS BETWEEN current row and 2 following)/3,2) as average_ride_distance, ROUND(sum(ride_duration ) over(order by month ROWS BETWEEN current row and 2 following)/3,2) as average_ride_duration FROM ( SELECT month, sum(ride_distance) as ride_distance, sum(ride_duration) as ride_duration FROM ( SELECT cte.month, ifnull(ride_distance,0) as ride_distance, ifnull(ride_duration,0) as ride_duration FROM cte LEFT JOIN Ride2 r using (month) LEFT JOIN AcceptedRides using (ride_id))t GROUP BY 1)y )a WHERE month <= 10
with recursive cte as( select 1 month union all select month+1 from cte where month<10), cte_rides as ( select month(r.requested_at) month, ride_distance, ride_duration from AcceptedRides a join Rides r on a.ride_id = r.ride_id where year(r.requested_at) = 2020) select cte.month,round(ifnull(sum(ride_distance)/3,0),2)average_ride_distance, round(ifnull(sum(ride_duration)/3,0),2)average_ride_duration from cte left join cte_rides on cte_rides.month-cte.month between 0 and 2 group by 1 order by 1
with recursive cte as( select 1 month union all select month+1 month from cte where month < 12) select * from( select month, round(sum(ride_distance) over(order by month rows between current row and 2 following)/3,2) average_ride_distance, round(sum(ride_duration) over(order by month rows between current row and 2 following)/3,2) average_ride_duration from ( select month, ifnull(sum(ride_distance),0) ride_distance, ifnull(sum(ride_duration),0) ride_duration from cte left join rides r on month = month(requested_at) and year(requested_at) = 2020 left join acceptedrides ar on r.ride_id = ar.ride_id group by month) f1) f2 where month < 11
with recursive cte as( select 1 month union all select month+1 month from cte where month < 12), ct2 as ( select month, ifnull(sum(ride_distance),0) ride_distance, ifnull(sum(ride_duration),0) ride_duration from cte left join Rides r on month = month(requested_at) and year(requested_at) = 2020 left join AcceptedRides ar on r.ride_id = ar.ride_id group by month ) select * from( select month, round(sum(ride_distance) over(order by month rows between current row and 2 following)/3,2) average_ride_distance, round(sum(ride_duration) over(order by month rows between current row and 2 following)/3,2) average_ride_duration from ct2 ) f2 where month < 11
with recursive cte(day) as ( select str_to_date('2020-1-1', '%Y-%m-%d') union all select date_add(day, INTERVAL 1 MONTH) from cte where day < '2020-10-1' ), cte2 as ( select requested_at, ride_distance, ride_duration from AcceptedRides natural join Rides where year(requested_at) = 2020 ) select month(day) month, round(ifnull(sum(ride_distance), 0) / 3, 2) average_ride_distance, round(ifnull(sum(ride_duration), 0) / 3, 2) average_ride_duration from cte left join cte2 on requested_at between day and last_day(date_add(day, INTERVAL 2 MONTH)) group by month order by 1
with recursive cte(month) as ( select 1 as month union all select month + 1 from cte where month < 12 ), sliding as ( select a.month as month1 , b.month as month2 from cte as a left join cte as b on b.month between a.month and (a.month + 2) where a.month <= 10 order by month1, month2 ), ride as ( select x.ride_id , month(x.requested_at) as month , y.ride_distance , y.ride_duration from rides as x inner join AcceptedRides as y on x.ride_id = y.ride_id where year(x.requested_at) = 2020 ) select c.month1 as month , case when sum(d.ride_distance)/3 is null then 0.00 else round(sum(d.ride_distance)/3, 2) end as average_ride_distance , case when sum(d.ride_duration)/3 is null then 0.00 else round(sum(d.ride_duration)/3, 2) end as average_ride_duration from sliding as c left join ride as d on c.month2 = d.month group by c.month1 order by c.month1
with recursive cte(month) as ( select 1 as month union all select month+1 from cte where month <12 ), ride as ( select date_format(rides.requested_at, '%c') as month, sum(AcceptedRides.ride_distance) as ride_distance, sum(AcceptedRides.ride_duration) as ride_duration from rides join AcceptedRides using(ride_id) where rides.requested_at between '2020-01-01' and '2020-12-31' group by 1 ) select cte.month, round(avg(ifnull(ride.ride_distance,0)) over (order by cte.month rows between current row and 2 following),2) as average_ride_distance, round(avg(ifnull(ride.ride_duration,0)) over (order by cte.month rows between current row and 2 following),2) as average_ride_duration from cte left join ride using(month) limit 10
with recursive cte(n) as ( select 1 as mnt union all select n + 1 as mnt from cte where n<12 ), cte1 as ( select month(requested_at) as mnt, sum(ride_distance) as ride_distance, sum(ride_duration) as ride_duration from Rides r join AcceptedRides ar on r.ride_id = ar.ride_id where year(requested_at) = 2020 group by mnt order by mnt ), cte2 as ( select a.n as month, coalesce(ride_distance,0) as ride_distance, coalesce(ride_duration,0) as ride_duration from cte a left join cte1 b on a.n = b.mnt ) select month, cast((sum(ride_distance) over(order by month range between current row and 2 following))/3 as DECIMAL(10,2)) as average_ride_distance, CAST((sum(ride_duration) over(order by month range between current row and 2 following))/3 AS DECIMAL(10,2)) as average_ride_duration from cte2 limit 10
with recursive cte1 (month) as ( select 1 as month union select month + 1 from cte1 where month < 12 ) , cte2 as ( select month(r.requested_at) as month, sum(ar.ride_distance) as monthly_ride_distance, sum(ar.ride_duration) as monhtly_ride_duration from Rides r join AcceptedRides ar using(ride_id) where year(requested_at) = 2020 group by month ) , cte3 as ( select cte1.month, ifnull(monthly_ride_distance, 0) monthly_ride_distance, ifnull(monhtly_ride_duration, 0) monhtly_ride_duration from cte1 left join cte2 using(month) ) ,cte4 as ( select month, round((monthly_ride_distance + lead(monthly_ride_distance, 1) over(order by month) + lead(monthly_ride_distance, 2) over(order by month)) / 3, 2) as average_ride_distance, round((monhtly_ride_duration + lead(monhtly_ride_duration, 1) over(order by month) + lead(monhtly_ride_duration, 2) over(order by month)) / 3, 2) as average_ride_duration from cte3 ) select * from cte4 where month <= 10
with recursive cte1 as (select 1 as month union select 1+ month from cte1 where month<12 ), cte as (select month(b.requested_at) as month ,coalesce(sum(a.ride_distance),0) as sum_distance ,coalesce(sum(a.ride_duration),0) as sum_duration from acceptedrides a right join rides b on a.ride_id=b.ride_id where requested_at between "2020-01-01" and "2020-12-31" group by 1) select a.month, round(avg(coalesce(b.sum_distance,0))over(order by a.month rows between current row and 2 following ),2) as average_ride_distance, round(avg(coalesce(b.sum_duration,0))over(order by a.month rows between current row and 2 following ),2) as average_ride_duration from cte1 a left join cte b on a.month=b.month order by month limit 10
with recursive cte1 as (select 1 as month union select 1+ month from cte1 where month<12 ), cte as (select month(b.requested_at) as month ,sum(a.ride_distance) as sum_distance ,sum(a.ride_duration) as sum_duration from acceptedrides a right join rides b on a.ride_id=b.ride_id where requested_at between "2020-01-01" and "2020-12-31" group by 1) select a.month, round(avg(coalesce(b.sum_distance,0))over(order by a.month rows between current row and 2 following ),2) as average_ride_distance, round(avg(coalesce(b.sum_duration,0))over(order by a.month rows between current row and 2 following ),2) as average_ride_duration from cte1 a left join cte b on a.month=b.month order by month limit 10
with recursive cte1 as( select 1 as month union all select month + 1 as month from cte1 where month < 12 ), cte2 as( select month(r.requested_at) as month, a.ride_id,r.requested_at,a.ride_distance,a.ride_duration from AcceptedRides a left join Rides r on a.ride_id = r.ride_id where year(r.requested_at) = 2020 ), cte3 as ( select cte1.month, ifnull(sum(cte2.ride_distance),0) as tol_dis, ifnull (sum(cte2.ride_duration),0) as tol_dur from cte1 left join cte2 on cte1.month = cte2.month group by 1 order by 1 ), cte4 as ( select month, round(avg(tol_dis) over(order by month rows between current row and 2 following),2) as average_ride_distance, round(avg(tol_dur) over(order by month rows between current row and 2 following),2) as average_ride_duration from cte3 ) select month, average_ride_distance,average_ride_duration from cte4 where month <= 10 order by month
with recursive cte1 as( select 1 as month union all select month + 1 as month from cte1 where month < 12 ), cte2 as( select month(r.requested_at) as month, a.ride_id,r.requested_at,a.ride_distance,a.ride_duration from AcceptedRides a left join Rides r on a.ride_id = r.ride_id where year(r.requested_at) = 2020 ), cte3 as ( select cte1.month, ifnull(sum(cte2.ride_distance),0) as tol_dis, ifnull (sum(cte2.ride_duration),0) as tol_dur from cte1 left join cte2 on cte1.month = cte2.month group by 1 order by 1 ), cte4 as (select month, round(avg(tol_dis) over(order by month rows between current row and 2 following),2) as average_ride_distance, round(avg(tol_dur) over(order by month rows between current row and 2 following),2) as average_ride_duration from cte3 ) select month, average_ride_distance,average_ride_duration from cte4 where month <= 10 order by month
with recursive cte1 as( select 1 as month union select month+1 from cte1 where month<10), cte2 as( select month(b.requested_at) as month, sum(b.ride_id) as ride_id, sum(ride_distance) as ride_distance, sum(ride_duration) as ride_duration from AcceptedRides a left join rides b on a.ride_id = b.ride_id where year(requested_at)=2020 group by month(requested_at) ), cte3 as( select cte1.month, ifnull(round(sum(ride_distance)/3.0,2),0) as average_ride_distance, ifnull(round(sum(ride_duration)/3.0,2),0) as average_ride_duration from cte1 left join cte2 on cte1.month = cte2.month or cte1.month = cte2.month - 1 or cte1.month = cte2.month-2 group by cte1.month ) select * from cte3
with recursive cte1 as(select 1 as month union all select month+1 from cte1 where month<10), cte2 as(select month(requested_at) as month, ride_distance, ride_duration from Rides r join AcceptedRides a on r.ride_id=a.ride_id where requested_at between '2020-01-01' and '2020-12-31') select c1.month, round(ifnull(sum(c2.ride_distance)/3,0),2) as average_ride_distance, round(ifnull(sum(c2.ride_duration)/3,0),2) as average_ride_duration from cte1 c1 left join cte2 c2 on c1.month+2>=c2.month and c1.month<=c2.month group by 1 order by 1 asc
with recursive cte1 as(select 1 as month union all select month+1 from cte1 where month<10), cte2 as(select month(requested_at) as month, ride_distance, ride_duration from rides r join AcceptedRides a on r.ride_id=a.ride_id where date_format(requested_at, '%Y-%m') between '2020-01' and '2020-12') select c1.month, round(ifnull(sum(c2.ride_distance)/3,0),2) as average_ride_distance, round(ifnull(sum(c2.ride_duration)/3,0),2) as average_ride_duration from cte1 c1 left join cte2 c2 on c1.month+2>=c2.month and c1.month<=c2.month group by 1 order by 1 asc
with recursive cte1 as(select 1 n union all select n+1 from cte1 where n<12), cte as (select month(requested_at) month, sum(ride_distance) ride_distance, sum(ride_duration) ride_duration from rides join AcceptedRides using(ride_id) where year(requested_at)=2020 group by 1), cte2 as (select n month, ifnull(ride_distance,0) ride_distance, ifnull(ride_duration,0) ride_duration from cte1 left join cte on cte1.n=cte.month) select month, round(avg(ride_distance) over(rows between current row and 2 following),2) average_ride_distance, round(avg(ride_duration) over(rows between current row and 2 following),2) average_ride_duration from cte2 order by 1 limit 10
with recursive cte2 as ( select 1 month union all select month + 1 from cte2 where month <= 9 ) , cte as ( select MONTH(requested_at) month ,SUM(coalesce(ride_distance,0)) ride_distance ,SUM(coalesce(ride_duration,0)) ride_duration from Rides a left join AcceptedRides b on a.ride_id = b.ride_id where requested_at >= '2020-01-01' and requested_at < '2021-01-01' group by 1 ) select a.month ,round(sum(coalesce(b.ride_distance,0))/3,2) average_ride_distance ,round(sum(coalesce(b.ride_duration,0))/3,2) average_ride_duration from cte2 a left join cte b on (b.month between a.month and a.month + 2) group by 1 order by 1
with recursive cte2 as ( select 1 month union all select month + 1 from cte2 where month <= 9 ) , cte as ( select MONTH(requested_at) month ,SUM(coalesce(ride_distance,0)) ride_distance ,SUM(coalesce(ride_duration,0)) ride_duration from Rides a left join AcceptedRides b on a.ride_id = b.ride_id where year(requested_at) = 2020 group by 1 ) select a.month ,round(sum(coalesce(b.ride_distance,0))/3,2) average_ride_distance ,round(sum(coalesce(b.ride_duration,0))/3,2) average_ride_duration from cte2 a left join cte b on (b.month >= a.month and b.month <= a.month + 2) group by 1 order by 1
with recursive cte_mo as ( Select 1 as month union all Select month+1 as month from cte_mo where month <= 9 ), CTE AS (SELECT a.ride_distance, a.ride_duration, IF(MONTH(r.requested_at) >= 3, MONTH(r.requested_at) - 2, NULL) as bucket1, IF(MONTH(r.requested_at) >= 2, MONTH(r.requested_at) - 1, NULL) as bucket2, MONTH(r.requested_at) as bucket3 FROM ACCEPTEDRIDES a JOIN Rides r ON r.ride_id = a.ride_id WHERE r.requested_at <= '2020-12-31' and r.requested_at >= '2020-01-01') SELECT month, ROUND(COALESCE(sum(ride_distance) / 3, 0), 2) AS AVERAGE_RIDE_DISTANCE, ROUND(COALESCE(sum(ride_duration) / 3, 0), 2) AS AVERAGE_RIDE_duration FROM (select c.month, t.ride_distance, t.ride_duration from cte_mo c LEFT JOIN CTE t ON c.month = t.bucket1 OR c.month = t.bucket2 OR c.month = t.bucket3) t2 GROUP BY MONTH
with recursive cte_mo as ( Select 1 as month union all Select month+1 as month from cte_mo where month <= 9 ), CTE AS (SELECT a.ride_distance, a.ride_duration, IF(MONTH(r.requested_at) >= 3, MONTH(r.requested_at) - 2, NULL) as bucket1, IF(MONTH(r.requested_at) >= 2, MONTH(r.requested_at) - 1, NULL) as bucket2, MONTH(r.requested_at) as bucket3 FROM ACCEPTEDRIDES a JOIN Rides r ON r.ride_id = a.ride_id WHERE r.requested_at <= '2020-12-31' and r.requested_at >= '2020-01-01') select c.month, ROUND(COALESCE(sum(t.ride_distance) / 3, 0), 2) AS AVERAGE_RIDE_DISTANCE, ROUND(COALESCE(sum(t.ride_duration) / 3, 0), 2) AS AVERAGE_RIDE_duration from cte_mo c LEFT JOIN CTE t ON c.month = t.bucket1 OR c.month = t.bucket2 OR c.month = t.bucket3 GROUP BY c.MONTH
with recursive cte_mo as ( Select 1 as month union all Select month+1 as month from cte_mo where month+1<=12 ) ,cte as ( Select a.ride_id, a.driver_id, a.ride_distance as dis, a.ride_duration as dur , r.requested_at as dt From AcceptedRides a left join Rides r on a.ride_id = r.ride_id where r.requested_at between '2020-01-01' and '2020-12-31' ), month_agg as( Select m.month, SUM(case when month(c.dt)=m.month then dis else 0 end ) as total_dis, SUM(case when month(c.dt)=m.month then dur else 0 end) as total_dur From cte_mo m , cte c group by 1 ) , lead_res as ( Select month, total_dis, IFNULL(lead(total_dis,1) over(order by month), 0) as lead_1_mo_dis, IFNULL(lead(total_dis,2) over (order by month),0) as lead_2_mo_dis, total_dur, IFNULL(lead(total_dur,1) over(order by month), 0) as lead_1_mo_dur, IFNULL(lead(total_dur,2) over (order by month),0) as lead_2_mo_dur From month_agg ) Select month, ROUND((total_dis+lead_1_mo_dis+lead_2_mo_dis)*1.0/3,2) as average_ride_distance, ROUND((total_dur+lead_1_mo_dur+lead_2_mo_dur)*1.0/3,2) as average_ride_duration From lead_res where month<=10
with recursive cte_month as ( select 1 as 'month' union all select month+1 from cte_month where month < 12 ), cte_distance as ( select month(r.requested_at) as month, sum(ride_distance) ride_dist from acceptedrides ar join rides r on r.ride_id=ar.ride_id where year(r.requested_at) = 2020 group by 1 ), cte_duration as ( select month(r.requested_at) as month, sum(ride_duration) ride_dura from acceptedrides ar join rides r on r.ride_id=ar.ride_id where year(r.requested_at) = 2020 group by 1 ) select cte_month.month, round(avg(ifnull(cte_distance.ride_dist, 0)) over(order by month rows between current row and 2 following), 2) average_ride_distance, round(avg(ifnull(cte_duration.ride_dura, 0)) over(order by month rows between current row and 2 following), 2) average_ride_duration from cte_distance join cte_duration on cte_distance.month=cte_duration.month right join cte_month on cte_month.month = cte_duration.month limit 10
with recursive cte_month as ( select 1 as month union all select month + 1 from cte_month where month< 12 ) select month ,cast(ifnull(average_ride_distance, 0) as decimal(15,2)) as average_ride_distance ,cast(ifnull(average_ride_duration, 0) as decimal(15,2)) as average_ride_duration from ( select a.month as month ,sum(cast(ride_distance/3.0 as float)) over (order by a.month rows between current row and 2 following) as average_ride_distance ,sum(cast(ride_duration/3.0 as float)) over (order by a.month rows between current row and 2 following) as average_ride_duration from cte_month a left outer join ( select month(r.requested_at) as month ,sum(ride_distance) as ride_distance ,sum(ride_duration)as ride_duration from Rides r left outer join AcceptedRides a on r.ride_id = a.ride_id where year(requested_at)=2020 group by month(r.requested_at) ) p on a.month = p.month limit 10 ) q order by 1
with recursive cte_month_spine as ( select 1 as n union all select n + 1 as n from cte_month_spine where n < 12 ), cte_rides as ( select ms.n as month, coalesce(sum(ar.ride_distance), 0) as monthly_ride_distance, coalesce(sum(ar.ride_duration), 0) as monthly_ride_duration from cte_month_spine as ms left join Rides as r on r.requested_at between concat('2020-', ms.n, '-01') and last_day(concat('2020-', ms.n, '-01')) left join AcceptedRides as ar on r.ride_id = ar.ride_id group by 1 ), cte_final as ( select r.month, round( avg(monthly_ride_distance) over ( order by month range between current row and 2 following ), 2 ) as average_ride_distance, round( avg(monthly_ride_duration) over ( order by month range between current row and 2 following ), 2 ) as average_ride_duration from cte_rides as r order by 1 ) select * from cte_final where month <= 10
with recursive cte_sub as (select 1 as month union all select month + 1 as month from cte_sub where month < (select max(month(requested_at)) from Rides where year(requested_at) = '2020')), cte as (select month(r.requested_at) as month, ifnull(sum(a.ride_distance),0) as ride_distance, ifnull(sum(a.ride_duration),0) as ride_duration from Rides r join AcceptedRides a on r.ride_id = a.ride_id where year(r.requested_at ) = '2020' group by month(r.requested_at)) select * from (select b.month as month, round(avg(coalesce (a.ride_distance,0)) over (order by b.month rows between current row and 2 following),2) as average_ride_distance, round(avg(coalesce(a.ride_duration,0)) over (order by b.month rows between current row and 2 following),2) as average_ride_duration from cte_sub b left join cte a on a.month = b.month) sub where month <= 10
with recursive dummy as (select 1 as month union all select month+1 from dummy where month+1<=12 ), total as (select month(requested_at) as month, sum(ride_distance) as distT, sum(ride_duration) as durationT from AcceptedRides left join Rides on AcceptedRides.ride_id = rides.ride_id where year(requested_at) = 2020 group by month(requested_at) ), combined as (select dummy.month, ifnull(distT,0) as distT, ifnull(durationT,0) as durationT from dummy left join total on dummy.month = total.month ) select c1.month, round(sum(c2.distT)/3,2) as average_ride_distance, round(sum(c2.durationT)/3,2) as average_ride_duration from combined c1 cross join combined c2 where c2.month-c1.month >= 0 AND c2.month-c1.month <= 2 AND c1.month <= 10 group by c1.month order by 1
with recursive func as ( select 1 mon union all select mon + 1 from func where mon < 12), tbl1 as ( select month(r.requested_at) as mnth, sum(a.ride_distance) as total_dist, sum(a.ride_duration) as total_time from AcceptedRides as a join Rides as r using (ride_id) where year(r.requested_at) = '2020' group by month(r.requested_at)), tbl2 as ( select func.mon as `mnth`, ifnull(tbl1.total_dist,0) total_dist, ifnull(tbl1.total_time,0) total_time from func left join tbl1 on func.mon = tbl1.mnth) select t1.mnth `month`, round((t1.total_dist + t2.total_dist + t3.total_dist)/3,2) as average_ride_distance, round((t1.total_time + t2.total_time + t3.total_time)/3,2) as average_ride_duration from tbl2 t1 join tbl2 t2 on t1.mnth+1 = t2.mnth join tbl2 t3 on t1.mnth+2 = t3.mnth
with recursive m AS( SELECT 1 AS month UNION ALL SELECT month+1 FROM m WHERE month<12), mr AS ( SELECT extract(month from requested_at) AS month, sum(ride_distance) AS mr_distance, sum(ride_duration) AS mr_duration FROM AcceptedRides JOIN Rides USING(ride_id) WHERE extract(year from requested_at)=2020 GROUP BY 1) SELECT m.month, ifnull(round(sum(mr_distance) over(order by month rows between current row and 2 following)/3,2), 0) AS average_ride_distance, ifnull(round(sum(mr_duration) over(order by month rows between current row and 2 following)/3,2), 0) AS average_ride_duration FROM m LEFT JOIN mr USING(month) ORDER BY 1 LIMIT 10
with recursive m as ( select 1 as month union all select month +1 as month from m where month < 12 ), cte as ( select month(requested_at) as month, sum(ride_distance) as dist, sum(ride_duration) as dur from AcceptedRides a left join rides r on a.ride_id = r.ride_id where requested_at between '2020-01-01' and '2020-12-31' group by 1) select month, round(average_ride_distance,2) average_ride_distance, round(average_ride_duration,2) average_ride_duration from ( select m.month, avg(ifnull(dist,0)) over(order by m.month rows between current row and 2 FOLLOWING) as average_ride_distance, avg(ifnull(dur,0)) over(order by m.month rows between current row and 2 FOLLOWING) as average_ride_duration from m left join cte c on m.month = c.month) t where month <=10
with recursive m as ( select 1 as month union select month + 1 from m where month < 12 ), cte1 as ( select extract(month from requested_at) as month, sum(ride_distance) as dist, sum(ride_duration) as dur from acceptedrides a join rides b on a.ride_id=b.ride_id where extract(year from requested_at)=2020 group by extract(month from requested_at) ), cte2 as (select a.month,ifnull(dist,0) as dist,ifnull(dur,0) as dur from m a left join cte1 b on a.month=b.month) select a.month,round((a.dist+b.dist+c.dist)/3,2) as average_ride_distance, round((a.dur+b.dur+c.dur)/3,2) as average_ride_duration from cte2 a join cte2 b on a.month=b.month-1 join cte2 c on a.month=c.month-2 order by a.month
with recursive m as ( select 1 as month union select month +1 from m where month <12 ) select * from ( select month, round(sum(total_distance) over(order by month rows between current row and 2 following)/3,2) as average_ride_distance, round(sum(total_druation) over( order by month rows between current row and 2 following)/3,2) as average_ride_duration from ( select m.month, ifnull(total_distance,0) as total_distance, ifnull(total_druation,0) as total_druation from m left join ( select month(requested_at) as month, sum(ride_distance) as total_distance, sum(ride_duration) as total_druation from acceptedrides join rides on rides.ride_id = acceptedrides.ride_id where year(requested_at) = '2020' group by 1 ) as d on d.month = m.month ) as src) as final where month <11
with recursive m as ( select 1 as month union select month +1 from m where month <12 ), total as( select m.month, ifnull(total_ride_distance,0) as total_ride_distance, ifnull(total_ride_duration,0) as total_ride_duration from m left join ( select month(requested_at) as month, sum(ride_distance) as total_ride_distance, sum(ride_duration) as total_ride_duration from( select AcceptedRides.ride_id, ride_distance, ride_duration,requested_at from AcceptedRides join rides on AcceptedRides.ride_id = rides.ride_id where year(requested_at) = 2020) as src group by month(requested_at) ) as s on m.month = s.month) select month, round(avg(total_ride_distance) over(order by month rows between current row and 2 following),2) as average_ride_distance, round(avg(total_ride_duration) over(order by month rows between current row and 2 following),2) as average_ride_duration from total order by month limit 10
with recursive m as (select 1 as month union all select month + 1 as month from m where month <12) , t as (select m.month, ifnull(sum(ride_distance),0) as t_d, ifnull(sum(ride_duration),0) as dur from m left join rides as r on m.month = month(r.requested_at) and year(r.requested_at)=2020 left join acceptedrides as a on a.ride_id = r.ride_id group by m.month) select month, round(avg(t_d)over(order by month asc rows between current row and 2 following),2) as average_ride_distance,round(avg(dur)over(order by month asc rows between current row and 2 following) ,2) as average_ride_duration from t limit 10
with recursive m as (select 1 as months union all select months+1 from m where months<=11 ) ,distance as (select month(r.requested_at) as mo , sum(ar.ride_distance) as sum_distance , sum(ar.ride_duration) as sum_duration from rides r join acceptedrides ar on r.ride_id = ar.ride_id where year(r.requested_at) = 2020 group by 1 ) , mo_distance as (select months , ifnull(sum_distance, 0) as sum_distance , ifnull(sum_duration, 0) as sum_duration from m left join distance on m.months = distance.mo ) select * from (select months as month , round(avg(sum_distance) over(order by months rows BETWEEN 0 PRECEDING AND 2 FOLLOWING),2) as average_ride_distance , round(avg(sum_duration) over(order by months rows between 0 preceding and 2 following),2) as average_ride_duration from mo_distance order by 1) t where month<=10 order by 1
with recursive mon (month_num,month_st,month_end) as ( select 1 as month_num , date_add('2020-01-01',interval 0 month) as month_st , date_add('2020-01-01',interval 3 month) as month_end union all select month_num + 1 as month_num , date_add('2020-01-01',interval month_num month) as month_st , date_add('2020-01-01',interval month_num + 3 month) as month_end from mon where month_num + 1 <= 10 ) , denorm as ( select requested_at , ride_duration , ride_distance from Rides r inner join AcceptedRides ar on r.ride_id = ar.ride_id ) select m.month_num as month, round(coalesce(sum(ride_distance),0)/3,2) as average_ride_distance , round(coalesce(sum(ride_duration),0)/3,2) as average_ride_duration from mon m left join denorm d on requested_at >= month_st and requested_at < month_end group by m.month_num
with recursive mon (month_num,month_st,month_end) as ( select 1 as month_num , date_add('2020-01-01',interval 0 month) as month_st , date_add('2020-01-01',interval 3 month) as month_end union all select month_num + 1 as month_num , date_add('2020-01-01',interval month_num month) as month_st , date_add('2020-01-01',interval month_num + 3 month) as month_end from mon where month_num + 1 <= 10 ) , denorm as ( select requested_at , ride_duration , ride_distance from Rides r inner join AcceptedRides ar on r.ride_id = ar.ride_id where requested_at between '2020-01-01' and '2021-01-01' ) select m.month_num as month, round(coalesce(sum(ride_distance),0)/3,2) as average_ride_distance , round(coalesce(sum(ride_duration),0)/3,2) as average_ride_duration from mon m left join denorm d on requested_at >= month_st and requested_at < month_end group by m.month_num
with recursive mon (month_num,month_st,month_end) as ( select 1 as month_num , date_add('2020-01-01',interval 0 month) as month_st , date_add('2020-01-01',interval 3 month) as month_end union all select month_num + 1 as month_num , date_add('2020-01-01',interval month_num month) as month_st , date_add('2020-01-01',interval month_num + 3 month) as month_end from mon where month_num + 1 <= 10 ) , denorm as ( select requested_at , ride_duration , ride_distance from Rides r left join AcceptedRides ar on r.ride_id = ar.ride_id ) select m.month_num as month, round(coalesce(sum(ride_distance),0)/3,2) as average_ride_distance , round(coalesce(sum(ride_duration),0)/3,2) as average_ride_duration from mon m left join denorm d on requested_at >= month_st and requested_at < month_end group by m.month_num
with recursive mon (month_num,month_st,month_end) as ( select 1 as month_num , date_add('2020-01-01',interval 0 month) as month_st , date_add('2020-01-01',interval 3 month) as month_end union all select month_num + 1 as month_num , date_add('2020-01-01',interval month_num month) as month_st , date_add('2020-01-01',interval month_num + 3 month) as month_end from mon where month_num + 1 <= 10 ) , denorm as ( select requested_at , ride_duration , ride_distance from Rides r left join AcceptedRides ar on r.ride_id = ar.ride_id left join Drivers d on d.driver_id = ar.driver_id ) select m.month_num as month, round(coalesce(sum(ride_distance),0)/3,2) as average_ride_distance , round(coalesce(sum(ride_duration),0)/3,2) as average_ride_duration from mon m left join denorm d on requested_at >= month_st and requested_at < month_end group by m.month_num
with recursive mon as ( select 1 as month_num union all select month_num + 1 as month_num from mon where month_num + 1 <= 10 ) , denorm as ( select requested_at , ride_duration , ride_distance from Rides r left join AcceptedRides ar on r.ride_id = ar.ride_id left join Drivers d on d.driver_id = ar.driver_id ) select m.month_num as month, round(coalesce(sum(ride_distance),0)/3,2) as average_ride_distance , round(coalesce(sum(ride_duration),0)/3,2) as average_ride_duration from mon m left join denorm d on requested_at >= date_add('2020-01-01', interval month_num - 1 month) and requested_at < date_add('2020-01-01', interval month_num + 2 month) group by m.month_num
with recursive mont_cte as ( select 1 as start_mon union all select start_mon+1 as start_mon from mont_cte where start_mon < 12 ) ,ride as ( select month(requested_at) as month, coalesce(sum(ride_distance),0) ride_distance, coalesce(sum(ride_duration),0) ride_duration from AcceptedRides a join Rides r on r.ride_id = a.ride_id where year(requested_at)=2020 group by 1 ) , final as (select mc.start_mon month, round(sum(coalesce(ride_distance,0)) over(order by mc.start_mon rows between current row and 2 following) / 3, 2) average_ride_distance, round(sum(coalesce(ride_duration,0)) over(order by mc.start_mon rows between current row and 2 following) / 3, 2) average_ride_duration from mont_cte mc left join ride r on mc.start_mon = r.month ) select * from final where month <= 10
with recursive month as ( select 1 as month union select month + 1 as month from month where month < 10 ) , month_rides as( select MONTH(r.requested_at) as month, sum(a.ride_distance) as ride_distance, sum(a.ride_duration) as ride_duration from Rides r join AcceptedRides a on a.ride_id = r.ride_id where YEAR(r.requested_at) = '2020' group by month ) select m.month, ifnull(round(sum(mr.ride_distance)/3,2),0) as average_ride_distance, ifnull(round(sum(mr.ride_duration)/3,2),0) as average_ride_duration from month m left join month_rides mr on ((mr.month - m.month = 0) or (mr.month - m.month = 1) or (mr.month - m.month = 2)) group by 1 order by 1
with recursive month as ( select 1 as month union select month + 1 as month from month where month < 10 ), monthly_rides AS(SELECT MONTH(r.requested_at) AS month, SUM(ar.ride_distance) AS ride_distance, SUM(ar.ride_duration) AS ride_duration FROM rides r JOIN AcceptedRides ar ON r.ride_id = ar.ride_id AND YEAR(r.requested_at) = 2020 GROUP BY MONTH(r.requested_at)) SELECT m.month, IFNULL(ROUND(SUM(mr.ride_distance)/3, 2), 0) AS average_ride_distance, IFNULL(ROUND(SUM(mr.ride_duration)/3, 2), 0) AS average_ride_duration FROM month m LEFT JOIN monthly_rides mr ON mr.month-m.month BETWEEN 0 AND 2 GROUP BY m.month ORDER BY m.month
with recursive month as ( select 1 as month union select month + 1 as month from month where month < 12 ) , month_rides as( select MONTH(r.requested_at) as month, sum(a.ride_distance) as ride_distance, sum(a.ride_duration) as ride_duration from Rides r join AcceptedRides a on a.ride_id = r.ride_id where YEAR(r.requested_at) = '2020' group by month ) , every_month_rides as( select m.month, ifnull(mr.ride_distance,0) as ride_distance, ifnull(mr.ride_duration,0) as ride_duration from month m left join month_rides mr on mr.month = m.month ) select a.month, round((a.ride_distance + b.ride_distance + c.ride_distance) / 3, 2) as average_ride_distance, round((a.ride_duration + b.ride_duration + c.ride_duration) / 3, 2) as average_ride_duration from every_month_rides a, every_month_rides b, every_month_rides c where a.month = b.month - 1 and b.month = c.month - 1
with recursive month as ( select 1 as month union select month + 1 as month from month where month < 12 ) , month_rides as( select MONTH(r.requested_at) as month, sum(a.ride_distance) as ride_distance, sum(a.ride_duration) as ride_duration from Rides r join AcceptedRides a on a.ride_id = r.ride_id where YEAR(r.requested_at) = '2020' group by month ) , every_month_rides as( select m.month, ifnull(mr.ride_distance,0) as ride_distance, ifnull(mr.ride_duration,0) as ride_duration from month m left join month_rides mr on mr.month = m.month ) select t1.month as month, round((t1.ride_distance + t2.ride_distance + t3.ride_distance)/3,2) as average_ride_distance, round((t1.ride_duration + t2.ride_duration + t3.ride_duration)/3,2) as average_ride_duration from every_month_rides t1 join every_month_rides t2 join every_month_rides t3 on t1.month = t2.month -1 and t2.month = t3.month -1
with recursive month as ( select 1 as month union select month + 1 as month from month where month < 12 ) select month, round(avg(ride_distance) over(order by month rows between current row and 2 following),2) as average_ride_distance, round(avg(ride_duration) over(order by month rows between current row and 2 following),2) as average_ride_duration from ( select m.month, case when b.month is null then 0 else sum(b.ride_distance) end as ride_distance, case when b.month is null then 0 else sum(b.ride_duration) end as ride_duration from month m left join ( select month(b.requested_at) as month, a.ride_distance, a.ride_duration from AcceptedRides a join Rides b on a.ride_id = b.ride_id where year(b.requested_at) = '2020') b on m.month = b.month group by m.month) final_list order by month limit 10
with recursive month as ( select 1 as month union select month + 1 as month from month where month < 12 ) select month, round(avg(ride_distance) over(order by month rows between current row and 2 following),2) as average_ride_distance, round(avg(ride_duration) over(order by month rows between current row and 2 following),2) as average_ride_duration from ( select m.month, case when b.month is null then 0 else sum(b.ride_distance) end as ride_distance, case when b.month is null then 0 else sum(b.ride_duration) end as ride_duration from month m left join ( select month(r.requested_at) as month, a.ride_distance, a.ride_duration from AcceptedRides a join Rides r on a.ride_id = r.ride_id where year(r.requested_at) = '2020') b on m.month = b.month group by m.month) final order by month limit 10
with recursive month as ( select 1 as month union select month + 1 as month from month where month < 12 ), b AS ( SELECT month.month as month, IFNULL(sum_ride_distance, 0) AS sum_ride_distance, IFNULL(sum_ride_duration, 0) as sum_ride_duration FROM ( SELECT MONTH(Rides.requested_at) AS month, SUM(AcceptedRides.ride_distance) AS sum_ride_distance, SUM(AcceptedRides.ride_duration) AS sum_ride_duration FROM Rides JOIN AcceptedRides ON Rides.ride_id = AcceptedRides.ride_id WHERE YEAR(Rides.requested_at) = '2020' GROUP BY MONTH(Rides.requested_at) ) as t1 RIGHT JOIN month ON month.month = t1.month ) SELECT b1.month, ROUND((b1.sum_ride_distance + b2.sum_ride_distance + b3.sum_ride_distance)/3,2) AS average_ride_distance, ROUND((b1.sum_ride_duration + b2.sum_ride_duration + b3.sum_ride_duration)/3,2) AS average_ride_duration FROM b AS b1 JOIN b AS b2 JOIN b AS b3 ON b1.month = b2.month - 1 AND b2.month = b3.month - 1
with recursive month as ( select 1 as month union select month + 1 as month from month where month < 12 ), cte as ( select month(r.requested_at) as month, sum(a.ride_distance) as ride_distance, sum(a.ride_duration) as ride_duration from AcceptedRides a join Rides r on a.ride_id = r.ride_id where year(r.requested_at) = '2020' group by month ), month_ride as ( select m.month, ifnull(c.ride_duration, 0) as ride_duration, ifnull(c.ride_distance, 0) as ride_distance from cte c right join month m on m.month = c.month ) select m.month, round(avg(m.ride_distance) over(order by m.month rows between current row and 2 following),2) as average_ride_distance, round(avg(m.ride_duration) over(order by m.month rows between current row and 2 following), 2) as average_ride_duration from month_ride m limit 10
with recursive month as ( select 1 as month union select month + 1 as month from month where month < 12 ), months as ( select m.month, ifnull(k.ride_distance, 0) as ride_distance, ifnull(k.ride_duration, 0) as ride_duration from month m left join (select month(requested_at) month, r.ride_id, a.ride_distance, a.ride_duration from Rides r join AcceptedRides a on r.ride_id = a.ride_id where year(r.requested_at) = 2020) k on (k.month - m.month <= 2 and k.month - m.month >= 0) ) select month, round(sum(ride_distance) / 3, 2) as average_ride_distance, round(sum(ride_duration) / 3, 2) as average_ride_duration from months where month <= 10 group by month order by month
with recursive month as ( select 1 as month union select month + 1 as month from month where month < 12), temp1 as ( select acceptedrides.ride_id, ride_distance, ride_duration, requested_at, month(requested_at) as "month" from acceptedrides left join rides on acceptedrides.ride_id=rides.ride_id where requested_at >= "2020-01-01" and requested_at <"2021-01-01"), temp2 as ( select month, sum(ride_distance) as sum_ride_distance, sum(ride_duration) as sum_ride_duration ,count(ride_id) as num_rides from temp1 group by month order by month), temp3 as ( select month.month,sum_ride_distance, sum_ride_duration from month left join temp2 on month.month=temp2.month), temp4 as ( select month, case when sum_ride_distance is not null then sum_ride_distance else 0 end as sum_ride_distance, case when sum_ride_duration is not null then sum_ride_duration else 0 end as sum_ride_duration from temp3) select x.month, round((x.sum_ride_distance+y.sum_ride_distance+z.sum_ride_distance)/3,2) as average_ride_distance, round((x.sum_ride_duration+y.sum_ride_duration+z.sum_ride_duration)/3,2) as average_ride_duration from temp4 x , temp4 y , temp4 z where x.month+1=y.month and z.month=y.month+1 and x.month<=10 and y.month<=11 and z.month<=12
with recursive month as ( select 1 as month union select month +1 as month from month where month <12) , month_rides as (Select date_format(requested_at,'%m') as month, sum(ride_distance) as sum_ride_distance, sum(ride_duration) as sum_ride_duration from AcceptedRides join Rides using (ride_id) where left(requested_at,4) = '2020' group by 1 order by 1) ,table_m as (select month, ifnull(sum_ride_distance,0) as sum_ride_distance, ifnull(sum_ride_duration,0) as sum_ride_duration from month left join month_rides using (month)) select t1.month, round((t1.sum_ride_distance+t2.sum_ride_distance+t3.sum_ride_distance)/3,2) as average_ride_distance, round((t1.sum_ride_duration+t2.sum_ride_duration+t3.sum_ride_duration)/3,2) as average_ride_duration from table_m t1, table_m t2, table_m t3 where t1.month = t2.month -1 and t2.month = t3.month -1
with recursive month as ( select 1 as month union select month+1 as month from month where month < 12 ), month_rides as ( select month(r.requested_at) as month, ifnull(sum(a.ride_distance),0) as monthly_distance, ifnull(sum(a.ride_duration),0) as monthly_duration from rides as r left join acceptedrides as a on r.ride_id = a.ride_id where year(r.requested_at) = '2020' group by month ), every_month_rides as ( select m.month as month, ifnull(mr.monthly_distance,0) as monthly_distance, ifnull(mr.monthly_duration,0) as monthly_duration from month as m left join month_rides as mr on m.month = mr.month) select t1.month as month, round((t1.monthly_distance + t2.monthly_distance + t3.monthly_distance)/3,2) as average_ride_distance, round((t1.monthly_duration + t2.monthly_duration + t3.monthly_duration)/3,2) as average_ride_duration from every_month_rides as t1 join every_month_rides as t2 join every_month_rides as t3 on t1.month = t2.month -1 and t1.month = t3.month -2
with recursive month as ( select 1 as month union select month+1 as month from month where month < 12 ), month_rides as ( select month(requested_at) as month, sum(ride_distance) as total_distance, sum(ride_duration) as total_duration from acceptedrides as a join rides as r on a.ride_id = r.ride_id where year(requested_at) = "2020" group by month), monthly_rides as ( select m.month, ifnull(total_distance,0) as monthly_distance, ifnull(total_duration,0) as monthly_duration from month as m left join month_rides as mr on m.month = mr.month) select m1.month, round((m1.monthly_distance + m2.monthly_distance + m3.monthly_distance)/3,2) as average_ride_distance, round((m1.monthly_duration + m2.monthly_duration + m3.monthly_duration)/3,2) as average_ride_duration from monthly_rides as m1 join monthly_rides as m2 join monthly_rides as m3 on m1.month = m2.month-1 and m1.month = m3.month-2 order by m1.month
with recursive month as ( select 1 as month union select month+1 as month from month where month <12 ), monthly_data as ( select month(r.requested_at) as month, sum(a.ride_distance) as ride_distance, sum(a.ride_duration) as ride_duration FROM rides r JOIN acceptedrides a ON r.ride_id = a.ride_id WHERE year(r.requested_at) = '2020' group by month ) select * from ( select m.month, round(avg(coalesce(md.ride_distance,0)) over (ORDER BY m.month ROWS BETWEEN CURRENT ROW AND 2 FOLLOWING),2) as average_ride_distance, round(avg(coalesce(md.ride_duration,0)) over (ORDER BY m.month ROWS BETWEEN CURRENT ROW AND 2 FOLLOWING),2) as average_ride_duration FROM month m left outer join monthly_data md on m.month = md.month) asd where month <=10
with recursive month as ( select 1 as month union select month+1 as month from month where month<12 ), ride_tb as ( select a.ride_id, a.driver_id, sum(a.ride_distance) as sum_distance, sum(a.ride_duration) as sum_duration, month(r.requested_at) as month from AcceptedRides a join Rides r on a.ride_id=r.ride_id where year(r.requested_at)='2020' group by month ) ,all_month as ( select m.month, coalesce(sum_distance,0) as sum_distance, coalesce(sum_duration,0) as sum_duration from month m left join ride_tb rt on m.month=rt.month ) select t1.month, round((t1.sum_distance+t2.sum_distance+t3.sum_distance)/3,2) as average_ride_distance, round((t1.sum_duration+t2.sum_duration+t3.sum_duration)/3,2) as average_ride_duration from all_month t1 join all_month t2 join all_month t3 on t1.month=(t2.month-1) and t2.month=(t3.month-1) and t1.month=(t3.month-2) order by t1.month
with recursive month as ( select 1 as n union all select n+1 as n from month where n<12 ), sumride as ( select month.n as month, ifnull(m.ride_distance,0) ride_distance, ifnull(m.ride_duration,0) ride_duration from month month left join ( select month(b.requested_at) as month, sum(ride_distance) as ride_distance, sum(ride_duration) as ride_duration from AcceptedRides a inner join Rides b on a.ride_id=b.ride_id where b.requested_at between '2020-01-01' and '2020-12-31' group by month(b.requested_at) order by 1 ) as m on month.n=m.month) select t1.month, round(sum(t1.ride_distance+t2.ride_distance+t3.ride_distance)/3,2) as average_ride_distance, round(sum(t1.ride_duration+t2.ride_duration+t3.ride_duration)/3,2) as average_ride_duration from sumride t1 join sumride t2 join sumride t3 on t1.month = t2.month -1 and t2.month = t3.month -1 group by t1.month
with recursive month as ( select 1 month union all select month+1 from month where month < 12 ) ,month_rides as( select MONTH(r.requested_at) as month, sum(a.ride_distance) as ride_distance, sum(a.ride_duration) as ride_duration from Rides r join AcceptedRides a on a.ride_id = r.ride_id where YEAR(r.requested_at) = '2020' group by month ) , every_month_rides as( select m.month, ifnull(mr.ride_distance,0) as ride_distance, ifnull(mr.ride_duration,0) as ride_duration from month m left join month_rides mr on mr.month = m.month ) select t1.month as month, round((t1.ride_distance + t2.ride_distance + t3.ride_distance)/3,2) as average_ride_distance, round((t1.ride_duration + t2.ride_duration + t3.ride_duration)/3,2) as average_ride_duration from every_month_rides as t1,every_month_rides as t2,every_month_rides as t3 where t1.month = t2.month-1 and t1.month = t3.month-2
with recursive month as (select 1 as month union select month + 1 from month where month <12) select distinct month, round(avg(ride_distance) over (order by month rows between current row and 2 following),2) average_ride_distance, round(avg(ride_duration) over (order by month rows between current row and 2 following),2) average_ride_duration from( select distinct month.month, ifnull(sum(ride_distance),0) ride_distance, ifnull(sum(ride_duration),0) ride_duration from month left join rides r on month.month = month(requested_at) left join acceptedrides a on r.ride_id =a.ride_id and year(requested_at) ='2020' group by 1) t limit 10
with recursive month as (select 1 as month union select month+1 as month from month where month<12) select * from (select month, round(avg(tot_distance) OVER(ORDER BY month ROWS BETWEEN current row and 2 following),2) as average_ride_distance, round(avg(tot_duration) OVER(ORDER BY month rows between current row and 2 following),2) as average_ride_duration from (select M.month, ifnull(tot_distance,0) as tot_distance,ifnull(tot_duration,0) as tot_duration from month M left join (select A.ride_id, driver_id, sum(ride_distance) as tot_distance, sum(ride_duration) as tot_duration, month(requested_at) as month from (AcceptedRides A left join Rides R on A.ride_id = R.ride_id) where year(requested_at) =2020 group by month(requested_at)) temp on M.month = temp.month) temp1) temp2 where month<=10
with recursive month as( select 1 as month union select month+1 as month from month where month < 12 ) select month, round(avg(ride_distance) over(order by month rows between current row and 2 following),2) as average_ride_distance, round(avg(ride_duration) over(order by month rows between current row and 2 following),2) as average_ride_duration from( select m.month, coalesce(sum(b.ride_distance),0) as ride_distance, coalesce(sum(b.ride_duration),0) as ride_duration from month m left join ( select month(b.requested_at) as month, a.ride_distance, a.ride_duration from acceptedrides a join rides b on a.ride_id = b.ride_id where year(b.requested_at) ='2020') b on m.month = b.month group by m.month) final_list order by month limit 10
with recursive month_2020 as ( select 1 as month union all select month + 1 from month_2020 where month < 10 ), sum_by_month as ( select month(requested_at) as month, sum(ride_distance) as distance, sum(ride_duration) as duration from rides r join acceptedrides a on r.ride_id = a.ride_id where year(requested_at) = 2020 group by month(requested_at) ) select m.month, round(sum(ifnull(distance, 0))/3,2) as average_ride_distance, round(sum(ifnull(duration, 0))/3,2) as average_ride_duration from month_2020 m left join sum_by_month s on s.month >= m.month and s.month < (m.month + 3) group by m.month order by m.month
with recursive month_structure as ( select 1 as month union all select month + 1 from month_structure where month < 12 ) select * from (select month, round(sum(distance) over(order by month asc rows between current row and 2 following)/3, 2) as average_ride_distance, round(sum(duration) over(order by month asc rows between current row and 2 following)/3, 2) as average_ride_duration from (select t1.month, ifnull(t2.distance, 0) as distance, ifnull(t2.duration, 0) as duration from month_structure t1 left join ( select month(r.requested_at) as month, sum(ride_distance) as distance, sum(ride_duration) as duration from AcceptedRides ar left join Rides r on ar.ride_id = r.ride_id where r.requested_at >= '2020-01-01' and r.requested_at <= '2020-12-31' group by 1) t2 on t1.month = t2.month ) t ) t where month <11
with recursive month_table as ( Select 1 as fy_month union select fy_month+1 as fy_month from month_table where fy_month < 10 ) , cummulative_data as ( Select month(r.requested_at) as fy_month , sum(ride_distance) as ride_distance , sum(ride_duration) as ride_duration from AcceptedRides AR INNER JOIN Rides R on ar.ride_id = r.ride_id and year(r.requested_at) = 2020 group by 1 ) SELECT SUB_AGG.fy_month as "month" , ROUND(SUB_AGG.ride_distance/3, 2) as average_ride_distance , ROUND(SUB_AGG.ride_duration/3, 2) as average_ride_duration FROM ( Select mt.fy_month , ifnull(SUM(cd.ride_distance),0) as ride_distance , ifnull(SUM(cd.ride_duration),0) as ride_duration from month_table MT LEFT JOIN cummulative_data CD ON MT.fy_month BETWEEN CD.fy_month -2 and CD.fy_month group by 1 ) SUB_AGG
with recursive month_tbl as (select 1 as month union select month+1 as month from month_tbl where month<12 ), temp1 as ( select month(r.requested_at) as month, sum(ifnull(ride_distance,0)) as ride_distance_total, sum(ifnull(ride_duration,0)) as ride_duration_total from rides r left join acceptedrides a on r.ride_id = a.ride_id where year(r.requested_at) = "2020" group by 1 ), temp2 as ( select m.month, ifnull(ride_distance_total,0) as ride_distance_total, ifnull(ride_duration_total,0) as ride_duration_total from month_tbl m left join temp1 on m.month = temp1.month ) select month, round(avg(ride_distance_total) over (order by month rows between current row and 2 following),2) as average_ride_distance, round(avg(ride_duration_total) over (order by month rows between current row and 2 following),2) as average_ride_duration from temp2 order by 1 limit 10
with recursive months (month) as ( select 1 month union all select month + 1 as month from months where month < 12 ) ,rides_calc as ( select extract(year from r.requested_at) as year, extract(month from r.requested_at) as month, sum(ar.ride_distance) as ride_distance, sum(ar.ride_duration) as ride_duration from rides r inner join acceptedrides ar using(ride_id) where extract(year from r.requested_at) = 2020 group by 1,2 ) select * from ( select m.month, round(SUM(coalesce(rc.ride_distance,0)) over(order by month rows between CURRENT ROW and 2 following)/3,2) average_ride_distance, round(SUM(coalesce(rc.ride_duration,0)) over(order by month rows between CURRENT ROW and 2 following)/3,2) average_ride_duration from months m left join rides_calc rc on(m.month = rc.month) ) a where month <= 10 order by month
with recursive months (month) as ( select 1 union all select month+1 from months where month < 12 ), valid_rides as ( select month(R.requested_at) as month, AR.ride_distance, AR.ride_duration from Rides as R left join AcceptedRides as AR on R.ride_id=AR.ride_id where year(R.requested_at) = 2020 ) ,month_rides as ( select M.month, IFNULL(sum(R.ride_distance) ,0) as month_ride_distance, IFNULL(sum(R.ride_duration) ,0) as month_ride_duration from months as M left join valid_rides as R on R.month = M.month group by M.month ) select M1.month, round((M1.month_ride_distance + M2.month_ride_distance + M3.month_ride_distance)/3.0,2) as average_ride_distance, round((M1.month_ride_duration + M2.month_ride_duration + M3.month_ride_duration)/3.0,2) as average_ride_duration from month_rides as M1 inner join month_rides as M2 on M1.month = M2.month - 1 inner join month_rides as M3 on M1.month = M3.month - 2 order by month
with recursive months (month) as ( select 1 union all select month+1 from months where month < 12 ), valid_rides as ( select month(R.requested_at) as month, AR.ride_distance, AR.ride_duration from Rides as R left join AcceptedRides as AR on R.ride_id=AR.ride_id where year(R.requested_at) = 2020 ) ,month_rides as ( select M.month, IFNULL(sum(R.ride_distance) ,0) as month_ride_distance, IFNULL(sum(R.ride_duration) ,0) as month_ride_duration from months as M left join valid_rides as R on R.month = M.month group by M.month ) select M1.month, round((ifNULL(M1.month_ride_distance,0) + ifNULL(M2.month_ride_distance,0) +ifNULL(M3.month_ride_distance,0))/3.0,2) as average_ride_distance, round((ifNULL(M1.month_ride_duration,0) + ifNULL(M2.month_ride_duration,0) +ifNULL(M3.month_ride_duration,0))/3.0,2) as average_ride_duration from month_rides as M1 join month_rides as M2 on M1.month = M2.month - 1 join month_rides as M3 on M1.month = M3.month - 2 order by month
with recursive months (month) as (select 1 as month union select month + 1 from months where month < 12), cte1 as (select a.requested_at, b.ride_distance, b.ride_duration from rides as a join acceptedrides as b on a.ride_id = b.ride_id where a.requested_at between '2020-01-01' and '2020-12-31' order by a.requested_at asc), cte2 as (select month(requested_at) as month, ride_distance, ride_duration from cte1), cte3 as (select a.month, sum(ifnull(b.ride_distance, 0)) as ride_distance, sum(ifnull(b.ride_duration, 0)) as ride_duration from months as a left join cte2 as b on a.month = b.month group by a.month), cte4 as (select month, sum(ride_distance) over (rows between current row and 2 following) as total_distance, sum(ride_duration) over (rows between current row and 2 following) as total_duration from cte3) select month, round(total_distance / 3, 2) as average_ride_distance, round(total_duration / 3, 2) as average_ride_duration from cte4 where month <= 10
with recursive months as ( select 1 as month union all select month + 1 as month from months where month < 12 ), monthly_list as ( select m.month, ifnull(sum(b.ride_distance), 0) as ride_distance, ifnull(sum(b.ride_duration), 0) as ride_duration from months m left join ( select month(b.requested_at) as month, a.ride_distance, a.ride_duration from AcceptedRides a join Rides b on a.ride_id = b.ride_id where year(b.requested_at) = '2020') b on m.month = b.month group by m.month ) select month, round(avg(ride_distance) over(order by month rows between current row and 2 following), 2) as average_ride_distance, round(avg(ride_duration) over(order by month rows between current row and 2 following),2) as average_ride_duration from monthly_list order by month limit 10
with recursive months as ( select 1 as month union all select month + 1 from months where month <= 12 ), monthly_stats as ( SELECT m.month, coalesce(t.monthly_distance, 0) as monthly_distance, coalesce(t.monthly_duration, 0) as monthly_duration from months m left join ( select extract(month from r.requested_at) as month, sum(ride_distance) as monthly_distance, sum(ride_duration) as monthly_duration from AcceptedRides a join Rides r on a.ride_id = r.ride_id where r.requested_at between cast('2020-01-01' as date) and cast('2020-12-31' as date) group by 1 ) t on m.month = t.month ) , results as ( select month, round(avg(monthly_distance) over (order by month rows between current row and 2 following),2) as average_ride_distance, round(avg(monthly_duration) over (order by month rows between current row and 2 following),2) as average_ride_duration from monthly_stats group by 1 order by 1 ) select * from results where month <= 10
with recursive months as ( select 1 as month union all select month+1 from months where month < 10) select months.month ,round(coalesce(sum(ride_distance)/3,0.00),2) as average_ride_distance ,round(coalesce(sum(ride_duration)/3,0.00),2) as average_ride_duration from months left join ( select month(requested_at) as month , sum(ride_distance) as ride_distance , sum(ride_duration) as ride_duration from AcceptedRides left join Rides on AcceptedRides.ride_id = Rides.ride_id where year(requested_at) = 2020 group by 1 ) avg_data on months.month = avg_data.month or months.month = avg_data.month - 1 or months.month = avg_data.month - 2 group by months.month
with recursive months as ( select 1 as month union all select month+1 from months where month < 12 ), combined as ( select date_format(r.requested_at, '%m') as month, sum(ar.ride_distance) as ride_distance, sum(ar.ride_duration) as ride_duration from acceptedrides ar inner join rides r using (ride_id) where r.requested_at between '2020-01-01' and '2020-12-31' group by 1 ) select * from ( select m.month, round(avg(IFNULL(c.ride_distance, 0)) over (order by m.month rows between current row and 2 following), 2) as average_ride_distance, round(avg(IFNULL(c.ride_duration, 0)) over (order by m.month rows between current row and 2 following), 2) as average_ride_duration from combined c right join months m using (month)) a where month <=10
with recursive months as ( select 1 as month union all select month+1 from months where month < 12 ), summary_cte as ( select t1.month, ifnull(sum(t3.ride_distance),0) as ride_distance, ifnull(sum(t3.ride_duration ),0) as ride_duration from months t1 left join Rides t2 on year(t2.requested_at)=2020 and month(t2.requested_at)=t1.month left join AcceptedRides t3 on t2.ride_id=t3.ride_id group by t1.month ) select month, round(avg(ride_distance) over (order by month rows between current row and 2 following),2) as average_ride_distance , round(avg(ride_duration) over (order by month rows between current row and 2 following),2) as average_ride_duration from summary_cte limit 10
with recursive months as ( select 1 as month union all select month+1 from months where month<12 ) ,rides_by_month as ( select month(r.requested_at) as month,sum(ride_distance) as ride_distance,sum(ride_duration) as ride_duration from rides as r join acceptedrides as a on r.ride_id=a.ride_id where year(requested_at)=2020 group by month(r.requested_at) ) ,rides_every_month as ( select m.month,ifnull(sum(ride_distance),0) as ride_distance,ifnull(sum(ride_duration),0) as ride_duration from months as m left join rides_by_month as r on m.month=r.month group by m.month ) select r1.month,round((r1.ride_distance+r2.ride_distance+r3.ride_distance)/3,2) as average_ride_distance, round((r1.ride_duration+r2.ride_duration+r3.ride_duration)/3,2) as average_ride_duration from rides_every_month as r1 join rides_every_month as r2 join rides_every_month as r3 on r1.month=r2.month-1 and r2.month=r3.month-1
with recursive months as ( select 1 as month union all select month+1 from months where month<12 ), base as ( select a.month, coalesce(ride_distance,0) as ride_distance, coalesce(ride_duration, 0) as ride_duration from months a left join (select month(requested_at) as 'month', sum(ride_distance) as ride_distance, sum(ride_duration) as ride_duration from Rides a join AcceptedRides b on a.ride_id = b.ride_id where requested_at between '2020-01-01' and '2020-12-31' group by 1 order by 1) b on a.month = b.month ) select month, round((ride_distance + ride_distance_1 + ride_distance_2)/3,2) as average_ride_distance, round((ride_duration + ride_duration_1 + ride_duration_2)/3,2) as average_ride_duration from ( select month, ride_distance, lead(ride_distance,1) over(order by month) as ride_distance_1, lead(ride_distance,2) over(order by month) as ride_distance_2, ride_duration, lead(ride_duration,1) over(order by month) as ride_duration_1, lead(ride_duration,2) over(order by month) as ride_duration_2 from base ) a where ride_distance_2 is not null order by 1
with recursive months as ( select 1 as month union all select month+1 from months where month<12 ), rides_2020 as ( select EXTRACT(MONTH from r.requested_at) as month, sum(ar.ride_distance) as ride_distance, sum(ar.ride_duration) as ride_duration from AcceptedRides ar join Rides r on ar.ride_id=r.ride_id and r.requested_at between '2020-01-01' and '2020-12-31' group by 1 ) select * from ( select m.month, round(avg(coalesce(r.ride_distance,0)) over (order by month rows between current row and 2 following),2) as average_ride_distance, round(avg(coalesce(r.ride_duration,0)) over (order by month rows between current row and 2 following),2) as average_ride_duration from months m left join rides_2020 r on m.month=r.month order by month ) x where month<=10
with recursive months as ( select 1 as month union select month + 1 as month from months where month < 10 ), rides2020 as ( select t1.ride_id, month(t2.requested_at) as month, t1.ride_distance, t1.ride_duration from acceptedrides t1 join rides t2 on t2.ride_id = t1.ride_id where year(t2.requested_at) = 2020 ) select t1.month, round(sum(if(t2.ride_distance is null, 0, t2.ride_distance)) / 3, 2) as average_ride_distance, round(sum(if(t2.ride_duration is null, 0, t2.ride_duration)) / 3, 2) as average_ride_duration from months t1 left join rides2020 t2 on (t2.month = t1.month or t2.month = t1.month + 1 or t2.month = t1.month + 2) group by t1.month order by t1.month asc
with recursive months as ( select 1 as month union select month + 1 as month from months where month < 10 ), rides2020 as ( select t1.ride_id, month(t2.requested_at) as month, t1.ride_distance, t1.ride_duration from acceptedrides t1 join rides t2 on t2.ride_id = t1.ride_id where year(t2.requested_at) = 2020 ) select t1.month, round(sum(if(t2.ride_distance is null, 0, t2.ride_distance)) / 3, 2) as average_ride_distance, round(sum(if(t2.ride_duration is null, 0, t2.ride_duration)) / 3, 2) as average_ride_duration from months t1 left join rides2020 t2 on t2.month >= t1.month and t2.month <= t1.month + 2 group by t1.month order by t1.month asc
with recursive months as ( select 1 as month union select month + 1 as month from months where month < 10 ), rides_2020 as ( select month(t2.requested_at) as month, t1.ride_distance, t1.ride_duration from acceptedrides t1 join rides t2 on t2.ride_id = t1.ride_id where year(t2.requested_at) = 2020 ) select t1.month, round(sum(if(t2.ride_distance is null, 0, t2.ride_distance)) / 3, 2) as average_ride_distance, round(sum(if(t2.ride_duration is null, 0, t2.ride_duration)) / 3, 2) as average_ride_duration from months t1 left join rides_2020 t2 on t2.month - t1.month between 0 and 2 group by t1.month order by t1.month asc
with recursive months as ( select 1 as month union select month + 1 as month from months where month < 12), AcceptedRide_2020 as (select a.*, month(r.requested_at) as month from AcceptedRides a left join Rides r on a.ride_id = r.ride_id where requested_at like "2020%"), months_rides as (select m.month, sum(a.ride_distance) as ride_distance, sum(a.ride_duration) as ride_duration from months m left join AcceptedRide_2020 a on m.month = a.month group by m.month), all_months as (select month, round(avg(ifnull(ride_distance, 0)) over(order by month rows between current row and 2 following), 2) as average_ride_distance, round(avg(ifnull(ride_duration, 0)) over(order by month rows between current row and 2 following),2) as average_ride_duration from months_rides) select * from all_months where month <= 10
with recursive months as ( select 1 as pseudomonth union all select pseudomonth + 1 from months where pseudomonth < 12 ), trips as ( select extract(month from requested_at) month, sum(ride_distance) ride_distance, sum(ride_duration) ride_duration from rides r join acceptedrides a on r.ride_id = a.ride_id where extract(year from requested_at) = 2020 group by extract(month from requested_at) ) select * from ( select pseudomonth month, round(sum(ride_distance) over (order by pseudomonth rows between current row and 2 following) / 3,2) average_ride_distance, round(sum(ride_duration) over (order by pseudomonth rows between current row and 2 following) / 3,2) average_ride_duration from ( select m.pseudomonth, coalesce(t.ride_distance, 0) ride_distance, coalesce(t.ride_duration, 0) ride_duration from months m left join trips t on t.month = m.pseudomonth ) iq ) oq where month <= 10
with recursive months as ( select 1 month union all select 1+month from months where month <10), temp as ( select month(r.requested_at) month, sum(ar.ride_distance) distance, sum(ride_duration) duration from Rides r, AcceptedRides ar where r.ride_id = ar.ride_id and year(r.requested_at) = 2020 group by month(r.requested_at)) select m.month, round((ifnull(m1.distance,0)+ifnull(m2.distance,0)+ifnull(m3.distance,0))/3,2) as "average_ride_distance", round((ifnull(m1.duration,0)+ifnull(m2.duration,0)+ifnull(m3.duration,0))/3,2) as "average_ride_duration" from months m left join temp m1 on m.month = m1.month left join temp m2 on m.month = m2.month - 1 left join temp m3 on m.month = m3.month - 2
with recursive months as ( select @item:=1 as month union all select @item:=@item+1 from months where @item < 12 ), summary_cte as ( select t1.month, ifnull(sum(t3.ride_distance),0) as ride_distance, ifnull(sum(t3.ride_duration ),0) as ride_duration from months t1 left join Rides t2 on year(t2.requested_at)=2020 and month(t2.requested_at)=t1.month left join AcceptedRides t3 on t2.ride_id=t3.ride_id group by t1.month ) select month, round(avg(ride_distance) over (order by month rows between current row and 2 following),2) as average_ride_distance , round(avg(ride_duration) over (order by month rows between current row and 2 following),2) as average_ride_duration from summary_cte limit 10
with recursive months as (select 1 as month union all select 1 + month from months where month<12) select * from (select month, round(sum(sum_dis) over(order by month range between current row and 2 following)/3,2) as average_ride_distance, round(sum(sum_dur) over(order by month range between current row and 2 following)/3,2) as average_ride_duration from (select t3.month, sum(ifnull(ride_distance,0)) as sum_dis, sum(ifnull(ride_duration,0)) as sum_dur from months t3 left join (select ride_id, month(requested_at) as month from Rides where date(requested_at) between '2020-01-01' and '2020-12-31') t1 on t3.month = t1.month left join AcceptedRides t2 on t1.ride_id = t2.ride_id group by t3.month ) t ) tt where month<=10
with recursive months as (select 1 as month union all select month+1 as month from months where month<12) select d.month, round(avg(ifnull(c.monthly_distance,0))over(order by d.month rows between current row and 2 following),2) as average_ride_distance, round(avg(ifnull(c.monthly_duration,0))over(order by d.month rows between current row and 2 following),2) as average_ride_duration from months d left join (select month(a.requested_at) as month, sum(b.ride_distance) as monthly_distance, sum(b.ride_duration) as monthly_duration from rides a join acceptedrides b on a.ride_id=b.ride_id where year(a.requested_at)=2020 group by 1) c on d.month=c.month order by 1 limit 10
with recursive months as (select 1 as month union all select month+1 from months where month<12) select m.month, ifnull(round(sum(ride_distance) over (order by m.month rows between current row and 2 following)/3,2),0) as average_ride_distance, ifnull(round(sum(ride_duration) over (order by m.month rows between current row and 2 following)/3,2),0) as average_ride_duration from months m left join (select a.ride_id,sum(ride_distance) as ride_distance,sum(ride_duration) as ride_duration, month(requested_at) as month,requested_at from acceptedrides a left join rides r on a.ride_id=r.ride_id where year(requested_at)=2020 group by month(requested_at) ) a on m.month=a.month group by m.month order by month limit 10
with recursive months as (select 1 as month union all select month+1 from months where month<12), info as (select m.month,ifnull(dis,0) as dis,ifnull(dur,0) as dur from months m left join ( select sum(ride_distance) as dis,sum(ride_duration) as dur,date_format(requested_at,'%m') as month from acceptedrides a left join rides b on a.ride_id=b.ride_id where requested_at like '2020%' group by month)c on m.month=c.month) select a.month, round(sum(dis)/3,2) as average_ride_distance,round(sum(dur)/3,2) as average_ride_duration from months a left join info b on b.month between a.month and a.month+2 where a.month<11 group by 1
with recursive months as (select 1 as month union all select month+1 from months where month<12), info as (select m.month,ifnull(dis,0) as dis,ifnull(dur,0) as dur from months m left join ( select sum(ride_distance) as dis,sum(ride_duration) as dur,date_format(requested_at,'%m') as month from acceptedrides a left join rides b on a.ride_id=b.ride_id where requested_at like '2020%' group by month)c on m.month=c.month) select month, round((dis+led1+led2)/3,2) as average_ride_distance, round((dur+ledt1+ledt2)/3,2) as average_ride_duration from (select month,dis, lead(dis) over (order by month) as led1, lead(dis,2,0) over (order by month) as led2, dur, lead(dur) over (order by month) as ledt1, lead(dur,2,0) over (order by month) as ledt2 from info)c where month<11 group by month
with recursive months(month) as ( select 1 UNION ALL select month+1 from months where month <= 11), rides_avg as ( select month, sum(ride_distance) total_dist, sum(ride_duration) total_time from (select *, month(requested_at) month from rides where year(requested_at) = 2020) a join acceptedrides b on a.ride_id = b.ride_id group by month) select month, ifnull(average_ride_distance, 0.00) average_ride_distance, ifnull(average_ride_duration, 0.00) average_ride_duration from (select a.month, round(sum(total_dist) over (order by a.month rows between current row and 2 following)/3.0, 2) average_ride_distance, round(sum(total_time) over (order by a.month rows between current row and 2 following)/3.0, 2) average_ride_duration from months a left join rides_avg b on a.month = b.month) a where month < 11 order by 1
with recursive months(month) as ( select 1 as month union all select month + 1 from months where month < 10 ), t1 as ( select ar.ride_id, r.requested_at, ride_distance, ride_duration from AcceptedRides ar, Rides r where ar.ride_id = r.ride_id ) select m.month, round(ifnull(sum(t1.ride_distance)/3,0),2) average_ride_distance, round(ifnull(sum(t1.ride_duration)/3,0),2) average_ride_duration from months m left join t1 on t1.requested_at >= concat('2020-',m.month,'-01') and t1.requested_at < adddate(concat('2020-',m.month,'-01'), interval 3 month) group by m.month order by 1
with recursive months_2020 as ( select 1 as month UNION select month+1 from months_2020 where month < 10 ), rides_2020 as ( select month(r.requested_at) as month, sum(a.ride_distance) as ride_distance, sum(a.ride_duration) as ride_duration from AcceptedRides a JOIN Rides r on a.ride_id = r.ride_id where year(r.requested_at) = 2020 group by month(r.requested_at) ) select m.month, round(sum(COALESCE(ride_distance,0))/3,2) as average_ride_distance, round(sum(COALESCE(ride_duration,0))/3,2) as average_ride_duration from months_2020 m LEFT JOIN rides_2020 r on m.month <= r.month and r.month < m.month+3 group by m.month
with recursive months_in_year as ( select 1 as month_num union select month_num+1 from months_in_year where month_num < 12 ) select * from( select ride_month as month, round((total_distance + ifnull(lead(total_distance) over(),0) + ifnull(lead(total_distance,2) over(),0))/3,2) as average_ride_distance, round((total_duration + ifnull(lead(total_duration) over(),0) + ifnull(lead(total_duration,2) over(),0))/3,2) as average_ride_duration from( select month_num as ride_month, ifnull(total_distance,0) as total_distance, ifnull(total_duration,0) as total_duration from months_in_year MIY left join ( select MONTH(R.requested_at) as ride_month, sum(AR.ride_distance) as total_distance, sum(AR.ride_duration) as total_duration from AcceptedRides AR join Rides R on AR.ride_id = R.ride_id where YEAR(requested_at)=2020 group by ride_month order by ride_month ) RI on MIY.month_num = RI.ride_month ) all_month ) all_month_averages where month <= 10
with recursive months_in_year as ( select 1 as month_num union select month_num+1 from months_in_year where month_num < 12 ) select * from( select ride_month as month, round((total_distance + ifnull(lead(total_distance) over(),0) + ifnull(lead(total_distance,2) over(),0))/3,2) as average_ride_distance, round((total_duration + ifnull(lead(total_duration) over(),0) + ifnull(lead(total_duration,2) over(),0))/3,2) as average_ride_duration from( select month_num as ride_month, ifnull(total_rides,0) as total_rides, ifnull(total_distance,0) as total_distance, ifnull(total_duration,0) as total_duration from months_in_year MIY left join ( select MONTH(R.requested_at) as ride_month, count(AR.ride_id) as total_rides, sum(AR.ride_distance) as total_distance, sum(AR.ride_duration) as total_duration from AcceptedRides AR join Rides R on AR.ride_id = R.ride_id where YEAR(requested_at)=2020 group by ride_month order by ride_month ) RI on MIY.month_num = RI.ride_month ) all_month ) all_month_averages where month <= 10
with recursive monthtemp as (select '2020-01-31' as month union all select last_day(date_add(month , interval 1 month)) as month from monthtemp where month < '2020-12-31'), ride_info as (select last_day(requested_at) as month , sum(ride_distance ) as ride_distance , sum(ride_duration) as ride_duration from AcceptedRides a join rides b on a.ride_id = b.ride_id where year(requested_at) = 2020 group by last_day(requested_at) order by last_day(requested_at)) select month(a.month) as month , round(ifnull(sum(b.ride_distance)/3 , 0) , 2) as average_ride_distance, round(ifnull(sum(b.ride_duration)/3 , 0) , 2) as average_ride_duration from monthtemp a left join ride_info b on month(b.month) between month(a.month) and month(a.month) + 2 where month(a.month) <= 10 group by 1 order by 1
with recursive mth as( select 1 as mth union all select mth+1 from mth where mth+1 <= 12 ), cte as( select ifnull(sum(a.ride_distance),0) as ride_distance, ifnull(sum(a.ride_duration),0) as ride_duration, m.mth from mth m left join rides r on m.mth = month(r.requested_at) left join acceptedrides a on a.ride_id = r.ride_id and year(r.requested_at) = "2020" group by 3 order by 3 ), cte1 as( select mth, ride_distance, lead(ride_distance,1,0) over () as dis_lag1, lead(ride_distance,2,0) over () as dis_lag2, ride_duration, lead(ride_duration,1,0) over () as du_lag1, lead(ride_duration,2,0) over () as du_lag2 from cte ) select mth as "month", round((ride_distance+dis_lag1+dis_lag2)/3,2) as average_ride_distance, round((ride_duration+du_lag1+du_lag2)/3,2) as average_ride_duration from cte1 where mth < 11
with recursive my_pat as ( select 1 as month, floor(1/3) as quarter union all select month+1 , floor((month)/3) from my_pat where month+1<=12 ), temp1 as ( select extract(month from requested_at) as month, ride_distance,ride_duration from AcceptedRides A inner join Rides R on A.ride_id= R.ride_id where extract(year from requested_at)=2020 order by 1 ), temp2 as ( select my_pat.month as month,quarter, sum(coalesce(ride_distance,0)) as ride_distance, sum(coalesce(ride_duration,0)) as ride_duration from my_pat left outer join temp1 on my_pat.month=temp1.month group by 1,2 ), temp3 as( select month, round(sum(ride_distance) over(order by quarter rows between current row and 2 following)/3,2) as average_ride_distance, round(sum(ride_duration) over(order by month rows between current row and 2 following)/3,2) as average_ride_duration from temp2 ) select * from temp3 where month <=10
with recursive r as ( select 1 as month union select 1+ month from r where month < 12), a as ( select month(requested_at) month, sum(ride_distance) distance, sum(ride_duration) duration from rides join acceptedrides using (ride_id) where year(requested_at) ='2020' group by 1 ) select distinct r.month, ifnull(round(sum(distance) over (order by r.month rows between current row and 2 following)/3,2),0) average_ride_distance, ifnull(round(sum(duration) over (order by r.month rows between current row and 2 following)/3,2),0) average_ride_duration from r left join a using (month) limit 10
with recursive r_cte as (select 1 as month UNION ALL select (month + 1) from r_cte WHERE month < 12), monthly_avg as (SELECT MONTH(r.requested_at) as month, r.ride_id, SUM(ar.ride_distance) as total_ride_distance, SUM(ar.ride_duration) as total_ride_duration FROM Rides r JOIN AcceptedRides ar ON r.ride_id = ar.ride_id WHERE YEAR(r.requested_at) = '2020' GROUP BY month ORDER BY month), every_month_rides as (select m.month, ifnull(mr.total_ride_distance,0) as ride_distance, ifnull(mr.total_ride_duration,0) as ride_duration from r_cte m left join monthly_avg mr on mr.month = m.month) select t1.month as month, round((t1.ride_distance + t2.ride_distance + t3.ride_distance)/3,2) as average_ride_distance, round((t1.ride_duration + t2.ride_duration + t3.ride_duration)/3,2) as average_ride_duration from every_month_rides t1 join every_month_rides t2 join every_month_rides t3 on t1.month = t2.month -1 and t2.month = t3.month -1
with recursive rm as ( select 1 as month union select month + 1 as month from rm where month < 12 ), monthly as ( select month(requested_at) as month , sum(ride_distance) as ride_distance , sum(ride_duration) as ride_duration from Rides r inner join AcceptedRides a on r.ride_id = a.ride_id where year(requested_at) = 2020 group by month ), every_month as ( select r.month , ifnull(ride_distance, 0) as ride_distance , ifnull(ride_duration, 0) as ride_duration from rm r left join monthly m on r.month = m.month ) select t.month , round((t.ride_distance + n1.ride_distance + n2.ride_distance)/3, 2) as average_ride_distance , round((t.ride_duration + n1.ride_duration + n2.ride_duration)/3, 2) as average_ride_duration from every_month t inner join every_month n1 on t.month = n1.month - 1 inner join every_month n2 on t.month = n2.month - 2 order by 1
with recursive seq as (select 1 as month union all select month + 1 from seq where month < 10), month_record as (select convert(substring(r.requested_at,6,2),unsigned integer) as month, sum(a.ride_distance) as total_distance, sum(a.ride_duration) as total_duration from acceptedrides a left join rides r on a.ride_id = r.ride_id where r.requested_at between '2020-01-01' and '2020-12-31' group by 1) select seq.month, round(sum(ifnull(m.total_distance,0))/3,2) as average_ride_distance, round(sum(ifnull(m.total_duration,0))/3,2) as average_ride_duration from seq left join month_record m on m.month between seq.month and seq.month +2 group by 1
with recursive seq as(select 1 as month union select 1+month from seq where month < 12), acc_ride as (select a.ride_id, sum(ride_distance) as ride_distance, sum(ride_duration) as ride_duration, month(b.requested_at) as month from AcceptedRides a left join Rides b on a.ride_id = b.ride_id where year(requested_at) = 2020 group by month) select a.month, round(avg(ifnull(ride_distance, 0)) over (order by month rows between current row and 2 following), 2) as average_ride_distance, round(avg(ifnull(ride_duration, 0)) over (order by month rows between current row and 2 following), 2) as average_ride_duration from seq a left join acc_ride b on a.month = b.month limit 10
with recursive spine as ( select 1 as m union select m+1 from spine where m < 12 ), monthly as ( select extract(month from requested_at) as m, sum(ride_distance) as ride_distance, sum(ride_duration) as ride_duration from rides r join acceptedrides a on r.ride_id = a.ride_id where extract(year from requested_at) = 2020 group by m ), tmp as ( select spine.m as month, round(avg(ifnull(ride_distance, 0)) over(order by spine.m rows between current row and 2 following), 2) as average_ride_distance, round(avg(ifnull(ride_duration, 0)) over(order by spine.m rows between current row and 2 following),2) as average_ride_duration from spine left join monthly on spine.m = monthly.m ) select * from tmp where month <= 10
with recursive t as ( select 1 as month union all select month + 1 from t where month < 12), b as ( select r.requested_at, ifnull(a.ride_distance,0) as ride_distance, ifnull(a.ride_duration,0) as ride_duration from rides r right join acceptedrides a on r.ride_id = a.ride_id and year(r.requested_at) = 2020), c as ( select month, sum(ride_distance) as ride_distance, sum(ride_duration) as ride_duration from t left join b on t.month = month(b.requested_at) group by 1) select month, ifnull(average_ride_distance,0) as average_ride_distance, ifnull(average_ride_duration,0) as average_ride_duration from ( select month, round(sum(ride_distance)over(order by month rows between current row and 2 following)/3,2) as average_ride_distance, round(sum(ride_duration)over(order by month rows between current row and 2 following)/3,2) as average_ride_duration from c) t1 where month < 11 order by 1
with recursive t as ( select 1 month union all select month+1 from t where month<12 ) ,t2 as (select distinct t.month, sum(ifnull(ride_distance,0)) over(partition by t.month) as ride_distance, sum(ifnull(ride_duration,0)) over(partition by t.month) as ride_duration from rides right join AcceptedRides on rides.ride_id = acceptedRides.ride_id right join t on t.month = month(rides.requested_at) and year(rides.requested_at) = 2020) select month, round((ride_distance+next_dis+next_dis2)/3,2) as average_ride_distance, round((ride_duration+next_dur+next_dur2)/3,2) as average_ride_duration from (select month, ride_distance, lead(ride_distance,1) over(order by month) as next_dis, lead(ride_distance,2) over(order by month) as next_dis2, ride_duration, lead(ride_duration,1) over(order by month) as next_dur, lead(ride_duration,2) over(order by month) as next_dur2 from t2) temp where next_dis2 is not null
with recursive t as (select 1 as val union all select val+1 from t where val+1 <= 12) , rides_2020 as (select t.val as month, ifnull(ride_distance,0) as ride_distance, ifnull(ride_duration,0) as ride_duration from (select month(requested_at) as month, sum(ifnull(ride_distance,0)) as ride_distance, sum(ifnull(ride_duration,0)) as ride_duration from Rides left join AcceptedRides on Rides.ride_id = AcceptedRides.ride_id where requested_at between '2020-1-1' and '2020-12-31' group by 1) t1 right join t on t1.month = t.val) select * from ( select month, round(avg(ride_distance) over (order by month rows between current row and 2 following),2) as average_ride_distance, round(avg(ride_duration) over (order by month rows between current row and 2 following),2) as average_ride_duration from rides_2020 order by month ) x where month<=10
with recursive t as (select 1 month union all select month+1 from t where month < 12), t2 as (select sum(a.ride_distance) sum_distance, sum(a.ride_duration) sum_duration, month(r.requested_at) month from acceptedrides a left join rides r on a.ride_id = r.ride_id where year(r.requested_at) = 2020 group by month) select t.month, round(avg(ifnull(t2.sum_distance, 0)) over(order by month rows between current row and 2 following), 2) average_ride_distance, round(avg(ifnull(t2.sum_duration, 0)) over(order by month rows between current row and 2 following), 2) average_ride_duration from t left join t2 on t.month = t2.month limit 10
with recursive t as( select 1 as month union all select month+1 from t where month<=9), a as (select ar.ride_id, month(requested_at) as ride_month, ride_distance,ride_duration from AcceptedRides ar left join Rides r on ar.ride_id = r.ride_id where year(r.requested_at) =2020), b as (select t.month, round(sum(a.ride_distance) / 3,2) as average_ride_distance, round(sum(a.ride_duration) / 3,2) as average_ride_duration from t, a where a.ride_month - t.month < 3 and a.ride_month >= t.month group by t.month order by t.month asc) select t.month, ifnull(average_ride_distance,0.00) as average_ride_distance, ifnull(average_ride_duration,0.00) as average_ride_duration from t left join b on t.month = b.month
with recursive t0 (m) as (select "2020-02-01" as m union all select date_add(m, interval 1 month) from t0 where m < "2021-01-01"), t1 as (select date_sub(m, interval 1 day) as mon from t0), t2 as (select mon, ifnull(sum(ride_distance), 0) as dis, ifnull(sum(ride_duration), 0) as dur from t1 left join (select a.*, requested_at from AcceptedRides a left join Rides r on a.ride_id = r.ride_id) tmp on date_format(t1.mon, "%Y-%m") = date_format(requested_at, "%Y-%m") group by 1), t3 as (select month(mon) - 2 as month, sum(dis) over (order by mon rows between 2 preceding and current row) as total_dis, sum(dur) over (order by mon rows between 2 preceding and current row) as total_dur from t2) select month, round(total_dis / 3, 2) as average_ride_distance, round(total_dur / 3, 2) as average_ride_duration from t3 where month > 0
with recursive t1 as ( select 1 as month union all select month + 1 from t1 where month < 12 ), t2 as ( select month(a.requested_at) month,sum(b.ride_distance) sum_distance,sum(b.ride_duration)sum_duration from rides a join acceptedrides b on a.ride_id=b.ride_id where year(requested_at) = 2020 group by 1) select t1.month, round(avg(ifnull(t2.sum_distance,0)) over(order by month rows between current row and 2 following),2) average_ride_distance, round(avg(ifnull(t2.sum_duration,0)) over(order by month rows between current row and 2 following),2) average_ride_duration from t1 left join t2 using(month) limit 10
with recursive t1 as ( select 1 as month union select month+1 as month from t1 where month < 10 ), t2 as ( select month(requested_at) as month, sum(ride_distance) as ride_distance, sum(ride_duration) as ride_duration from Rides join AcceptedRides on Rides.ride_id = AcceptedRides.ride_id where year(requested_at)=2020 group by month ) select t1.month, round(ifnull(sum(ride_distance)/3, 0), 2) as average_ride_distance, round(ifnull(sum(ride_duration)/3, 0), 2) as average_ride_duration from t1 left join t2 on t1.month=t2.month or t1.month=t2.month-1 or t1.month=t2.month-2 group by month order by month
with recursive t1 as (select 1 as 'month' union select month + 1 from t1 where month < 12), t2 as (select sum(ride_distance) as distance, sum(ride_duration) as duration, month(requested_at) as 'month' from acceptedrides a join rides b on a.ride_id = b.ride_id where year(requested_at) = '2020' group by 3), t3 as (select t1.month, ifnull(distance, 0) as distance, ifnull(duration, 0) as duration from t1 left join t2 on t1.month = t2.month) select month, round(avg(distance) over (order by month rows between current row and 2 following), 2) as average_ride_distance, round(avg(duration) over (order by month rows between current row and 2 following), 2) as average_ride_duration from t3 limit 10
with recursive t1 as (select 1 as month union all select month + 1 from t1 where month < 12), t2 as (select a.ride_id, month(requested_at) as month, sum(ride_distance) as ride_distance, sum(ride_duration) as ride_duration from AcceptedRides a join Rides r on a.ride_id = r.ride_id where year(requested_at) = '2020' group by month), t3 as (select t1.month, ifnull(ride_distance, 0) as ride_distance, ifnull(ride_duration, 0) as ride_duration from t1 left join t2 on t1.month = t2.month) select month, round(avg(ride_distance) over(order by month rows between current row and 2 following),2) as average_ride_distance, round(avg(ride_duration) over(order by month rows between current row and 2 following),2) as average_ride_duration from t3 limit 10
with recursive t1 as (select month(a.requested_at) as month, sum(ride_distance) as dis, sum(ride_duration) as dur from rides a inner join acceptedrides b using (ride_id) where year(requested_at)=2020 group by 1 ), t2 as (select 1 as month union all select month + 1 as month from t2 where month < 12 ) select * from( select t2.month, round(sum(ifnull(dis,0)) over(order by t2.month rows between current row and 2 following) /3,2) as average_ride_distance, round(sum(ifnull(dur,0)) over(order by t2.month rows between current row and 2 following) /3,2) as average_ride_duration from t2 left join t1 on t2.month=t1.month) t where month<=10 order by 1
with recursive t1 as( select month(requested_at) as mon, sum(b.ride_distance) as ride_distance, sum(ride_duration) as ride_duration from rides a inner join AcceptedRides b using (ride_id) where year(requested_at)=2020 group by 1 order by 1), t2 as (select 1 as month union all select month+1 as month from t2 where month<12 ) select * from( select a.month, round(ifnull(sum(ride_distance) over (order by month rows between current row and 2 following) / 3 ,0) ,2) as average_ride_distance, round(ifnull(sum(ride_duration) over (order by month rows between current row and 2 following) / 3 ,0) ,2) as average_ride_duration from t2 a left join t1 b on a.month=b.mon) t where month<=10 order by 1
with recursive t1 as( select month(requested_at) as mon, sum(b.ride_distance) as ride_distance, sum(ride_duration) as ride_duration from rides a inner join AcceptedRides b using (ride_id) where year(requested_at)=2020 group by 1 order by 1), t2 as (select 1 as month union all select month+1 as month from t2 where month<12 ) select * from( select a.month, round(sum(ifnull(ride_distance,0)) over (order by month rows between current row and 2 following) / 3 ,2) as average_ride_distance, round(sum(ifnull(ride_duration,0)) over (order by month rows between current row and 2 following) / 3 ,2) as average_ride_duration from t2 a left join t1 b on a.month=b.mon) t where month<=10 order by 1
with recursive temp1 as ( select 1 as month union all select month+1 from temp1 where month < 12 ) , temp2 as ( select a.month, coalesce(sum(c.ride_distance),0) as distance, coalesce(sum(c.ride_duration),0) as duration from temp1 a left join Rides b on a.month = month(b.requested_at) and year(b.requested_at) = 2020 left join AcceptedRides c on b.ride_id = c.ride_id group by 1 order by 1 ) select a.month, round((a.distance+ b.distance + c.distance)/3,2) as average_ride_distance, round((a.duration+b.duration+c.duration)/3,2) as average_ride_duration from temp2 a left join temp2 b on a.month =b.month-1 left join temp2 c on a.month= c.month -2 where a.month <=10
with recursive temp1 as (select 1 as month union all select month+1 from temp1 where month < 12 ), temp2 as (select month, sum(ride_distance) as distance, sum(ride_duration) as duration from (select acceptedRides.*, month(requested_at) as month from AcceptedRides left join Rides on AcceptedRides.ride_id = Rides.ride_id where requested_at between '2020-01-01' and '2020-12-31') as temp group by month order by month) select month, ROUND(total_distance/3,2) as average_ride_distance, ROUND(total_duration/3,2) as average_ride_duration from (select temp1.month, sum(IFNULL(distance,0)) over (order by month range between current row and 2 following) as total_distance,sum(IFNULL(duration,0)) over (order by month range between current row and 2 following) as total_duration from temp1 left join temp2 on temp1.month = temp2.month) as temp3 where temp3.month <= 10
with recursive temp2 as ( select 1 as mth union all select mth+1 from temp2 where mth<12 ), temp1 as ( Select month(requested_at) "month", sum(ride_distance) distance, sum(ride_duration) duration from acceptedrides join rides using(ride_id) where year(requested_at)="2020" group by 1 ) select mth as "month", round(avg(ifnull(distance,0))over(order by mth rows between current row and 2 following ), 2) average_ride_distance, round(avg(ifnull(duration,0))over(order by mth rows between current row and 2 following), 2) average_ride_duration from temp2 left join temp1 on temp2.mth=temp1.month order by mth limit 10
with recursive tmp (month) as (select 1 union all select month + 1 from tmp where month < 10), tmp1 as (select month(requested_at) as month, sum(ride_distance) as distance, sum(ride_duration) as duration from acceptedrides a join rides b on a.ride_id = b.ride_id where requested_at between '2020-01-01' and '2020-12-31' group by month) select a.month, ifnull(round((ifnull(b.distance, 0) + ifnull(c.distance, 0) + ifnull(d.distance, 0)) / 3, 2), 0) as average_ride_distance, ifnull(round((ifnull(b.duration, 0) + ifnull(c.duration, 0) + ifnull(d.duration, 0)) / 3, 2), 0) as average_ride_duration from tmp a left join tmp1 b on a.month = b.month left join tmp1 c on a.month + 1 = c.month left join tmp1 d on a.month + 2 = d.month order by month
with recursive tmp as ( select 1 as month union all select 1 + month from tmp where month < 12 ), tmp1 as ( select month(requested_at) as month,sum(ride_distance) as tot_ride_dist, sum(ride_duration) as tot_ride_dur from acceptedrides ar join rides r on ar.ride_id = r.ride_id WHERE requested_at >= '2020-01-01' AND requested_at < '2021-01-01' group by month order by requested_at ), tmp2 as ( select tmp.month, tot_ride_dist, tot_ride_dur, lead(tot_ride_dist,1) over(order by month) as next_ride_dist, lead(tot_ride_dist,2) over(order by month) as nexttonext_ride_dist, lead(tot_ride_dur,1) over(order by month) as next_ride_dur, lead(tot_ride_dur,2) over(order by month) as nexttonext_ride_dur from tmp1 right join tmp on tmp1.month = tmp.month order by tmp.month ) select month, Round(((ifnull(tot_ride_dist,0)+ifnull(next_ride_dist,0)+ifnull(nexttonext_ride_dist,0))/3),2) as average_ride_distance, Round(((ifnull(tot_ride_dur,0) + ifnull(next_ride_dur,0) + ifnull(nexttonext_ride_dur,0))/3),2) as average_ride_duration from tmp2 where month <= 10
with recursive tmp as( select 1 as month union select month + 1 from tmp where month < 12 ), tmp2 as( select requested_at, ride_distance, ride_duration from rides natural join acceptedrides where year(requested_at) = 2020 ), tmp3 as( select month, ifnull(round(sum(sum(ride_distance)) over(order by month rows between current row and 2 following) / 3 , 2), 0) as average_ride_distance, ifnull(round(sum(sum(ride_duration)) over(order by month rows between current row and 2 following) / 3 , 2), 0) as average_ride_duration from tmp left join tmp2 on month = month(requested_at) group by 1 order by 1 ) select * from tmp3 where month <= 10
with sort_temp as (select new_date, ride_id, ifnull(ride_distance,0) ride_distance, ifnull(ride_duration,0) ride_duration, ifnull(requested_at, new_date) requested_at from (select 1 as new_date union select 2 as new_date union select 3 as new_date union select 4 as new_date union select 5 as new_date union select 6 as new_date union select 7 as new_date union select 8 as new_date union select 9 as new_date union select 10 as new_date union select 11 as new_date union select 12 as new_date) c left join (select a.ride_id, ride_distance, ride_duration, month(requested_at) requested_at from rides r right join Acceptedrides a on r.ride_id = a.ride_id where YEAR(requested_at) = 2020) b on c.new_date = b.requested_at) select requested_at 'month', round(avg(d.sum_distance) over(order by d.requested_at rows between current row and 2 following),2) average_ride_distance, round(avg(d.sum_duration) over(order by d.requested_at rows between current row and 2 following),2) average_ride_duration from (select new_date, ride_id, sum(ride_distance) sum_distance, sum(ride_duration) sum_duration, requested_at requested_at from sort_temp group by sort_temp.requested_at)d order by d.requested_at limit 10
with temp1 as (select Rides.ride_id, ride_distance, ride_duration, month(requested_at) as month from Rides join AcceptedRides on Rides.ride_id = AcceptedRides.ride_id where requested_at between "2020-01-01" and "2020-10-31"), temp2 as (select Rides.ride_id, ride_distance, ride_duration, month(requested_at)-1 as month from Rides join AcceptedRides on Rides.ride_id = AcceptedRides.ride_id where requested_at between "2020-02-01" and "2020-11-30"), temp3 as (select Rides.ride_id, ride_distance, ride_duration, month(requested_at)-2 as month from Rides join AcceptedRides on Rides.ride_id = AcceptedRides.ride_id where requested_at between "2020-03-01" and "2020-12-31"), temp4 as (select * from temp1 union select * from temp2 union select * from temp3), temp5 as (select month, round(sum(ride_distance)/3, 2) as average_ride_distance, round(sum(ride_duration)/3, 2) as average_ride_duration from temp4 group by month) select t1.month, ifnull(average_ride_distance, 0) as average_ride_distance, ifnull(average_ride_duration, 0) as average_ride_duration from (select 1 as month union select 2 as month union select 3 as month union select 4 as month union select 5 as month union select 6 as month union select 7 as month union select 8 as month union select 9 as month union select 10 as month) as t1 left join temp5 on t1.month = temp5.month
