(SELECT min(event_date) as install_dt, player_id FROM Activity GROUP BY player_id) ) select a.install_dt, count(distinct a.player_id) as installs, round(1.00 * count( distinct b.player_id) / count(distinct a.player_id), 2) as Day1_retention from cte1 a left join activity b on a.player_id = b.player_id and b.event_date-1 = a.install_dt group by a.install_dt
SELECT I.install_dt, I.installs, round(ifnull(retention/installs,0),2) AS Day1_retention FROM (SELECT install_dt, COUNT(DISTINCT player_id) as installs FROM (SELECT player_id, MIN(event_date) install_dt FROM Activity GROUP BY player_id) A GROUP BY install_dt) I LEFT JOIN (SELECT event_date, COUNT(DISTINCT player_id) as retention FROM Activity WHERE (player_id, event_date) IN (SELECT player_id, date_add(min(event_date), interval 1 day) AS d FROM Activity GROUP BY player_id) GROUP BY event_date) R ON date_add(I.install_dt, interval 1 day) = R.event_date
SELECT a.event_date AS install_dt, COUNT(a.player_id) AS installs, ROUND(COUNT(b.player_id)/COUNT(a.player_id), 2) AS Day1_retention FROM (SELECT player_id, MIN(event_date) AS event_date FROM Activity GROUP BY player_id) AS a LEFT JOIN Activity b ON a.player_id = b.player_id AND a.event_date + 1 = b.event_date GROUP BY a.event_date
SELECT a1.event_date as install_dt, COUNT(distinct a1.player_id) as installs, ROUND(SUM(CASE WHEN a2.event_date IS NOT null THEN 1 ELSE 0 END)/count(distinct a1.player_id),2) as Day1_retention FROM ( SELECT player_id, MIN(event_date) as event_date FROM Activity GROUP BY player_id) a1 LEFT JOIN Activity a2 ON a1.player_id = a2.player_id AND a2.event_date -1 = a1.event_date GROUP BY install_dt
SELECT a1.event_date as install_dt, count(*) as installs, ROUND(COUNT(a2.player_id)/COUNT(*), 2) AS Day1_retention FROM Activity a1 LEFT JOIN Activity a2 on a1.event_date = a2.event_date-1 and a1.player_id = a2.player_id WHERE (a1.player_id ,a1.event_date) IN ( select player_id, MIN(event_date) from Activity group by player_id) group by 1
SELECT a1.first_login as install_dt, count(DISTINCT a1.player_id) as installs, ROUND(SUM(if(a1.first_login + 1 = a2.event_date, 1, 0)) / count(DISTINCT a1.player_id), 2) as Day1_retention FROM (SELECT player_id, min(event_date) as first_login FROM Activity group by player_id) as a1 JOIN Activity as a2 ON a1.player_id = a2.player_id group by a1.first_login
SELECT act1.event_date AS install_dt, COUNT(DISTINCT act1.player_id) AS installs, ROUND(SUM(CASE WHEN act2.event_date IS NOT NULL THEN 1 ELSE 0 END) /COUNT(DISTINCT act1.player_id),2) as Day1_retention FROM ( SELECT event_date, ROW_NUMBER() OVER (PARTITION BY player_id ORDER BY event_date) rk, player_id FROM Activity ) act1 LEFT JOIN Activity act2 ON act1.event_date+1 = act2.event_date AND act1.player_id = act2.player_id WHERE rk = 1 GROUP BY 1
SELECT event_date AS install_dt, COUNT(*) AS installs, ROUND(SUM(retention) / COUNT(*),2) AS Day1_retention FROM ( SELECT player_id, event_date, CASE WHEN next_date - event_date = 1 THEN 1 ELSE 0 END AS retention FROM ( SELECT player_id, event_date, LEAD(event_date, 1) OVER(PARTITION BY player_id ORDER BY event_date) as next_date, DENSE_RANK() OVER(PARTITION BY player_id ORDER BY event_date) as rnk FROM Activity) a WHERE rnk = 1) b GROUP BY 1
SELECT event_date AS install_dt, COUNT(player_id) AS installs, ROUND(SUM(CASE WHEN DATEDIFF(next_login, event_date) = 1 THEN 1 ELSE 0 END) * 1.0 / COUNT(player_id), 2) AS Day1_retention FROM ( SELECT player_id, event_date, ROW_NUMBER() OVER (PARTITION BY player_id ORDER BY event_date) AS date_rank, LEAD(event_date, 1) OVER (PARTITION BY player_id ORDER BY event_date) AS next_login FROM activity ) t1 WHERE date_rank = 1 GROUP BY event_date ORDER BY 1
SELECT f.first_date AS install_dt, COUNT(f.player_id) AS installs, ROUND(COUNT(a.event_date)/COUNT(f.player_id),2) AS Day1_retention FROM (SELECT player_id, MIN(event_date) AS first_date FROM Activity GROUP BY player_id) AS f LEFT JOIN Activity AS a ON f.player_id = a.player_id AND f.first_date = a.event_date -1 GROUP BY f.first_date
SELECT first_login AS install_dt, COUNT(DISTINCT player_id) AS installs, ROUND(SUM(CASE WHEN DATEDIFF(event_date,first_login)=1 THEN 1 ELSE 0 END)/COUNT(DISTINCT player_id),2) AS Day1_retention FROM ( SELECT *, min(event_date) OVER (PARTITION BY player_id) AS first_login FROM activity ) tb1 GROUP BY first_login
SELECT first_login AS install_dt, COUNT(DISTINCT player_id) AS installs, ROUND(SUM(CASE WHEN DATEDIFF(event_date,first_login)=1 THEN 1 ELSE 0 END)/COUNT(DISTINCT player_id),2) AS Day1_retention FROM ( SELECT *, min(event_date) OVER (PARTITION BY player_id) AS first_login FROM activity) tb1 GROUP BY first_login
SELECT first_login install_dt,count(*) installs, ROUND(SUM(player_status)/count(*),2) Day1_retention from ( SELECT ll.player_id,ll.first_login,CASE WHEN rr.player_id is null THEN 0 ELSE 1 END player_status from (SELECT a.player_id,min(a.event_date) first_login from activity a group by a.player_id) ll left join (SELECT distinct l.player_id from ( SELECT b.player_id,min(b.event_date) first_login from activity b group by b.player_id) l inner join activity r on l.player_id=r.player_id where l.first_login+1=r.event_date ) rr on ll.player_id=rr.player_id) t GROUP BY first_login
SELECT fisrt_date AS install_dt, COUNT(DISTINCT a.player_id) as installs, ROUND(COUNT(event_date)/COUNT(DISTINCT a.player_id),2) AS Day1_retention FROM ( SELECT player_id, MIN(event_date) as fisrt_date FROM Activity GROUP BY player_id ) a LEFT JOIN Activity b ON a.fisrt_date = b.event_date - 1 AND a.player_id = b.player_id GROUP BY install_dt
SELECT install_dt, COUNT(*) AS 'installs', ROUND(AVG(retained), 2) AS 'Day1_retention' FROM (SELECT t_install_dt.player_id, t_install_dt.install_dt, IF(ISNULL(a1.event_date), 0, 1) AS 'retained' FROM (SELECT player_id, MIN(event_date) AS 'install_dt' FROM Activity GROUP BY player_id) t_install_dt LEFT JOIN Activity a1 ON t_install_dt.player_id = a1.player_id AND DATE_ADD(t_install_dt.install_dt, INTERVAL 1 DAY) = a1.event_date) t1 GROUP BY install_dt
SELECT install_dt, COUNT(DISTINCT a1.player_id) installs, ROUND(SUM(CASE WHEN DATEDIFF(event_date, install_dt) = 1 THEN 1 ELSE 0 END)/ COUNT(DISTINCT a1.player_id), 2) Day1_retention FROM ( SELECT player_id, MIN(event_date) install_dt FROM Activity GROUP BY player_id ) a1 JOIN Activity a2 ON a1.player_id = a2.player_id GROUP BY install_dt
SELECT install_dt, COUNT(DISTINCT player_id) AS installs, ROUND(SUM(CASE WHEN DATEDIFF(event_date, install_dt) = 1 THEN 1 ELSE 0 END)/COUNT(DISTINCT player_id), 2) AS Day1_retention FROM ( SELECT *, MIN(event_date) OVER (PARTITION BY player_id) AS install_dt FROM activity ) x GROUP BY install_dt
SELECT install_dt, COUNT(DISTINCT sub.player_id) AS installs, ROUND(SUM(CASE WHEN a.event_date IS NULL THEN 0 ELSE 1 END)/COUNT(DISTINCT sub.player_id),2) AS Day1_retention FROM (SELECT *, MIN(event_date) OVER (PARTITION BY player_id) AS install_dt FROM Activity ) sub LEFT JOIN Activity a ON DATE_ADD(sub.event_date, interval 1 day) = a.event_date AND sub.player_id = a.player_id WHERE sub.event_date = install_dt GROUP BY install_dt
SELECT install_dt, COUNT(DISTINCT x.player_id) AS installs, ROUND(CAST(COALESCE(COUNT(DISTINCT a.player_id),0) AS decimal)/COUNT(DISTINCT x.player_id),2) AS Day1_retention FROM (SELECT DISTINCT player_id, MIN(event_date) AS install_dt FROM Activity GROUP BY player_id) x LEFT JOIN Activity a ON x.player_id = a.player_id AND x.install_dt + 1 = a.event_date GROUP BY install_dt ORDER BY install_dt
SELECT install_dt, COUNT(player_id) AS installs, ROUND( COUNT(next_day) / COUNT(player_id), 2 ) AS Day1_retention FROM ( SELECT A.player_id, A.install_dt, B.event_date AS 'next_day' FROM ( SELECT player_id, MIN(event_date) AS 'install_dt' FROM Activity GROUP BY player_id ) AS A LEFT JOIN Activity AS B ON A.player_id = B.player_id AND B.event_date = DATE_ADD(A.install_dt,INTERVAL 1 DAY) ) AS t GROUP BY install_dt
SELECT install_dt, COUNT(player_id) AS installs, ROUND(COUNT(next_day) / COUNT(player_id), 2) AS Day1_retention FROM ( SELECT a1.install_dt, a1.player_id, a2.event_date AS next_day FROM ( SELECT player_id, MIN(event_date) AS install_dt FROM Activity GROUP BY player_id) a1 LEFT JOIN Activity a2 ON a1.player_id = a2.player_id AND a1.install_dt = a2.event_date - 1 ) a GROUP BY a.install_dt
SELECT install_dt, COUNT(player_id) AS installs, ROUND(COUNT(next_day) / COUNT(player_id), 2) AS Day1_retention FROM ( SELECT a1.player_id, a1.install_dt, a2.event_date AS next_day FROM ( SELECT player_id, MIN(event_date) AS install_dt FROM Activity GROUP BY player_id ) AS a1 LEFT JOIN Activity AS a2 ON a1.player_id = a2.player_id AND SUBDATE(a2.event_date, INTERVAL 1 DAY) = a1.install_dt ) AS t GROUP BY install_dt
SELECT install_dt, COUNT(player_id) AS installs, ROUND(COUNT(next_day) / COUNT(player_id), 2) AS Day1_retention FROM ( SELECT a1.player_id, a1.install_dt, a2.event_date AS next_day FROM ( SELECT player_id, MIN(event_date) AS install_dt FROM Activity GROUP BY player_id ) AS a1 LEFT JOIN Activity AS a2 ON a1.player_id = a2.player_id AND a2.event_date = a1.install_dt + 1 ) AS t GROUP BY install_dt
SELECT install_dt, COUNT(player_id) AS installs, ROUND(COUNT(retention)/COUNT(player_id),2) AS Day1_retention FROM (SELECT a1.player_id, a1.install_dt, a2.event_date AS retention FROM (SELECT player_id, MIN(event_date) AS install_dt FROM Activity GROUP BY player_id) a1 LEFT JOIN Activity a2 ON a1.player_id = a2.player_id AND a1.install_dt + 1 = a2.event_date) tmp GROUP BY install_dt
SELECT install_dt, COUNT(t.player_id) AS installs, ROUND(COUNT(next_day)/COUNT(t.player_id), 2) AS Day1_retention FROM ( SELECT install_dt, b.player_id, a.event_date AS next_day FROM Activity a RIGHT JOIN ( SELECT player_id, MIN(event_date) AS install_dt FROM Activity GROUP BY 1 ) b ON a.player_id = b.player_id AND a.event_date = install_dt + 1 ) t GROUP BY 1
SELECT install_dt, count(distinct a.player_id) as installs, ROUND(sum(CASE WHEN DATEDIFF(event_date, install_dt) = 1 THEN 1 ELSE 0 END)/ count(distinct a.player_id),2) as Day1_retention FROM activity a JOIN (SELECT player_id, min(event_date) as install_dt FROM activity GROUP BY player_id) as install_act ON a.player_id = install_act.player_id GROUP BY install_dt
SELECT install_dt, count(distinct player_id) as installs, round(count(distinct(case when time_gap = 1 THEN player_id else null end))*1.00/count(distinct player_id),2) as Day1_retention FROM (SELECT player_id, event_date, MIN(event_date) OVER (PARTITION BY player_id ORDER BY event_date) as install_dt, datediff(event_date, MIN(event_date) OVER (PARTITION BY player_id ORDER BY event_date)) as time_gap FROM activity) tmp GROUP BY 1 ORDER BY 1
SELECT install_dt, count(install_dt) as installs, round(count(a.event_date)/count(install_dt),2) as Day1_retention FROM (SELECT player_id, min(event_date) as install_dt FROM Activity GROUP BY player_id) as b LEFT JOIN Activity a ON a.event_date = b.install_dt + 1 and b.player_id = a.player_id group by install_dt
SELECT p1.first_login AS install_dt, p1.installs, ROUND(p2.retained/p1.installs, 2) AS Day1_retention FROM (SELECT first_login, COUNT(player_id) AS installs FROM (SELECT player_id, MIN(event_date) AS first_login FROM Activity GROUP BY player_id) a GROUP BY first_login) p1 INNER JOIN (SELECT t1.first_login, COUNT(t2.player_id) AS retained FROM (SELECT player_id, MIN(event_date) AS first_login FROM Activity GROUP BY player_id) t1 LEFT JOIN Activity t2 ON t1.player_id = t2.player_id AND t1.first_login = t2.event_date - 1 GROUP BY t1.first_login) p2 ON p1.first_login = p2.first_login
SELECT t.install_dt, COUNT(t.player_id) AS installs, ROUND(COUNT(t.next_day) / COUNT(t.player_id), 2) AS Day1_retention FROM (SELECT t1.player_id, install_dt, t2.event_date AS next_day FROM (SELECT player_id, MIN(event_date) AS 'install_dt' FROM Activity GROUP BY player_id) AS t1 LEFT JOIN Activity AS t2 ON t1.player_id = t2.player_id AND t1.install_dt = SUBDATE(t2.event_date, INTERVAL 1 DAY) ) AS t GROUP BY install_dt
SELECT t.install_dt, COUNT(t.player_id) AS installs, ROUND(COUNT(t.next_day) / COUNT(t.player_id), 2) AS Day1_retention from (select a1.player_id, a1.install_dt, a2.event_date AS next_day from (select player_id, min(event_date) as install_dt from activity group by player_id) as a1 left join activity a2 on a1.player_id=a2.player_id and datediff(a2.event_date,a1.install_dt)=1 ) as t group by t.install_dt
SELECT t1.d0 AS install_dt, COUNT(t1.player_id) AS installs, ROUND(COUNT(a.event_date) / COUNT(t1.player_id),2) AS Day1_retention FROM (SELECT player_id, MIN(event_date) AS d0 FROM activity GROUP BY 1) t1 LEFT JOIN activity a ON DATEDIFF(a.event_date, t1.d0) = 1 AND t1.player_id = a.player_id GROUP BY 1
Select first_login as install_dt, Count(*) as installs, Round(coalesce(Avg(Datediff(second_login, first_login) = 1), 0), 2) as Day1_retention From (Select *, (Select Min(event_date) From Activity Where player_id = tmp.player_id and event_date != tmp.first_login) as second_login From (Select player_id, Min(event_date) as first_login From Activity Group By player_id) tmp)tmp2 Group By first_login
Select install_dt, count(InstallTbl2.player_id) as installs, round(count(Activity.player_id)/count(InstallTbl2.player_id),2) as Day1_retention FROM ( ( SELECT install_dt, DATE_ADD(install_dt,INTERVAL 1 DAY) as retention_dt, player_id FROM (SELECT MIN(event_date) AS install_dt, player_id FROM Activity GROUP BY player_id) InstallTbl ) InstallTbl2 LEFT JOIN Activity ON InstallTbl2.retention_dt = Activity.event_date AND InstallTbl2.player_id = Activity.player_id ) Group By install_dt
WITH Activity AS ( SELECT t1.player_id, t1.event_date, IF(t2.event_date IS NULL, 0, 1) AS d1r FROM Activity t1 LEFT JOIN Activity t2 ON t1.player_id = t2.player_id AND t2.event_date - t1.event_date = 1 ) SELECT event_date AS install_dt, COUNT(player_id) AS installs, ROUND( SUM(d1r)/COUNT(player_id), 2) AS Day1_retention FROM ( SELECT player_id, event_date, DENSE_RANK() OVER(PARTITION BY player_id ORDER BY event_date) AS rnk, d1r FROM Activity )t WHERE rnk = 1 GROUP BY event_date
WITH C AS ( SELECT player_id, MIN(event_date) install_dt FROM Activity GROUP BY player_id ) SELECT install_dt, COUNT(DISTINCT C.player_id) installs, ROUND(SUM(CASE WHEN DATEDIFF(event_date, install_dt) = 1 THEN 1 ELSE 0 END)/ COUNT(DISTINCT C.player_id), 2) Day1_retention FROM C JOIN Activity a ON C.player_id = a.player_id GROUP BY install_dt
WITH CTE AS ( Select player_id,event_date, dense_rank() Over(Partition By player_id Order by event_date) As gamesRank, Lead(event_date,1) Over (Partition By player_id Order by event_date) as Next_Login From Activity ) Select Installs.install_dt,installs, If(Day1_retention IS NULL, 0.00 , ROUND((Day1_retention/installs),2)) AS Day1_retention from ( Select event_date as install_dt , Count(Distinct player_id) as installs from CTE Where gamesRank <2 Group by event_date ) As Installs Left Join ( Select event_date as install_dt , Count(Distinct player_id) as Day1_retention from CTE Where gamesRank <2 and event_date = SubDate(Next_Login , Interval 1 day) Group by event_date ) As Day1_retention Using (install_dt)
WITH CTE1 AS ( SELECT event_date, COUNT(player_id) AS installs FROM ( SELECT player_id, event_date, RANK() OVER(PARTITION BY player_id ORDER BY event_date ASC) AS ranking FROM Activity ) as sub WHERE ranking = 1 GROUP BY event_date ), CTE2 AS (SELECT event_date, COUNT(DISTINCT player_id) as cnt_logged_back_next_day FROM ( SELECT player_id, event_date, LEAD(event_date,1) OVER(PARTITION BY player_id ORDER BY event_date ASC) AS event_date_lead, RANK() OVER(PARTITION BY player_id ORDER BY event_date ASC) AS ranking FROM Activity ) as sub WHERE DATEDIFF(event_date_lead,event_date) = 1 AND ranking = 1 GROUP BY event_date ) SELECT d1.event_date as install_dt, d1.installs, ROUND(IFNULL(d2.cnt_logged_back_next_day,0)/d1.installs,2) AS Day1_retention FROM CTE1 as d1 LEFT JOIN CTE2 as d2 ON d1.event_date = d2.event_date
WITH CTE1 as ( SELECT player_id, event_date, ROW_NUMBER() OVER(PARTITION BY player_id ORDER BY event_date) as rn, LEAD(event_date,1) OVER(PARTITION BY player_id ORDER By event_date) event_date_lead1 FROM Activity ) SELECT * FROM ( SELECT event_date as install_dt, SUM(CASE WHEN rn = 1 THEN 1 ELSE 0 END) as installs, ROUND(1.00*SUM(CASE WHEN rn = 1 AND DATEDIFF(event_date_lead1,event_date) = 1 THEN 1 ELSE 0 END)/SUM(CASE WHEN rn = 1 THEN 1 ELSE 0 END),2) AS Day1_retention FROM CTE1 GROUP BY event_date ) as sub WHERE installs != 0
WITH FirstDay AS ( SELECT player_id, MIN(event_date) AS instl_date FROM Activity GROUP BY player_id ) SELECT FirstDay.instl_date AS install_dt, COUNT(1) AS installs, ROUND(COUNT(Activity.player_id)/COUNT(1), 2) AS Day1_retention FROM FirstDay LEFT JOIN Activity ON Activity.player_id = FirstDay.player_id AND DATEDIFF(Activity.event_date, FirstDay.instl_date) = 1 GROUP BY FirstDay.instl_date ORDER BY 1
WITH I AS ( SELECT player_id, MIN(event_date) AS event_date FROM Activity GROUP BY 1 ), R AS ( SELECT event_date, COUNT(*) AS retention FROM ( SELECT a.* FROM I a, Activity b WHERE a.player_id = b.player_id AND DATEDIFF(a.event_date, b.event_date) = -1 ) c GROUP BY 1 ) SELECT a.event_date AS install_dt, a.cnt AS installs, ROUND(IFNULL(b.retention, 0) / a.cnt, 2) AS Day1_retention FROM ( SELECT event_date, COUNT(*) AS cnt FROM I GROUP BY 1 ) a LEFT JOIN R b ON a.event_date = b.event_date
WITH INSTALL_DATE AS (SELECT player_id, MIN(event_date) event_date FROM Activity GROUP BY player_id), INSTALLS AS (SELECT event_date, COUNT(player_id) installs FROM INSTALL_DATE GROUP BY event_date), RETENTION AS (SELECT player_id, event_date FROM INSTALL_DATE WHERE (player_id, event_date+1) IN (SELECT player_id, event_date FROM Activity)) SELECT T1.event_date install_dt, installs, round(COUNT(T2.player_id)/installs,2) Day1_retention FROM INSTALLS T1 LEFT JOIN RETENTION T2 ON T1.event_date = T2.event_date GROUP BY T1.event_date
WITH InstallDate AS (SELECT player_id ,MIN(event_date) AS install_dt FROM Activity GROUP BY player_id), IntallDateAnalysis AS (SELECT install_dt ,COUNT(player_id) AS installs FROM InstallDate GROUP BY install_dt), NextLogin AS (SELECT A.player_id ,A.event_date ,LEAD(event_date,1) OVER(PARTITION BY A.player_id ORDER BY A.event_date ASC) AS NextLogin FROM Activity A), 1DayRetentionCounting AS (SELECT NL.player_id ,ID.install_dt ,IF(ABS(DATEDIFF(NL.event_date,NL.NextLogin)) = 1,1,0) AS Retention FROM NextLogin NL INNER JOIN InstallDate ID ON ID.install_dt = NL.event_date AND NL.player_id = ID.player_id), 1DayRetentionSummary AS (SELECT install_dt ,SUM(Retention) AS Retention FROM 1DayRetentionCounting GROUP BY install_dt) SELECT IAD.install_dt ,IAD.installs ,ROUND(1DRS.Retention/IAD.installs,2) AS Day1_retention FROM 1DayRetentionSummary 1DRS INNER JOIN IntallDateAnalysis IAD ON IAD.install_dt = 1DRS.install_dt ORDER BY 1 ASC
WITH Install_date AS (SELECT player_id, MIN(event_date) install_dt FROM Activity GROUP BY player_id) SELECT T1.install_dt, ROUND(COUNT(T1.player_id),2) installs, ROUND(COUNT(T2.event_date)/COUNT(install_dt),2) Day1_retention FROM Install_date T1 LEFT JOIN Activity T2 ON T1.player_id = T2.player_id AND T1.install_dt + 1 = T2.event_date GROUP BY T1.install_dt ORDER BY T1.install_dt
WITH Install_day AS (SELECT MIN(event_date) as install_date, player_id FROM Activity GROUP BY player_id) SELECT i.install_date AS install_dt, COUNT(DISTINCT i.player_id) AS installs, ROUND(SUM(CASE WHEN a.player_id IS NOT NULL THEN 1 ELSE 0 END)/COUNT(DISTINCT i.player_id), 2) AS Day1_retention FROM Install_day AS i LEFT JOIN Activity AS a ON datediff(i.install_date, a.event_date) = -1 AND i.player_id = a.player_id GROUP BY i.install_date
WITH Installs AS ( SELECT player_id, MIN(event_date) as install_dt FROM Activity GROUP BY player_id ) SELECT install_dt, COUNT(DISTINCT Installs.player_id) AS installs, ROUND( IFNULL(COUNT(Activity.player_id) / COUNT(Installs.player_id), 0), 2) AS Day1_retention FROM Installs LEFT JOIN Activity ON Installs.player_id = Activity.player_id AND install_dt + INTERVAL 1 DAY = Activity.event_date GROUP BY 1
WITH Installs AS ( SELECT player_id, MIN(event_date) as install_dt FROM Activity GROUP BY player_id ) SELECT install_dt, COUNT(Installs.player_id) AS installs, ROUND( COUNT(Activity.player_id) / COUNT(Installs.player_id), 2) AS Day1_retention FROM Installs LEFT JOIN Activity ON Installs.player_id = Activity.player_id AND install_dt + INTERVAL 1 DAY = Activity.event_date GROUP BY 1
WITH PlayerActivityRanking AS (SELECT player_id ,event_date ,RANK() OVER(PARTITION BY player_id ORDER BY event_date ASC) AS Rk ,LEAD(event_date,1) OVER(PARTITION BY player_id ORDER BY event_date ASC) AS next_login FROM Activity ), Player1DayRetention AS (SELECT player_id ,event_date AS install_dt ,IF(DATEDIFF(next_login,event_date) = 1,1,0) AS retentionFlag FROM PlayerActivityRanking WHERE Rk = 1 ) SELECT install_dt ,COUNT(player_id) AS installs ,ROUND(SUM(retentionFlag)/COUNT(player_id),2) AS Day1_retention FROM Player1DayRetention GROUP BY install_dt ORDER BY 1 ASC
WITH T1 AS ( SELECT player_id, event_date, MIN(event_date) OVER (Partition By player_id) as install_dt FROM Activity ) SELECT install_dt, COUNT(Distinct player_id) as installs, ROUND(SUM(CASE WHEN event_date = install_dt + 1 THEN 1 ELSE 0 END) / COUNT(Distinct player_id),2) AS Day1_retention FROM T1 GROUP BY install_dt Order By install_dt
WITH TEMP AS ( SELECT player_id, MIN(event_date) AS install_dt FROM Activity GROUP BY player_id ) SELECT install_dt, COUNT(install_dt) AS installs, ROUND(COUNT(B.event_date) / COUNT(A.install_dt), 2) AS day1_retention FROM TEMP A LEFT JOIN Activity B ON A.install_dt = DATE_ADD(B.event_date, INTERVAL - 1 DAY) AND A.player_id = B.player_id GROUP BY install_dt ORDER BY install_dt
WITH a AS ( SELECT player_id, event_date, LEAD(event_date, 1) OVER (PARTITION BY player_id ORDER BY event_date) AS lag1_date, RANK() OVER (PARTITION BY player_id ORDER BY event_date) AS rk FROM ACTIVITY), b AS ( SELECT * FROM a WHERE rk = 1), c AS ( SELECT event_date AS install_dt, COUNT(*) AS installs, SUM(CASE WHEN DATEDIFF(lag1_date, event_date) = 1 THEN 1 ELSE 0 END) as ct FROM b GROUP BY event_date) SELECT install_dt, installs, ROUND(ct/installs, 2) AS Day1_retention FROM c
WITH cte AS ( SELECT player_id, min(event_date) AS install_dt FROM Activity GROUP BY player_id ) SELECT install_dt, COUNT(DISTINCT a.player_id) AS installs, ROUND(COUNT(b.player_id)/count(a.player_id),2) Day1_retention FROM cte a LEFT JOIN Activity b ON a.player_id = b.player_id AND a.install_dt +1 = b.event_date GROUP BY a.install_dt
WITH cte AS (SELECT a1.player_id, a1.install_dt, a2.event_date AS retention FROM ( SELECT player_id, MIN(event_date) AS install_dt FROM Activity GROUP BY 1 ) a1 LEFT JOIN Activity a2 ON a1.player_id = a2.player_id AND a1.install_dt + 1 = a2.event_date ) SELECT install_dt, COUNT(player_id) AS installs, ROUND(COUNT(retention)/COUNT(player_id),2) AS Day1_retention FROM cte GROUP BY 1 ORDER BY 1
WITH cte AS (SELECT t2.install_dt, COUNT(1) AS day2log FROM ( SELECT a.player_id, a.event_date, a.games_played, t1.install_dt FROM Activity a JOIN (SELECT player_id, MIN(event_date) AS install_dt FROM Activity GROUP BY player_id) t1 ON t1.player_id = a.player_id WHERE a.event_date = (t1.install_dt + 1)) t2 GROUP BY t2.install_dt), cte2 AS (SELECT t1.install_dt, COUNT(t1.player_id) AS installs FROM (SELECT player_id, MIN(event_date) AS install_dt FROM Activity GROUP BY player_id) t1 GROUP BY t1.install_dt), cte3 AS (SELECT t3.install_dt, t3.installs, ROUND(cte.day2log / t3.installs, 2) AS Day2_rentention FROM (SELECT t1.install_dt, COUNT(t1.player_id) AS installs FROM (SELECT player_id, MIN(event_date) AS install_dt FROM Activity GROUP BY player_id) t1 GROUP BY t1.install_dt) t3 JOIN cte ON cte.install_dt = t3.install_dt) SELECT cte2.install_dt, cte2.installs, IFNULL(cte3.Day2_rentention, 0) AS Day1_retention FROM cte2 LEFT JOIN cte3 ON cte2.install_dt = cte3.install_dt
WITH cte AS( SELECT player_id, MIN(event_date) AS install_dt FROM activity GROUP BY player_id ), cte2 AS ( SELECT a2.player_id, a2.install_dt FROM activity a1 JOIN cte a2 ON a1.player_id = a2.player_id AND a1.event_date = DATE_ADD(a2.install_dt, INTERVAL 1 DAY) ) SELECT c1.install_dt, COUNT(c1.install_dt) AS installs, ROUND(SUM(CASE WHEN c2.install_dt IS NULL THEN 0 ELSE 1 END) / COUNT(c1.install_dt), 2) AS Day1_retention FROM cte c1 LEFT JOIN cte2 c2 ON c1.install_dt = c2.install_dt AND c1.player_id = c2.player_id GROUP BY c1.install_dt
WITH cte1 AS ( SELECT player_id, event_date, lead(event_date, 1) OVER(PARTITION BY player_id ORDER BY event_date) AS prev_day, RANK() OVER(PARTITION BY player_id ORDER BY event_date) AS rank_index FROM Activity ), cte2 as ( SELECT event_date, count(distinct player_id) as dr FROM cte1 WHERE rank_index = 1 AND (prev_day-event_date) = 1 GROUP BY event_date ) SELECT tmp.event_date AS install_dt, installs, IF(dr is NULL, 0.00, ROUND(dr/installs, 2)) AS Day1_retention FROM ( SELECT event_date, count(distinct player_id) AS installs FROM cte1 WHERE rank_index = 1 GROUP BY event_date ) tmp LEFT JOIN cte2 ON tmp.event_date = cte2.event_date
WITH day0_table AS (SELECT B.first_login as install_date, count(B.player_id) AS day0_num FROM (SELECT player_id, min(event_date) AS first_login FROM Activity GROUP BY player_id) B GROUP BY B.first_login), day1_table AS (SELECT T.first_login AS install_date, COALESCE(COUNT(DISTINCT A.player_id),0) AS day1_num FROM Activity A RIGHT JOIN (SELECT player_id, min(event_date) AS first_login FROM Activity GROUP BY player_id) T ON A.player_id =T.player_id AND A.event_date = T.first_login + 1 GROUP BY T.first_login) SELECT day0_table.install_date AS install_dt, day0_table.day0_num as installs, ROUND(day1_table.day1_num/day0_table.day0_num, 2) as Day1_retention FROM day0_table JOIN day1_table ON day0_table.install_date = day1_table.install_date GROUP BY day0_table.install_date
WITH first_login AS (SELECT a.player_id, a.event_date AS first_login, b.event_date AS logback FROM Activity a LEFT JOIN Activity b ON b.event_date = DATE_ADD(a.event_date, INTERVAL 1 DAY) AND a.player_id = b.player_id WHERE (a.player_id,a.event_date) IN (SELECT player_id, MIN(event_date) FROM Activity GROUP BY 1)) SELECT first_login AS install_dt, COUNT(*) AS installs, ROUND(SUM(CASE WHEN logback IS NOT NULL THEN 1 ELSE 0 END)/COUNT(*),2) AS Day1_retention FROM first_login GROUP BY 1
WITH first_login AS (SELECT event_date, player_id FROM (SELECT event_date,player_id, DENSE_RANK() OVER(PARTITION BY player_id ORDER BY event_date) as rnk FROM activity) a WHERE a.rnk = 1) , one_plus_days as (SELECT f.player_id,f.event_date as first_date, a.event_date as second_date FROM first_login f left JOIN activity a ON f.player_id = a.player_id and f.event_date = DATE_ADD(a.event_date, INTERVAL -1 DAY)) , cases as (SELECT first_date,second_date, CASE WHEN second_date is not null THEN 1 ELSE 0 END AS cnt1 FROM one_plus_days) SELECT first_date as install_dt, COUNT(*) AS installs, ROUND(SUM(cnt1) /count(*),2) as Day1_retention FROM cases GROUP BY first_date
WITH fist_log AS (SELECT player_id, MIN(event_date) AS event_date FROM Activity GROUP BY 1) SELECT sdate AS install_dt, COUNT(*) AS installs, ROUND(SUM(CASE WHEN ndate IS NOT NULL THEN 1 ELSE 0 END)/COUNT(*),2) AS Day1_retention FROM (SELECT f.player_id, f.event_date AS sdate, a.event_date AS ndate FROM fist_log f LEFT JOIN Activity a ON f.player_id=a.player_id AND DATEDIFF(f.event_date, a.event_date)=-1) t2 GROUP BY sdate ORDER BY sdate
WITH indiv_install AS ( SELECT player_id, MIN(event_date) AS install_date FROM Activity GROUP BY 1), next_login AS ( SELECT player_id, event_date, LEAD(event_date) OVER(PARTITION BY player_id ORDER BY event_date) AS next_login FROM Activity), retained_people AS ( SELECT player_id, event_date FROM next_login WHERE next_login - INTERVAL 1 DAY = event_date AND (player_id, event_date) IN (SELECT * FROM indiv_install)), retained AS ( SELECT event_date, COUNT(DISTINCT player_id) AS retained_1day FROM retained_people GROUP BY 1), installed AS ( SELECT install_date, COUNT(player_id) AS installs FROM indiv_install GROUP BY 1) SELECT i.install_date AS install_dt, i.installs, ROUND(IFNULL(r.retained_1day, 0)/i.installs,2) as Day1_retention FROM installed i LEFT JOIN retained r ON i.install_date=r.event_date
WITH indiv_install AS ( SELECT player_id, MIN(event_date) AS install_date FROM Activity GROUP BY 1), retained_people AS ( SELECT i.player_id,i.install_date FROM indiv_install i JOIN Activity a ON i.player_id=a.player_id AND i.install_date=a.event_date-1), retained_ct AS ( SELECT install_date, count(player_id) retained_1day FROM retained_people GROUP BY 1), installed AS ( SELECT install_date, count(player_id) installs FROM indiv_install GROUP BY 1) SELECT i.install_date install_dt, i.installs, ROUND(IFNULL(r.retained_1day,0)/i.installs,2) Day1_retention FROM installed i LEFT JOIN retained_ct r ON i.install_date=r.install_date
WITH installTable AS( SELECT player_id, MIN(event_date) AS install_dt FROM Activity GROUP BY player_id) SELECT i.install_dt, COUNT(i.player_id) AS installs, ROUND(SUM(a.player_id IS NOT NULL)/COUNT(i.player_id),2) AS Day1_retention FROM installTable i LEFT JOIN Activity a ON i.player_id = a.player_id AND i.install_dt + 1 = a.event_date GROUP BY i.install_dt
WITH install_cte AS ( SELECT player_id, MIN(event_date) AS install_dt FROM Activity GROUP BY player_id ) SELECT install_dt, COUNT(*) AS installs, ROUND(COUNT(a.player_id)/ COUNT(*),2) AS Day1_retention FROM install_cte i LEFT JOIN Activity a ON i.player_id = a.player_id AND DATEDIFF(a.event_date, i.install_dt)=1 GROUP BY install_dt
WITH install_date AS ( SELECT player_id, MIN(event_date) AS install_dt FROM Activity GROUP BY 1) SELECT install_dt, COUNT(DISTINCT install_date.player_id) AS installs, ROUND(COUNT(DISTINCT Activity.player_id) / COUNT(DISTINCT install_date.player_id), 2) AS Day1_retention FROM install_date LEFT JOIN Activity ON DATE_ADD(install_date.install_dt, INTERVAL 1 DAY) = Activity.event_date AND install_date.player_id = Activity.player_id GROUP BY 1 ORDER BY 1
WITH install_date_df AS ( SELECT player_id, MIN(event_date) AS install_date FROM Activity GROUP BY player_id ) SELECT i.install_date AS install_dt, COUNT(i.install_date) AS installs, ROUND(COUNT(a.event_date) / COUNT(i.install_date),2) AS Day1_retention FROM install_date_df i LEFT JOIN Activity a ON a.event_date = DATE_ADD(i.install_date, INTERVAL 1 DAY) AND i.player_id = a.player_id GROUP BY i.install_date
WITH install_date_df AS ( SELECT player_id, MIN(event_date) AS install_date FROM Activity GROUP BY player_id ), retain_dates AS ( SELECT i.player_id, i.install_date, a.event_date AS retained_date FROM install_date_df i LEFT JOIN Activity a ON a.event_date = DATE_ADD(i.install_date, INTERVAL 1 DAY) AND i.player_id = a.player_id ) SELECT install_date AS install_dt, COUNT(install_date) AS installs, ROUND(COUNT(retained_date) / COUNT(install_date),2) AS Day1_retention FROM retain_dates GROUP BY install_date
WITH install_date_record as ( SELECT player_id , min(event_date) install_date FROM Activity as a group by player_id) SELECT idr.install_date as install_dt, count(idr.player_id) as installs , ROUND(SUM(CASE WHEN a.event_date is NULL then 0 else 1 END)/count(idr.player_id),2) Day1_retention FROM install_date_record as idr LEFT JOIN Activity as a ON idr.install_date = date_sub(a.event_date,INTERVAL 1 DAY) AND a.player_id = idr.player_id GROUP BY install_dt
WITH install_dates AS ( SELECT player_id, MIN(event_date) install_dt FROM Activity GROUP BY player_id ), activity_grouped AS ( SELECT player_id, event_date FROM Activity GROUP BY 1,2 ) SELECT install_dt, COUNT(*) installs, ROUND(COUNT(a.event_date)/COUNT(*),2) Day1_retention FROM install_dates i LEFT JOIN activity_grouped a ON i.player_id = a.player_id AND DATEDIFF(a.event_date, i.install_dt) = 1 GROUP BY i.install_dt
WITH install_dt AS ( SELECT MIN(event_date) AS install_dt, player_id FROM Activity GROUP BY player_id ) , install_num AS ( SELECT install_dt, COUNT(player_id) AS installs FROM install_dt GROUP BY install_dt ) , retention_num AS ( SELECT COUNT(DISTINCT a.player_id) AS retention_num, i.install_dt AS install_dt FROM install_dt i LEFT JOIN Activity a ON DATEDIFF(i.install_dt, a.event_date) = - 1 and i.player_id = a.player_id GROUP BY i.install_dt ) SELECT i.install_dt AS install_dt, i.installs AS installs, ROUND(IFNULL(r.retention_num, 0) / i.installs, 2) AS Day1_retention FROM install_num i LEFT JOIN retention_num r ON i.install_dt = r.install_dt
WITH install_tbl AS ( SELECT player_id, MIN(event_date) AS install_date, DATE_ADD(MIN(event_date), INTERVAL 1 DAY) as retention_date_def FROM Activity GROUP BY 1 ) SELECT a.install_date as install_dt, count(*) as installs, ROUND(count(b.event_date)/count(*),2) as Day1_retention FROM install_tbl a LEFT JOIN Activity b ON a.player_id = b.player_id AND a.retention_date_def = b.event_date GROUP BY 1
WITH installs AS ( SELECT * FROM ( SELECT *, row_number() over(partition BY player_id ORDER BY event_date) AS rn FROM activity ) a WHERE rn = 1 ) ,install_cnt AS ( SELECT event_date, count(1) FROM installs GROUP BY 1) SELECT i.event_date AS install_dt, count(i.player_id) AS installs, round(coalesce(sum((a.player_id IS NOT NULL))/ count(i.player_id) ,0),2) AS day1_retention FROM installs i LEFT JOIN activity a ON ( i.player_id = a.player_id AND datediff(a.event_date, i.event_date) = 1) GROUP BY 1
WITH installs as ( SELECT player_id, MIN(event_date) as install_date FROM Activity GROUP BY 1 ) SELECT i.install_date as install_dt, COUNT(install_date) as installs, ROUND(COUNT(a.event_date)/COUNT(i.install_date),2) as Day1_retention FROM installs i LEFT JOIN Activity a ON i.install_date = DATE_ADD(a.event_date, INTERVAL -1 DAY) AND i.player_id = a.player_id GROUP BY 1 ORDER BY 1
WITH installs as ( SELECT player_id, MIN(event_date) as install_dt FROM Activity GROUP BY 1 ) SELECT i.install_dt, COUNT(i.player_id) as installs, ROUND(COUNT(a.event_date)/COUNT(i.install_dt),2) as Day1_retention FROM installs i LEFT JOIN Activity a ON i.install_dt = DATE_ADD(a.event_date, INTERVAL -1 DAY) AND i.player_id = a.player_id GROUP BY 1
WITH installs as ( SELECT player_id, MIN(event_date) as install_dt FROM Activity GROUP BY 1 ) SELECT i.install_dt, COUNT(install_dt) as installs, ROUND(COUNT(a.event_date) / COUNT(i.install_dt), 2) as Day1_retention FROM installs i LEFT JOIN Activity a ON i.install_dt = DATE_ADD(a.event_date, INTERVAL - 1 DAY) AND i.player_id = a.player_id GROUP BY 1 ORDER BY 1
WITH installs as ( SELECT player_id, MIN(event_date) as install_dt FROM Activity GROUP BY 1 ) SELECT i.install_dt, COUNT(install_dt) as installs, ROUND(COUNT(a.event_date)/COUNT(i.install_dt),2) as Day1_retention FROM installs i LEFT JOIN Activity a ON i.install_dt = DATE_ADD(a.event_date, INTERVAL -1 DAY) AND i.player_id = a.player_id GROUP BY 1
WITH installs as ( SELECT player_id, MIN(event_date) as install_dt FROM Activity GROUP BY 1 ) SELECT i.install_dt, COUNT(install_dt) as installs, ROUND(COUNT(a.event_date)/COUNT(i.install_dt),2) as Day1_retention FROM installs i LEFT JOIN Activity a ON i.install_dt = DATE_ADD(a.event_date, INTERVAL -1 DAY) AND i.player_id = a.player_id GROUP BY 1 ORDER BY 1
WITH installs_A AS( SELECT player_id, MIN(event_date) AS 'install_dt' FROM Activity GROUP BY player_id ) SELECT a.install_dt, COUNT(DISTINCT a.player_id) AS 'installs', ROUND(COUNT(DISTINCT b.player_id)/ COUNT(DISTINCT a.player_id), 2) AS 'Day1_retention' FROM installs_A a LEFT JOIN Activity b ON a.player_id = b.player_id AND b.event_date = DATE_ADD(a.install_dt,INTERVAL 1 DAY) GROUP BY a.install_dt
WITH main AS ( SELECT player_id, MIN(event_date) AS install_dt FROM Activity GROUP BY player_id ) SELECT install_dt, COUNT(main.player_id) AS installs, ROUND(COUNT(event_date)/COUNT(main.player_id),2) AS Day1_retention FROM main LEFT JOIN Activity ON main.player_id = Activity.player_id AND DATEDIFF(Activity.event_date,main.install_dt) = 1 GROUP BY install_dt
WITH player_login AS ( SELECT player_id, MIN(event_date) AS install_dt FROM Activity GROUP BY 1 ) SELECT a.install_dt, COUNT(a.player_id) AS installs, ROUND(COUNT(b.player_id) / COUNT(a.player_id), 2) AS Day1_retention FROM player_login a LEFT JOIN Activity b ON a.player_id = b.player_id AND b.event_date = DATE_ADD(a.install_dt, INTERVAL 1 DAY) GROUP BY 1
WITH ranking AS (SELECT player_id, device_id, event_date, games_played, ROW_NUMBER() OVER(PARTITION BY player_id ORDER BY event_date) as number FROM Activity), install_table AS (SELECT event_date, COUNT(*) as inst FROM ranking WHERE number = 1 GROUP BY event_date ), tab_day1 as (SELECT player_id, event_date, installs, nexts, nexts = event_date as 1_day FROM (SELECT player_id, event_date, LAG(event_date) OVER(PARTITION BY player_id ORDER BY event_date) as installs, DATE_ADD(LAG(event_date) OVER(PARTITION BY player_id ORDER BY event_date), interval 1 day) as nexts, number FROM ranking) tab1 WHERE number = 2), tab_day1_group as (SELECT installs, COUNT(*) as day1 FROM tab_day1 WHERE 1_day = 1 GROUP BY installs) SELECT event_date as install_dt, inst as installs, ROUND((COALESCE(day1,0)*1.) / (inst),2) as Day1_retention FROM install_table LEFT JOIN tab_day1_group ON event_date = installs
WITH res AS ( SELECT player_id, event_date, RANK() OVER( PARTITION BY player_id ORDER BY event_date ) AS rnk, LEAD(event_date,1) OVER( PARTITION BY player_id ORDER BY event_date) AS next_date FROM Activity ) SELECT event_date AS install_dt, COUNT(player_id) AS installs, ROUND( SUM( CASE WHEN next_date = DATE_ADD(event_date,INTERVAL 1 DAY) THEN 1 ELSE 0 END ) / COUNT(player_id), 2 ) AS Day1_retention FROM res WHERE rnk = 1 GROUP BY 1
WITH retention as (SELECT event_date, COUNT(player_id) OVER( PARTITION BY event_date) as num_retained FROM Activity WHERE (player_id, event_date) In (SELECT a1.player_id, a1.event_date FROM Activity AS a1, Activity AS a2 WHERE a1.player_id = a2.player_id AND a2.event_date = a1.event_date + 1 AND (a1.player_id, a1.event_date )IN (SELECT player_id, MIN(event_date) FROM Activity GROUP BY 1)) ) , installation as (SELECT event_date, COUNT(player_id) OVER( PARTITION BY event_date) as num_installed FROM Activity WHERE (player_id, event_date) In (SELECT player_id, MIN(event_date) FROM Activity GROUP BY player_id )) SELECT DISTINCT i.event_date AS install_dt, i.num_installed AS installs, COALESCE(ROUND(r.num_retained/i.num_installed, 2), 0) AS Day1_retention FROM installation AS i LEFT JOIN retention AS r ON i.event_date = r.event_date
WITH sorting AS ( SELECT *, RANK() OVER (PARTITION BY player_id ORDER BY event_date) day_num, (LEAD(event_date) OVER (PARTITION BY player_id ORDER BY event_date) - event_date) next_login_gap FROM Activity ), coming_back AS ( SELECT event_date, COUNT(*) returned FROM sorting WHERE day_num = 1 AND next_login_gap = 1 GROUP BY 1 ) SELECT s.event_date as install_dt, COUNT(*) installs, ROUND(COALESCE(c.returned / COUNT(*), 0), 2) Day1_retention FROM sorting s LEFT JOIN coming_back c on s.event_date = c.event_date WHERE s.day_num = 1 GROUP BY 1 ORDER BY 1
WITH t AS ( SELECT *, RANK() OVER(PARTITION BY player_id ORDER BY event_date) rk, LEAD(event_date) OVER(PARTITION BY player_id ORDER BY event_date) nextd FROM activity ) SELECT event_date install_dt, COUNT(*) installs, ROUND(COUNT(IF(event_date=nextd-INTERVAL 1 DAY, player_id, null)) / COUNT(*),2) Day1_retention FROM t WHERE rk=1 GROUP BY event_date
WITH t AS ( SELECT player_id, MIN(event_date) AS install_dt FROM Activity GROUP BY player_id ), t1 AS ( SELECT player_id, DATE_ADD(install_dt, INTERVAL 1 DAY) AS event_date FROM t ), ins_cnt AS ( SELECT install_dt, COUNT(*) AS installs FROM t GROUP BY install_dt ), ret_cnt AS ( SELECT DATE_SUB(event_date, INTERVAL 1 DAY) AS install_dt, COUNT(*) AS cnt FROM t1 WHERE (player_id, event_date) IN (SELECT player_id, event_date FROM Activity) GROUP BY event_date ) SELECT i.install_dt, installs, ROUND(COALESCE(cnt / installs, 0), 2) AS Day1_retention FROM ins_cnt i LEFT JOIN ret_cnt r ON i.install_dt = r.install_dt
WITH t AS (SELECT *, ROW_NUMBER() OVER(PARTITION BY player_id ORDER BY event_date) rn, LEAD(event_date) OVER(PARTITION BY player_id ORDER BY event_date) nextday FROM Activity) SELECT t.event_date AS install_dt, COUNT(DISTINCT player_id) AS installs, ROUND(IFNULL(back,0)/COUNT(DISTINCT player_id),2) AS Day1_retention FROM t LEFT JOIN ( SELECT t.event_date, COUNT(*) AS back FROM t WHERE rn = 1 AND DATEDIFF(nextday,event_date) = 1 GROUP BY event_date) t1 ON t.event_date = t1.event_date WHERE rn = 1 GROUP BY t.event_date
WITH t AS (SELECT player_id, event_date, DENSE_RANK() OVER (PARTITION BY player_id ORDER BY event_date) r FROM activity), n AS (SELECT t1.player_id pid1, t1.event_date d1, t1.r, t2.player_id pid2, t2.event_date d2, CASE WHEN t2.player_id IS NOT null THEN 1 ELSE 0 END AS stay FROM t t1 LEFT JOIN t t2 ON DATE_ADD(t1.event_date, INTERVAL 1 DAY) = t2.event_date AND t1.player_id = t2.player_id WHERE t1.r = 1) SELECT DISTINCT d1 install_dt, SUM(r) installs, ROUND(SUM(stay)/SUM(r),2) Day1_retention FROM n GROUP BY d1
WITH t(player_id,minlogindate) AS ( SELECT player_id,min(event_date) FROM Activity GROUP BY player_id ) SELECT t.minlogindate "install_dt" ,COUNT(t.player_id) "installs" ,ROUND(SUM(CASE WHEN a.player_id IS NOT NULL THEN 1.00 ELSE 0.00 END)/ COUNT(t.player_id),2) Day1_retention FROM t LEFT JOIN Activity a ON t.player_id=a.player_id AND t.minlogindate=DATE_ADD(a.event_date,INTERVAL -1 Day) GROUP BY t.minlogindate
WITH t1 AS (SELECT player_id, MIN(event_date) 'install_date' FROM Activity GROUP BY player_id) SELECT t1.install_date install_dt, COUNT(*) installs, ROUND((COUNT(a.event_date)/COUNT(*)),2) Day1_retention FROM t1 LEFT JOIN Activity a ON DATE_ADD(t1.install_date, INTERVAL 1 DAY) = a.event_date AND t1.player_id = a.player_id GROUP BY t1.install_date
WITH temp1 AS (SELECT player_id, MIN(event_date) AS first_login FROM Activity GROUP BY player_id) ,temp2 AS( SELECT first_login AS install_dt , COUNT(DISTINCT player_id) AS installs FROM temp1 GROUP BY first_login ) , temp3 AS( SELECT b.first_login, a.player_id FROM Activity a JOIN temp1 b ON a.player_id = b.player_id AND DATEDIFF(a.event_date,b.first_login) =1 ) , temp4 AS ( SELECT first_login, COUNT(DISTINCT player_id) AS next_day FROM temp3 GROUP BY first_login ) SELECT b.install_dt , b.installs , ROUND(COALESCE((c.next_day/b.installs),0),2) AS Day1_retention FROM temp2 b LEFT JOIN temp4 c ON b.install_dt = c.first_login ORDER BY install_dt
WITH tmp as (SELECT player_id,MIN(event_date) FROM Activity GROUP BY player_id) SELECT * FROM( SELECT event_date install_dt ,SUM(CASE WHEN (player_id,event_date) IN (SELECT * FROM tmp) THEN 1 ELSE 0 END) installs, IFNULL(ROUND( SUM(CASE WHEN (player_id,event_date) IN (SELECT * FROM tmp) AND (player_id,event_date) IN (SELECT player_id, DATE_ADD(event_date,interval -1 day) FROM Activity ) THEN 1 ELSE 0 END)*1.0/ SUM(CASE WHEN (player_id,event_date) IN (SELECT * FROM tmp) THEN 1 ELSE 0 END) ,2),0) 'Day1_retention' FROM Activity GROUP BY event_date)t WHERE t.installs!=0
WITH wa as (select x.player_id ,min(x.event_date) as install_dt from Activity x group by 1 ) ,wb as (select x.* ,y.install_dt ,case when datediff(x.event_date,y.install_dt)=1 then true else false end as retention_flg from Activity x LEFT OUTER JOIN wa y ON x.player_id=y.player_id ) select x.install_dt ,count(distinct x.player_id) as installs ,round(count(distinct case when x.retention_flg=true then x.player_id end)/ count(distinct x.player_id),2) as Day1_retention from wb x group by 1 order by 1
With Day1 as ( select * from ( select * ,row_number() over (Partition by player_id Order by event_date) as RowOrdered ,lead(event_date) over (Partition by player_id Order by event_date) -1 as ComDate from Activity ) Ordered where RowOrdered = 1 ), Day1R as ( select event_date,count(player_id) R from Day1 where event_date = ComDate group by event_date), Day1A as ( select event_date,count(player_id) A from Day1 group by event_date) Select Day1A.event_date as install_dt , A as installs , round(case when R/A is null then 0 else R/A end,2) as Day1_retention from Day1A left outer join Day1R on Day1A.event_date = Day1R.event_date order by Day1A.event_date
With Retention as ( select player_id, event_date, row_number() over (partition by player_id order by event_date) as row_num, lead(event_date,1) over (partition by player_id order by event_date) as next_date, case WHEN datediff (lead(event_date,1) over (partition by player_id order by event_date), event_date) = 1 then 1 else 0 end as day1retention from Activity ) select event_date as install_dt, count(player_id) as installs, round(sum(day1retention) / count(player_id),2) as Day1_retention from Retention where row_num = 1 Group by event_date
With cte as ( Select install_dt, Count(t.player_id) installs, ifnull(Count(v.event_date),0) rets From (Select player_id, min(event_date) as 'install_dt' From Activity Group by player_id ) t Left join (Select player_id, event_date From Activity ) v On t.player_id = v.player_id And install_dt = v.event_date -1 Group by install_dt) Select install_dt, installs, Round((rets/installs),2) Day1_retention From cte
With nextt as ( Select player_id, event_date, lead(event_date,1) OVER (partition by player_id order by event_date asc) as nextday from Activity ), mindate as ( Select player_id, min(event_date) as first_date from nextt group by 1 ), minandnext as ( Select mindate.player_id,mindate.first_date, nextt.nextday from mindate left join nextt on mindate.player_id = nextt.player_id and mindate.first_date = nextt.event_date ) Select first_date as install_dt, count(distinct(player_id)) as installs, round(sum(Case when datediff(nextday,first_date) = 1 then 1 else 0 end)/count(Case when datediff(nextday,first_date) = 1 then 1 else 0 end),2) as Day1_retention from minandnext group by 1
select A.event_date as install_dt, count(A.player_id) as installs, round(count(B.player_id)/count(A.player_id),2) as Day1_retention from ( select player_id, min(event_date) AS event_date from Activity group by player_id ) AS A left join Activity B ON A.player_id = B.player_id and A.event_date + 1 = B.event_Date group by A.event_date
select A.event_date as install_dt, count(A.player_id) as installs, round(count(B.player_id)/count(A.player_id),2) as Day1_retention from (select player_id, min(event_date) AS event_date from Activity group by player_id) AS A left join Activity B ON A.player_id = B.player_id and A.event_date + 1 = B.event_Date group by A.event_date
select TBL.install_dt, count(TBL.player_id) as installs, round(count(A.player_id)/count(TBL.player_id),2) as Day1_retention from ( select player_id, min(event_date) as install_dt from Activity group by 1) TBL left join Activity A on TBL.player_id = A.player_id and TBL.install_dt = A.event_date -1 group by 1
select a.event_date as install_dt, count(a.player_id) as installs, round(count(b.player_id)/count(a.player_id),2) as Day1_retention from (select player_id, min(event_date) as event_date from activity group by 1) as a left join activity as b on datediff(b.event_date,a.event_date)=1 and a.player_id=b.player_id group by 1
select a.event_date as install_dt, count(a.player_id) as installs,round(count(b.player_id)/count(a.player_id),2) as Day1_retention from (select player_id,min(event_date)as event_date from Activity group by player_id)a left join Activity b on a.player_id=b.player_id and a.event_date+1=b.event_date group by a.event_date
select a.install_dt, count(distinct a.player_id) as installs, round(ifnull(sum(case when b.event_date is not null then 1 else 0 end) / count(distinct a.player_id) ,0) ,2) as day1_retention from ( select player_id, min(event_date) as install_dt from activity group by 1 ) as a left join activity as b on a.player_id = b.player_id and b.event_date = date_add(a.install_dt, interval 1 day) group by 1 order by 1
select a1.event_date 'install_dt',count(a1.player_id) 'installs', round(sum(case when a2.player_id is not null then 1 else 0 end)/count(a1.player_id),2) 'Day1_retention' from activity a1 left join activity a2 on a1.player_id=a2.player_id and datediff(a2.event_date,a1.event_date)=1 where (a1.player_id,a1.event_date) in (select player_id, min(event_date) 'event_date' from activity group by player_id) group by a1.event_date order by a1.event_date
select a1.event_date as install_dt, count(distinct a1.player_id) as installs, round(sum(case when a2.event_date is not null then 1 else 0 end)/count(distinct a1.player_id),2) as Day1_retention from (select player_id, min(event_date) as event_date from Activity group by player_id) a1 left join Activity a2 on a1.player_id = a2.player_id and a2.event_date = a1.event_date +1 group by 1
select a1.event_date as install_dt, count(distinct a1.player_id)as installs, round(sum(case when a2.event_date is not null then 1 else 0 end)/count(distinct a1.player_id),2) as Day1_retention from (select player_id,min(event_date) as event_date from Activity group by player_id) a1 left join Activity a2 on a1.player_id=a2.player_id and a1.event_date=a2.event_date-1 group by install_dt
select a1.mindate as install_dt, count(distinct a1.player_id) as installs, round(count(distinct a2.player_id) /count(distinct a1.player_id),2) as Day1_retention from (select player_id, min(event_date) as mindate from Activity group by player_id) a1 left join Activity a2 on datediff( a2.event_date, a1.mindate) = 1 and a1.player_id = a2.player_id group by a1.mindate
select a1.mindate as install_dt, count(distinct a1.player_id) as installs, round(count(distinct a2.player_id) /count(distinct a1.player_id),2) as Day1_retention from (select player_id, min(event_date) over(partition by player_id) as mindate from Activity) a1 left join Activity a2 on datediff( a2.event_date, a1.mindate) = 1 and a1.player_id = a2.player_id group by a1.mindate
select date_sub(a3.event_date, interval 1 day) as install_dt, count(*) as installs, round(count(device_id)/count(*),2) as day1_retention from Activity a2 right join (select a1.player_id, date_add(min(event_date), interval 1 day) as event_date from Activity a1 group by a1.player_id) a3 on a2.player_id= a3.player_id and a2.event_date= a3.event_date group by a3.event_date
select dt install_dt, count(player_id) installs, round(count(next_day) / count(player_id),2) Day1_retention from (select t1.player_id, dt, t2.event_date next_day from ( (select *, min(event_date) dt from Activity group by player_id) t1 left join Activity t2 on t1.player_id = t2.player_id and t1.dt = t2.event_date - 1)) temp group by 1
select event_date as install_dt, count(*) as installs, round(sum(case when datediff(lead_date,event_Date)=1 then 1 else 0 end)/count(*),2) as Day1_retention from (select player_id, event_date, row_number() over (partition by player_id order by event_date asc) as n_row, lead(event_date) over (partition by player_id order by event_date asc) as lead_date from Activity group by 1,2) a where n_row=1 group by 1
select event_date as install_dt, count(distinct player_id) as installs, round(sum(case when (date_add(event_date, interval 1 day),a.player_id) in (select event_date, player_id from Activity) then 1 else 0 end)/count(distinct player_id),2) as Day1_retention from Activity a where (a.player_id,a.event_date) in (select distinct player_id, min(event_date) from Activity group by player_id) group by event_date
select event_date as install_dt, count(player_id) as installs, round(sum(if((player_id,event_date+1) in (select player_id, event_date from Activity), 1, 0))/count(*),2) as Day1_retention from Activity where (player_id, event_date) in (select player_id, min(event_date) from Activity group by player_id) group by event_date order by event_date
select first_log_per_player.event_date as install_dt, count(first_log_per_player.player_id) as installs , round(count(activity.player_id)/count(first_log_per_player.player_id),2) as Day1_retention from (select player_id, min(event_date) as event_date from activity group by player_id) first_log_per_player left join activity on first_log_per_player.player_id=activity.player_id and first_log_per_player.event_date+1=activity.event_date group by first_log_per_player.event_date
select install_date as install_dt, count(distinct player_id) as installs, round(sum(next_day_login)/count(distinct player_id),2) as Day1_retention from ( select a.player_id, a.install_date, ifnull(b.next_day_login,0) as next_day_login from (select player_id, min(event_date) as install_date, date_format(min(event_date)+1,"%Y-%m-%d") as next_date from Activity group by player_id) as a left join (select player_id, event_date, 1 as next_day_login from Activity ) as b on a.player_id = b.player_id and a.next_date = b.event_date) as c group by install_date
select install_dt , count(player_id) as installs , round(sum(if(nxt_day, 1, 0))/count(player_id), 2) Day1_retention from ( select a1.player_id, a1.install_dt, a2.event_date as nxt_day from( ( select player_id, min(event_date) as install_dt from activity group by player_id ) as a1 left join activity as a2 on a1.player_id = a2.player_id and a1.install_dt=a2.event_date-1 ) ) as temp group by install_dt
select install_dt, count(a.player_id) as installs, round(count(b.player_id)/count(a.player_id), 2) as Day1_retention from (select player_id, min(event_date) as install_dt from Activity group by player_id) as a left join (select distinct player_id, event_date from Activity) b on a.player_id = b.player_id and datediff(b.event_date, a.install_dt) = 1 group by install_dt order by install_dt
select install_dt, count(b.player_id) as installs, round(ifnull(sum(retention_ind)/count(player_id),0),2) as day1_retention from( select a.player_id, a.install_dt, case when b.event_date is not null then 1 else 0 end as retention_ind from ( select player_id, min(event_date) as install_dt from activity group by 1 ) as a left join activity as b on a.player_id = b.player_id and date_add(a.install_dt,interval 1 day) = b.event_date ) as b group by 1
select install_dt, count(distinct a.player_id) as installs, round(count(a1.player_id)/count(a.player_id), 2) as Day1_retention from (select distinct player_id, min(event_date) as install_dt from Activity group by player_id) a left join Activity a1 on a.player_id = a1.player_id and a.install_dt = a1.event_date - 1 group by install_dt
select install_dt, count(distinct a.player_id) as installs, round(sum(case when b.event_date is not null then 1 else 0 end)/count(distinct a.player_id) ,2) as day1_retention from ( select player_id, min(event_date) as install_dt from activity group by 1 ) as a left join activity as b on a.player_id = b.player_id and date_add(a.install_dt, interval 1 day) = b.event_date group by 1
select install_dt, count(distinct a1.player_id) installs, round (sum(case when datediff(event_date, install_dt)=1 then 1 else 0 end)/ count(distinct a1.player_id), 2) Day1_retention from ( select player_id, min(event_date) install_dt from activity group by player_id )a1 join activity a2 on a1.player_id = a2.player_id group by install_dt
select install_dt, count(distinct player_id) as installs, round(sum(back)/sum(installs),2) as day1_retention from ( select player_id, min(event_date) over (partition by player_id) as install_dt, case when min(event_date) over (partition by player_id) = event_date then 1 else 0 end as installs, case when (min(event_date) over (partition by player_id))+1 = event_date then 1 else 0 end as back from activity) t group by install_dt order by install_dt
select install_dt, count(distinct player_id) as installs, round(sum(case when (player_id, date_add(install_dt, interval 1 day)) in (select player_id, event_date from activity) then 1 else 0 end)/count(distinct player_id), 2) as Day1_retention from (select player_id, min(event_date) as install_dt from activity group by 1) t1 group by 1
select install_dt, count(distinct player_id) as installs, round(sum(case when datediff(event_date, install_dt)=1 then 1 else 0 end)/count(distinct player_id),2) as Day1_retention from ( select *, min(event_date) over (partition by player_id)as install_dt from activity) i group by install_dt
select install_dt, count(distinct player_id) installs, round(sum(datediff(event_date, install_dt)=1)/count(distinct player_id),2) day1_retention from ( select *, min(event_date) over (partition by player_id) install_dt from activity ) t group by 1
select install_dt, count(distinct player_id) installs, round(sum(if(install_dt+1=event_date,1,0))/count(distinct player_id),2) Day1_retention from ( select player_id, event_date, min(event_date) OVER (PARTITION BY player_id) install_dt from activity ) tmp group by install_dt
select install_dt, count(install_dt) as installs, round(count(next_dt) / count(install_dt), 2) as Day1_retention from ( select t1.player_id, t1.event_date as install_dt, t2.event_date as next_dt from ( select player_id, min(event_date) as event_date from activity group by player_id ) t1 left join activity t2 on t2.player_id = t1.player_id and datediff(t2.event_date, t1.event_date) = 1 ) t group by install_dt order by install_dt asc
select install_dt, count(player_id) as installs, round(count(next_day)/count(player_id),2) as Day1_retention from (select t.player_id, t.install_dt, a.event_date as next_day from (select player_id, min(event_date) as install_dt from Activity group by player_id) as t left join Activity a on a.player_id = t.player_id and a.event_date=install_dt+1) as t2 group by install_dt
select install_dt, installs, round(sum(case when temp2.event_date is not NULL then 1 else 0 end) / installs, 2) as Day1_retention from ( select install_dt, count(distinct player_id ) as installs from ( select player_id, min(event_date) as install_dt from activity group by player_id )temp group by install_dt )temp1 left join ( select a.event_date as event_date from ( select player_id, min(event_date) as event_date from activity group by player_id )a join activity b on a.player_id = b.player_id and a.event_date + 1 = b.event_date )temp2 on temp1.install_dt = temp2.event_date group by install_dt, installs
select install_dt,count(distinct player_id) as installs, coalesce(round(count(case when date_add(install_dt,interval 1 day) = lddt then player_id end)/count(distinct player_id),2),0) as Day1_retention from (select event_date as install_dt, player_id, rank() over (partition by player_id order by event_date) as rn, lead(event_date) over (partition by player_id order by event_date) as lddt from (select distinct player_id, event_date from activity) as t) as t where rn = 1 group by install_dt
select k.install_dt, count(k.player_id) as installs, round(sum(a.player_id is not null)/count(k.player_id),2) as Day1_retention from (select distinct player_id, min(event_date) over(partition by player_id order by event_date) as install_dt from Activity)k left join Activity a on k.player_id = a.player_id and datediff(a.event_date,k.install_dt) = 1 group by install_dt
select t.install_date as install_dt,count(distinct t.player_id) as installs, round(count(distinct a.player_id)/count(distinct t.player_id),2) as Day1_retention from Activity a right join (select player_id, min(event_date) as install_date from Activity group by 1) t on a.player_id=t.player_id and a.event_date=date_add(t.install_date,interval 1 day) group by 1
select t1.event_date as install_dt, count(*) as installs, round(sum(if(t2.event_date is null, 0, 1)) / count(*), 2) as day1_retention from ( select player_id, min(event_date) as event_date from activity group by player_id ) t1 left join activity t2 on (t2.player_id = t1.player_id and datediff(t2.event_date, t1.event_date) = 1) group by t1.event_date
select t1.install_date as install_dt, count(t1.install_date) as installs, round(count(t2.event_date) / count(*), 2) as Day1_retention from ( select player_id, min(event_date) as install_date from Activity group by 1 ) t1 left join Activity t2 on date_add(t1.install_date, interval 1 day) = t2.event_date and t1.player_id = t2.player_id group by 1 order by 1
select t1.install_dt, count(distinct t1.player_id) as installs, round(avg(case when a1.games_played is not null then 1 else 0 end),2) as Day1_retention from ( select player_id, min(event_date) as install_dt from activity group by player_id) t1 left join activity a1 on t1.player_id = a1.player_id and t1.install_dt + 1 = a1.event_date group by t1.install_dt
select t1.install_dt, count(distinct(t1.player_id)) as installs, round(sum(if(t2.event_date is not null, 1, 0))/count(distinct(t1.player_id)),2) as Day1_retention from (select player_id, min(event_date) as install_dt from Activity group by player_id) t1 left join Activity t2 on t1.player_id = t2.player_id and datediff(t2.event_date, t1. install_dt) = 1 group by t1.install_dt
select temp.install_dt, count(distinct temp.player_id) as 'installs', round(count(distinct a.player_id)/ count(distinct temp.player_id),2) as 'Day1_retention' from (select player_id, min(event_date) as 'install_dt' from Activity group by player_id) temp left join Activity a on temp.player_id = a.player_id and datediff(a.event_date,temp.install_dt) = 1 group by install_dt
select temp1.install_dt, temp1.installs as installs, round(temp2.retention / temp1.installs, 2) as Day1_retention from (select t.install_dt, count(distinct t.player_id) as installs from (select player_id, min(event_date) as install_dt from Activity group by player_id) as t group by t.install_dt) temp1 left join (select t.install_dt, sum(if(a.player_id is null, 0, 1)) as retention from Activity a right join (select player_id, min(event_date) as install_dt from Activity group by player_id) as t on a.player_id = t.player_id and datediff(a.event_date, t.install_dt) = 1 group by t.install_dt) temp2 on temp1.install_dt = temp2.install_dt
select u.event_date as install_dt, sum(u.rn) as installs, round(sum(flag)/sum(u.rn),2) as Day1_retention from (select *, (case when t.ld=0 then 0 when t.ld - t.event_date =1 then 1 else 0 end )as flag from (select player_id, event_date, lead(event_date,1) over(partition by player_id order by event_date) as ld, row_number() over(partition by player_id order by event_date) as rn from activity) t where t.rn=1)u group by u.event_date order by event_date
with Date_cte as ( select player_id, min(event_date) as install_dt from Activity group by player_id ), Retention_cte as ( select a.player_id from Activity as a join Date_cte as d on a.player_id = d.player_id and a.event_date = DATE_ADD(d.install_dt, interval 1 day) ) select d.install_dt, count(d.player_id) as installs, Round((1.0 * count(r.player_id)) / count(d.player_id), 2) as Day1_retention from Date_cte as d left join Retention_cte as r on d.player_id = r.player_id group by d.install_dt order by d.install_dt
with a as (SELECT player_id, min(event_date) as install_dt FROM Activity GROUP BY player_id) , b as (SELECT t.event_date, ifnull(count(t.player_id),0) as ct FROM a left join Activity t ON t.player_id = a.player_id WHERE t.event_date = a.install_dt+1 GROUP BY t.event_date) SELECT install_dt, count(*) as installs, round(ifnull(b.ct,0)/count(*),2) as day1_retention FROM a LEFT JOIN b ON a.install_dt = b.event_date-1 GROUP BY install_dt
with a as (select player_id,min(event_date) as event_date from activity group by player_id) select a.event_date as install_dt, count(distinct a.player_id) as installs, round(count(distinct a1.player_id)/count(distinct a.player_id),2) as day1_retention from a left join activity a1 on a.event_date+1=a1.event_date and a.player_id=a1.player_id group by a.event_date
with a as( select rank() over(partition by player_id order by event_date asc) as r, player_id, event_date from Activity), b as( select a1.player_id, a1.event_date as install_dt, if(a2.r is null, 0, 1) as retention from a a1 left join a a2 on a1.player_id = a2.player_id and a1.event_date = a2.event_date -1 where a1.r = 1) select install_dt, count(player_id) as installs, round(ifnull(sum(retention)/count(player_id), 0), 2) as Day1_retention from b group by install_dt
with activity1 as (select *, rank() over (partition by player_id order by event_date) as rnk from activity) select D1 as install_dt, count(D1) as installs, round(count(D2)/count(D1),2) as Day1_retention from (select a.player_id,a.event_date as D1,b.event_date AS D2 from activity1 a left join activity1 b on a.player_id=b.player_id and datediff(b.event_date,a.event_date)=1 where a.rnk=1)c GROUP BY 1
with c as ( select player_id , event_date , dense_rank() over (partition by player_id order by event_date) dseq from Activity ) select c1.event_date as install_dt , count(c1.dseq) as installs ,round(1.0*count(c2.dseq)/count(c1.dseq),2) as Day1_retention from c c1 left join c c2 on c1.player_id = c2.player_id and c2.dseq = 2 and datediff(c2.event_date,c1.event_date) = 1 where c1.dseq = 1 group by c1.event_date order by 1
with cte as ( Select player_id, event_date, lead(event_date) over (partition by player_id order by event_date) next , rank() over (partition by player_id order by event_date) rnk from Activity ) Select b.event_date as install_dt, denom as installs, round(ifnull(num,0)/denom,2) Day1_retention from ( Select event_date, count(player_id) num from cte where date_add(event_date,interval 1 day) = next and rnk = 1 group by event_date ) a right join ( Select event_date, count(player_id) denom from cte where rnk = 1 group by event_date ) b on a.event_date = b.event_date
with cte as ( select a1.player_id, a1.install_dt, a2.event_date as 'next_day' from ( select player_id, min(event_date) as 'install_dt' from Activity group by player_id) a1 left join Activity a2 on a1.player_id = a2.player_id and a1.install_dt = a2.event_date - 1) select install_dt, count(player_id) as 'installs', round(count(next_day)/count(player_id),2) as 'Day1_retention' from cte group by install_dt
with cte as ( select distinct min(event_date) as e_date, player_id from Activity group by player_id) select e_date as install_dt, count(distinct a.player_id) as installs, round(count(distinct case when event_date= e_date+1 then a.player_id end)/ count(distinct a.player_id), 2) as Day1_retention from Activity as a, cte as b where a.player_id = b.player_id group by 1
with cte as ( select distinct player_id, first_value(event_date) over(partition by player_id order by event_date) as install_date from activity ), cte2 as ( select cte.*, if(a.event_date, 1, 0) as retension from cte left join activity a on cte.player_id = a.player_id and cte.install_date = date_sub(a.event_date, interval 1 day) ) select install_date as install_dt, count(player_id) as installs, round(sum(retension)/count(player_id),2) as Day1_retention from cte2 group by install_date
with cte as ( select min(event_date) as install_dt, player_id from Activity group by 2 ) select install_dt, count(a1.player_id) as installs, round(count(a2.player_id)/count(a1.player_id), 2) as Day1_retention from cte a1 left join Activity a2 on a1.install_dt = date_sub(a2.event_date, interval 1 day) and a1.player_id = a2.player_id group by 1
with cte as ( select min(event_date) as install_dt, player_id from Activity group by player_id ) select install_dt, count(a1.player_id) as installs, round(count(a2.player_id)/count(a1.player_id), 2) as Day1_retention from cte a1 left join Activity a2 on a1.install_dt = date_sub(a2.event_date, interval 1 day) and a1.player_id = a2.player_id group by install_dt
with cte as ( select player_id, event_date, rank() over(partition by player_id order by event_date) as rnk, lead(event_date) over(partition by player_id order by event_date asc) as next_date from Activity ) select event_date as install_dt, installs, round(ifnull(retention/installs, 0), 2) as Day1_retention from ( select event_date, sum(case when rnk = 1 then 1 else 0 end ) as installs, sum(case when rnk = 1 and next_date = date_add(event_date, interval 1 day) then 1 else 0 end) as retention from cte where rnk = 1 group by event_date )t
with cte as ( select player_id, event_date, rank() over(partition by player_id order by event_date) as rnk1, coalesce(lead(event_date) over(partition by player_id order by event_date), event_date ) as lead_date from activity ), cte2 as ( select player_id, event_date,lead_date, case when (lead_date -event_date) = 1 then 1 else 0 end as day_ret from cte where rnk1 = 1 ) select event_date as install_dt, count(player_id) as installs, round(sum(day_ret)/count(player_id), 2) as Day1_retention from cte2 group by event_date
with cte as ( select player_id, event_date, row_number() over(partition by player_id order by event_date) rn from Activity ) select * from ( select event_date as install_dt, count(player_id) as installs, round(coalesce(count(id2) / count(player_id), 0), 2) as Day1_retention from ( select c1.event_date, c1.rn, CASE WHEN c1.rn = 1 THEN c1.player_id ELSE null END as player_id, CASE WHEN c1.rn = 1 THEN c2.player_id ELSE null END as id2 from cte c1 left join cte c2 on c1.player_id = c2.player_id and DATE_ADD(c1.event_date, INTERVAL 1 DAY) = c2.event_date ) temp group by install_dt ) temp2 where installs > 0 order by install_dt
with cte as ( select player_id, min(event_date) as install_date from activity group by player_id ), cte2 as ( select distinct cte.player_id as installed, a.player_id as returned, cte.install_date from cte left join activity a on adddate(a.event_date ,interval -1 DAY)=cte.install_date and cte.player_id=a.player_id ) select install_date as install_dt, count(installed) as installs, round(count(returned)/count(installed),2) as day1_retention from cte2 group by install_date
with cte as ( select player_id, min(event_date) as install_date from activity group by player_id) select install_date as install_dt, count(cte.player_id) as installs, round(avg(case when a.player_id then 1 else 0 end),2) as Day1_retention from cte left join activity as a on cte.player_id = a.player_id and date_add(cte.install_date, interval 1 day) = event_date group by install_date
with cte as ( select player_id, min(event_date) as install_dt from activity group by 1 ) select a1.install_dt, count(a1.player_id) as installs, round(count(a2.player_id)/count(a1.player_id),2) as Day1_retention from cte a1 left join activity a2 on a1.install_dt = date_sub(a2.event_date, interval 1 day) and a1.player_id = a2.player_id group by 1
with cte as ( select player_id, min(event_date) as install_dt from activity group by player_id ), cte2 as ( select install_dt, count(player_id) as installs from cte group by install_dt ), cte3 as ( select count(a.player_id) as cnt, c.install_dt from activity a join cte c on a.event_date = c.install_dt + 1 and a.player_id = c.player_id group by c.install_dt ) select cte2.install_dt, cte2.installs, round(ifnull((cte3.cnt/cte2.installs),0),2) as Day1_retention from cte2 left join cte3 on cte2.install_dt = cte3.install_dt
with cte as ( select player_id,event_date,rank() over (partition by player_id order by event_date) as rn from activity ),cte1 as ( select t1.event_date,t1.player_id as t1p,case when t2.player_id is null then 0 else 1 end as t2p from (select event_date,player_id from cte where rn = 1)t1 left join (select event_date,player_id from cte where rn = 2 )t2 on t1.player_id = t2.player_id and date_add(t1.event_date,interval 1 day) = t2.event_date ) select event_date as install_dt,count(*) as installs,round(sum(t2p)/count(*),2) as Day1_retention from cte1 group by event_date
with cte as (select * from (select player_id,event_date, rank() over(partition by player_id order by event_date) as rnk from activity)t1 where rnk<3) , cte2 as (select player_id, max(case when rnk=1 then event_date end) as install_date, max(case when rnk=2 then event_date end) as day2 from cte group by player_id) select install_date as install_dt,count(player_id) as installs, round((sum(case when day2 is not null and Datediff(day2,install_date)=1 then 1 else 0 end)/count(distinct player_id)),2) as Day1_retention from cte2 group by install_date order by install_date
with cte as (select *, dense_rank() over (partition by player_id order by event_date) as RK from activity) select distinct c.min_dt as install_dt, count(*)as installs, round(sum(date_1)/count(*),2) as day1_retention from ( (select a.player_id, a.min_dt, b.sec_dt, case when abs(datediff(a.min_dt, b.sec_dt))=1 then 1 else 0 end as date_1 from (select distinct player_id, event_date as min_dt from cte where RK=1) a left join (select distinct player_id, event_date as sec_dt from cte where RK =2) b on a.player_id=b.player_id) )c group by 1
with cte as (select a1.player_id, a1.event_date as first_login, a2.event_date as second_login, rank()over(partition by a1.player_id order by a1.event_date) as ranking from Activity a1 left join Activity a2 on a1.player_id = a2.player_id and datediff(a2.event_date,a1.event_date) = 1), cte_1 as (select player_id, first_login, second_login from cte where ranking = 1) select first_login as install_dt, count(*) as installs, round(count(second_login)/count(first_login),2) as Day1_retention from cte_1 group by first_login
with cte as (select min(event_date) as install_dt, player_id from activity group by player_id) select a.install_dt, count(a.player_id) as installs, round(ifnull((b_player/count(a.player_id)),0),2) as Day1_retention from cte a left join (select count(player_id) as b_player, event_date from activity where (player_id, event_date) in (select player_id, date_add(install_dt, interval 1 day) from cte) group by event_date) b on a.install_dt=date_add(b.event_date, interval -1 day) group by a.install_dt
with cte as (select player_id , min(event_date) as install_dt from activity group by player_id) select install_dt, count( distinct b.player_id) as installs , round(sum(case when (datediff(a.event_date, b.install_dt)=1) then 1 else 0 end) / (count( distinct b.player_id)),2) as Day1_retention from cte b join activity a on b.player_id = a.player_id group by install_dt
with cte as (select player_id, event_date , LEAD(event_date,1) OVER(partition by player_id order by event_date) as next_day, ROW_NUMBER() OVER(partition by player_id order by event_date) as rownum from Activity ) select event_date as install_dt, count(distinct player_id) as installs , Round(sum(case when datediff(next_day,event_date)=1 then 1 else 0 end)/count(distinct player_id), 2) as Day1_retention from cte where rownum=1 group by install_dt
with cte as (select player_id, min(event_date) as install_dt from Activity group by 1) select a.install_dt, count(a.player_id) as installs, round(count(b.player_id)/count(a.player_id),2) as Day1_retention from cte a left join Activity b on a.player_id = b.player_id and a.install_dt = b.event_date - 1 group by 1
with cte as( select *, min(event_date) over(partition by player_id) as install_dt, lead(event_date) over(partition by player_id order by event_date) as next_date, row_number() over(partition by player_id order by event_date) as rnk from activity ) select install_dt, count(distinct player_id) as installs, round(sum(case when next_date = event_date+1 then 1 else 0 end)/count(*),2) as Day1_retention from cte where rnk = 1 group by 1 order by 1
with cte as( select event_date, player_id from( select event_date, player_id, row_number() over(partition by player_id order by event_date) as rn from Activity ) temp where rn = 1 ), cte2 as( select a.event_date as event_date1, b.event_date as event_date2, a.player_id from cte a left join Activity b on a.player_id = b.player_id and b.event_date - a.event_date = 1 ) select event_date1 as install_dt, count(player_id) as installs, round(sum(case when event_date2 is not null then 1 else 0 end)/count(player_id),2) as Day1_retention from cte2 group by event_date1
with cte1 as ( select * from Activity where (player_id,event_date) in (select player_id,min(event_date) from activity group by 1) ), cte2 as ( select cte1.event_date,count(*) as retention_count from cte1 join activity a on cte1.player_id=a.player_id where datediff(a.event_date, cte1.event_date)=1 group by 1 ) select cte1.event_date as install_dt,count(cte1.player_id) as installs, round(ifnull(cte2.retention_count/count(cte1.player_id),0),2) as Day1_retention from cte1 left join cte2 on cte1.event_date=cte2.event_date group by 1 order by 1
with cte1 as ( select * from activity where (player_id, event_date) in (select player_id, min(event_date) from activity group by 1)), cte2 as ( select c1.event_date, count(*) as retention from cte1 c1 join activity a on c1.player_id=a.player_id where datediff(a.event_date, c1.event_date)=1 group by 1) select c1.event_date as install_dt, count(c1.player_id) as installs, round(ifnull(retention/count(c1.player_id),0),2) as Day1_retention from cte1 c1 left join cte2 c2 on c1.event_date=c2.event_date group by 1 order by 1
with cte1 as ( select event_date as install_dt, count(player_id) as installs from ( select event_date, player_id, row_number() over(partition by player_id order by event_date) as row_num from activity ) tmp where row_num=1 group by 1 ), cte2 as ( select a.install_dt, sum(case when date_sub(b.event_date, interval 1 day)= a.install_dt then 1 else 0 end) as day1retention from (select event_date as install_dt, player_id, row_number() over(partition by player_id order by event_date) as row_num from activity ) as a left join activity as b on a.player_id=b.player_id where a.row_num=1 group by 1 ) select a.install_dt, a.installs, round(b.day1retention/a.installs,2) as Day1_retention from cte1 as a inner join cte2 as b on a.install_dt=b.install_dt
with cte1 as ( select player_id, min(event_date) as event_date from Activity group by player_id ), cte2 as ( select c1.player_id, c1.event_date from cte1 c1 join Activity a1 on c1.player_id=a1.player_id where c1.event_date=a1.event_date and (select a2.event_date from Activity a2 where a2.event_date=c1.event_date+1 and a2.player_id=c1.player_id) is not null ), cte3 as ( select c1.event_date as install_dt, count(c1.player_id) as installs, round((select count(c2.player_id) from cte2 c2 where c2.event_date=c1.event_date)/count(c1.player_id),2) as Day1_retention from cte1 c1 group by c1.event_date ) select * from cte3
with cte1 as ( select player_id, min(event_date) as install_date from Activity group by 1 ), cte2 as ( select cte1.player_id, install_date, case when event_date is null then 0 else 1 end as retention from cte1 left join Activity on cte1.player_id = Activity.player_id and install_date + 1 = event_date ) select install_date as install_dt, count(distinct player_id) as installs, round(avg(retention) ,2) as Day1_retention from cte2 group by 1 order by 1
with cte1 as (select * from (select player_id, event_date, rank() over(partition by player_id order by event_date) as rnk, lead(event_date, 1) over(partition by player_id order by event_date) as next_day from activity) t where rnk = 1) select event_date as install_dt, count(distinct player_id) as installs, (round(sum(case when event_date = next_day-1 then 1 else 0 end)/ count(distinct player_id),2)) as Day1_retention from cte1 group by 1
with cte1 as (select player_id, min(event_date) as install_dt from activity group by player_id), cte2 as (select player_id, install_dt, (case when (player_id, install_dt + interval 1 day) in (select player_id, event_date from activity) then 'yes' else 'no' end) as returned from cte1) select install_dt, count(player_id) as installs, round(sum(case when returned = 'yes' then 1 else 0 end) / count(player_id), 2) as day1_retention from cte2 group by install_dt order by install_dt asc
with cte1 as (select player_id, min(event_date) as install_dt from activity group by player_id), cte2 as (select player_id, install_dt, (case when (player_id, install_dt + interval 1 day) in (select player_id, event_date from activity) then 'yes' else 'no' end) as returned from cte1) select install_dt, count(player_id) as installs, round(sum(returned = 'yes') / count(player_id), 2) as day1_retention from cte2 group by install_dt
with day1retained as ( select a.event_date, count(a.player_id) as X from ( select player_id, event_date, lead(event_date, 1) over (partition by player_id order by event_date) as next_date, DENSE_RANK() OVER (partition by player_id order by event_date) as dateorder from Activity ) as a where a.dateorder=1 and if(ifnull(a.next_date, 0)=adddate(a.event_date, 1), true, false) group by a.event_date ), day1logins as ( select b.event_date, count(b.player_id) as X from ( select player_id, event_date, DENSE_RANK() OVER (partition by player_id order by event_date) as dateorder from Activity ) as b where b.dateorder=1 group by b.event_date ) select day1logins.event_date as install_dt, day1logins.X as installs, round(ifnull(day1retained.X, 0)/day1logins.X, 2) as Day1_retention from day1logins left join day1retained on day1logins.event_date=day1retained.event_date
with earliest_date as ( select * from ( select *, rank() over (partition by player_id order by event_date) rn from activity ) a where rn = 1 ), retained as ( select b.event_date as install_dt, count(distinct b.player_id) as day1_retained from activity a inner join earliest_date b on a.player_id = b.player_id and date_add(b.event_date, interval 1 day) = a.event_date group by b.event_date ), installed_on_first_day as ( select b.event_date as install_dt, count(distinct b.player_id) as installed_on_first_day from activity a inner join earliest_date b on a.player_id = b.player_id and b.event_date = a.event_date group by b.event_date ), agg_activity as ( select a.event_date as install_dt, count(distinct a.player_id) as installs from activity a inner join earliest_date b using (player_id, event_date) group by a.event_date ) select a.install_dt, a.installs, coalesce(round(b.day1_retained/c.installed_on_first_day, 2), 0) as Day1_retention from agg_activity a left join retained b using(install_dt) left join installed_on_first_day c using(install_dt)
with first_activity as ( select player_id, event_date as install_dt from ( select player_id ,event_date , rank ( ) over ( Partition by player_id order by event_date ) as rank_num from Activity ) a where rank_num = 1 ) select install_dt, count( distinct a.player_id ) as installs, round (count(case when event_date -1 = install_dt then a.player_id end ) /count( distinct a.player_id ) , 2) as Day1_retention from Activity b left join first_activity a on b.player_id = a.player_id group by install_dt
with first_day as ( select player_id, event_date, rank() over (partition by player_id order by event_date) "date_rank" from activity group by 1, 2 ) select f.event_date "install_dt", count(f.player_id) "installs", round(count(a.player_id) / count(f.player_id), 2) "day1_retention" from first_day f left join activity a on f.event_date = date_sub(a.event_date, interval 1 day) and f.player_id = a.player_id where f.date_rank = 1 group by 1
with first_day as ( select player_id, event_date, rank() over (partition by player_id order by event_date) "date_rank" from activity group by 1, 2 ) select install_dt, installs, round(second_day_count / installs, 2) "day1_retention" from (select f.event_date "install_dt", count(f.player_id) "installs", count(a.player_id) "second_day_count" from first_day f left join activity a on f.event_date = date_sub(a.event_date, interval 1 day) and f.player_id = a.player_id where f.date_rank = 1 group by 1 ) result_table
with first_install as ( select player_id, min(event_date) as first_date from Activity group by player_id) select a.first_date as install_dt, count(a.player_id) as installs, round(count(b.player_id)/count(a.player_id),2) as Day1_retention from first_install as a left join Activity as b on a.player_id = b.player_id and b.event_date=DATE_ADD(a.first_date, INTERVAL 1 DAY) group by a.first_date order by count(a.player_id) desc
with first_login as ( select player_id , min(event_date) as first_login , date_add(min(event_date), interval 1 day) as theNextDay from activity group by player_id ) select fl.first_login as install_dt , count(fl.first_login) as installs , round(count(a.event_date)/count(fl.first_login), 2) as day1_retention from activity a right join first_login fl on a.event_date=theNextDay and a.player_id=fl.player_id group by 1
with first_login as ( select player_id , min(event_date) as first_login from activity group by player_id ) select fl.first_login as install_dt , count(fl.first_login) as installs , round(count(a.event_date)/count(fl.first_login), 2) as day1_retention from activity a right join first_login fl on a.event_date=date_add(first_login, interval 1 day) and a.player_id=fl.player_id group by 1
with first_login as ( select player_id, min(event_date) as first_event_date from Activity group by player_id ) , consecutive_second_login as ( select a.player_id, f.first_event_date from Activity a inner join first_login f on a.player_id = f.player_id and a.event_date = date_add(f.first_event_date, interval 1 day) group by a.player_id, f.first_event_date ) , count_users_by_event_date as ( select first_event_date,count(*) as usercount from first_login group by first_event_date ) , count_consecutive_secondlogin_users_by_event_date as ( select first_event_date,count(*) as secondusercount from consecutive_second_login group by first_event_date ) select c.first_event_date as install_dt , c.usercount as installs , round(coalesce(c2.secondusercount,0)/c.usercount,2) as Day1_retention from count_users_by_event_date c left join count_consecutive_secondlogin_users_by_event_date c2 on c.first_event_date = c2.first_event_date
with first_login as ( select player_id,min(event_date) as install_date from activity group by 1), day1 as ( select f.player_id,f.install_date from first_login f join activity a on f.player_id=a.player_id and datediff(a.event_date,f.install_date)=1 ) select f.install_date as install_dt,count(f.player_id) as installs,round(count(day1.player_id)/count(f.player_id),2) as Day1_retention from first_login f left join day1 on day1.player_id=f.player_id and f.install_date=day1.install_date group by 1
with first_login as (select player_id, min(event_date) as install_dt from Activity a1 group by player_id) select install_dt, count(distinct f.player_id) as installs, round(count(distinct a.player_id)/count(distinct f.player_id),2) as Day1_retention from first_login f left join Activity a on f.install_dt = date_sub(a.event_date,interval 1 day) and f.player_id = a.player_id group by 1
with first_login_cte as ( select player_id,event_date, min(event_date) install_dt from activity group by 1 ) select install_dt, count(distinct f.player_id) installs, round(sum(case when datediff(a.event_date,f.install_dt)=1 then 1 else 0 end)/count(distinct f.player_id),2) as day1_retention from first_login_cte f join activity a on f.player_id = a.player_id group by 1
with i as ( SELECT event_date As install_dt, COUNT(player_id) As installs FROM (SELECT player_id, event_date FROM (SELECT player_id, event_date, ROW_NUMBER() OVER(PARTITION BY player_id ORDER BY event_date) As 'rnk' FROM Activity) As t0 WHERE rnk=1) As t1 GROUP BY event_date), l as ( SELECT install_dt, log_back_dt, COUNT(IF(DATEDIFF(log_back_dt, install_dt)=1, player_id, NULL)) As 'dividend' FROM (SELECT i1.player_id, l1.log_back_dt, i1.install_dt FROM (SELECT player_id, event_date As log_back_dt FROM (SELECT player_id, event_date, ROW_NUMBER() OVER(PARTITION BY player_id ORDER BY event_date) As 'rnk' FROM Activity) As t2 WHERE rnk=2) As l1 RIGHT JOIN (SELECT player_id, event_date As install_dt FROM (SELECT player_id, event_date, ROW_NUMBER() OVER(PARTITION BY player_id ORDER BY event_date) As 'rnk' FROM Activity) As t3 WHERE rnk=1) As i1 ON l1.player_id=i1.player_id) As t4 GROUP BY install_dt) SELECT i.install_dt, i.installs, ROUND(l.dividend/i.installs,2) As 'Day1_retention' FROM i LEFT JOIN l ON i.install_dt = l.install_dt
with idt as ( select player_id, min(event_date) as install_dt from activity group by player_id ), ret as ( select idt.*, event_date from idt left join activity a on idt.player_id = a.player_id and idt.install_dt + interval 1 day = a.event_date ) select install_dt, count(*) as installs, round(count(event_date)/count(*)*1.0,2) as Day1_retention from ret group by install_dt order by install_dt
with in_dt as ( select player_id, min(event_date) as first_login from activity a group by 1 ) , retent as ( select distinct i.player_id, first_login from in_dt i inner join activity a on a.player_id = i.player_id and date_add(i.first_login, interval 1 day) = a.event_date ) select i.first_login as install_dt, count(distinct i.player_id) as installs, round(count(distinct r.player_id)/count(distinct i.player_id),2) as Day1_retention from in_dt i left join retent r on r.player_id = i.player_id group by 1 order by 1 asc
with inst as ( select player_id, min(event_date) as install_date from activity group by 1 ) , retention as ( select i.player_id, i.install_date from inst i left join activity a on i.player_id = a.player_id where a.event_date - i.install_date = 1 ) select l.install_date as install_dt, count(distinct l.player_id) as installs, round( (count(distinct r.player_id) / count(distinct l.player_id)),2) as Day1_retention from inst l left join retention r on l.player_id = r.player_id group by 1
with install as (select player_id,min(event_date) as install_dt from activity group by player_id) select install_dt, count(player_id) as installs, round( sum(case when (player_id,date_add(install_dt,interval 1 day)) in (select player_id,event_date from activity) then 1 else 0 end) / count(player_id) , 2 ) as Day1_retention from install group by install_dt order by install_dt
with install as( select player_id, min(event_date) as installdate from activity group by 1 ) select installdate as install_dt, count(i.player_Id) as installs, round(ifnull(count(a.player_id),0)/count(i.player_Id),2) as Day1_retention from install i left join activity a on i.player_id = a.player_id and event_date=date_add(installdate,interval 1 day) group by installdate
with install_activity as ( select player_id ,min(event_date) as install_date from Activity group by player_id ),count_retention as( select iact.install_date as install_date ,count(act.player_id) as cnt from Activity act join install_activity iact on act.player_id = iact.player_id and act.event_date = date_add(iact.install_date,interval 1 day) group by install_date ) select ia.install_date as install_dt ,count(ia.install_date) as installs ,round(ifnull(cr.cnt,0)/count(ia.install_date),2) as Day1_retention from install_activity ia left join count_retention cr on ia.install_date = cr.install_date group by install_dt
with install_activity as ( select player_id ,min(event_date) as install_date from Activity group by player_id ),count_retention as( select iact.install_date as install_date ,count(act.player_id) as cnt from Activity act join install_activity iact on act.player_id = iact.player_id and act.event_date = date_add(iact.install_date,interval 1 day) group by install_date ) select ia.install_date as install_dt ,count(ia.player_id) as installs ,round(ifnull(cr.cnt,0)/count(ia.player_id),2) as Day1_retention from install_activity ia left join count_retention cr on ia.install_date = cr.install_date group by install_dt
with install_date as ( select player_id,min(event_date) as install_dt from Activity group by player_id) select install_dt,sum(if(i.install_dt=a.event_date,1,0)) as installs, round(sum(if(a.event_date=date_add(i.install_dt,interval 1 day),1,0))/sum(if(i.install_dt=a.event_date,1,0)),2) as Day1_retention from Activity a join install_date i on a.player_id=i.player_id group by install_dt
with install_date as (select player_id, min(event_date) as install_dt from activity group by player_id), retain as (select player_id, install_dt, (case when (player_id, install_dt + interval 1 day) in (select player_id, event_date from activity) then 'Y' else 'N' end) as retain from install_date) select install_dt, count(install_dt) as installs, round(sum(case when retain = 'Y' then 1 else 0 end)/count(install_dt), 2) as Day1_retention from retain group by install_dt
with install_dt as ( select player_id, min(event_date) as install_date from Activity group by 1 ), install_num as ( select install_date, count(distinct player_id) as installs from install_dt group by 1 ), ret as ( select install_date, count(distinct install_dt.player_id) as return_n from Activity inner join install_dt on Activity.player_id = install_dt.player_id and DATEDIFF(Activity.event_date, install_dt.install_date) = 1 group by 1 ) select install_num.install_date as install_dt, installs, ifnull(round(return_n/installs,2),0.00) as Day1_retention from install_num left join ret on install_num.install_date = ret.install_date order by 1
with install_dt as (select distinct event_date as install_dt, player_id from (select player_id, event_date ,dense_rank() over(partition by player_id order by event_date asc ) as rank_ from Activity) as tmp where rank_ = 1) select t1.install_dt, count(t1.player_id) as installs, round(count(t2.player_id)*1.0/count(t1.player_id),2) as Day1_retention from install_dt as t1 left join activity as t2 on t1.player_id = t2.player_id and date_add(t1.install_dt, interval 1 day) = t2.event_date group by t1.install_dt
with installation as( select player_id, min(event_date) as event_date from activity group by player_id) select event_date as install_dt, count(*) as installs, round(sum( r_flag)/count(*),2) as Day1_retention from (select i.event_date, i.player_id, case when a.player_id is null then 0 else 1 end as r_flag from installation i left join activity a on i.player_id =a.player_id and a.event_date-i.event_date = 1) temp group by event_date
with installdate as ( select player_id,min( event_date) as install_date from Activity group by player_id ), numplayer as ( select install_date, count(distinct player_id) as installs from installdate group by install_date ), retention as ( select event_date, lead(event_date, 1) over(partition by player_id order by event_date) as next_login_date, player_id from Activity ) select install_date as install_dt, installs, round( IFNULL(day1_logins / installs, 0 ), 2 ) as Day1_retention from numplayer left join ( select event_date, count(distinct i.player_id) as day1_logins from retention r right join installdate i on r.event_date = i.install_date and r.player_id = i.player_id where datediff(next_login_date, event_date) = 1 and i.player_id is not null group by event_date )t on numplayer.install_date = t.event_date order by numplayer.install_date
with installdate as( select player_id ,min(event_date) as install_date from Activity group by player_id ) select ins.install_date as install_dt ,count(ins.player_id) as installs ,round(sum(case when act.event_date is not null then 1 else 0 end)/count(ins.player_id),2) as Day1_retention from installdate ins left join Activity act on datediff(act.event_date,ins.install_date)=1 and ins.player_id = act.player_id group by ins.install_date
with installdateplayer as (Select player_id, min(event_date) as install_date from Activity group by player_id) select installdateplayer.install_date as install_dt, count(1) as installs,ROUND(COALESCE(temp.retention,0)/count(1),2) as Day1_retention from installdateplayer left outer join (select i2.install_date,count(i2.player_id) as retention from installdateplayer i2 inner join Activity on Activity.player_id = i2.player_id and DATE_ADD(i2.install_date, INTERVAL 1 DAY) = Activity.event_date group by i2.install_date) temp on installdateplayer.install_date = temp.install_date group by installdateplayer.install_date
with installday as (select player_id, min(event_date) as install_dt from Activity group by 1) select install_dt, count(distinct player_id) as installs, round(count(distinct userid_retent)*1.0/count(distinct player_id), 2) as Day1_retention from ( select a.*, b.player_id as userid_retent from installday a left join Activity b on a.install_dt = date_add(event_date, interval -1 day) and a.player_id = b.player_id ) temp group by 1
with installdt as (select player_id, min(event_date) as install_dt from Activity group by player_id ), day1 as (select Activity.player_id, installdt.install_dt from Activity inner join installdt on Activity.player_id = installdt.player_id AND date_sub(Activity.event_date, interval 1 day) = installdt.install_dt ) select installdt.install_dt, count(installdt.player_id) as installs, round(count(day1.player_id)/count(installdt.player_id),2) as Day1_retention from installdt left join day1 on day1.install_dt = installdt.install_dt AND day1.player_id = installdt.player_id group by installdt.install_dt
with installed as (select player_id, min(event_date) as install_date from activity group by 1), retention as (select install_date, a1.player_id first_day, a2.player_id next_day from installed a1 left join activity a2 on a1.player_id = a2.player_id and a1.install_date + 1 = a2.event_date ) select install_date as install_dt, count(first_day) as installs, round(count(next_day) / count(first_day) ,2) as Day1_retention from retention group by 1
with installs as ( select * from ( select *, row_number() over(partition by player_id order by event_date) as rn from activity ) a where rn = 1 ) ,install_cnt as( select event_date, count(1) from installs group by 1) select i.event_date as install_dt, count(i.player_id) as installs, round(coalesce(sum((a.player_id is not null))/ count(i.player_id) ,0),2) as Day1_retention from installs i left join activity a on(i.player_id = a.player_id and datediff(a.event_date, i.event_date) = 1) group by 1
with installs as (select player_id, min(event_date) as date from activity group by 1) select date as install_dt, count(i.player_id) as installs, round(count(a.player_id)/count(i.player_id), 2) as Day1_retention from installs i left join activity a on i.player_id = a.player_id and i.date = a.event_date - 1 group by 1 order by 1
with ist as ( select player_id, min(event_date) as install_date from activity group by player_id ) select i.install_date install_dt, count(i.player_id) installs, round(count(a.player_id) /count(i.player_id),2) as Day1_retention from ist i left join activity a on i.player_id = a.player_id and date_add(i.install_date,interval 1 day) = a.event_date group by i.install_date
with min_date as ( select player_id, event_date, min(event_date) over(partition by player_id order by event_date) as install_dt from activity ) select install_dt, count(distinct player_id) as installs, round(count(case when datediff(event_date,install_dt)=1 then 1 end)/count(distinct player_id), 2) as Day1_retention from min_date group by install_dt
with min_date as ( select player_id,min(event_date) as min_day from activity group by player_id) select b.min_day as install_dt,count(b.player_id) as installs, round(count(a.player_id)/count(b.player_id),2) as Day1_retention from activity a right join min_date b on a.event_date=b.min_day+1 and a.player_id=b.player_id group by 1
with player_dates as ( select distinct player_id ,event_date ,first_value(event_date) over (partition by player_id order by event_date) as install_dt from Activity ) ,players as ( select player_id ,install_dt ,case when event_date = install_dt + 1 then player_id else NULL end as retained_player_id from player_dates ) select install_dt ,count(distinct player_id) as installs ,round(count(distinct retained_player_id)/count(distinct player_id),2) as Day1_retention from players group by 1 order by 1
with prep as ( select * , row_number()over(partition by player_id order by event_date) rn , if( datediff(lead(event_date,1)over(partition by player_id order by event_date), event_date) =1, 1,0) isLoginNextDay from activity ) select event_date install_dt , count(distinct player_id) installs , round(sum(isLoginNextDay)/count(distinct player_id),2) Day1_retention from prep where rn=1 group by event_date
with prep as ( select * , row_number()over(partition by player_id order by event_date) rn , if( datediff(lead(event_date,1)over(partition by player_id order by event_date), event_date) =1, 1,0) isLoginNextDay from activity ) select event_date install_dt , count(distinct player_id) installs , round(sum(isLoginNextDay)/count(distinct player_id),2) Day1_retention from prep where rn=1 group by install_dt
with prep as ( select *, min(event_date)over(partition by player_id order by event_date) install_dt, lead(event_date, 1)over(partition by player_id order by event_date) nextDay, row_number()over(partition by player_id order by event_date)rn from activity ) select install_dt, count(*) as installs, round(sum(case when nextDay is not null and datediff(nextDay,install_dt)=1 then 1 else 0 end )/count(*),2) as Day1_retention from prep where rn=1 group by install_dt
with prep as( select *, row_number() over(partition by player_id order by event_date) rnk, if( datediff(lead(event_date,1) over(partition by player_id order by event_date), event_date)=1,1,0 ) NextDayLogin from Activity ) select event_date install_dt, count(distinct player_id) installs, round(sum(NextDayLogin)/count(distinct player_id),2) Day1_retention from prep where rnk =1 group by install_dt
with ranked_event_date as( select player_id, event_date, rank() over(partition by player_id order by event_date) as event_date_rank from Activity ) select date1 as install_dt, count(day_one.player_id) as installs, round(sum(case when DATEDIFF(date2,date1)=1 then 1 else 0 end)/count(day_one.player_id),2) as Day1_retention from( select event_date as date1, player_id from ranked_event_date where event_date_rank = 1 ) as day_one left join ( select event_date as date2, player_id from ranked_event_date where event_date_rank = 2 ) as day_two on day_one.player_id = day_two.player_id group by date1
with retention as ( select player_id, event_date, lead(event_date, 1) over(partition by player_id order by event_date) next_date, row_number() over(partition by player_id order by event_date) rownum from activity ) select event_date as install_dt, count(distinct player_id) as installs, round((sum(case when (next_date - event_date = 1) then 1 else 0 end) / count(distinct player_id)), 2) as Day1_retention from retention where rownum = 1 group by install_dt
with retention as( select player_id, install_dt from (select player_id, event_date, min(event_date) over(partition by player_id) as install_dt from activity) t where event_date - install_dt = 1 ), install_date as( select player_id, min(event_date) as install_dt from activity group by player_id ) select a.install_dt, count(a.player_id) as installs, round(count(b.player_id) / count(a.player_id), 2) as Day1_retention from install_date a left join retention b on a.install_dt = b.install_dt and a.player_id = b.player_id group by a.install_dt
with retention as( select player_id, install_dt from (select player_id, event_date, min(event_date) over(partition by player_id) as install_dt from activity) t where event_date - install_dt = 1 ), install_date as( select player_id, min(event_date) as install_dt from activity group by player_id ) select a.install_dt, count(a.player_id) as installs, round(count(b.player_id) / count(a.player_id), 2) as Day1_retention from install_date a left join retention b on a.player_id = b.player_id group by a.install_dt
with t as ( SELECT *, ROW_NUMBER() OVER(PARTITION BY player_id ORDER BY event_date) As 'rnk', IF( DATEDIFF(LEAD(event_date) OVER(PARTITION BY player_id ORDER BY event_date), event_date)=1, 1,0) As 'retention' FROM Activity ) SELECT event_date As install_dt, COUNT(DISTINCT player_id) As installs, ROUND(SUM(retention)/COUNT(DISTINCT player_id), 2) As 'Day1_retention' FROM t WHERE rnk=1 GROUP BY event_date
with t as ( SELECT player_id, event_date, ROW_NUMBER() OVER(PARTITION BY player_id ORDER BY event_date) As 'rnk', IF(DATEDIFF(LEAD(event_date) OVER(PARTITION BY player_id ORDER BY event_date),event_date)=1, 1, 0) As 'retention' FROM Activity ) SELECT event_date As install_dt, COUNT(DISTINCT player_id) As 'installs', ROUND(SUM(retention)/COUNT(DISTINCT player_id),2) As 'Day1_retention' FROM t WHERE rnk=1 GROUP BY event_date
with t1 as ( SELECT player_id, MIN(event_date) install_date FROM Activity GROUP BY player_id ), t2 as ( SELECT t1.player_id, t1.install_date, COALESCE(MIN(DATEDIFF(a.event_date, t1.install_date)), 0) NEXT_LOGIN_AFTER_DAYS FROM Activity a RIGHT OUTER JOIN t1 ON a.player_id=t1.player_id and a.event_date>t1.install_date GROUP BY a.player_id, t1.install_date ) SELECT install_date install_dt, COUNT(1) installs, ROUND(SUM(CASE WHEN NEXT_LOGIN_AFTER_DAYS=1 THEN 1 ELSE 0 END)/COUNT(1),2) Day1_retention FROM T2 GROUP BY install_date
with t1 as ( select player_id,event_date, row_number() over (partition by player_id order by event_date) as rk, min(event_date) over (partition by player_id order by event_date) as install_dt, lead(event_date,1) over(partition by player_id order by event_date) as nxt from activity )select distinct install_dt, count(distinct player_id) as installs, round(sum(case when nxt= install_dt+1 then 1 else 0 end)/count(distinct player_id),2)Day1_retention from t1 where rk = 1 group by install_dt order by install_dt
with t1 as (select player_id, min(event_date) as install_dt from activity group by 1), t2 as (select install_dt, count(distinct player_id) as installs from t1 group by 1), t3 as (select install_dt, count(distinct player_id) as retention from t1 where (player_id, date_add(install_dt, interval 1 day)) in (select player_id, event_date from activity) group by 1) select t2.install_dt, installs, round(ifnull(retention, 0)/installs, 2) as Day1_retention from t2 left join t3 on t2.install_dt = t3.install_dt
with t1 as (select player_id, min(event_date) as install_dt from activity group by player_id), t2 as (select install_dt, count(player_id) as installs from t1 group by install_dt), t3 as (select install_dt, count(*) as next_day_login from t1 where (player_id, date_add(install_dt, interval 1 day)) in (select player_id, event_date from activity) group by 1) select t2.install_dt, installs, round(ifnull(next_day_login/installs, 0), 2) as Day1_retention from t2 left join t3 on t2.install_dt = t3.install_dt
with t1 as( select *, row_number() over(partition by player_id order by event_date) as rnk, min(event_date) over(partition by player_id) as install_dt, lead(event_date,1) over(partition by player_id order by event_date) as nxt from Activity) select distinct install_dt, count(distinct player_id) as installs, round(sum(case when nxt=event_date+1 then 1 else 0 end)/count(distinct player_id),2) as Day1_retention from t1 where rnk = 1 group by 1 order by 1
with t1 as( select *, row_number() over(partition by player_id order by event_date) as rnk, min(event_date) over(partition by player_id) as install_dt, lead(event_date,1) over(partition by player_id order by event_date) as nxt from Activity) select distinct install_dt, count(distinct player_id) as installs, round(sum(case when nxt=install_dt+1 then 1 else 0 end)/count(distinct player_id),2) as Day1_retention from t1 where rnk = 1 group by 1 order by 1
with t1 as( select a.player_id, min(a.event_date) as install_dt, case when min(a.event_date)+1 in (select a1.event_date from Activity a1 where a1.player_id=a.player_id) then 1 else 0 end as sec_ind from Activity a group by player_id) select install_dt, count(player_id) as installs, round(sum(sec_ind)/count(player_id),2) as Day1_retention from t1 group by install_dt order by install_dt
with t2 as ( SELECT PLAYER_ID, MIN(CASE WHEN rnum = 1 THEN event_date ELSE NULL END) INSTALL_DT, MIN(CASE WHEN rnum = 2 THEN event_date ELSE NULL END) NEXT_LOGIN FROM ( SELECT PLAYER_ID, event_date, ROW_NUMBER() OVER ( PARTITION BY PLAYER_ID ORDER BY event_date ) rnum FROM Activity ) t1 WHERE rnum<=2 GROUP BY PLAYER_ID ) SELECT INSTALL_DT, count(1) installs, ROUND(SUM(CASE WHEN DATEDIFF(NEXT_LOGIN, INSTALL_DT)=1 THEN 1 ELSE 0 END)/count(1), 2) Day1_retention FROM T2 GROUP BY INSTALL_DT ORDER BY INSTALL_DT
with tb1 as ( select player_id, min(event_date) install_dt from Activity group by 1) select install_dt, count(a1.player_id) as installs, round(count(a2.player_id)/count(a1.player_id), 2) as Day1_retention from tb1 a1 left join Activity a2 on a1.install_dt = date_sub(a2.event_date, interval 1 day) and a1.player_id = a2.player_id group by 1
with tb1 as (select player_id, event_date, rank()over(partition by player_id order by event_date asc) as rk from activity) ,tb2 as ( select event_date, count(player_id) as install from tb1 where rk=1 group by event_date) , tb3 as( select a.event_date,count(a.player_id) as ret from tb1 a, tb1 b where a.player_id=b.player_id and a.event_date+1=b.event_date and a.rk=1 group by a.event_date) select tb2. event_date as install_dt, install as installs, round(ifnull(ret/install,0),2) as Day1_retention from tb2 left join tb3 on tb2.event_date=tb3.event_date
with tbDate as ( select player_id, min(event_date) as event_date from activity group by player_id ), tbTCnt as ( select event_date, count(player_id) as installs from tbDate group by event_date ), tbCnt as ( select tbDate.event_date as install_dt, tbTCnt.installs, round(count(a2.player_id)/tbTCnt.installs,2) as Day1_retention from tbDate join tbTcnt on tbTcnt.event_date = tbDate.event_date left join activity as a2 on datediff(a2.event_date, tbDate.event_date) = 1 and a2.player_id = tbDate.player_id group by tbDate.event_date ) select * from tbCnt
with tbDate as ( select player_id, min(event_date) as event_date from activity group by player_id ), tbTCnt as ( select event_date, count(player_id) as installs from tbDate group by event_date ), tbCnt as ( select tbDate.event_date as install_dt, tbTCnt.installs, round(count(a2.player_id)/tbTCnt.installs,2) as Day1_retention from tbDate left join tbTcnt on tbTcnt.event_date = tbDate.event_date left join activity as a2 on datediff(a2.event_date, tbDate.event_date) = 1 and a2.player_id = tbDate.player_id group by tbDate.event_date ) select * from tbCnt
with tbDate as ( select player_id, min(event_date) as event_date from activity group by player_id ), tbTCnt as ( select event_date, count(player_id) as installs from tbDate group by event_date ), tbCnt as ( select tbDate.event_date, count(a2.player_id) as install from tbDate left join activity as a2 on datediff(a2.event_date, tbDate.event_date) = 1 and a2.player_id = tbDate.player_id group by tbDate.event_date ) select tbTcnt.event_date as install_dt, tbTCnt.installs, round(tbCnt.install/tbTCnt.installs,2) as Day1_retention from tbTcnt join tbCnt on tbTcnt.event_date = tbCnt.event_date
with tbDate as ( select player_id, min(event_date) as event_date from activity group by player_id ), tbTCnt as ( select tbDate.event_date, count(distinct a1.player_id) as installs from activity as a1 join tbDate on a1.event_date = tbDate.event_date and a1.player_id = tbDate.player_id group by tbDate.event_date ), tbCnt as ( select tbDate.event_date, count(a2.player_id) as install from tbDate left join activity as a2 on datediff(a2.event_date, tbDate.event_date) = 1 and a2.player_id = tbDate.player_id group by tbDate.event_date ) select tbTcnt.event_date as install_dt, tbTCnt.installs, round(tbCnt.install/tbTCnt.installs,2) as Day1_retention from tbTcnt join tbCnt on tbTcnt.event_date = tbCnt.event_date
with temp as ( select a.player_id, a.event_date from Activity as a join Activity as b on a.player_id = b.player_id where a.event_date >= b.event_date group by a.player_id, a.event_date having count(b.event_date) = 1 ), temp1 as ( select temp.player_id, temp.event_date, case when a.event_date is null then 0 else 1 end as retent from temp left join Activity as a on temp.player_id = a.player_id and DATEDIFF(a.event_date, temp.event_date) = 1 ) select event_date as install_dt, count(*) as installs, round(sum(retent)/count(*), 2) as Day1_retention from temp1 group by event_date order by install_dt
with temp as ( select player_id, event_date, min(event_date) over(partition by player_id) as 'first_day' from activity ) select A.first_day as 'install_dt', A.total as 'Installs', round(ifnull(retention/total,0),2) as 'Day1_retention' from ( select first_day, count(distinct player_id) as total from temp group by first_day) as A left join (select first_day, sum(case when datediff(event_date, first_day) = 1 then 1 else 0 end) as 'retention' from temp group by first_day) as B on A.first_day = B.first_day
with temp as ( select player_id, event_date, rank() over (partition by player_id order by event_date) as ranking from Activity ), temp1 as ( select t.player_id, t.event_date as install_dt from temp as t join temp as u on t.player_id = u.player_id and DATEDIFF(u.event_date, t.event_date) = 1 where t.ranking = 1 ) select event_date as install_dt, count(temp.player_id) as installs, round(sum(case when temp1.player_id is not NULL then 1 else 0 end)/count(temp.player_id), 2) as Day1_retention from temp left join temp1 on temp.event_date = temp1.install_dt and temp1.player_id = temp.player_id where temp.ranking = 1 group by event_date
with temp as ( select player_id, event_date, rank() over (partition by player_id order by event_date) as ranking from Activity ), temp1 as ( select t.player_id, t.event_date as install_dt from temp as t join temp as u on t.player_id = u.player_id and DATEDIFF(u.event_date, t.event_date) = 1 where t.ranking = 1 ), temp2 as ( select player_id, event_date from temp where ranking = 1 ) select event_date as install_dt, count(temp2.player_id) as installs, round(sum(case when temp1.player_id is not NULL then 1 else 0 end)/count(temp2.player_id), 2) as Day1_retention from temp2 left join temp1 on temp2.event_date = temp1.install_dt and temp1.player_id = temp2.player_id group by event_date
with temp as (select player_id, event_date, lead(event_date,1,null) over (partition by player_id order by event_date asc) as next_visit_dt, rank() over (partition by player_id order by event_date asc) as date_rank from Activity), installation as (select player_id, event_date as install_dt, datediff(next_visit_dt,event_date) as date_diff from temp where date_rank = 1) select install_dt, count(player_id) as installs, round(count(case when date_diff = 1 then 1 End)/count(*),2) as Day1_retention from installation group by install_dt
with temp as (select player_id, min(event_date) as install_date from activity group by player_id) select install_date as install_dt, sum(case when install_date=event_date then 1 else 0 end) as installs, round(sum(case when install_date+1=event_date then 1 else 0 end )/sum(case when install_date=event_date then 1 else 0 end),2) as day1_retention from temp join activity a on temp.player_id=a.player_id group by install_date
with temp as (select player_id, min(event_date) as install_dt, DATE_ADD(min(event_date), interval 1 day) as 'next_day' from Activity group by player_id) , temp2 as (select temp.*, activity.device_id from temp left join activity on temp.player_id = activity.player_id and temp.next_day = activity.event_date ) select install_dt,count(player_id) as installs,ROUND(count(device_id)/count(player_id),2) as Day1_retention from temp2 group by install_dt order by install_dt
with temp as (select t1.player_id, dt, a.event_date next_day from (select *, min(event_date) dt from Activity group by player_id) t1 left join Activity a on t1.player_id = a.player_id and dt = a.event_date - 1) select dt install_dt, count(dt) installs, round(count(next_day) / count(player_id), 2) Day1_retention from temp group by 1
with temp as (select t1.player_id, dt, a.event_date next_day from (select *, min(event_date) dt from Activity group by player_id) t1 left join Activity a on t1.player_id = a.player_id and t1.dt = a.event_date - 1) select dt install_dt, count(dt) installs, round(count(next_day) / count(player_id), 2) Day1_retention from temp group by 1
with tmp1 as ( select *, row_number() over (partition by player_id order by event_date asc) as row_index from Activity ) , tmp2 as (select event_date as install_dt, count(distinct player_id) as installs from tmp1 where row_index =1 group by 1), tmp3 as (select t2.event_date as install_dt, count(distinct t1.player_id) as day1_installs from (select * from tmp1 where row_index = 2) t1 left join (select * from tmp1 where row_index = 1) t2 on t1.player_id=t2.player_id and datediff(t1.event_date,t2.event_date)=1 group by 1) select tmp2.install_dt, tmp2.installs, cast(coalesce(tmp3.day1_installs * 1.0 / tmp2.installs , 0) as dec(10,2)) as Day1_retention from tmp2 left join tmp3 on tmp2.install_dt=tmp3.install_dt
with user_install_date as ( select player_id, min(event_date) as install_date from activity group by 1 ) select uid.install_date as install_dt, count(1) as installs, round(sum(a.player_id is not null) / count(1), 2) as day1_retention from user_install_date uid left join activity a on a.player_id = uid.player_id and a.event_date = (uid.install_date + 1) group by 1
