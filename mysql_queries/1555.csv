SELECT * , (CASE WHEN b.credit < 0 THEN 'Yes' ELSE 'No' END) AS CREDIT_LIMIT_BREACHED FROM (SELECT u.user_id AS USER_ID, u.user_name AS USER_NAME, (u.credit + a.credit) AS CREDIT FROM Users u JOIN (SELECT u.user_name as user, SUM(CASE WHEN u.user_id = t.paid_by THEN -amount WHEN u.user_id = t.paid_to THEN amount ELSE 0 END) as credit FROM Users u LEFT JOIN Transactions t ON u.user_id = t.paid_by OR u.user_id = paid_to GROUP BY 1) as a ON u.user_name = a.user) as b
SELECT * , (CASE WHEN b.credit < 0 THEN 'Yes' ELSE 'No' END) AS CREDIT_LIMIT_BREACHED FROM (SELECT u.user_id AS USER_ID, u.user_name AS USER_NAME, (u.credit + a.credit) AS CREDIT FROM Users u JOIN (SELECT u.user_name as user, SUM(CASE WHEN u.user_id = t.paid_by THEN -amount WHEN u.user_id = t.paid_to THEN amount ELSE 0 END) as credit FROM Users u LEFT JOIN Transactions t ON u.user_id = t.paid_by OR u.user_id = t.paid_to GROUP BY 1) as a ON u.user_name = a.user) as b
SELECT *, (CASE WHEN credit<0 THEN "Yes" ELSE "No" END) AS credit_limit_breached FROM ( SELECT u.user_id, u.user_name, credit+IFNULL(SUM((CASE WHEN u.user_id=t.paid_by THEN -t.amount ELSE t.amount END)),0) AS credit FROM Users u LEFT JOIN Transactions t ON u.user_id=t.paid_by or u.user_id=t.paid_to GROUP BY u.user_id,u.user_name) t
SELECT *, (case when credit>=0 then 'No' else "Yes" End)as credit_limit_breached FROM ( SELECT user_id, user_name, u.credit+sum(case when user_id = t.paid_by then -amount when user_id = t.paid_to then amount else 0 end)as credit FROM users u left JOIN Transactions t on t.paid_by = u.user_id or t.paid_to = u.user_id group by user_id )T
SELECT DISTINCT n as USER_ID, user_name as USER_NAME, SUM(entry) OVER(PARTITION BY n) as CREDIT, CASE WHEN SUM(entry) OVER(PARTITION BY n) <0 THEN 'Yes' ELSE 'No' END as CREDIT_LIMIT_BREACHED FROM (SELECT user_id as n, credit as entry FROM Users UNION ALL SELECT paid_by as n, -1*amount as entry FROM Transactions UNION ALL SELECT paid_to as n, amount as entry FROM Transactions) t JOIN Users u on t.n=u.user_id
SELECT U.user_id AS USER_ID, user_name USER_NAME,ifnull(SUM(x.money),0)+U.CREDIT as "CREDIT", CASE WHEN ifnull(SUM(x.money),0)+U.CREDIT>0 THEN "No" ELSE "Yes" END AS "CREDIT_LIMIT_BREACHED" FROM (SELECT paid_by as id, -amount as money FROM Transactions UNION ALL SELECT paid_to as id, amount as money FROM Transactions) x RIGHT JOIN users u ON u.user_id=x.id GROUP BY 1
SELECT U.user_id AS user_id, U.user_name, COALESCE(SUM(T.amount) + U.credit, U.credit) AS credit, CASE WHEN SUM(T.amount) + U.credit < 0 THEN 'Yes' ELSE 'No' END AS credit_limit_breached FROM Users U LEFT JOIN ( SELECT paid_by as id, -amount as amount, transacted_on FROM Transactions UNION ALL SELECT paid_to as id, amount, transacted_on FROM Transactions ) AS T ON U.user_id = T.id GROUP BY 1
SELECT U.user_id, user_name, (credit - out_cash + in_cash) AS credit, IF((credit - out_cash + in_cash) < 0, 'Yes', 'No') AS credit_limit_breached FROM Users U JOIN (SELECT U1.user_id, IFNULL(SUM(amount), 0) AS out_cash FROM Users U1 LEFT JOIN Transactions T1 ON U1.user_id = T1.paid_by GROUP BY user_id) out_tmp ON U.user_id = out_tmp.user_id JOIN (SELECT U2.user_id, IFNULL(SUM(amount), 0) AS in_cash FROM Users U2 LEFT JOIN Transactions T2 ON U2.user_id = T2.paid_to GROUP BY user_id) in_tmp ON U.user_id = in_tmp.user_id
SELECT USER_ID, user_name, credit + IFNULL(SUM(CASE WHEN A.user_id = B.paid_by THEN -amount WHEN A.user_id = B.paid_to THEN amount END),0) AS credit, IF((credit + IFNULL(SUM(CASE WHEN A.user_id = B.paid_by THEN -amount WHEN A.user_id = B.paid_to THEN amount END),0)) > 0, 'No', 'Yes') AS credit_limit_breached FROM USERS AS A LEFT JOIN TRANSACTIONS AS B ON A.user_id = B.paid_by OR A.user_id = B.paid_to GROUP BY USER_ID
SELECT a.user_id, a.user_name, (a.credit+a.total) AS credit, (CASE WHEN a.credit+a.total<0 THEN "Yes" ELSE "No" END) AS credit_limit_breached FROM (SELECT u.user_id, u.user_name, u.credit,SUM(ifnull((CASE WHEN u.user_id=t.paid_by THEN -t.amount WHEN u.user_id=t.paid_to THEN t.amount else 0 end ),0) ) as total FROM users u CROSS JOIN transactions t GROUP BY u.user_id) AS a
SELECT a.user_id, a.user_name, SUM(CASE WHEN a.user_id = b.paid_by THEN amount*-1 WHEN a.user_id = b.paid_to THEN amount ELSE 0 END) + a.credit AS credit, CASE WHEN (SUM(CASE WHEN a.user_id = b.paid_by THEN amount*-1 WHEN a.user_id = b.paid_to THEN amount ELSE 0 END) + a.credit) <0 THEN 'Yes' ELSE 'No' END AS credit_limit_breached FROM Users a LEFT JOIN Transactions b ON a.user_id = b.paid_by OR a.user_id = b.paid_to GROUP BY a.user_id
SELECT u.user_id , u.user_name , u.credit + sum(coalesce(received_amount,0)) - sum(coalesce(paid_amount,0)) as credit , CASE WHEN u.credit +sum(coalesce(received_amount,0)) - sum(coalesce(paid_amount,0)) < 0 then 'Yes' else 'No' end as credit_limit_breached FROM Users u LEFT JOIN ( SELECT paid_by as user_id , sum(amount) as paid_amount , 0 as received_amount FROM Transactions GROUP BY paid_by UNION ALL SELECT paid_to as user_id , 0 as paid_amount , sum(amount) as received_amount FROM Transactions GROUP BY paid_to) temp on u.user_id = temp.user_id GROUP BY temp.user_id, u.user_name
SELECT u.user_id ,u.user_name ,u.credit + SUM(CASE WHEN u.user_id = t.paid_by THEN -1*amount WHEN u.user_id = t.paid_to THEN amount ELSE 0 END) AS credit ,CASE WHEN u.credit + SUM(CASE WHEN u.user_id = t.paid_by THEN -1*amount WHEN u.user_id = t.paid_to THEN amount ELSE 0 END) >= 0 THEN 'No' ELSE 'Yes' END AS credit_limit_breached FROM Users u LEFT JOIN Transactions t ON u.user_id = t.paid_by OR u.user_id = t.paid_to GROUP BY u.user_id, u.user_name, u.credit
SELECT u.user_id USER_ID, u.user_name USER_NAME, u.credit+IFNULL(SUM(x.amounts),0) as CREDIT, if(u.credit+IFNULL(SUM(x.amounts),0)>0,"No","Yes") AS CREDIT_LIMIT_BREACHED FROM (SELECT paid_by as id, -amount as amounts FROM transactions UNION ALL SELECT paid_to as id, amount as amounts FROM transactions)x RIGHT JOIN users u on u.user_id=x.id GROUP BY 1
SELECT u.user_id, u.user_name, COALESCE(amount + credit,credit) as credit, CASE WHEN (credit + amount) < 0 THEN "Yes" ELSE "No" END as credit_limit_breached FROM Users u LEFT JOIN ( SELECT user_id, SUM(amount) as amount from ( SELECT paid_by as user_id, -amount as amount FROM Transactions UNION ALL SELECT paid_to as user_id, amount FROM Transactions )a GROUP BY user_id )a on a.user_id = u.user_id
SELECT u.user_id, u.user_name, IFNULL(SUM( CASE WHEN u.user_id = t.paid_by THEN -amount ELSE amount END ),0) + u.credit AS credit, ( CASE WHEN IFNULL(SUM( CASE WHEN u.user_id = t.paid_by THEN -amount ELSE amount END ),0) + u.credit < 0 THEN 'Yes' ELSE 'No' END ) AS credit_limit_breached FROM Users u LEFT JOIN Transactions t ON u.user_id = t.paid_by OR u.user_id = t.paid_to GROUP BY u.user_id
SELECT u.user_id, u.user_name, IFNULL(SUM(CASE WHEN t.paid_by=u.user_id THEN -t.amount ELSE t.amount END),0) + MAX(u.credit) AS credit, IF(IFNULL(SUM(CASE WHEN t.paid_by=u.user_id THEN -t.amount ELSE t.amount END),0) + MAX(u.credit)<0, 'Yes', 'No') AS credit_limit_breached FROM Users u LEFT JOIN Transactions t ON t.paid_by = u.user_id OR t.paid_to = u.user_id GROUP BY u.user_id
SELECT u.user_id, u.user_name, IFNULL(SUM(CASE WHEN u.user_id = t1.paid_by THEN -1*amount ELSE amount END),0) + credit AS credit, CASE WHEN IFNULL(SUM(CASE WHEN u.user_id = t1.paid_by THEN -1*amount ELSE amount END),0) + credit < 0 THEN 'Yes' ELSE 'No' END AS credit_limit_breached FROM Users u LEFT JOIN Transactions t1 ON u.user_id = t1.paid_by OR u.user_id = t1.paid_to GROUP BY u.user_id
SELECT u.user_id, u.user_name, u.credit + IFNULL(SUM(CASE WHEN u.user_id = t.paid_by THEN -amount ELSE amount END),0)as credit, CASE WHEN u.credit + IFNULL(SUM(CASE WHEN u.user_id = t.paid_by THEN -amount ELSE amount END),0) >= 0 THEN 'No' ELSE 'Yes' END as credit_limit_breached FROM Users u LEFT JOIN Transactions t ON u.user_id = t.paid_by OR u.user_id = t.paid_to GROUP BY u.user_id
SELECT u.user_id, u.user_name, u.credit+IFNULL(t2.amount,0)+IFNULL(t1.amount,0) AS credit, IF((u.credit+IFNULL(t2.amount,0)+IFNULL(t1.amount,0)) < 0, 'Yes', 'No') AS credit_limit_breached FROM Users u LEFT JOIN (SELECT t.paid_by, -1*SUM(amount) amount FROM Transactions t GROUP BY t.paid_by) t1 on u.user_id = t1.paid_by LEFT JOIN (SELECT t.paid_to, SUM(amount) amount FROM Transactions t GROUP BY t.paid_to) t2 on u.user_id = t2.paid_to
SELECT u.user_id, user_name, credit + ifnull(sum(trans),0) as credit, case when credit + ifnull(sum(trans),0) >= 0 then 'No' else 'Yes' end as credit_limit_breached from Users u left join (select paid_by as user_id, amount*(-1) as trans from Transactions union all select paid_to as user_id, amount as trans from Transactions) a on a.user_id = u.user_id group by user_id order by 1, 3
SELECT u.user_id,u.user_name, IFNULL((credit + SUM(CASE WHEN user_id=paid_by THEN -amount WHEN user_id=paid_to THEN amount END)),credit) credit, IF(credit + SUM(CASE WHEN user_id=paid_by THEN -amount WHEN user_id=paid_to THEN amount END)<0,'Yes','No') credit_limit_breached FROM Users u LEFT JOIN Transactions t ON u.user_id in (t.paid_by, t.paid_to) GROUP BY 1
SELECT u.user_id,u.user_name, credit + SUM(CASE WHEN user_id=paid_by THEN -amount WHEN user_id=paid_to THEN amount END) credit, IF(credit + SUM(CASE WHEN user_id=paid_by THEN -amount WHEN user_id=paid_to THEN amount END)<0,'Yes','No') credit_limit_breached FROM Users u JOIN Transactions t ON u.user_id in (t.paid_by, t.paid_to) GROUP BY 1 UNION SELECT user_id,user_name,credit,'No' FROM Users WHERE user_id NOT IN ((SELECT paid_by FROM Transactions) UNION (SELECT paid_to FROM Transactions))
SELECT user_id, user_name, (credit - IFNULL(out_cash, 0) + IFNULL(in_cash, 0)) AS credit, IF((credit - IFNULL(out_cash, 0) + IFNULL(in_cash, 0)) < 0, 'Yes', 'No') AS credit_limit_breached FROM Users U LEFT JOIN (SELECT paid_by, SUM(amount) AS out_cash FROM Transactions GROUP BY paid_by) out_tmp ON U.user_id = out_tmp.paid_by LEFT JOIN (SELECT paid_to, SUM(amount) AS in_cash FROM Transactions GROUP BY paid_to) in_tmp ON U.user_id = in_tmp.paid_to
SELECT user_id, user_name, (u.credit - ifnull(t1.pay_amount,0) + ifnull(t2.get_amount,0)) as credit, case when (u.credit - ifnull(t1.pay_amount,0) + ifnull(t2.get_amount,0)) < 0 then 'Yes' else 'No' end as credit_limit_breached FROM Users u LEFT JOIN ( SELECT paid_by, SUM(amount) AS pay_amount FROM Transactions GROUP BY paid_by ) t1 ON u.user_id = t1.paid_by LEFT JOIN ( SELECT paid_to, SUM(amount) AS get_amount FROM Transactions GROUP BY paid_to ) t2 ON u.user_id = t2.paid_to
SELECT user_id, user_name, IFNULL(SUM(IF(paid_by=user_id,-1*amount, amount)),0)+credit credit, IF(IFNULL(SUM(IF(paid_by=user_id,-1*amount, amount)),0)+credit>0,'No','Yes') credit_limit_breached FROM Users u LEFT JOIN Transactions t ON user_id in (paid_by,paid_to) GROUP BY user_id, user_name
SELECT user_id, user_name, IFNULL(SUM(IF(user_id = paid_by, -amount, amount)), 0) + credit AS credit, CASE WHEN IFNULL(SUM(IF(user_id = paid_by, -amount, amount)), 0) + credit > 0 THEN 'No' ELSE 'Yes' END AS credit_limit_breached FROM Users u LEFT JOIN Transactions t ON u.user_id = t.paid_to OR u.user_id = t.paid_by GROUP BY u.user_id
SELECT user_id, user_name, IFNULL(SUM(t2.amount), 0) + p.credit + IFNULL(p.paid_amount, 0) AS credit, CASE WHEN IFNULL(SUM(t2.amount), 0) + p.credit + IFNULL(p.paid_amount, 0) < 0 THEN "Yes" ELSE "No" END AS credit_limit_breached FROM (SELECT user_id, user_name, credit, -SUM(amount) as paid_amount FROM Users u LEFT JOIN Transactions t ON u.user_id = t.paid_by GROUP BY u.user_id ) p LEFT JOIN Transactions t2 ON p.user_id = t2.paid_to GROUP BY p.user_id
SELECT user_id, user_name, SUM(change_in_bal) + credit AS credit, IF(SUM(change_in_bal) + credit < 0, "Yes", "No") AS credit_limit_breached FROM ( SELECT U.user_id, U.user_name, U.credit, CASE WHEN U.user_id = T.paid_by THEN -T.amount WHEN U.user_id = T.paid_to THEN +T.amount ELSE 0 END AS change_in_bal FROM Users U LEFT JOIN Transactions T ON (U.user_id = T.paid_by OR U.user_id = T.paid_to) ) T GROUP BY user_id
SELECT user_id, user_name, credit + COALESCE(amt,0) AS credit, CASE WHEN credit+amt < 0 THEN 'Yes' ELSE 'No' END AS credit_limit_breached FROM Users u LEFT JOIN ( SELECT id, SUM(amt) AS amt FROM (SELECT paid_by AS id, -amount AS amt FROM Transactions UNION ALL SELECT paid_to AS id, amount AS amt FROM Transactions )sub1 GROUP BY id ) sub2 ON u.user_id = sub2.id GROUP BY user_id, user_name
SELECT user_id, user_name, credit + SUM(CASE WHEN paid_by = user_id THEN -amount ELSE 0 END) + SUM(CASE WHEN paid_to = user_id THEN amount ELSE 0 END) AS 'credit', IF(credit + SUM(CASE WHEN paid_by = user_id THEN -amount ELSE 0 END) + SUM(CASE WHEN paid_to = user_id THEN amount ELSE 0 END) < 0, 'Yes', 'No') AS 'credit_limit_breached' FROM Transactions AS t, Users AS u GROUP BY user_id
SELECT user_id, user_name, credit+IFNULL(SUM(CASE WHEN user_id=paid_by THEN -amount ELSE amount END), 0) AS credit, CASE WHEN credit+IFNULL(SUM(CASE WHEN user_id=paid_by THEN -amount ELSE amount END), 0)<0 THEN 'Yes' ELSE 'No' END AS credit_limit_breached FROM Users LEFT JOIN Transactions ON (user_id=paid_by OR user_id=paid_to) GROUP BY user_id
SELECT user_id, user_name, u.credit+SUM(CASE WHEN user_id=paid_by THEN -amount WHEN user_id=paid_to THEN +amount ELSE 0 END) AS credit, IF(u.credit+SUM(CASE WHEN user_id=paid_by THEN -amount WHEN user_id=paid_to THEN +amount ELSE 0 END)<=0, 'Yes', 'No') AS credit_limit_breached FROM Users AS u LEFT JOIN Transactions AS t ON user_id=paid_by OR user_id=paid_to GROUP BY user_id
SELECT user_id,user_name, IFNULL(SUM(CASE WHEN a.user_id=b.paid_by THEN -amount ELSE amount END),0)+a.credit as credit, CASE WHEN IFNULL(SUM(CASE WHEN a.user_id=b.paid_by THEN -amount ELSE amount END),0)+a.credit>=0 THEN "No" ELSE "Yes" END as credit_limit_breached FROM Users as a LEFT JOIN Transactions as b ON a.user_id=b.paid_by OR a.user_id=b.paid_to GROUP BY a.user_id
SELECT user_id,user_name, IFNULL(SUM(CASE WHEN a.user_id=b.paid_by THEN -amount ELSE amount END),0)+a.credit as credit, CASE WHEN IFNULL(SUM(CASE WHEN a.user_id=b.paid_by THEN -amount ELSE amount END),0)>=-a.credit THEN "No" ELSE "Yes" END as credit_limit_breached FROM Users as a LEFT JOIN Transactions as b ON a.user_id=b.paid_by OR a.user_id=b.paid_to GROUP BY a.user_id
SELECT user_id,user_name, IFNULL(sm+credit,credit) AS credit,( CASE WHEN IFNULL(sm+credit,credit) <0 THEN 'Yes' ELSE 'No' END) AS credit_limit_breached FROM (SELECT id, SUM(amount) AS sm FROM (SELECT paid_by AS id, -amount AS amount FROM Transactions UNION ALL SELECT paid_to AS id, amount FROM Transactions) a GROUP BY 1) b RIGHT JOIN Users u ON u.user_id=b.id
Select *, Case When credit < 0 Then "Yes" Else "No" End as credit_limit_breached From ( Select user_id, user_name, credit + coalesce(Sum(Case When paid_by = user_id Then -amount When paid_to = user_id Then amount End), 0) as credit From Users Left Join Transactions On Users.user_id = Transactions.paid_by or Users.user_id = Transactions.paid_to Group By user_id, user_name, credit ) tmp
Select a.user_id, (Select user_name From Users where Users.user_id=a.user_id) as user_name, SUM(credit) as credit, (case when SUM(credit)>=0 then 'No' else 'Yes' end) as credit_limit_breached From (Select paid_by as user_id, 0-amount as credit From Transactions UNION ALL Select paid_to as user_id, amount as credit From Transactions UNION ALL Select user_id, credit From Users) as a Group by user_id Order by user_id
Select distinct m.user_id, m.user_name, ifnull(m.credit-m.minus+a.totaladd, m.credit) credit, if(m.credit-m.minus+a.totaladd<0, 'Yes', 'No') credit_limit_breached From Users, (Select u.user_id, u.user_name, u.credit, ifnull(sum(amount),0) minus From Users u Left join Transactions t on u.user_id = t.paid_by Group by u.user_id) m join (Select u.user_id, u.user_name, u.credit, ifnull(sum(amount),0) totaladd From Users u Left join Transactions t on u.user_id = t.paid_to Group by u.user_id) a on m.user_id = a.user_id
WITH AllTxns AS (SELECT user_id ,credit AS amount FROM Users UNION ALL SELECT paid_by AS user_id ,-1*amount AS amount FROM Transactions UNION ALL SELECT paid_to ,amount FROM Transactions), TxnSummary AS (SELECT user_id ,SUM(amount) AS credit FROM AllTxns GROUP BY user_id) SELECT TS.user_id ,U.user_name ,TS.credit ,IF(TS.credit < 0, 'Yes', 'No') AS credit_limit_breached FROM TxnSummary TS INNER JOIN Users U ON U.user_id = TS.user_id
WITH AllTxns AS (SELECT user_id ,credit FROM Users UNION ALL SELECT paid_by ,-1*amount FROM Transactions UNION ALL SELECT paid_to ,amount FROM Transactions), FinalBalances AS (SELECT user_id ,SUM(credit) AS credit FROM AllTxns GROUP BY user_id) SELECT U.user_id ,U.user_name ,FB.credit ,IF(FB.credit < 0, 'Yes','No') AS credit_limit_breached FROM Users U INNER JOIN FinalBalances FB ON FB.user_id = U.user_id
WITH CET as (select paid_by as user_id, -amount as credit1 from Transactions UNION ALL SELECT paid_to as user_id, amount as credit1 from Transactions UNION ALL SELECT user_id, credit as credit1 from Users) SELECT distinct Users.user_id, user_name, sum(credit1) over(partition by Users.user_id)as credit, case when sum(credit1) over(partition by Users.user_id) >=0 then 'No' else 'Yes' end as credit_limit_breached from CET right join Users on Users.user_id=CET.user_id
WITH CTE AS ( SELECT U.user_id, U.user_name, U.credit-IFNULL(T1.amount,0)+IFNULL(T2.amount,0) credit FROM Users U LEFT JOIN (SELECT paid_by,SUM(amount) amount FROM Transactions GROUP BY paid_by) T1 ON U.user_id=T1.paid_by LEFT JOIN (SELECT paid_to,SUM(amount) amount FROM Transactions GROUP BY paid_to) T2 ON U.user_id=T2.paid_to GROUP BY U.user_id, U.user_name ) SELECT user_id, user_name, credit, CASE WHEN credit>0 THEN 'No' ELSE 'Yes' END credit_limit_breached FROM CTE
WITH CTE AS ( SELECT paid_by AS id, amount * -1 AS amount FROM Transactions UNION ALL SELECT paid_to AS id, amount FROM Transactions ) SELECT user_id, user_name, MAX(u.credit) + IFNULL(SUM(amount),0) AS credit, CASE WHEN MAX(u.credit) + IFNULL(SUM(amount),0) < 0 THEN 'Yes' ELSE 'No' END AS credit_limit_breached FROM Users u LEFT JOIN CTE c ON u.user_id = c.id GROUP BY user_id
WITH CTE AS ( SELECT paid_by, (-1 * amount) as amount FROM transactions UNION ALL SELECT paid_to, amount FROM transactions ), total AS ( SELECT paid_by as user_id, SUM(amount) as total_amount FROM CTE GROUP BY paid_by ) SELECT u.user_id, user_name, IFNULL((credit + total_amount),credit) as credit, IF(credit + total_amount < 0, 'Yes','No' ) as credit_limit_breached FROM users u LEFT JOIN total t ON u.user_id = t.user_id
WITH CTE AS ( SELECT paid_by, paid_to, -1*amount as sended FROM transactions UNION ALL SELECT paid_to, paid_by, amount FROM transactions ), CTE2 AS ( SELECT user_id, user_name, credit, credit+COALESCE(SUM(sended),0) as balance FROM users a LEFT JOIN CTE b ON a.user_id=b.paid_by GROUP BY paid_by ) SELECT USER_ID, USER_NAME, balance as CREDIT, IF(balance<0, 'Yes','No') as CREDIT_LIMIT_BREACHED FROM CTE2
WITH CTE AS ( SELECT paid_id, SUM(amount) AS amount FROM (SELECT trans_id, paid_by AS paid_id, amount FROM Transactions UNION ALL SELECT trans_id, paid_to AS paid_id, -1*amount FROM Transactions) t GROUP BY paid_id) SELECT u.user_id, u.user_name, u.credit - IFNULL(CTE.amount,0) AS credit, CASE WHEN u.credit - IFNULL(CTE.amount,0) <0 THEN "Yes" ELSE "No" END AS credit_limit_breached FROM Users u LEFT JOIN CTE ON u.user_id = CTE.paid_id
WITH CTE AS ( SELECT user_id, user_name, IFNULL(SUM(CASE WHEN user_id=paid_by THEN -1*amount WHEN user_id=paid_to THEN amount END),0)+AVG(credit) AS credit FROM Users LEFT JOIN Transactions ON user_id=paid_by OR user_id=paid_to GROUP BY 1,2 ) SELECT user_id, user_name, credit, CASE WHEN credit > 0 THEN 'No' ELSE 'Yes' END AS credit_limit_breached FROM CTE
WITH CTE AS (SELECT id, SUM(amounts) AS amount FROM ( SELECT paid_by AS id, SUM(-amount) AS amounts FROM Transactions GROUP BY paid_by UNION ALL SELECT paid_to AS id, SUM(amount) AS amounts FROM Transactions GROUP BY paid_to ) xx GROUP BY id ) SELECT user_id, user_name, CASE WHEN amount IS NULL THEN credit ELSE credit + amount END AS credit, CASE WHEN amount IS NULL THEN 'No' WHEN credit + amount > 0 THEN 'No' ELSE 'Yes' END AS credit_limit_breached FROM Users LEFT JOIN CTE c ON c.id = user_id
WITH CTE AS (SELECT paid_by as user_id, SUM(amount)*-1 as cost FROM Transactions GROUP BY 1 UNION ALL SELECT paid_to as user_id, SUM(amount) as cost FROM Transactions GROUP BY 1) SELECT CTE.user_id, u.user_name, u.credit + SUM(cte.cost) as credit, CASE WHEN u.credit + SUM(cte.cost) < 0 THEN 'Yes' ELSE 'No' END AS credit_limit_breached FROM Users u JOIN CTE ON u.user_id=cte.user_id GROUP BY 1 UNION SELECT user_id, user_name, credit, CASE WHEN credit < 0 THEN 'Yes' ELSE 'No' END AS crdit_limit_breanched FROM Users WHERE user_id NOT IN (SELECT user_id FROM CTE)
WITH CTE AS( (SELECT paid_by, paid_to, -amount AS amount FROM Transactions) UNION ALL (SELECT paid_to, paid_by, amount FROM Transactions) ), CTE1 AS( SELECT paid_by, SUM(amount) AS amount FROM CTE GROUP BY 1 ) SELECT a.user_id, a.user_name, IFNULL((credit + amount), credit) AS credit, CASE WHEN (credit + amount) < 0 THEN 'Yes' ELSE 'No' END AS credit_limit_breached FROM Users a LEFT JOIN CTE1 b ON a.user_id = b.paid_by GROUP BY 1, 2
WITH CTE AS( SELECT user_id,user_name, IFNULL(SUM(CASE WHEN u.user_id=t.paid_by THEN -amount WHEN u.user_id=t.paid_to THEN amount END),0) + AVG(u.credit) as credit FROM Users u LEFT JOIN Transactions t ON u.user_id = t.paid_by OR u.user_id = t.paid_to GROUP BY u.user_id ) SELECT user_id, user_name, credit, CASE WHEN credit > 0 THEN 'No' ELSE 'Yes' END AS credit_limit_breached FROM CTE
WITH CTE1 AS ( SELECT paid_by AS id, -amount AS amount FROM Transactions UNION ALL SELECT paid_to AS id, amount AS amount FROM Transactions), CTE2 AS ( SELECT id, SUM(amount) AS current_amt FROM CTE1 GROUP BY id) SELECT user_id, user_name, credit + IFNULL(current_amt, 0) AS credit, (CASE WHEN credit>=-IFNULL(current_amt, 0) THEN 'No' ELSE 'Yes' END) AS credit_limit_breached FROM Users LEFT JOIN CTE2 ON Users.user_id = CTE2.id
WITH CTE_1 AS ( SELECT USER_ID, USER_NAME, CREDIT, SUM(COALESCE(AMOUNT,0)) DDEBIT FROM USERS U LEFT OUTER JOIN TRANSACTIONS T ON U.USER_ID = T.PAID_BY GROUP BY USER_ID,USER_NAME,CREDIT ) ,CTE_2 AS ( SELECT USER_ID, USER_NAME, SUM(COALESCE(AMOUNT,0)) CCREDIT FROM USERS U LEFT OUTER JOIN TRANSACTIONS T ON U.USER_ID = T.PAID_TO GROUP BY USER_ID,USER_NAME ) SELECT USER_ID, USER_NAME, CREDIT, CASE WHEN CREDIT < 0 THEN 'Yes' ELSE 'No' END AS CREDIT_LIMIT_BREACHED FROM ( SELECT C1.USER_ID, C1.USER_NAME, C2.CCREDIT - C1.DDEBIT + C1.CREDIT CREDIT FROM CTE_1 C1, CTE_2 C2 WHERE C1.USER_ID = C2.USER_ID GROUP BY C1.USER_ID, C1.USER_NAME ) X
WITH History AS ( SELECT paid_by AS people, -amount AS amount FROM Transactions UNION ALL SELECT paid_to AS people, amount AS amount FROM Transactions ) SELECT u.user_id, u.user_name, u.credit + IFNULL(SUM(h.amount), 0) AS credit, (CASE WHEN u.credit + IFNULL(SUM(h.amount), 0) < 0 THEN 'Yes' ELSE 'No' END) AS credit_limit_breached FROM Users u LEFT JOIN History h ON u.user_id = h.people GROUP BY people
WITH P1 AS ( SELECT U.user_id, SUM(CASE WHEN T.amount IS NULL THEN 0 ELSE T.amount END) AS amt FROM Users U LEFT OUTER JOIN Transactions T ON U.user_id = T.paid_by GROUP BY U.user_id ), P2 AS ( SELECT U.user_id, SUM(CASE WHEN T.amount IS NULL THEN 0 ELSE T.amount END) AS amt FROM Users U LEFT OUTER JOIN Transactions T ON U.user_id = T.paid_to GROUP BY U.user_id ), R AS ( SELECT U.user_id, U.user_name, SUM(U.credit - P1.amt + P2.amt) AS credit FROM Users U INNER JOIN P1 ON U.user_id = P1.user_id INNER JOIN P2 ON U.user_id = P2.user_id GROUP BY U.user_id, U.user_name ) SELECT R.user_id, R.user_name, R.credit, (CASE WHEN R.credit < 0 THEN 'Yes' ELSE 'No' END) AS credit_limit_breached FROM R
WITH T1 AS ( SELECT paid_by id, -amount crdt FROM transactions UNION ALL SELECT paid_to id, amount crdt FROM transactions) SELECT user_id, user_name, SUM(u.credit + IFNULL(T2.credit, 0)) credit, CASE WHEN SUM(u.credit + IFNULL(T2.credit, 0)) < 0 THEN 'Yes' ELSE 'No' END credit_limit_breached FROM users u LEFT JOIN (SELECT id, SUM(crdt) credit FROM T1 GROUP BY 1) as T2 ON T2.id = u.user_id GROUP BY 1,2
WITH addmoney AS( SELECT paid_to as ptid, sum(amount) as addamount FROM Transactions GROUP BY ptid ), minusmoney AS( SELECT paid_by as mid, 0-sum(amount) as minusamount FROM Transactions GROUP BY mid ) SELECT Users.user_id as USER_ID,Users.user_name as USER_NAME,a.amountfinal as CREDIT, CASE WHEN a.amountfinal<0 THEN 'Yes' ELSE 'No' END as CREDIT_LIMIT_BREACHED FROM ( SELECT Users.user_id as id ,ifnull(Users.credit,0)+ifnull(addmoney.addamount,0)+ifnull(minusmoney.minusamount,0) as amountfinal FROM Users LEFT JOIN addmoney on Users.user_id = addmoney.ptid LEFT JOIN minusmoney on Users.user_id = mid GROUP BY Users.user_id)a LEFT JOIN Users ON a.id = Users.user_id
WITH agg AS ( SELECT u.user_id, u.user_name, u.credit, SUM(COALESCE(t1.amount, 0)) AS to_sub, 0 AS to_add FROM users AS u LEFT JOIN transactions AS t1 ON u.user_id = t1.paid_by GROUP BY 1, 2, 3 UNION ALL SELECT u.user_id, u.user_name, 0, 0 AS to_sub, SUM(COALESCE(t2.amount, 0)) AS to_add FROM users AS u LEFT JOIN transactions AS t2 ON u.user_id = t2.paid_to GROUP BY 1, 2, 3 ) SELECT user_id, user_name, SUM(credit - to_sub + to_add) AS credit, CASE WHEN SUM(credit - to_sub + to_add) < 0 THEN 'Yes' ELSE 'No' END AS CREDIT_LIMIT_BREACHED FROM agg GROUP BY 1, 2
WITH all_tr AS(SELECT paid_by user_id, amount*-1 amount FROM Transactions UNION ALL SELECT paid_to user_id, amount FROM Transactions) SELECT u.user_id, u.user_name, COALESCE(SUM(a.amount),0)+u.credit credit, CASE WHEN COALESCE(SUM(a.amount),0)+u.credit<0 THEN 'Yes' ELSE 'No' END credit_limit_breached FROM all_tr a RIGHT JOIN Users u ON a.user_id=u.user_id GROUP BY 1,2
WITH all_transactions AS ( SELECT paid_by AS user_id, -amount AS credit FROM Transactions UNION ALL SELECT paid_to AS user_id, amount AS credit FROM Transactions UNION ALL SELECT user_id, credit FROM Users ), agg_transactions AS ( SELECT user_id, SUM(credit) AS credit FROM all_transactions GROUP BY user_id ) SELECT user_id, user_name, a.credit, IF(a.credit < 0, 'Yes', 'No') AS credit_limit_breached FROM agg_transactions a JOIN Users u USING (user_id)
WITH cred_info as( SELECT user_id as id, credit FROM Users UNION ALL SELECT paid_by as id, amount*(-1) as credit FROM Transactions UNION ALL SELECT paid_to as id, amount as credit FROM Transactions ) SELECT c.id as user_id, u.user_name, SUM(c.credit) as credit, CASE WHEN SUM(c.credit) >= 0 THEN 'No' ELSE 'Yes' END AS 'credit_limit_breached' FROM Users u LEFT JOIN cred_info c ON u.user_id = c.id GROUP BY 1
WITH credits AS ( SELECT paid_by AS user_id, -amount AS credit FROM Transactions UNION ALL SELECT paid_to AS user_id, amount AS credit FROM Transactions UNION ALL SELECT user_id, credit FROM Users), total_credits AS ( SELECT user_id, SUM(credit) AS credit FROM credits GROUP BY user_id) SELECT u.user_id, u.user_name, t.credit, CASE WHEN t.credit < 0 THEN "Yes" ELSE "No" END AS credit_limit_breached FROM total_credits t JOIN Users u ON u.user_id = t.user_id
WITH cte AS ( SELECT paid_by AS "user_id", -amount AS "credit" FROM Transactions UNION ALL SELECT paid_to AS "user_id", amount AS "credit" FROM Transactions UNION ALL SELECT user_id, credit FROM Users ), cte2 AS ( SELECT user_id, SUM(credit) AS "credit" FROM cte GROUP BY user_id ) SELECT cte2.user_id, u.user_name, cte2.credit, (CASE WHEN cte2.credit < 0 THEN "Yes" ELSE "No" END) AS "credit_limit_breached" FROM cte2 INNER JOIN Users u ON u.user_id = cte2.user_id
WITH cte AS ( SELECT paid_by AS id, -amount AS amount FROM Transactions UNION ALL SELECT paid_to AS id, amount FROM Transactions UNION ALL SELECT user_id, credit FROM Users) SELECT u.user_id, u.user_name, SUM(c.amount) AS credit, (CASE WHEN SUM(c.amount) < 0 THEN 'Yes' ELSE 'No' END) AS credit_limit_breached FROM Users u JOIN cte c ON u.user_id = c.id GROUP BY u.user_id, u.user_name
WITH cte AS( SELECT user_id, user_name, credit, IFNULL(SUM(CASE WHEN user_id=paid_by THEN -amount WHEN user_id=paid_to THEN amount END), 0) as charge FROM Users as u LEFT JOIN Transactions as t ON u.user_id=t.paid_by or u.user_id=t.paid_to GROUP BY user_id, user_name ) SELECT user_id, user_name, credit+charge as credit, CASE WHEN (credit+charge) <0 THEN "Yes" ELSE "No" END AS credit_limit_breached FROM cte
WITH cte_credit AS ( SELECT user_id, user_name, COALESCE(SUM(amount),0) AS total_credit FROM Users LEFT JOIN Transactions ON user_id = paid_by GROUP BY 1,2 ), cte_debit AS ( SELECT user_id, user_name, COALESCE(SUM(amount),0) AS total_debit FROM Users LEFT JOIN Transactions ON user_id = paid_to GROUP BY 1,2 ) SELECT tbl.*, CASE WHEN tbl.credit < 0 THEN 'Yes' ELSE 'No' END AS credit_limit_breached FROM ( SELECT u.user_id, u.user_name, ((u.credit + cd.total_debit)- cc.total_credit) AS credit FROM Users u INNER JOIN cte_credit cc ON cc.user_id = u.user_id INNER JOIN cte_debit cd ON cd.user_id = u.user_id )tbl
WITH cte_credit AS ( SELECT user_id, user_name, COALESCE(SUM(amount),0) AS total_credit FROM Users LEFT OUTER JOIN Transactions ON user_id = paid_by GROUP BY 1,2 ), cte_debit AS ( SELECT user_id, user_name, COALESCE(SUM(amount),0) AS total_debit FROM Users LEFT OUTER JOIN Transactions ON user_id = paid_to GROUP BY 1,2 ) SELECT tbl.*, CASE WHEN tbl.credit < 0 THEN 'Yes' ELSE 'No' END AS credit_limit_breached FROM ( SELECT u.user_id, u.user_name, ((u.credit + cd.total_debit)- cc.total_credit) AS credit FROM Users u INNER JOIN cte_credit cc ON cc.user_id = u.user_id INNER JOIN cte_debit cd ON cd.user_id = u.user_id )tbl
WITH cte_pay AS ( SELECT trans_id, paid_by AS user_id, -1* amount AS amount, transacted_on FROM Transactions UNION SELECT trans_id, paid_to AS user_id, amount, transacted_on FROM Transactions ) SELECT u.user_id AS USER_ID, user_name AS USER_NAME, COALESCE(total_amount, 0) + credit AS CREDIT, CASE WHEN COALESCE(total_amount, 0) + credit >= 0 THEN 'No' ELSE 'Yes' END AS CREDIT_LIMIT_BREACHED FROM Users u LEFT JOIN ( SELECT user_id, SUM(amount) AS total_amount FROM cte_pay GROUP BY user_id ) a ON a.user_id = u.user_id ORDER BY u.user_id
WITH ctea AS ( SELECT u.user_id ,u.user_name ,u.credit ,COALESCE(SUM(amount),0) AS sent FROM Users u LEFT JOIN Transactions t ON u.user_id = t.paid_by GROUP BY u.user_id ), cteB AS ( SELECT u.user_id ,u.user_name ,u.sent ,COALESCE(SUM(amount),0) AS received ,u.credit FROM cteA u LEFT JOIN Transactions t ON u.user_id = t.paid_to GROUP BY u.user_id ) SELECT user_id ,user_name ,credit_rem AS credit ,IF(credit_rem < 0,'Yes','No') AS credit_limit_breached FROM ( SELECT user_id ,user_name ,credit ,(credit - sent + received) AS credit_rem FROM cteB ) t ORDER BY user_id
WITH ctea AS ( SELECT u.user_id ,u.user_name ,u.credit ,COALESCE(SUM(amount),0) AS sent FROM Users u LEFT JOIN Transactions t ON u.user_id = t.paid_by GROUP BY u.user_id ), cteB AS ( SELECT u.user_id ,u.user_name ,u.sent ,COALESCE(SUM(amount),0) AS received ,u.credit FROM cteA u LEFT JOIN Transactions t ON u.user_id = t.paid_to GROUP BY u.user_id )SELECT user_id ,user_name ,credit_rem AS credit ,IF(credit_rem < 0,'Yes','No') AS credit_limit_breached FROM ( SELECT user_id ,user_name ,credit ,(credit - sent + received) AS credit_rem FROM cteB ) t ORDER BY user_id
WITH main AS ( SELECT user_id, user_name, credit, SUM( (CASE WHEN user_id = paid_by THEN (-1)*amount ELSE amount END)) AS change_amount FROM Users U LEFT JOIN Transactions T ON user_id = paid_by OR user_id = paid_to GROUP BY user_id ) SELECT user_id, user_name, credit+IFNULL(change_amount,0) AS credit, (CASE WHEN credit+IFNULL(change_amount,0) >= 0 THEN 'No' ELSE 'Yes' END ) AS credit_limit_breached FROM main
WITH overlimit AS ( select u.user_id from Users u inner join Transactions t on u.user_id = t.paid_by where t.amount > u.credit group by u.user_id ), totalbalance AS ( select f.user_id, (f.credit + f.paidby + f.paidto) as 'credit' from ( select u.user_id, u.credit, -sum(ifnull(t.amount,0)) as 'paidby', sum(ifnull(t2.amount,0)) as 'paidto' from Users u left join (select t.paid_by, sum(t.amount) as 'amount' from Transactions t group by t.paid_by) t on u.user_id = t.paid_by left join (select t2.paid_to, sum(t2.amount) as 'amount' from Transactions t2 group by t2.paid_to) t2 on u.user_id = t2.paid_to group by u.user_id, u.credit ) f ) select u.user_id, u.user_name, totalbalance.credit, case when totalbalance.credit < 0 then "Yes" else "No" end as 'credit_limit_breached' from Users u left join overlimit on u.user_id = overlimit.user_id left join totalbalance on u.user_id = totalbalance.user_id
WITH paid_to_table AS ( SELECT SUM(amount) AS credit, paid_to AS user_id FROM transactions GROUP BY paid_to), paid_by_table AS ( SELECT -SUM(amount) AS credit, paid_by AS user_id FROM transactions GROUP BY paid_by ), credit_table AS ( SELECT credit, user_id FROM users GROUP BY user_id ) SELECT user_id, user_name, SUM(temp.credit) AS credit , IF(SUM(temp.credit)>=0,'No','Yes') AS credit_limit_breached FROM( (SELECT * FROM paid_to_table) UNION ALL (SELECT * FROM paid_by_table) UNION ALL (SELECT * FROM credit_table) ) temp JOIN users USING(user_id) GROUP BY user_id ORDER BY user_id
WITH payment AS ( SELECT paid_by, -1 * amount as amount from Transactions UNION ALL SELECT paid_to, amount from Transactions ), payment_sum AS ( SELECT paid_by as user_id, sum(amount) as transactions FROM payment GROUP BY 1 ) SELECT u.user_id, user_name, CASE WHEN ps.transactions is not null then credit + transactions ELSE credit end as credit, if((CASE WHEN ps.transactions is not null then credit + transactions ELSE credit end) <0 , "Yes", "No") as credit_limit_breached FROM Users u LEFT JOIN payment_sum ps ON u.user_id = ps.user_id
WITH payment_cte AS ( SELECT paid_by AS user_id, -amount AS amount FROM transactions UNION ALL SELECT paid_to AS user_id, amount FROM transactions ) SELECT user_id, user_name, credit + COALESCE(SUM(payment_cte.amount), 0) AS credit, IF(credit + COALESCE(SUM(payment_cte.amount), 0) < 0, 'Yes', 'No' ) AS credit_limit_breached FROM users LEFT JOIN payment_cte USING (user_id) GROUP BY user_id
WITH spent_money AS (SELECT paid_by AS user_id, SUM(AMOUNT) AS money_out FROM Transactions GROUP BY paid_by), received_money AS (SELECT paid_to AS user_id, SUM(AMOUNT) AS money_in FROM Transactions GROUP BY paid_to) SELECT *, CASE WHEN credit < 0 THEN 'Yes' ELSE 'No' END AS credit_limit_breached FROM (SELECT u.user_id, u.user_name, u.credit - IFNULL(s.money_out, 0) + IFNULL(r.money_in, 0) AS credit FROM Users u LEFT JOIN spent_money s ON s.user_id = u.user_id LEFT JOIN received_money r ON u.user_id = r.user_id) as temp
WITH t AS ( SELECT paid_by as user_id, (-amount) as amount FROM transactions UNION ALL SELECT paid_to as user_id, amount FROM transactions UNION ALL SELECT user_id, credit FROM users) SELECT USER_ID, USER_NAME, sum(amount) as CREDIT, CASE WHEN sum(amount) >= 0 ThEN 'No' ELSE 'Yes' END as credit_limit_breached FROM users INNER JOIN t USING (user_id) GROUP BY user_id
WITH t1 AS ( SELECT user_id, credit FROM Users UNION ALL SELECT paid_by AS user_id, -amount AS credit FROM Transactions UNION ALL SELECT paid_to AS user_id, amount AS credit FROM Transactions ), t2 AS ( SELECT user_id, SUM(credit) AS credit FROM t1 GROUP BY user_id ) SELECT u.user_id, u.user_name, t2.credit AS credit, CASE WHEN t2.credit < 0 THEN 'Yes' ELSE 'No' END AS credit_limit_breached FROM USERS u LEFT JOIN t2 ON u.user_id = t2.user_id
WITH t1 AS( SELECT paid_by, SUM(amount) AS amount FROM Transactions GROUP BY paid_by ), t2 AS( SELECT paid_to, SUM(amount) As amount FROM Transactions GROUP BY paid_to ), t3 AS( SELECT user_id, user_name, credit, COALESCE(t1.amount,0) AS paid_amount, COALESCE(t2.amount,0) AS received_amount FROM Users u LEFT JOIN t1 ON u.user_id = t1.paid_by LEFT JOIN t2 ON u.user_id = t2.paid_to ) SELECT user_id, user_name, (credit-paid_amount+received_amount) AS credit, (CASE WHEN (credit-paid_amount+received_amount) < 0 THEN 'Yes' ELSE 'No' END) As credit_limit_breached FROM t3
WITH tab_trans as (SELECT paid_by as user_id, amount * -1 as credit FROM Transactions UNION ALL SELECT paid_to as user_id, amount as credit FROM Transactions) SELECT u.user_id, u.user_name,MAX(u.credit)+SUM(COALESCE(t.credit,0)) as credit, IF(MAX(u.credit)+SUM(COALESCE(t.credit,0)) <0, 'Yes', 'No') as credit_limit_breached FROM Users u LEFT JOIN tab_trans t ON u.user_id = t.user_id GROUP BY u.user_id
WITH temp AS ( SELECT paid_by AS id, -amount AS amount FROM Transactions UNION ALL SELECT paid_to AS id, amount AS amount FROM Transactions ), temp2 AS ( SELECT id, SUM(amount) AS amount FROM temp GROUP BY id ) SELECT u.user_id, u.user_name, COALESCE((u.credit + t.amount), u.credit) AS credit, (CASE WHEN (u.credit + t.amount) < 0 THEN 'Yes' ELSE 'No' END) AS credit_limit_breached FROM temp2 t RIGHT JOIN Users u ON t.id = u.user_id
WITH trans AS ( SELECT a.user_id, b.transacted_on, COALESCE(-b.amount,0) as trans FROM Users a LEFT JOIN Transactions b ON a.user_id = b.paid_by UNION ALL SELECT a.user_id, b.transacted_on, COALESCE(b.amount,0) as trans FROM Users a JOIN Transactions b ON a.user_id = b.paid_to ) SELECT a.user_id, a.user_name, a.credit + SUM(t.trans) as credit, CASE WHEN a.credit + SUM(t.trans) < 0 THEN 'Yes' ELSE 'No' END as credit_limit_breached FROM Users a LEFT JOIN trans t USING (user_id) GROUP BY 1,2
WITH trans AS( SELECT trans_id, paid_by, paid_to, (CASE WHEN paid_by THEN (-amount) END) AS paid, (CASE WHEN paid_to THEN amount END) AS recived FROM Transactions), full_trans AS( SELECT paid_by AS user_id, paid AS amount FROM trans UNION ALL SELECT paid_to AS user_id, recived AS amount FROM trans UNION ALL SELECT user_id AS user_id, credit AS amount FROM Users) SELECT U.user_id, U.user_name, SUM(full_trans.amount) AS credit, (CASE WHEN SUM(full_trans.amount) < 0 THEN 'Yes' ELSE 'No' END) AS credit_limit_breached FROM Users U LEFT JOIN full_trans ON U.user_id = full_trans.user_id GROUP BY 1
With a as (SELECT paid_by,COALESCE(SUM(amount),0) as amt_paid FROM transactions GROUP BY paid_by), b as (SELECT paid_to,COALESCE(SUM(amount),0) as amt_received FROM transactions GROUP BY paid_to) SELECT user_id, user_name,credit-coalesce(amt_paid,0)+coalesce(amt_received,0) as credit, CASE WHEN credit-coalesce(amt_paid,0)+coalesce(amt_received,0) < 0 then 'Yes' ELSE 'No' END AS credit_limit_breached FROM users as u LEFT JOIN a as a ON a.paid_by = u.user_id LEFT JOIN b as b on b.paid_to = u.user_id
With cte as ( (Select paid_by ,SUM(amount*(-1)) as s From Transactions t Group By paid_by) UNION ALL (Select paid_to ,SUM(amount) FROM Transactions t1 Group by paid_to) UNION ALL (Select user_id,SUM(credit) FROM Users GROUP BY user_id) ) Select u.user_id,u.user_name ,SUM(c.s) as credit , (case when (SUM(c.s))<0 Then "Yes" else "No" END) as credit_limit_breached From Users u Left JOIN CTE c ON u.user_id=c.paid_by GROUP BY c.paid_by
With cte as ( Select paid_by as user_id, (amount * (-1)) as credit from Transactions Union All Select paid_to as user_id, amount as credit from Transactions Union All Select user_id, credit From users ) Select u.user_id, u.user_name, sum(c.credit) as credit, (case when sum(c.credit) > 0 then 'No' else 'Yes' end) as credit_limit_breached From Users u Join cte c on u.user_id = c.user_id Group by u.user_id
from (select paid_by, sum(amount) as amt_paid from Transactions t group by paid_by ) a right join users u on a.paid_by = u.user_id ), after_receive_credit as (select apc.user_id, (apc.credit_left+coalesce(b.amt_received, 0)) as credit_left from (select paid_to, sum(amount) as amt_received from Transactions t group by paid_to ) b right join after_pay_credit apc on b.paid_to = apc.user_id ) select u.user_id, u.user_name, ifnull(arc.credit_left, u.credit) as credit, case when credit_left < 0 then 'Yes' else 'No' end as credit_limit_breached from after_receive_credit as arc right join users u on arc.user_id = u.user_id
select *, (case when credit < 0 then "Yes" else "No" end) as credit_limit_breached from (select u.user_id, u.user_name, (u.credit + sum(case when t.paid_by = u.user_id then -t.amount when t.paid_to = u.user_id then t.amount else 0 end)) as credit from Users u left join Transactions t on u.user_id = t.paid_by or u.user_id = t.paid_to group by 1) tmp
select *, (case when credit < 0 then "Yes" else "No" end) as credit_limit_breached from (select u.user_id, u.user_name, credit + ifnull(sum((case when u.user_id=t.paid_by then -t.amount else t.amount end)), 0) as credit from Users u left join Transactions t on u.user_id = t.paid_by or u.user_id = t.paid_to group by u.user_id, u.user_name) t
select *, (case when credit < 0 then 'Yes' else 'No' end) as credit_limit_breached from (select u.user_id, u.user_name, (u.credit + sum((case when u.user_id = t.paid_by then -t.amount when u.user_id = t.paid_to then t.amount else 0 end))) as credit from Users u left join Transactions t on u.user_id = t.paid_by or u.user_id = t.paid_to group by u.user_id) as tmp
select *, (case when credit<0 then "Yes" else "No" END) as credit_limit_breached from (select u.user_id, u.user_name, (credit + ifnull(sum(case when u.user_id = t.paid_by then -t.amount else t.amount end),0)) as credit from users as u left join transactions as t on u.user_id = t.paid_by or u.user_id = t.paid_to group by u.user_id, u.user_name) t
select *, IF(credit < 0, "Yes", "No") as credit_limit_breached from ( select u.user_id, u.user_name, SUM(IF(t.paid_by = u.user_id, -t.amount, 0)) + SUM(IF(t.paid_to = u.user_id, t.amount, 0)) + u.credit as credit from Users u, Transactions t group by u.user_id ) current_credits
select *, case when credit < 0 then 'Yes' else 'No' end as credit_limit_breached from (select u.user_id, u.user_name, u.credit - ifnull(t1.amount,0) + ifnull(t2.amount,0) as credit from users u left join (select paid_by, sum(amount) as amount from transactions group by 1) t1 on u.user_id = t1.paid_by left join (select paid_to, sum(amount) as amount from transactions group by 1) t2 on u.user_id = t2.paid_to) a
select *, case when credit<0 then 'Yes' else 'No' end as credit_limit_breached from (select u.user_id,u.user_name, (u.credit+sum(case when u.user_id = t.paid_by then -t.amount when u.user_id = t.paid_to then t.amount else 0 end)) as credit from Users u left join Transactions t on u.user_id = t.paid_by or u.user_id = t.paid_to group by 1)tmp
select *, case when credit<0 then 'Yes' else 'No' end as credit_limit_breached from( select user_id, user_name, credit + (case when b.paid_by is not null then -b.amount else 0 end) + (case when c.paid_to is not null then c.amount else 0 end) as credit from users a left join (select paid_by, sum(amount) as amount from transactions group by 1) b on a.user_id=b.paid_by left join (select paid_to, sum(amount) as amount from transactions group by 1) c on a.user_id=c.paid_to group by user_id, user_name, a.credit) t order by 1
select *, case when credit<0 then 'Yes' else 'No' end as credit_limit_breached from( select user_id, user_name, credit + sum(case when user_id=b.paid_by then -amount when user_id=b.paid_to then amount else 0 end) as credit from users a left join transactions b on a.user_id=b.paid_by or a.user_id=b.paid_to group by user_id, user_name, a.credit) t order by 1
select *, if(credit < 0, 'Yes', 'No') as credit_limit_breached from (select u.user_id, u.user_name, credit + ifnull(sum(case when u.user_id = t.paid_by then -t.amount else t.amount end),0) as credit from users u left join transactions t on u.user_id = t.paid_by or u.user_id = t.paid_to group by u.user_id, u.user_name) t
select *, if(credit<0,'Yes','No') 'credit_limit_breached' from (select user_id, user_name, credit+ifnull(sum(ch),0) 'credit' from (select user_id, user_name, credit, paid_by, paid_to, amount, (case when user_id=paid_by then amount*-1 else amount end) 'ch' from users u left join transactions t on u.user_id in (t.paid_by, t.paid_to) ) a group by user_id, user_name) b
select *,(case when credit<0 then "Yes" else "No" end) as credit_limit_breached from (select u.user_id,u.user_name, credit + ifnull(sum(case when u.user_id=paid_by then -amount else amount end),0) as credit from Users u left join Transactions t on u.user_id=paid_by or u.user_id=paid_to group by u.user_id) as temp
select DISTINCT USER_ID, USER_NAME,credit - coalesce(a1, 0) + coalesce(a2, 0) as CREDIT, case when credit - coalesce(a1, 0) + coalesce(a2, 0) <0 then "Yes" else "No" end as CREDIT_LIMIT_BREACHED from( select DISTINCT USER_ID, USER_NAME, CREDIT,A1 , SUM(t2.amount )as a2 from( select DISTINCT USER_ID, USER_NAME, CREDIT, SUM(t1.amount) as a1 from users u left join transactions t1 on u.user_id = t1.paid_by GROUP BY user_id )x left join transactions t2 on x.user_id = t2.paid_to GROUP BY user_id )x1
select USER_ID,USER_NAME,CREDIT, CASE WHEN CREDIT <0 THEN 'Yes' ELSE 'No' END AS CREDIT_LIMIT_BREACHED from (select u.user_id as USER_ID ,u.user_name as USER_NAME ,u.credit-ifnull(sum(case when t.paid_by = u.user_id then amount else -amount end),0) as CREDIT from Users as u left join Transactions as t on u.user_id=t.paid_by or u.user_id=t.paid_to group by 1,2 ) as tab1 order by 1,2
select Users.user_id, user_name, (credit+ifnull(number,0)) as credit, (case when (credit+ifnull(number,0))>=0 then "No" else "Yes" end) as credit_limit_breached from Users left join (select user_id, sum(amt) as number from (select paid_by as user_id, -amount as amt from Transactions union all select paid_to, amount from Transactions) temp group by 1) temp1 on Users.user_id = temp1.user_id
select a.user_id, a.user_name, (a.credit - ifnull(b.amount, 0) + ifnull(c.amount, 0)) as credit, case when (a.credit - ifnull(b.amount,0) + ifnull(c.amount,0)) < 0 then 'Yes' else 'No' end as credit_limit_breached from Users a left join( select paid_by, sum(amount) as amount from Transactions group by paid_by ) b on a.user_id = b.paid_by left join ( select paid_to, sum(amount) as amount from Transactions group by paid_to )c on a.user_id = c.paid_to
select a.user_id, a.user_name, a.credit - coalesce(b.amount, 0) + coalesce(c.amount, 0) as credit, case when a.credit - coalesce(b.amount, 0) + coalesce(c.amount, 0) < 0 then 'Yes' else 'No' end as credit_limit_breached from users a left join ( select paid_by as user_id, sum(amount) as amount from transactions group by 1 ) b on a.user_id = b.user_id left join ( select paid_to as user_id, sum(amount) as amount from transactions group by 1 ) c on a.user_id = c.user_id
select a.user_id, a.user_name, ifnull((a.new_credit+sum(t2.amount)),a.new_credit) as credit, if(ifnull((a.new_credit+sum(t2.amount)),a.new_credit)<0, 'Yes','No') as credit_limit_breached from (select u.user_id, u.user_name, ifnull(u.credit-sum(t.amount),u.credit) as new_credit from Users u left join Transactions t on u.user_id=t.paid_by group by t.paid_by)a left join Transactions t2 on a.user_id=t2.paid_to group by t2.paid_to
select a.user_id, a.user_name, sum(a.credit) credit, case when sum(a.credit) >= 0 then 'No' else 'Yes' end credit_limit_breached from (select * from Users union all select u.user_id, user_name, 0-amount credit from Transactions t left join Users u on t.paid_by=u.user_id union all select t.paid_to user_id, user_name, amount credit from Transactions t left join Users u on t.paid_to=u.user_id) a group by a.user_id
select a.user_id, a.user_name, sum(amount) credit , case when sum(amount) <= 0 then 'Yes' else 'No' end credit_limit_breached from ( select a.user_id, a.user_name, a.credit, ifnull(-b.amount,0) amount from Users a left join Transactions b on a.user_id = b.paid_by union all select a.user_id, a.user_name, a.credit, ifnull(b.amount,0)amount from Users a left join Transactions b on a.user_id = b.paid_to union all select a.user_id, a.user_name, a.credit, a.credit amount from Users a) as a group by a.user_id
select b.user_id, b.user_name,( b.credit-coalesce(c.credit_2,0)) as credit, (case when ( b.credit < c.credit_2) then 'Yes' else 'No' end ) as credit_limit_breached from users b left join ( select a.person, sum(a.pay_1) as credit_2 from ( Select paid_by as person, sum(amount) as pay_1 from transactions group by 1 union all select paid_to, -sum(amount) as pay_2 from transactions group by 1)a group by 1)c on b.user_id = c.person
select c.user_id, c.user_name, (c.credit - ifnull(a.pay_amount, 0) + ifnull(b.get_amount, 0)) as credit, case when (c.credit - ifnull(a.pay_amount, 0) + ifnull(b.get_amount, 0)) < 0 then 'Yes' else 'No' end as credit_limit_breached from (users c left join (select paid_by, sum(amount) as pay_amount from transactions group by paid_by) a on c.user_id = a.paid_by left join (select paid_to, sum(amount) as get_amount from transactions group by paid_to) b on c.user_id = b.paid_to)
select c.user_id, c.user_name, (c.credit - ifnull(a.pay_amount,0) + ifnull(b.get_amount,0)) as credit, case when (c.credit - ifnull(a.pay_amount,0) + ifnull(b.get_amount,0)) < 0 then 'Yes' else 'No' end as credit_limit_breached from ( Users c left join (select paid_by, sum(amount) as pay_amount from Transactions group by paid_by) a on c.user_id = a.paid_by left join (select paid_to, sum(amount) as get_amount from Transactions group by paid_to) b on c.user_id = b.paid_to )
select c.user_id, c.user_name, (c.credit - ifnull(a.pay_amount,0) + ifnull(b.get_amount,0)) as credit, case when (c.credit - ifnull(a.pay_amount,0) + ifnull(b.get_amount,0)) < 0 then 'Yes' else 'No' end as credit_limit_breached from (Users c left join (select paid_by, sum(amount) as pay_amount from Transactions group by paid_by) a on c.user_id = a.paid_by left join (select paid_to, sum(amount) as get_amount from Transactions group by paid_to) b on c.user_id = b.paid_to)
select c.user_id, c.user_name, c.credit, case when credit < 0 then 'Yes' else 'No' end as credit_limit_breached from (select a.user_id, a.user_name, (a.credit + sum(case when b.paid_by = a.user_id then -amount when b.paid_to = a.user_id then amount else 0 end)) as credit from users a left join transactions b on a.user_id = b.paid_by or a.user_id = b.paid_to group by 1) c
select c.user_id, user_name, (credit - ifnull(d.sum,0)) as credit, case when (credit - ifnull(d.sum,0)) >= 0 then 'No' else 'Yes' end as credit_limit_breached from users c left join (select a.user_id, SUM(ifnull(a.amount,0) - ifnull(b.amount,0)) as sum from (select user_id, paid_by, amount from users left join (select paid_by, sum(amount) as amount from transactions group by paid_by) z on user_id =z.paid_by) a join (select user_id, paid_to, amount from users left join ( select paid_to, sum(amount) as amount from transactions group by paid_to) x on user_id = x.paid_to) b on a.user_id = b.user_id group by a.paid_by) d on c.user_id = d.user_id
select c.user_id,c.user_name,(c.credit+ifnull(sum(d.amount),0)) as credit, case when (c.credit+ifnull(sum(d.amount),0))<0 then 'Yes' else 'No' end as credit_limit_breached from (select a.user_id,a.user_name,(a.credit-ifnull(sum(b.amount),0)) as credit from Users a left join Transactions b on a.user_id=b.paid_by group by 1,2) c left join Transactions d on c.user_id=d.paid_to group by 1,2
select distinct users.user_id, users.user_name, (users.credit - ifnull(pay.amount, 0) + ifnull(receive.amount, 0)) as credit, case when (users.credit - ifnull(pay.amount, 0) + ifnull(receive.amount, 0)) < 0 then 'Yes' else 'No' end as credit_limit_breached from ( select distinct a.user_id, a.user_name, a.credit from users a ) users left join ( select distinct a.paid_by, sum(a.amount) as amount from transactions a group by a.paid_by ) pay on users.user_id = pay.paid_by left join ( select distinct a.paid_to, sum(a.amount) as amount from transactions a group by a.paid_to ) receive on users.user_id = receive.paid_to
select temp.*, case when credit<0 then 'Yes' else 'No' end credit_limit_breached from (select user_id, user_name, credit + sum(case when user_id = paid_by then -amount when user_id = paid_to then amount else 0 end) credit from Users u left join Transactions t on user_id = paid_to or user_id = paid_by group by 1) temp
select tt1.user_id, user_name, credit + ifnull(amount, 0) as credit, if(credit + ifnull(amount, 0)<0, 'Yes','No') as credit_limit_breached from Users tt1 left join (select user_id, sum(amount) as amount from (select paid_to as user_id, amount from Transactions union all select paid_by as user_id, -amount as amount from Transactions) t group by user_id) tt2 on tt1.user_id = tt2.user_id
select u.user_id, u.user_name, (credit - ifnull(paid_amount, 0) + ifnull(received_amount, 0)) as credit, (case when (credit - ifnull(paid_amount, 0) + ifnull(received_amount, 0)) < 0 then 'Yes' else 'No' end) as credit_limit_breached from Users u left join (select paid_by,sum(amount) as paid_amount from Transactions group by paid_by) t1 on u.user_id = t1.paid_by left join (select paid_to, sum(amount) as received_amount from Transactions group by paid_to) t2 on u.user_id = t2.paid_to
select u.user_id, u.user_name, (u.credit+ifnull(sum(diff),0)) as credit, case when u.credit+ifnull(sum(temp.diff),0)>0 then 'No' else 'Yes' END AS credit_limit_breached from users u left join ( select paid_by as user_id, -amount as diff from Transactions union all select paid_to as user_id, amount as diff from Transactions ) temp on u.user_id=temp.user_id group by 1,2
select u.user_id, u.user_name, (u.credit+temp.diff) as credit , case when ( u.credit+temp.diff)>=0 then 'No' else 'Yes' end as credit_limit_breached from users u join ( select u.user_id, u.user_name, ifnull(sum(case when u.user_id=t1.paid_by then -t1.amount else t1.amount end),0) as diff from users u left join transactions t1 on t1.paid_by=u.user_id or t1.paid_to=u.user_id group by 1,2 ) temp on u.user_id=temp.user_id
select u.user_id, u.user_name, IFNULL(SUM(CASE WHEN u.user_id = t.paid_by then -amount ELSE amount END),0) + u.credit as credit, CASE WHEN IFNULL(SUM(CASE WHEN u.user_id = t.paid_by then -amount ELSE amount END),0) >= - u.credit THEN 'No' ELSE 'Yes' END as credit_limit_breached from Users u LEFT JOIn Transactions t ON u.user_id = t.paid_by or u.user_id = t.Paid_to group by u.user_id
select u.user_id, u.user_name, b.credit , case when b.credit <0 then 'Yes' else 'No' end as credit_limit_breached from Users u inner join (select user_id, sum(amt) as credit from ( select user_id , credit as amt from Users union all select paid_by as user_id, amount * -1 as amt from Transactions union all select paid_to as user_id, amount * 1 as amt from Transactions ) a group by user_id) b on b.user_id = u.user_id
select u.user_id, u.user_name, credit + ifnull(sum(amount), 0) as credit, case when credit + ifnull(sum(amount), 0) < 0 then 'Yes' else 'No' end as credit_limit_breached from users as u left join ( ( select paid_by as user_id, -sum(amount) as amount from transactions group by 1 ) union all ( select paid_to as user_id, sum(amount) as amount from transactions group by 1 ) ) as a on u.user_id = a.user_id group by 1,2
select u.user_id, u.user_name, credit+ifnull(sum(amount),0) as credit, if(credit+ifnull(sum(amount),0)<0,"Yes","No") as credit_limit_breached from Users u left join (select paid_by as user_id, -amount as amount from Transactions union all select paid_to as user_id, amount as amount from Transactions) a using(user_id) group by u.user_id
select u.user_id, u.user_name, ifnull(sum(amount),0)+u.credit as credit, case when sum(amount) is not null and u.credit + sum(amount) <0 then 'Yes' else 'No' end as credit_limit_breached from Users as u left join (select paid_by as user, - amount as amount from transactions union all select paid_to as user, amount as amount from transactions) t on t.user = u.user_id group by u.user_id,u.user_name,u.credit
select u.user_id, u.user_name, ifnull(sum(case when u.user_id = t.paid_by then -amount else amount end),0) + u.credit as credit, case when ifnull(sum(case when u.user_id = t.paid_by then -amount else amount end),0) + u.credit > 0 then 'No' else 'Yes' end as 'credit_limit_breached' from Users u left join Transactions t on u.user_id = t.paid_by or u.user_id = t.paid_to group by u.user_id
select u.user_id, u.user_name, ifnull(sum(t.amount),0) + u.credit credit, case when ifnull(sum(t.amount),0) + u.credit >= 0 then 'No' else 'Yes' end credit_limit_breached from (select paid_by user_id, -1 * amount amount from transactions union all select paid_to user_id, amount from transactions) t right join users u using(user_id) group by u.user_id
select u.user_id, u.user_name, u.credit - ifnull(c2.spend,0) as credit, case when u.credit - ifnull(c2.spend,0) >= 0 then 'No' else 'Yes' end as credit_limit_breached from users u left join (select c1.user_id, sum(c1.amount) as spend from (select paid_by as user_id, amount from transactions union all select paid_to as user_id, -1*amount as amount from transactions) c1 group by c1.user_id) c2 on u.user_id = c2.user_id
select u.user_id, u.user_name, u.credit+ifnull(n.net_amount,0) as credit, case when u.credit+ifnull(n.net_amount,0) < 0 then 'Yes' else 'No' end as credit_limit_breached from Users u left join ( select user_id, sum(amount) as net_amount from( select paid_by as user_id, -1*amount as amount from Transactions union all select paid_to as user_id, amount from Transactions ) t group by user_id ) n on u.user_id = n.user_id
select u.user_id, u.user_name, u.credit+ifnull(t2.trans_amount,0) as credit, case when u.credit+ifnull(t2.trans_amount,0) < 0 then 'Yes' when u.credit+ifnull(t2.trans_amount,0) >=0 then 'No' end as credit_limit_breached from users as u left join (select user_id, sum(amount) as trans_amount from ( (select paid_by as user_id, -1*amount as amount from transactions) union all (select paid_to as user_id, amount from transactions) ) as t1 group by user_id) as t2 on u.user_id=t2.user_id
select u.user_id, u.user_name, u.credit-ifnull(cashout.outamount,0) + ifnull(cashin.inamount,0) as credit, (case when u.credit-ifnull(cashout.outamount,0) + ifnull(cashin.inamount,0) < 0 then 'Yes' else 'No' end) as credit_limit_breached from Users u left join (select paid_by, sum(amount) as outamount from Transactions group by paid_by) as cashout on u.user_id = cashout.paid_by left join (select paid_to, sum(amount) as inamount from Transactions group by paid_to) as cashin on u.user_id = cashin.paid_to
select u.user_id, user_name, coalesce((sum(amount) + credit), credit) as credit, case when coalesce((sum(amount) + credit), credit) >= 0 then 'No' else 'Yes' end as credit_limit_breached from (select paid_by as payment_id, -1 * amount as amount, transacted_on from Transactions t1 union all select paid_to, amount, transacted_on from Transactions t2 ) temp right join Users u on temp.payment_id = u.user_id group by 1 order by 1
select u.user_id, user_name, u.credit + coalesce(temp.credit,0) as credit, case when u.credit + coalesce(temp.credit,0) >= 0 then 'No' else 'Yes' end as credit_limit_breached from Users as u left join (select user_id, sum(credit) as credit from ( select paid_by as user_id, -amount as credit from Transactions union all select paid_to as user_id, amount as credit from Transactions ) as a group by user_id) as temp on u.user_id = temp.user_id group by u.user_id
select u.user_id, user_name, u.credit - ifnull(out_cash,0) + ifnull(in_cash,0) as credit, case when u.credit - ifnull(out_cash,0) + ifnull(in_cash,0) > 0 then 'No' else 'Yes' end as credit_limit_breached from Users u LEFT JOIN (SELECT paid_by, SUM(amount) AS out_cash FROM Transactions GROUP BY paid_by) out_tmp ON U.user_id = out_tmp.paid_by LEFT JOIN (SELECT paid_to, SUM(amount) AS in_cash FROM Transactions GROUP BY paid_to) in_tmp ON U.user_id = in_tmp.paid_to
select u.user_id, user_name, u.credit+ifnull(sum(amount),0) as credit, if(u.credit+ifnull(sum(amount),0)>=0, 'No','Yes') as credit_limit_breached from Users u left join (select paid_by as user_Id, -amount as amount from transactions union all select paid_to as user_id, amount from transactions) as tran on u.user_id = tran.user_id group by u.user_id
select u.user_id,u.user_name, ifnull(sum(amount),0) + credit credit, case when ifnull(sum(amount),0) + credit > 0 then 'No' else 'Yes' end credit_limit_breached from ( select paid_by user_id, -amount amount from transactions union all select paid_to, amount from transactions ) t right join users u using (user_id) group by 1,2
select u.user_id,u.user_name,(u.credit-COALESCE(c.charge, 0)+COALESCE(g.gain, 0)) as credit, case when (u.credit-COALESCE(c.charge, 0)+COALESCE(g.gain, 0))<0 then 'Yes' else 'No' end as credit_limit_breached from Users u left join (select paid_by, sum(amount) as charge from Transactions group by paid_by) c on u.user_id=c.paid_by left join (select paid_to, sum(amount) as gain from Transactions group by paid_to) g on g.paid_to=u.user_id
select user_id as USER_ID, user_name as USER_NAME, (credit+ifnull(amount, 0)) as CREDIT, case when (credit+ifnull(amount,0))< 0 then 'Yes' else 'No' end as CREDIT_LIMIT_BREACHED from Users u left join ( select userid, sum(amount) as amount from ( select paid_by as userid, -amount as amount from Transactions union all select paid_to as userid, amount as amount from Transactions ) as tab group by userid ) as tab on u.user_id = tab.userid group by u.user_id
select user_id, user_name, (U.credit + sum(case when U.user_id = T.paid_by then -amount when U.user_id = T.paid_to then amount else 0 end)) as credit, case when (U.credit + sum(case when U.user_id = T.paid_by then -amount when U.user_id = T.paid_to then amount else 0 end)) > 0 then 'No' else 'Yes' end as credit_limit_breached from Users U left join Transactions T on U.user_id = T.paid_by or U.user_id = T.paid_to group by user_id, user_name
select user_id, user_name, (credit -coalesce(credit_x,0) + coalesce(credit_y, 0)) as credit , case when (credit -coalesce(credit_x,0) + coalesce(credit_y, 0)) < 0 then 'Yes' else 'No' end as credit_limit_breached from users u left join (select paid_by, sum(t.amount) as credit_x from transactions t group by t.paid_by) x on u.user_id = x.paid_by left join (select paid_to,sum(y.amount) as credit_y from transactions y group by y.paid_to) a on u.user_id = a.paid_to
select user_id, user_name, (credit -ifnull(out_cash, 0) + ifnull(in_cash, 0)) credit, IF((credit-IFNULL(out_cash, 0) + IFNULL(in_cash,0)) < 0, 'Yes','No') AS credit_limit_breached from Users u left join ( select paid_by, sum(amount) as out_cash from Transactions group by paid_by) as outc on u.user_id = outc.paid_by left join ( select paid_to, sum(amount) as in_cash from Transactions group by paid_to) as inc on u.user_id = inc.paid_to
select user_id, user_name, (credit+COALESCE(SUM(CASE WHEN USER_ID = PAID_BY THEN -amount else amount end ),0))as credit, CASE WHEN (credit+COALESCE(SUM(CASE WHEN USER_ID = PAID_BY THEN -amount else amount end ),0))>0 THEN "No" ELSE "Yes" end as credit_limit_breached from Users u LEFT JOIN Transactions t on u.user_id = t.paid_by or u.user_id = t.paid_to group by user_id, user_name
select user_id, user_name, IFNULL(SUM(amount),0)+credit as credit, IF((IFNULL(SUM(amount),0) + credit) > 0,"No","Yes") as credit_limit_breached from(select u.user_id, u.user_name, credit, IF(u.user_id=t.paid_by,-amount,IF(u.user_id=t.paid_to,amount,0)) as amount from Users u left join Transactions as t on u.user_id=t.paid_by or u.user_id =t.paid_to ) temp group by 1,2
select user_id, user_name, credit + ifnull((0-t1.amount),0) + ifnull((t2.amount),0) credit, case when credit + ifnull((0-t1.amount),0) + ifnull((t2.amount),0) <0 then 'Yes' else 'No' end credit_limit_breached from users u left join (select paid_by, sum(amount) amount from transactions group by 1) t1 on u.user_id = t1.paid_by left join (select paid_to, sum(amount) amount from transactions group by 1) t2 on u.user_id = t2.paid_to group by 1,2
select user_id, user_name, credit + ifnull(trans_amount,0) as credit, case when credit + ifnull(trans_amount,0)>=0 then 'No' else 'Yes' end as credit_limit_breached from (select U.user_id, U.user_name, U.credit, sum(case when U.user_id = T.paid_by then -amount else amount end) as trans_amount from Users U left join Transactions T on U.user_id = T.paid_by or U.user_id = T.paid_to group by 1,2,3) tbl
select user_id, user_name, credit + total_amount as credit, case when credit + total_amount < 0 then 'Yes' else 'No' end as credit_limit_breached from ( select a.user_id, a.user_name, a.credit, sum(case when a.user_id = b.paid_by then -amount when a.user_id = b.paid_to then amount else 0 end) as total_amount from users a left join transactions b on a.user_id = b.paid_by or a.user_id = b.paid_to group by 1, 2, 3 ) t
select user_id, user_name, credit + trans as credit, case when credit + trans < 0 then 'Yes' else 'No' end as credit_limit_breached from( select U.user_id, U.user_name, U.credit, coalesce(sum(case when U.user_id = T.paid_by then - amount when U.user_id = T.paid_to then + amount else 0 end),0) as trans from Users as U left outer join Transactions as T on U.user_id = T.paid_by or U.user_id = T.paid_to group by U.user_id, U.user_name, U.credit) as TMP
select user_id, user_name, credit+ifnull(sum(amount),0) credit, case when credit+sum(amount) <0 then 'Yes' else 'No' end credit_limit_breached from users left join ( select paid_to user_id, amount from transactions union all select paid_by, -amount from transactions ) t using (user_id) group by 1,2
select user_id, user_name, credit, (case when credit <0 then 'Yes' else 'No' end) as credit_limit_breached from( select u.user_id, user_name, (ifnull(sum(cmbd.amt),0) + credit) as credit from Users u left join ( (select paid_by as user_id, -sum(amount) as amt from Transactions group by 1) union (select paid_to as user_id, sum(amount) as amt from Transactions group by 1)) cmbd on u.user_id = cmbd.user_id group by u.user_id) final
select user_id, user_name, credit, (case when credit >= 0 then 'No' else 'Yes' end) as credit_limit_breached from (select u.user_id, u.user_name,sum(s.credit) as credit from (select paid_by as user_id, -amount as credit from Transactions union all select paid_to as user_id, amount as credit from Transactions union all select user_id, credit from Users) s right join Users u on s.user_id = u.user_id group by 1,2 ) sub2
select user_id, user_name, credit, case when credit<0 then "Yes" else "No" end as credit_limit_breached from ( select id as user_id,user_name,sum(a.credit) as credit from ( select paid_by as id,-amount as credit from transactions union all select paid_to as id, amount as credit from transactions union all select user_id as id, credit as credit from users ) a left join users on users.user_id=a.id group by a.id) b
select user_id, user_name, credit-ifnull(loss.amt,0)+ifnull(gain.amt,0) credit, case when credit-ifnull(loss.amt,0)+ifnull(gain.amt,0) >=0 then 'No' else 'Yes' end credit_limit_breached from Users u left join (select paid_by, sum(amount) amt from Transactions group by paid_by) loss on u.user_id=loss.paid_by left join (select paid_to, sum(amount) amt from Transactions group by paid_to) gain on u.user_id=gain.paid_to
select user_id, user_name, max(credit) + sum(tran) credit, if(max(credit) + sum(tran)<0, 'Yes', 'No') credit_limit_breached from (select *, case u.user_id when t.paid_by then -amount when t.paid_to then amount else 0 end tran from users u left join Transactions t on u.user_id = t.paid_by or u.user_id = t.paid_to) tr group by user_id
select user_id, user_name, sum(case when user_id=paid_by then -1*amount when user_id=paid_to then amount else 0 end)+credit as credit, (case when sum(case when user_id=paid_by then -1*amount when user_id=paid_to then amount else 0 end)+credit>0 then 'No' when sum(case when user_id=paid_by then -1*amount when user_id=paid_to then amount else 0 end)+credit<0 then 'Yes' end) as credit_limit_breached from users left join transactions on users.user_id=transactions.paid_by or users.user_id=transactions.paid_to group by user_id
select user_id, user_name, sum(credit) as credit, case when sum(credit) < 0 then 'Yes' else 'No' end as credit_limit_breached from ( select user_id, user_name, credit from Users u union select user_id, user_name, -1* sum(amount) as credit from users u join transactions t on u.user_id = t.paid_by group by 1,2 union all select user_id, user_name, sum(amount) as credit from users u join transactions t on u.user_id = t.paid_to group by 1,2 ) x group by 1,2
select user_id, user_name, sum(credit+ifnull(amt,0)) as credit, case when sum(credit+ifnull(amt,0))<0 then 'Yes' else 'No' end as credit_limit_breached from users u left join (select id, sum(amt) as amt from (select paid_by as id, sum(-amount) as amt from transactions group by paid_by union all select paid_to as id, sum(amount) as amt from transactions group by paid_to)s group by id) a on u.user_id = a.id group by 1,2
select user_id,user_name,credit+final as credit,case when credit+final<0 then 'Yes' else 'No' end as credit_limit_breached from (select b.*,ifnull(a.amount,0) as final from Users b left join (select user_id,sum(amount) as amount from (select paid_by as user_id,-amount as amount from Transactions union all select paid_to as user_id, amount as amount from Transactions)a group by user_id)a on b.user_id=a.user_id)c
select users.user_id ,users.user_name ,users.credit + coalesce(sum_user_amt.sum_amt,0) as credit ,case when users.credit + coalesce(sum_user_amt.sum_amt,0) < 0 then 'Yes' else 'No' end as credit_limit_breached from Users users left join( select user_id ,sum(amount) as sum_amt from( (select paid_by as user_id ,amount*(-1) as amount from Transactions ) union all ( select paid_to as user_id ,amount as amount from Transactions ) ) sum_amt group by user_id )sum_user_amt on users.user_id = sum_user_amt.user_id
select users.user_id as user_id ,users.user_name as user_name ,users.credit + ifnull(sum(case when users.user_id = trans.paid_by then -amount else amount end),0) as credit ,if(users.credit + ifnull(sum(case when users.user_id = trans.paid_by then -amount else amount end),0)<0,'Yes','No') as credit_limit_breached from Users users left join Transactions trans on users.user_id = trans.paid_by or users.user_id = trans.paid_to group by users.user_id
with T1 as ( select paid_by as user_id, -amount as amount from Transactions union all select paid_to as user_id, amount from Transactions ), T2 as ( select user_id, sum(amount) as net_trans from T1 group by user_id ) select U.user_id, U.user_name, U.credit+ifnull(T2.net_trans,0) as credit, case when U.credit+ifnull(T2.net_trans,0)<0 then 'Yes' else 'No' end as credit_limit_breached from Users as U left join T2 on U.user_id=T2.user_id
with Temp as (select paid_by as user_id,amount*-1 as credit from Transactions union all select paid_to, amount from Transactions) select u.user_id, u.user_name, ifnull(sum(t.credit),0)+u.credit as credit, case when sum(t.credit)+u.credit<0 then 'Yes' else 'No' end as credit_limit_breached from Temp t right join Users u on u.user_id = t.user_id group by u.user_id
with a as ( select all_trans.user_id, sum(all_trans.credit) credit from ( select paid_by as user_id, amount * (-1) as credit from transactions union all select paid_to as user_id, amount as credit from transactions union all select user_id, credit from users ) all_trans group by all_trans.user_id ) select u.user_id user_id, u.user_name user_name, a.credit, case when a.credit < 0 then 'Yes' else 'No' end as credit_limit_breached from Users u left outer join a on u.user_id = a.user_id
with a as ( select paid_by, sum(amount) as cash_out from transactions group by 1), b as ( select paid_to, sum(amount) as cash_in from transactions group by 1) select u.user_id, u.user_name, u.credit-ifnull(a.cash_out,0)+ifnull(b.cash_in,0) as credit, case when u.credit-ifnull(a.cash_out,0)+ifnull(b.cash_in,0) >= 0 then 'No' else 'Yes' end as credit_limit_breached from users u left join a on u.user_id = a.paid_by left join b on u.user_id = b.paid_to
with a as ( select paid_by, sum(amount) cash_out from transactions group by paid_by), b as ( select paid_to, sum(amount) cash_in from transactions group by paid_to ) select u.user_id, u.user_name, u.credit - ifnull(a.cash_out,0) + ifnull(b.cash_in,0) as credit, case when u.credit - ifnull(a.cash_out,0) + ifnull(b.cash_in,0) >= 0 then 'No' else 'Yes' end as credit_limit_breached from users u left join a on u.user_id = a.paid_by left join b on u.user_id = b.paid_to
with a as (select user_id, sum(Am) as diff from (select paid_by as user_id, -amount as Am from Transactions union all select paid_to as user_id, amount as Am from Transactions) as t group by user_id) select U.user_id as USER_ID, user_name as USER_NAME, credit + ifnull(diff,0) as CREDIT, (case when credit + ifnull(diff,0) < 0 then 'Yes' else 'No' end) as CREDIT_LIMIT_BREACHED from Users U left join a on U.user_id = a.user_id
with a as( select paid_to, sum(amount) as amount from Transactions group by paid_to), b as ( select paid_by, sum(amount) as amount from Transactions group by paid_by) select u.user_id, u.user_name, (u.credit - ifnull(b.amount, 0) + ifnull(a.amount, 0)) as credit, case when (u.credit - ifnull(b.amount, 0) + ifnull(a.amount, 0)) < 0 then 'Yes' else 'No' end as credit_limit_breached from Users u left join a on u.user_id = a.paid_to left join b on u.user_id = b.paid_by
with agg_transactions as ( select trans_id, paid_by as user_id, -amount as amount, transacted_on from transactions t union all select trans_id, paid_to as user_id, amount, transacted_on from transactions t ) , user_total_trans as ( select user_id, sum(amount) as net_amount from agg_transactions a group by 1 ) select u.user_id, u.user_name, u.credit+coalesce(ut.net_amount,0) as credit, case when (u.credit+coalesce(ut.net_amount,0)) >= 0 then 'No' else 'Yes' end as credit_limit_breached from Users u left join user_total_trans ut on ut.user_id = u.user_id
with all_trans as ( select paid_by as user_,-1*sum(amount) as bamount from Transactions group by paid_by union select paid_to as user_,sum(amount) as bamount from Transactions group by paid_to) select *,case when credit < 0 then 'Yes' else 'No' end as credit_limit_breached from (select user_id,user_name,credit + ifnull(sum(bamount),0) as credit from users u left join all_trans a on u.user_id=a.user_ group by user_) t
with amount as( select trans_id, paid_by as user_id, case when paid_by then -1*amount else 0 end as bamount, transacted_on from transactions union all select trans_id, paid_to as user_id, case when paid_to then 1*amount else 0 end as bamount, transacted_on from transactions) select *, case when credit < 0 then 'Yes' else 'No' end as credit_limit_breached from( select u.user_id, user_name, credit + ifnull(sum(bamount),0) as credit from users as u left join amount as a on u.user_id = a.user_id group by user_id) as sub
with b as (SELECT distinct userid, sum(am) as amo FROM (SELECT paid_by as userid, -amount as am FROM Transactions UNION ALL SELECT paid_to as userid, amount as am FROM Transactions ) as a GROUP BY a.userid) SELECT u.user_id,u.user_name,(u.credit+ifnull(b.amo,0)) as credit ,(case when (u.credit+ifnull(b.amo,0))<0 then 'Yes' else 'No' end) as credit_limit_breached FROM Users as u LEFT JOIN b ON b.userid = u.user_id
with base as( select paid_by, -amount as paid_amount, paid_to, amount as gained_amount from transactions ) select *, case when credit<0 then "Yes" else "No" end credit_limit_breached from( select u.user_id, user_name, credit + ifnull(sum(amount),0) as credit from( select paid_by as user_id, paid_amount as amount from base union all select paid_to as user_id, gained_amount as amount from base ) t right join users u on t.user_id = u.user_id group by 1 ) sub
with c as ( select paid_to as user_id, sum(amount) as credits from transactions t group by 1 ), d as ( select paid_by as user_id, sum(amount) as debits from transactions t group by 1 ) select u.user_id as USER_ID,u.user_name AS USER_NAME, (u.credit + coalesce(credits,0) - coalesce(debits,0)) as CREDIT, case when (u.credit + coalesce(credits,0) - coalesce(debits,0)) > 0 then 'No' else 'Yes' end as CREDIT_LIMIT_BREACHED from users u left join c on c.user_id = u.user_id left join d on d.user_id = u.user_id
with cte as ( Select id, sum(amount) total from ( (Select paid_by as id, -amount amount, transacted_on from Transactions order by paid_by ) union all (Select paid_to as id, amount, transacted_on from Transactions order by paid_to) ) temp group by id ) Select u.user_id, u.user_name, (u.credit+ifnull(cte.total,0)) CREDIT , case when u.credit+cte.total < 0 then 'Yes' else 'No' end as credit_limit_breached from Users u left join cte on u.user_id = cte.id
with cte as ( select id, sum(amt) as amt from (select paid_by as id, 0-amount as amt from Transactions union all select paid_to as id, amount as amt from Transactions) a group by 1) select user_id, user_name, credit + ifnull(amt,0) as credit, case when credit + amt < 0 then 'Yes' else 'No' end as credit_limit_breached from Users x left join cte y on x.user_id = y.id
with cte as ( select paid_by as id, (-sum(amount)) as bal from Transactions group by 1 union all select paid_to as id, sum(amount) as bal from Transactions group by 1 union all select user_id as id, sum(credit) as bal from Users group by 1 ), cte2 as( select id, sum(bal) as credit from cte group by 1 ) select tab2.user_id, tab2.user_name, tab1.credit, case when tab1.credit <0 then "Yes" else "No" end as credit_limit_breached from cte2 tab1 left join Users tab2 on tab1.id = tab2.user_id
with cte as ( select paid_by as p_id ,trans_id,-(amount) as amt from Transactions union select paid_to as p_id,trans_id,amount as amt from Transactions ) select u.user_id,u.user_name,max(u.credit)+ifnull(sum(amt),0) as credit, case when max(u.credit)+ifnull(sum(amt),0) > 0 then 'No' else 'Yes' end as credit_limit_breached from users u left join cte t on u.user_id = t.p_id group by user_id
with cte as ( select paid_by as person, amount * -1 as amount from transactions union all select paid_to as person, amount from transactions ) select user_id, user_name, ifnull(sum(amount) + max(credit),max(credit)) as credit, (case when (sum(amount) + max(credit)) < 0 then 'Yes' else 'No' end) as credit_limit_breached from users u left join cte c on u.user_id = c.person group by 1,2
with cte as ( select paid_by as user_id, 'debt' as type, sum(amount) as amt from Transactions group by 1 union all select paid_to, 'credit' as type, sum(amount) as amt from Transactions group by 1 ) select Users.User_id, Users.user_name, users.credit - (coalesce(a.amt,0) - coalesce(b.amt,0)) as credit, case when (coalesce(a.amt,0) - coalesce(b.amt,0)) > Users.credit then 'Yes' else 'No' END as credit_limit_breached from Users left join cte a on Users.user_id = a.user_id and a.type = 'debt' left join cte b on Users.user_id = b.user_id and b.type = 'credit'
with cte as ( select paid_by as user_id, -1*amount as amount from transactions union all select paid_to as user_id, amount from transactions union all select user_id,credit as amount from users ) select a.user_id, u.user_name, a.credit, if(a.credit < 0,"Yes","No") credit_limit_breached from ( select user_id, sum(amount) as credit from cte group by 1) a join users u on a.user_id = u.user_id
with cte as ( select paid_by as user_id, amount * -1 as credit from transactions union all select paid_to as user_id, amount as credit from transactions union all select user_id, credit from users ) ,cte2 as ( select user_id, sum(credit) as credit from cte group by user_id ) select u.user_id ,u.user_name, cte2.credit, case when cte2.credit < 0 then 'Yes' else 'No' end as credit_limit_breached from cte2 right join users u on u.user_id = cte2.user_id
with cte as ( select paid_by as user_id, sum(amount)*-1 as cash_out from transactions group by 1 union all select paid_to as user_id, sum(amount) as cash_in from transactions group by 1 union all select user_id, credit from users ) select cte.user_id, users.user_name, sum(cash_out) as credit, case when sum(cash_out) < 0 then 'Yes' else 'No' end as credit_limit_breached from cte left join users using (user_id) group by 1,2 order by 1
with cte as ( select paid_by as user_id,(-1)*amount as amount from transactions union all select paid_to as user_id,amount from transactions union all select user_id,credit as amount from users ) select u.user_id,u.user_name,sum(amount) as credit, case when sum(amount)>0 then 'No' else 'Yes' end as credit_limit_breached from cte join users as u on cte.user_id=u.user_id group by u.user_id
with cte as ( select paid_by user_id, -1*amount amount from transactions union all select paid_to user_id, amount from transactions union all select user_id, credit amount from users ) select user_id, user_name, credit_final credit, (case when credit_final>=0 then 'No' else 'Yes' end) credit_limit_breached from (select user_id, sum(amount) credit_final from cte group by user_id ) r1 natural join users
with cte as ( select paid_to as user_id , amount*1 as amount from Transactions union all select paid_by as user_id , amount*(-1) as amount from Transactions ) select u.user_id , u.user_name , u.credit+coalesce(sum(c.amount),0) as credit , case when u.credit+coalesce(sum(c.amount),0)<0 then 'Yes' else 'No' end as credit_limit_breached from Users u left join cte c on u.user_id=c.user_id group by 1,2
with cte as ( select t.paid_by as user_id, t.amount *-1 as amount from Transactions t union all select t.paid_to as user_id, t.amount as amount from Transactions t ) select u.user_id, u.user_name, u.credit + ifnull(sum(cte.amount),0) as credit, case when u.credit + ifnull(sum(cte.amount),0) < 0 then 'Yes' else 'No' end as credit_limit_breached from Users u left join cte on cte.user_id = u.user_id group by 1
with cte as ( select u.user_id ,u.user_name ,sum(u.credit) as credit ,sum(coalesce(t.amount,0)) as paid ,sum(coalesce(t1.amount,0)) as received from users u left join (select paid_by, sum(amount) as amount from transactions group by paid_by) t on u.user_id = t.paid_by left join (select paid_to, sum(amount) as amount from transactions group by paid_to) t1 on u.user_id = t1.paid_to group by u.user_id ,u.user_name ) select user_id ,user_name ,(credit - paid + received) as credit ,case when (credit - paid + received) < 0 then 'Yes' else 'No' end as credit_limit_breached from cte
with cte as ( select u.user_id,u.user_name,sum(u.credit) as credit ,sum(coalesce(t.amount,0)) as paid ,sum(coalesce(t1.amount,0)) as received from users u left join (select paid_by, sum(amount) as amount from transactions group by paid_by) t on u.user_id = t.paid_by left join (select paid_to, sum(amount) as amount from transactions group by paid_to) t1 on u.user_id = t1.paid_to group by u.user_id ,u.user_name ) select user_id ,user_name ,(credit - paid + received) as credit ,case when (credit - paid + received) < 0 then 'Yes' else 'No' end as credit_limit_breached from cte
with cte as ( select user_id, credit from Users union all select paid_by as user_id, -amount as credit from Transactions union all select paid_to as user_id, amount as credit from Transactions ) select u.user_id, u.user_name, sum(a.credit) as credit, case when sum(a.credit)<0 then 'Yes' else 'No' end as credit_limit_breached from cte as a join Users u on a.user_id = u.user_id group by u.user_id
with cte as ( select user_id, sum(amount) as amount from ( select paid_by as user_id, -1*amount as amount from transactions union all select paid_to as user_id, amount from transactions )a group by user_id ) select u.user_id, u.user_name, u.credit + coalesce(c.amount,0) as credit, case when u.credit +coalesce(c.amount,0) < 0 then 'Yes' else 'No' end as credit_limit_breached from users u left join cte c on u.user_id = c.user_id
with cte as ( select user_id, user_name, credit+sum(case when user_id = paid_by then -amount when user_id = paid_to then amount else 0 end) as credit from users join transactions group by 1) select user_id, user_name, credit,(case when credit>=0 then 'No' else 'Yes' end) as credit_limit_breached from cte
with cte as ( select user_id,credit from Users union all select paid_by as user_id, -1*amount from transactions union all select paid_to as user_id, 1*amount from transactions ) select a.user_id,b.user_name,sum(a.credit) as credit, case when sum(a.credit)>=0 then 'No' else 'Yes' end as credit_limit_breached from cte a join users b using (user_id) group by user_id
with cte as ( select users, sum(amt) as amt from ( select paid_by as users, (-1)*amount as amt from transactions union all select paid_to, amount from transactions) t group by users ) select user_id, user_name, credit, ( case when credit < 0 then 'Yes' else 'No' end ) as credit_limit_breached from (select user_id, user_name, ( case when (credit + amt) is not null then (credit + amt) else users.credit end ) as credit from users left join cte on users.user_id = cte.users) r
with cte as ( with cte as ( with cte as ( with cte as ( with cte as ( Select u.*,ifnull(t.amount,0) as 'given' from users u left join Transactions t on u.user_id = t.paid_by ) Select user_id,user_name,credit,sum(given) as 'given_final' from cte group by user_id ) Select c1.*, ifnull(t1.amount,0) as 'received' from cte c1 left join Transactions t1 on c1.user_id = t1.paid_to ) Select user_id,user_name,credit,given_final,sum(received) as 'received_final' from cte group by user_id ) Select user_id,user_name,credit-given_final+received_final as 'credit' from cte ) Select *, case when credit < 0 then 'Yes' else 'No' end as 'credit_limit_breached' from cte
with cte as (SELECT paid_by as id ,-amount as total_amount FROM Transactions union all SELECT paid_to ,amount FROM Transactions) SELECT user_id ,user_name ,(ifnull(sum(total_amount),0)+credit)as credit ,case when (ifnull(sum(total_amount),0)+credit) < 0 then 'Yes' else 'No' end as credit_limit_breached FROM cte right join Users u on cte.id = u.user_id group by id ,user_name
with cte as (select id, sum(amount) as credit from ( select paid_by as id, sum(-amount) as amount from transactions group by 1 union all select paid_to as id, sum(amount) as amount from transactions group by 1 )a group by 1) select a.user_id, a.user_name, coalesce((a.credit + b.credit),a.credit) as credit, case when (coalesce((a.credit + b.credit),a.credit)) > 0 then 'No' else 'Yes' end as credit_limit_breached from users a left join cte b on a.user_id =b.id
with cte as (select id, sum(amt) as amount from (select paid_by as id, amount * -1 as amt from Transactions union all select paid_to as id, amount as amt from Transactions) tmp group by id), credit_tbl as (select u.user_id, u.user_name, if(c.amount is null, u.credit,u.credit+c.amount) as credit from Users as u left outer join cte as c on u.user_id = c.id) select user_id, user_name, credit, if(credit>0,'No','Yes') as credit_limit_breached from credit_tbl
with cte as (select paid_by as User_id , - amount as balance from Transactions union all select paid_to as User_id, amount as balance from Transactions ) , cte2 as ( select User_id , sum(balance) balance from cte group by User_id ) select u.User_id , user_name , (coalesce(balance,0)+u.credit) as credit , (case when (coalesce(balance,0)+u.credit)<0 then 'Yes' else 'No' end) as credit_limit_breached from cte2 right join Users as u on u.user_id = cte2.User_id
with cte as (select paid_by as id, - sum(amount) as amount from Transactions t group by 1 union select paid_to as id, sum(amount) as amount from Transactions t group by 1) select u.user_id, u.user_name, credit + ifnull(sum(amount),0) as credit, case when credit + ifnull(sum(amount),0) <0 then 'Yes' else 'No' end as credit_limit_breached from Users u left join cte c on u.user_id = c.id group by 1,2
with cte as (select paid_by as user_id, -amount as amt from transactions union all select paid_to as user_id, amount as amt from transactions union all select user_id, credit as amt from users) select cte.user_id, user_name, sum(amt) as credit, if(sum(amt)>=0, 'No', 'Yes') as credit_limit_breached from cte join users as u using (user_id) group by cte.user_id, user_name
with cte as (select paid_by as user_id, -amount as balance from transactions union all select paid_to as user_id, amount as balance from transactions union all select user_id, credit as balance from Users) select cte.user_id as USER_ID, users.user_name, sum(balance) as CREDIT, (case when sum(balance) < 0 then 'Yes' else 'No' end) as CREDIT_LIMIT_BREACHED from cte left join users on cte.user_id = users.user_id group by user_id order by user_id
with cte as (select paid_by, -amount as money from transactions union all select paid_to, amount from transactions), cte_1 as (select paid_by as user_id, sum(money) as spend from cte group by paid_by) select user_id, user_name, credit+ifnull(spend,0) as credit, case when credit+spend < 0 then 'Yes' else 'No' end as credit_limit_breached from users left join cte_1 using (user_id)
with cte as (select paid_by,sum(-amount) as deducted from transactions group by paid_by union all select paid_to,sum(amount) as Incr from transactions group by paid_to), cte1 as (select paid_by,sum(deducted) as amount from cte group by paid_by) select user_id,user_name, credit+ifnull(amount,0) as credit, (case when (credit+amount)<0 then 'Yes' else 'No' end) as credit_limit_breached from users a left join cte1 b on a.user_id=b.paid_by
with cte as (select temp.id,sum(amount) as trans_amount from (select t.paid_by as id, -t.amount as amount from transactions t union all select t1.paid_to as id, t1.amount as amount from transactions t1 )temp group by 1) select u.user_id, u.user_name, u.credit+coalesce(c.trans_amount,0) as credit, case when u.credit+coalesce(c.trans_amount,0)>0 then 'No' else 'Yes' end as credit_limit_breached from Users u left join cte c on u.user_id=c.id
with cte as (select u.user_id, u.user_name, (u.credit+ifnull( sum(case when u.user_id=t.paid_by then -t.amount when u.user_id=t.paid_to then t.amount else 0 end),0)) as credit from users as u left join Transactions as t on u.user_id=t.paid_by or user_id=t.paid_to group by 1,2) select user_id,user_name,credit, (case when credit<0 then 'Yes' else 'No' end) as credit_limit_breached from cte
with cte as (select user_id, user_name, credit, sum(case when paid_by = user_id then -amount else 0 end) as paid, sum(case when paid_to = user_id then amount else 0 end) as recieved from users u left join transactions t on u.user_id = t.paid_by or u.user_id = t.paid_to group by user_id, user_name) select user_id, user_name, sum(paid + recieved + credit) as credit, (case when paid + credit + recieved < 0 then 'Yes' else 'No' end) as credit_limit_breached from cte group by user_id
with cte as( select paid_by as user_id, -amount as amount from transactions union all select paid_to as user_id, amount from transactions ) select u.user_id, u.user_name, ifnull(sum(c.amount) + u.credit,u.credit) credit, (case when ifnull(sum(c.amount) + u.credit,u.credit) < 0 then 'Yes' else 'No' end) as credit_limit_breached from users u left join cte c on u.user_id = c.user_id group by u.user_id
with cte as( select user_id, sum(amount) as amount from ( select paid_by as user_id, amount*-1 as amount from Transactions union all select paid_to as user_id, amount from Transactions )tmp group by 1 ) select u.user_id, u.user_name, sum(u.credit+coalesce(c.amount,0)) as credit, case when sum(u.credit+coalesce(c.amount,0))<0 then 'Yes' else 'No' end as credit_limit_breached from Users u left join cte c on u.user_id = c.user_id group by 1,2
with cte2 as (select u.user_id, user_name, ifnull(sum(amount) + credit, credit) as credit from (select paid_by as user_id, -sum(amount) as amount from Transactions group by 1 union select paid_to as user_id, sum(amount) as amount from Transactions group by 1) as cte right join Users u on u.user_id = cte.user_id group by 1) select user_id, user_name, credit, case when credit < 0 then 'Yes' else 'No' end as credit_limit_breached from cte2
with cte_credits as ( select u.user_id, user_name, sum(coalesce(t_in.amount, 0)) + any_value(coalesce(u.credit, 0)) as credits from Users as u left join Transactions as t_in on u.user_id = t_in.paid_to group by 1, 2 ), cte_debits as ( select u.user_id, user_name, sum(coalesce(t_out.amount, 0)) as debits from Users as u left join Transactions as t_out on u.user_id = t_out.paid_by group by 1, 2 ), cte_assemble as ( select c.user_id, c.user_name, c.credits - d.debits as credit, if(c.credits - d.debits < 0, 'Yes', 'No') as credit_limit_breached from cte_credits as c join cte_debits as d on c.user_id = d.user_id ) select * from cte_assemble
with cte_paid_by as ( select paid_by as user_id, -sum(amount) as tot_sum from transactions group by paid_by ), cte_paid_to as ( select paid_to as user_id, sum(amount) as tot_sum from transactions group by paid_to ), cte_paid_amount as ( select user_id, sum(tot_sum) as tot_sum from ( select * from cte_paid_by union all select * from cte_paid_to ) t group by user_id ) select u.user_id, u.user_name, u.credit + ifnull(cte_paid_amount.tot_sum, 0) as credit, case when u.credit + ifnull(cte_paid_amount.tot_sum, 0) >= 0 then 'No' else 'Yes' end as credit_limit_breached from users as u left join cte_paid_amount on u.user_id = cte_paid_amount.user_id
with cte_paid_by as ( select paid_by as user_id, -sum(amount) as tot_sum from transactions group by paid_by ), cte_paid_to as ( select paid_to as user_id, sum(amount) as tot_sum from transactions group by paid_to ), cte_paid_amount as ( select user_id, sum(tot_sum) as tot_sum from ( select * from cte_paid_by union all select * from cte_paid_to ) t group by user_id ) select u.user_id, u.user_name, u.credit + ifnull(tot_sum, 0) as credit, case when u.credit + ifnull(tot_sum, 0) >= 0 then 'No' else 'Yes' end as credit_limit_breached from users as u left join cte_paid_amount on u.user_id = cte_paid_amount.user_id
with draft_tb as ( select user_id, credit as amount, 'credit' as status from Users union all select paid_by as 'user_id', amount, 'paid_by' as status from Transactions union all select paid_to as 'user_id', amount, 'paid_to' as status from Transactions) select distinct dt.user_id, u.user_name, sum(case when status = 'credit' then amount else 0 end) + sum(case when status = 'paid_by' then -amount else 0 end) + sum(case when status = 'paid_to' then amount else 0 end) as credit, case when sum(case when status = 'credit' then amount else 0 end) + sum(case when status = 'paid_by' then -amount else 0 end) + sum(case when status = 'paid_to' then amount else 0 end) > 0 then 'No' else 'Yes' end as 'credit_limit_breached' from draft_tb as dt inner join Users as u on dt.user_id = u.user_id group by 1,2
with etc as( select paid_by as id, sum(-amount) as amount from Transactions group by id union select paid_to as id, sum(amount) as amount from Transactions group by id ) select u.user_id, user_name, ifnull(sum(amount),0)+u.credit credit, case when ifnull(sum(amount),0)+u.credit <0 then "Yes" else "No" end as credit_limit_breached from etc right join Users u on u.user_id=etc.id group by id
with exp1 as ( select paid_by as u1, sum(amount) as spent from transactions group by paid_by) , exp2 as (select paid_to as u2, sum(amount) as received from transactions group by paid_to), f as (select users.user_id, users.user_name, users.credit, coalesce(exp1.spent,0) as spent, coalesce(exp2.received, 0) as received, (users.credit + coalesce(exp2.received, 0))- coalesce(exp1.spent,0) as amounts from users left join exp1 on users.user_id = exp1.u1 left join exp2 on users.user_id = exp2.u2) select user_id, user_name, f.amounts as credit, case when f.amounts >= 0 then "No" else "Yes" end as CREDIT_LIMIT_BREACHED from f
with final as ( select user, sum(amount) as amount from( select paid_by as user, -(amount) as amount from transactions union all select paid_to as user, amount from transactions) asd group by user) select u.user_id, u.user_name, u.credit+coalesce(t.amount,0) as credit, case when u.credit+coalesce(t.amount,0) < 0 then 'Yes' else 'No' end as credit_limit_breached from users u left join final t on u.user_id = t.user
with joined as ( select u.user_id , u.user_name , u.credit as de , coalesce(-t1.amount,0) as given from users u left join Transactions t1 on t1.paid_by=u.user_id union all select u.user_id , u.user_name , u.credit as de , coalesce(t1.amount,0) as given from users u left join Transactions t1 on t1.paid_to=u.user_id ), cte2 as ( select user_id , user_name,de, sum(given) as give from joined group by user_id , user_name,de ) select user_id , user_name, de+give as credit, case when de+give<0 then "Yes" else "No" end as credit_limit_breached from cte2
with minus as ( select paid_by as user_id, sum(amount) as pay_amount from transactions group by 1 ), plus as ( select paid_to as user_id, sum(amount) as income from transactions group by 1 ), numbers as ( select users.user_id, users.user_name, coalesce(users.credit+ifnull(plus.income,0)-ifnull(minus.pay_amount,0), credit) as credit from users left join minus on users.user_id=minus.user_id left join plus on users.user_id=plus.user_id group by user_id ) select user_id, user_name, credit, case when credit<0 then 'Yes' else 'No' end as credit_limit_breached from numbers
with net (user_id, amount) as ( SELECT paid_by, -amount FROM Transactions UNION ALL SELECT paid_to, amount FROM Transactions ), t1 as ( SELECT user_id, user_name, coalesce(sum(net.amount), 0) + credit as credit FROM Users left join net USING (user_id) group by 1 ) select *, if(credit >= 0, 'No', 'Yes') as credit_limit_breached from t1
with net_balance as ( select user, sum(amt) as net_amount from ( select paid_by as user, -sum(amount) as amt from Transactions group by 1 union all select paid_to, sum(amount) from Transactions group by 1 ) t group by 1 ) select u.user_id as USER_ID, u.user_name AS USER_NAME, credit+COALESCE(net_amount,0) as CREDIT, case when credit+COALESCE(net_amount,0)<0 then "Yes" else "No" end as CREDIT_LIMIT_BREACHED from Users u LEFT join net_balance n on u.user_id = n.user
with net_trans as ( select paid_by "user_id", -1 * sum(amount) "total_amt" from transactions group by 1 union select paid_to "user_id", sum(amount) "total_amt" from transactions group by 1 ) select u.user_id "user_id", u.user_name "user_name", u.credit + ifnull(sum(t.total_amt), 0) "credit", if (u.credit + ifnull(sum(t.total_amt), 0) < 0, 'Yes', 'No') "credit_limit_breached" from users u left join net_trans t on t.user_id = u.user_id group by 1
with out_table as ( select paid_by, sum(amount) as total_out from Transactions group by paid_by ), in_table as ( select paid_to, sum(amount) as total_in from Transactions group by paid_to ) select t1.*, case when t1.credit < 0 then 'Yes' else 'No' end as credit_limit_breached from( select u.user_id, u.user_name, case when t1.total_out is null and t2.total_in is null then u.credit when t1.total_out is null then u.credit + t2.total_in when t2.total_in is null then u.credit - t1.total_out else u.credit - t1.total_out + t2.total_in end as credit from Users u left join out_table t1 on u.user_id = t1.paid_by left join in_table t2 on u.user_id = t2.paid_to ) t1
with paid (user_id, amount) as ( SELECT paid_by, sum(amount) FROM Transactions group by 1 ), recieved (user_id, amount) as ( SELECT paid_to, sum(amount) FROM Transactions group by 1 ), t1 as ( SELECT user_id, user_name, coalesce(recieved.amount, 0) - coalesce(paid.amount, 0) + credit as credit FROM Users left join paid USING (user_id) left join recieved USING (user_id) ) select *, if(credit >= 0, 'No', 'Yes') as credit_limit_breached from t1
with paid (user_id, amount) as ( SELECT paid_by, sum(amount) FROM Transactions group by 1 ), recieved (user_id, amount) as ( SELECT paid_to, sum(amount) FROM Transactions group by 1 ), t1 as ( SELECT user_id, user_name, coalesce(recieved.amount, 0) - coalesce(paid.amount, 0) + credit as credit FROM Users left join paid USING (user_id) left join recieved USINg (user_id) ) select *, if(credit >= 0, 'No', 'Yes') as credit_limit_breached from t1
with paid as ( select paid_by as user_id, sum(amount) as amount from transactions group by 1 ), received as ( select paid_to as user_id, sum(amount) as amount from transactions group by 1 ), settled as ( select p.user_id, COALESCE(r.amount, 0) - COALESCE(p.amount, 0) as net_transactions from paid p left join received r on p.user_id = r.user_id union select r.user_id, COALESCE(r.amount, 0) - COALESCE(p.amount, 0) as net_transactions from paid p right join received r on p.user_id = r.user_id ) select u.user_id as USER_ID, user_name AS USER_NAME, credit + COALESCE(net_transactions, 0) as CREDIT, IF(credit + COALESCE(net_transactions, 0) < 0, 'Yes', 'No') AS CREDIT_LIMIT_BREACHED from users u left join settled s on s.user_id = u.user_id
with paid as ( select paid_by, sum(amount) paid_amount from transactions group by paid_by ), rec as ( select paid_to , sum(amount) received_amount from transactions group by paid_to ) select user_id, user_name, (ifnull(credit,0) - ifnull(paid_amount,0) + ifnull(received_amount,0)) credit, case when (ifnull(credit,0) - ifnull(paid_amount,0) + ifnull(received_amount,0)) > 0 then 'No' else 'Yes' end as credit_limit_breached from users u left join paid p on u.user_id = p.paid_by left join rec r on u.user_id = r.paid_to
with paid as ( select user_id as paid_by, sum(ifnull(amount,0) *-1) as deductable from Users a left join Transactions t on a.user_id = t.paid_by group by 1) ,recieved as ( select user_id as paid_to, sum(ifnull(amount,0) ) as addition from Users a left join Transactions t on a.user_id = t.paid_to group by 1 ) , balances as ( select a.paid_by, ifnull(addition,0) + ifnull(deductable,0) as balance from paid a left join recieved b on paid_by = paid_to union select a.paid_by, ifnull(addition,0) + ifnull(deductable,0) as balance from paid a right join recieved b on paid_by = paid_to ) select user_id, user_name, credit + ifnull(balance,0) as credit, case when credit + ifnull(balance,0) < 0 then 'Yes' else 'No' end as credit_limit_breached from Users u join balances b on u.user_id = paid_by
with paid_by as (select paid_by, sum(amount) as amount from transactions group by paid_by), paid_to as (select paid_to, sum(amount) as amount from transactions group by paid_to) select user_id, user_name, credit, case when credit < 0 then 'Yes' else 'No' end as credit_limit_breached from (select user_id, user_name, credit - ifnull(a.amount,0) + ifnull(b.amount,0) as credit from users u left join paid_by a on u.user_id = a.paid_by left join paid_to b on u.user_id = b.paid_to) c
with paying as ( SELECT paid_by, sum(amount) as paid_amt FROM Transactions GROUP BY 1 ), get_paid as ( SELECT paid_to, sum(amount) as paid_amt FROM Transactions GROUP BY 1 ) SELECT a.user_id, a.user_name, credit + IFNULL(c.paid_amt,0) - IFNULL(b.paid_amt,0) as credit, CASE WHEN credit + IFNULL(c.paid_amt,0) - IFNULL(b.paid_amt,0) > 0 THEN "No" ELSE "Yes" END as credit_limit_breached FROM Users a LEFT JOIN paying b ON a.user_id = b.paid_by LEFT JOIN get_paid c ON a.user_id = c.paid_to
with payments as ( select paid_by, sum(amount) as outgoing from transactions group by 1 ), income as ( select paid_to, sum(amount) as incoming from transactions group by 1 ) select u.user_id, user_name, credit - coalesce(outgoing, 0) + coalesce(incoming, 0) as credit, if(credit - coalesce(outgoing, 0) + coalesce(incoming, 0) < 0, 'Yes', 'No') as credit_limit_breached from users u left join payments p on p.paid_by = u.user_id left join income i on i.paid_to = u.user_id
with spent as ( select paid_by as user_id, sum(amount) spent from Transactions group by paid_by ), received as ( select paid_to as user_id, sum(amount) received from Transactions group by paid_to ) select Users.user_id, Users.user_name, Users.credit + coalesce(received,0) - coalesce(spent,0) as credit, case when ( Users.credit + coalesce(received,0) - coalesce(spent, 0) < 0) then 'Yes' else 'No' end as credit_limit_breached from Users left outer join spent using(user_id) left outer join received using(user_id) order by user_id
with sum_trans as ( select user_id, sum(amount) as credit from ( select paid_by as user_id, -amount as amount from transactions union all select paid_to as user_id, amount from transactions ) a group by user_id) select a.user_id, a.user_name, IFNULL(a.credit, 0) + IFNULL(b.credit, 0) as credit, IF(IFNULL(a.credit, 0) + IFNULL(b.credit, 0) < 0, 'Yes', 'No') as credit_limit_breached from users a left join sum_trans b using (user_id)
with t AS( SELECT id, sum(amount) AS amt FROM (SELECT paid_by AS id, -amount AS amount FROM Transactions UNION ALL SELECT paid_to AS id, amount AS amount FROM Transactions) a GROUP BY 1) SELECT user_id, user_name, credit+ifnull(amt,0) AS credit, CASE WHEN credit+ifnull(amt,0)<0 THEN 'Yes' ELSE 'No' END AS credit_limit_breached FROM Users u LEFT JOIN t ON u.user_id=t.id GROUP BY 1
with t as ( select user_id, user_name, credit+sum(case when paid_by = user_id then -1*amount when paid_to = user_id then amount else 0 end) credit from users left join Transactions on users.user_id = Transactions.paid_by or users.user_id = Transactions.paid_to group by user_id ) select *, case when credit<100 then 'Yes' else 'No' end credit_limit_breached from t
with t as (select paid_by as user_id , amount as amount from transactions union all select paid_to as user_id , -1*amount as amount from transactions) select u.user_id , user_name , credit - sum(ifnull(amount,0)) as credit , if(credit - sum(ifnull(amount,0)) < 0, 'Yes', 'No') as credit_limit_breached from users u left join t on t.user_id = u.user_id group by 1
with t as (select paid_by, sum(amount) amount from transactions group by paid_by), t1 as (select paid_to, sum(amount) amount from transactions group by paid_to), cte as(select user_id, user_name, credit-ifnull(amount,0) as credit from users left join t on user_id=paid_by), cte1 as(select user_id, user_name, credit+ifnull(amount,0) as credit from cte left join t1 on user_id=paid_to) select user_id, user_name, sum(credit) as credit, (case when credit<0 then 'Yes' else 'No' end) as credit_limit_breached from cte1 group by user_id
with t as (select paid_to as user_id,user_name,amount as credit from Transactions join Users on user_id=paid_to union all select paid_by as user_id,user_name,-amount as credit from Transactions join Users on user_id=paid_by), t2 as (select* from t union all select * from Users) select user_id,user_name,sum(credit)as credit, case when sum(credit)<0 then "Yes" else "No" end as credit_limit_breached from t2 group by 1,2 order by 1,2
with t as( select a.user_id, a.user_name, a.credit, -b.amount as tran_amount, b.transacted_on from Users a left join Transactions b on a.user_id = b.paid_by union all select a.user_id,a.user_name,a.credit, b.amount as tran_amount, b.transacted_on from Users a left join Transactions b on a.user_id = b.paid_to) select user_id, user_name, max(credit) + ifnull(sum(tran_amount),0) as credit, case when (max(credit) + ifnull(sum(tran_amount),0)) >= 0 then 'No' else 'Yes' end as credit_limit_breached from t group by 1,2
with t1 as ( select a.user_id, a.user_name, a.credit, sum(ifnull(b.amount, 0)) as 'pay' from users a left join transactions b on a.user_id = b.paid_by group by 1, 2, 3 ), t2 as ( select a.user_id, a.user_name, a.credit, sum(ifnull(c.amount, 0)) as 'receive' from users a left join transactions c on a.user_id = c.paid_to group by 1, 2, 3 ) select t1.user_id, t1.user_name, (t1.credit - t1.pay + t2.receive) as 'credit', case when (t1.credit - t1.pay + t2.receive) > 0 then 'No' else 'Yes' end as 'credit_limit_breached' from t1 join t2 on t1.user_id = t2.user_id
with t1 as ( select p.paid_by, sum(p.amount) as tot_paid from transactions p group by p.paid_by order by p.paid_by), t2 as ( select r.paid_to, sum(r.amount) as tot_rec from transactions r group by r.paid_to order by r.paid_to) select u.user_id,u.user_name, (u.credit-ifnull(t1.tot_paid,0)+ifnull(t2.tot_rec,0)) as `credit`, case when (u.credit-ifnull(t1.tot_paid,0)+ifnull(t2.tot_rec,0))<0 then 'Yes' else 'No' end as credit_limit_breached from users u left join t1 on u.user_id=t1.paid_by left join t2 on u.user_id=t2.paid_to
with t1 as ( select u.user_id, ifnull(sum(t.amount),0) as total_loss from users u left join Transactions t on u.user_id=t.paid_by group by u.user_id ) , t2 as ( select u.user_id, ifnull(sum(t.amount),0) as total_gain from users u left join Transactions t on u.user_id=t.paid_to group by u.user_id ) select u.user_id, u.user_name, credit - total_loss + total_gain as credit, case when credit - total_loss + total_gain >= 0 then 'No' else 'Yes' end as credit_limit_breached from t1 join t2 on t1.user_id = t2.user_id join users u on u.user_id = t1.user_id
with t1 as ( select user_id, sum(transac) as transac from ( select paid_by as user_id, (-1) * amount as transac from Transactions union all select paid_to as user_id, amount as transac from Transactions) a group by user_id ) select a.user_id as USER_ID, a.user_name as USER_NAME, a.credit+coalesce(b.transac,0) as CREDIT, case when a.credit+coalesce(b.transac,0)<0 then 'Yes' else 'No' end as CREDIT_LIMIT_BREACHED from Users a left join t1 b on a.user_id=b.user_id
with t1 as ( select user_id, user_name, sum(case when user_id = paid_by then -amount when user_id = paid_to then amount else 0 end) + credit as credit FROM users u left join Transactions pb ON u.user_id = pb.paid_by or u.user_id = pb.paid_to group by 1 ) select *, if(credit >= 0, 'No', 'Yes') as credit_limit_breached from t1
with t1 as ( select user_id, user_name, sum(case when user_id = paid_by then -amount when user_id = paid_to then amount else 0 end) + credit as credit FROM users u left join Transactions pb ON u.user_id = pb.paid_by or u.user_id = pb.paid_to group by 1, 2, credit ) select *, if(credit >= 0, 'No', 'Yes') as credit_limit_breached from t1
with t1 as (select paid_by as user_id, -1*amount as amount from transactions union all select paid_to as user_id, amount from transactions), t2 as (select user_id, sum(amount) as changes from t1 group by 1) select a.user_id, user_name, credit + ifnull(changes, 0) as 'credit', case when credit + ifnull(changes, 0) >= 0 then 'No' else 'Yes' end as credit_limit_breached from users a left join t2 on a.user_id = t2.user_id
with t1 as (select user_id, ifnull(sum(amount),0) as sent from users as u left join transactions as t on u.user_id = t.paid_by group by 1), t2 as (select user_id, ifnull(sum(amount),0) as received from users as u left join transactions as t on u.user_id = t.paid_to group by 1) select distinct u.user_id, user_name, (credit+received-sent) as credit, case when (credit+received-sent)<0 then "Yes" else "No" end as credit_limit_breached from users u, t1, t2 where u.user_id=t1.user_id and u.user_id=t2.user_id
with tab as ( select u.user_id, u.user_name, -t.amount as credit from users as u join transactions as t on u.user_id = t.paid_by union all select u.user_id, u.user_name, t.amount as credit from users as u join transactions as t on u.user_id = t.paid_to union all select * from users), tab2 as ( select user_id, user_name, sum(credit) as credit from tab group by user_id) select * ,case when credit >= 0 then 'No' else 'Yes' end as credit_limit_breached from tab2
with temp as ( select id as user_id, sum(amount) as credit from (select paid_by as id, case when paid_by then amount*(-1) end as amount from Transactions union all select paid_to as id, case when paid_to then amount end as amount from Transactions) a group by id ) select u.user_id, u.user_name, ifnull(t.credit,0)+u.credit as credit, case when ifnull(t.credit,0)+u.credit < 0 then 'Yes' when ifnull(t.credit,0)+u.credit>0 then 'No' end as 'credit_limit_breached' from temp t right join Users u on t.user_id = u.user_id
with temp as ( select paid_by as id , amount * -1 as bal from transactions union all select paid_to as id , amount as bal from transactions) select u.user_id ,u.user_name ,max(u.credit)+ sum(coalesce(bal,0)) credit , case when (max(u.credit)+ sum(coalesce(bal,0))) < 0 then 'Yes' else 'No' end credit_limit_breached from users u left join temp t on t.id = u.user_id group by u.user_id ,u.user_name
with temp as ( select paid_by, sum(amount) as pay from transactions group by paid_by ) , temp2 as ( select paid_to, sum(amount) as receive from transactions group by paid_to ) select u.user_id, u.user_name, credit - ifnull(temp.pay,0) + ifnull(temp2.receive,0) AS credit, CASE WHEN credit - ifnull(temp.pay,0) + ifnull(temp2.receive,0) >= 0 THEN "No" ELSE "Yes" END AS credit_limit_breached from Users u LEFT JOIN temp ON u.user_id = temp.paid_by LEFT JOIN temp2 ON u.user_id = temp2.paid_to
with temp as ( select us.user_id ,us.user_name ,credit + sum(case when user_id = tr.paid_by then (-1)*amount when us.user_id = tr.paid_to then (1)*amount else 0 end) as credit from Users us left join Transactions tr on (us.user_id = tr.paid_by) or (us.user_id = tr.paid_to) group by us.user_id,us.user_name ) select * ,(case when credit < 0 then 'Yes' else 'No' end) as credit_limit_breached from temp
with temp as (select paid_by as user_id, -1*amount as amount, transacted_on from transactions union all select paid_to as user_id, amount, transacted_on from transactions) select u.user_id, u.user_name, ifnull(u.credit+t.am, u.credit) as credit, if(ifnull(u.credit+t.am, u.credit)<0, 'Yes', 'No') as credit_limit_breached from users u left join (select user_id, sum(amount) as am from temp group by user_id) t on u.user_id=t.user_id
with temp as (select paid_by as user_id, -amount as amount from transactions union all select paid_to as user_id, amount from transactions ), temp2 as (select user_id, sum(amount) as amount from temp group by user_id) select u.user_id, user_name,credit+ifnull(amount,0) as credit, case when credit+amount<0 then 'Yes' else 'No' end as credit_limit_breached from users as u left join temp2 on u.user_id=temp2.user_id
with temp as (select paid_to as user_id, sum(amount) as credit from transactions group by paid_to), temp2 as (select paid_by as user_id, sum(amount) as debit from transactions group by paid_by) select u.user_id, u.user_name, u.credit+coalesce(t.credit,0)-coalesce(t2.debit,0) as credit, case when u.credit+coalesce(t.credit,0)-coalesce(t2.debit,0)<0 then 'Yes' else 'No' end as credit_limit_breached from users u left outer join temp t on u.user_id = t.user_id left outer join temp2 t2 on u.user_id = t2.user_id
with tmp as ( select paid_by as user_id, amount * -1 as amount from Transactions union all select paid_to as user_id, amount from Transactions union all select user_id, credit as amount from Users ) select u.user_id, u.user_name, sum(amount) as credit, if(sum(amount) < 0, 'Yes', 'No') as credit_limit_breached from Users u join tmp t on u.user_id = t.user_id group by u.user_id, u.user_name
with tmp as ( select paid_by as user_id, amount*-1 as credit from transactions union all select paid_to as user_id, amount as credit from transactions union all select user_id, credit from users ) select a.user_id, a.user_name, sum(b.credit) as credit, case when sum(b.credit) < 0 then 'Yes' else 'No' end AS credit_limit_breached from users a LEFT JOIN tmp b on a.user_id = b.user_id group by 1,2
with tmp as (select paid_by as user_id, -amount as amount from transactions union all select paid_to as user_id, amount from transactions ) select a.user_id, a.user_name, case when amount is null then credit else credit + amount end as credit, case when credit < -amount then 'Yes' else 'No' end as credit_limit_breached from users a left join (select user_id, sum(amount) as amount from tmp group by 1) b using (user_id)
with tmp as (select u.user_id, u.user_name, u.credit, amount from users as u inner join transactions as t on u.user_id = t.paid_to union all select u.user_id, u.credit,u.credit, amount*(-1) from users as u inner join transactions as t on u.user_id = t.paid_by), tmp2 as( select user_id, sum(amount) as total from tmp group by user_id ) select u.user_id, u.user_name, (u.credit+ifnull(tmp2.total,0)) as credit, case when (u.credit+ifnull(tmp2.total,0)) <0 then 'Yes' else 'No' end as credit_limit_breached from tmp2 right join users as u on tmp2.user_id = u.user_id
with tmp as( select paid_by as id, amount*-1 as amount from transactions union all select paid_to as id, amount from transactions union all select user_id as id, credit as amount from users ) select u.user_id, u.user_name, coalesce(sum(tmp.amount),0) as credit, case when coalesce(sum(tmp.amount),0) >= 0 then 'No' else 'Yes' end as credit_limit_breached from users as u left join tmp on u.user_id = tmp.id group by u.user_id
with trans as ( select paid_by as id, -amount as amt from transactions union all select paid_to as id, amount as amt from transactions ), curr_total as( select id, sum(amt) as trans_total from trans group by id) select u.user_id, u.user_name, u.credit+coalesce(ct.trans_total,0) as credit, case when (u.credit+ct.trans_total) <0 then 'Yes' else 'No' end as credit_limit_breached from users u left join curr_total ct on u.user_id = ct.id
with trans as ( select paid_by as user_id, -1 * amount as amount from transactions union all select paid_to as user_id, amount as amount from transactions ), tot as( select user_id , sum(amount) as amount from trans group by user_id), final as ( select u.user_id,u.user_name,coalesce(t.amount + u.credit,u.credit) as credit from users u left join tot t on t.user_id = u.user_id group by u.user_id) select user_id , user_name, credit,if(credit < 0,"Yes","No") as credit_limit_breached from final order by user_id
with trans as ( select user_id, sum(money) as money from ( select paid_by as user_id, -amount as money from transactions union all select paid_to as user_id, amount as money from transactions) a group by 1 ) select u.user_id,max(u.user_name) as user_name, sum(u.credit + ifnull(t.money, 0)) as credit , if(sum(u.credit + ifnull(t.money, 0)) < 0, 'Yes', 'No') as credit_limit_breached from users u left join trans t on t.user_id = u.user_id group by 1
with trans as (select paid_by as user_id, -amount as amt from Transactions union all select paid_to as user_id, amount as amt from Transactions ), trans1 as (select user_id, sum(amt) over(partition by user_id) as amt1 from trans ) select distinct Users.user_id as USER_ID, user_name as USER_NAME, credit+ifnull(amt1,0) as CREDIT, case when credit+ifnull(amt1,0) <0 then 'Yes' else 'No' end as CREDIT_LIMIT_BREACHED from Users left join trans1 on Users.user_id = trans1.user_id
with trans as (select paid_by, paid_to, (case when paid_by then -amount end) as paid, (case when paid_to then +amount end) as recieved from transactions), total as (select paid_by as user_id ,paid as amount from trans union all select paid_to as user_id, recieved as amount from trans union all select user_id, credit as amount from users) select u.user_id, u.user_name, sum(t.amount) as credit, (case when sum(t.amount) < 0 then 'Yes' else 'No' end) as credit_limit_breached from users u join total t on u.user_id = t.user_id group by u.user_id
with trans as (select user_id, sum(amount) as net_amount from (select paid_by as user_id, amount*-1 as amount from transactions union all select paid_to, amount from transactions) as tmp group by 1) select Users.user_id AS USER_ID, Users.user_name AS USER_NAME , Users.credit+COALESCE(trans.net_amount,0) as CREDIT, if(Users.credit+trans.net_amount < 0, 'Yes','No') as CREDIT_LIMIT_BREACHED from Users left join trans on Users.user_id = trans.user_id
with trans as( (select distinct(paid_by) as user_id, sum(-amount) as amount from transactions group by paid_by) union all (select distinct(paid_to) as user_id, sum(amount) as amount from transactions group by paid_to) ), net as ( select user_id, sum(amount) as net from trans group by user_id ) select users.user_id, user_name, ifnull((credit + net), credit) as credit, if(ifnull((credit + net), credit)>0, 'No', 'Yes') as credit_limit_breached from users left join net on users.user_id = net.user_id
with trans_amount as (select user_id, sum(amount) as total_amnt from (select trans_id, paid_by as user_id, amount*(-1) as amount from Transactions union select trans_id, paid_to as user_id, amount as amount from Transactions) t group by user_id) select u.user_id as USER_ID, u.user_name AS USER_NAME, (u.credit+ ifnull(t.total_amnt,0)) as CREDIT, if((u.credit+ifnull(t.total_amnt,0))<0, 'Yes','No') as CREDIT_LIMIT_BREACHED from Users u left join trans_amount t on u.user_id = t.user_id
with transfer_out as ( select paid_by, sum(amount) * (-1) as out_amt from Transactions group by paid_by ), transfer_in as ( select paid_to, sum(amount) as in_amt from Transactions group by paid_to ), user_transfer as ( select paid_by as user_id, out_amt as amt from transfer_out union all select paid_to as user_id, in_amt as amt from transfer_in ), smry as ( select user_id, sum(amt) as credit_diff from user_transfer group by user_id ) select Users.user_id, Users.user_name, Users.credit+coalesce(smry.credit_diff, 0) as credit, case when Users.credit+coalesce(smry.credit_diff, 0) >= 0 then 'No' else 'Yes' end as credit_limit_breached from Users left join smry on Users.user_id = smry.user_id
with u as ( select * from users ), t as ( select paid_by as user_id, sum(amount) as amount from Transactions group by paid_by ), k as ( select paid_to as user_id, sum(amount) as amount from Transactions group by paid_to ) select u.user_id, u.user_name, u.credit - ifnull(t.amount, 0) + ifnull(k.amount, 0) as credit, case when u.credit - ifnull(t.amount, 0) + ifnull(k.amount, 0) >= 0 then 'No' else 'Yes' end as credit_limit_breached from u left join t on u.user_id = t.user_id left join k on u.user_id = k.user_id order by u.user_id
with updated_credit as ( select user_id, credit + sum(case when paid_by = user_id then -amount else 0 end) + sum(case when paid_to = user_id then amount else 0 end) as updated_credit from Users, Transactions group by user_id, credit ) select user_id, user_name, updated_credit as credit, case when updated_credit < 0 then 'Yes' else 'No' end as credit_limit_breached from Users natural left join updated_credit
with usertx as (select u.user_id, u.user_name, u.credit, ifnull(-t.amount, 0) amount from Users u left join Transactions t on u.user_id = t.paid_by union all select u.user_id, u.user_name, u.credit, ifnull(t.amount, 0) amount from Users u left join Transactions t on u.user_id = t.paid_to) select user_id, user_name, credit + sum(amount) credit, (case when credit + sum(amount) < 0 then "Yes" else "No" end) credit_limit_breached from usertx group by user_id
with with_paid_by as ( select paid_by as paid_Id,sum(amount) paid_amount from Transactions group by paid_by ), recieved_by as ( select paid_to as recevied_Id,sum(amount) received_amount from Transactions group by paid_to ) select user_id USER_ID, user_name USER_NAME, credit CREDIT, case when credit<0 then "Yes" else "No" end as CREDIT_LIMIT_BREACHED from ( select user_id, user_name, ifnull(credit-ifnull(paid_amount,0)+ifnull(received_amount,0),credit) as credit from Users u left join with_paid_by pb on u.user_id= pb.paid_Id left join recieved_by rb on u.user_id= rb.recevied_Id group by u.user_id ) as t
with x as ( select paid_by,sum(amount) as given from transactions group by 1 ), y as ( select paid_to,sum(amount) as taken from transactions group by 1 ), z as ( select user_id,user_name, case when given is null and taken is null then credit when given is null and taken is not null then credit+taken when taken is null and given is not null then credit-given else credit+taken-given end as credit from users left join x on users.user_id = x.paid_by left join y on users.user_id = y.paid_to ) select *, case when credit < 0 then 'Yes' else 'No' end as credit_limit_breached from z
