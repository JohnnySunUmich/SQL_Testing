(select round(count(distinct A2.player_id)/count(distinct A1.player_id),2) as fraction from (select player_id, min(event_date) as event_date from Activity group by player_id) A1 left join Activity A2 on A1.player_id = A2.player_id and datediff(A1.event_date,A2.event_date) = -1)
SELECT ROUND (((SELECT COUNT(player_id) FROM (SELECT player_id,event_date, DATEDIFF(MAX(event_date),MIN(event_date)) AS days FROM (SELECT player_id,event_date, DATE_ADD(event_date, INTERVAL -(date_rank-1) day) AS date_group FROM (SELECT player_id,event_date, DENSE_RANK()OVER(PARTITION BY player_id ORDER BY event_date) AS date_rank FROM Activity) AS temp1) AS temp2 GROUP BY player_id,date_group) AS temp3 WHERE (player_id,event_date) IN (SELECT player_id,MIN(event_date) FROM Activity GROUP BY player_id) AND days>=1)/ (SELECT COUNT(DISTINCT player_id) FROM Activity)),2) AS fraction
SELECT ROUND( COUNT(DISTINCT A2.PLAYER_ID) / COUNT(DISTINCT A1.PLAYER_ID),2) AS FRACTION FROM (SELECT DISTINCT PLAYER_ID, MIN(EVENT_DATE) AS FIRST_LOGIN FROM ACTIVITY GROUP BY PLAYER_ID) A1 LEFT JOIN ACTIVITY A2 ON A1.PLAYER_ID=A2.PLAYER_ID AND A1.FIRST_LOGIN +1=A2.EVENT_DATE
SELECT ROUND( COUNT(DISTINCT a1.player_id) / (SELECT COUNT(DISTINCT player_id) FROM Activity) ,2) AS fraction FROM Activity a1 JOIN Activity a2 ON a1.event_date + 1 = a2.event_date AND a1.player_id = a2.player_id WHERE (a1.player_id, a1.event_date) IN (SELECT player_id, MIN(event_date) FROM Activity GROUP BY player_id)
SELECT ROUND(( SELECT COUNT(DISTINCT a1.player_id) FROM ( SELECT player_id, MIN(event_date) AS min_date FROM Activity GROUP BY player_id) a1 RIGHT JOIN Activity a2 ON a1.player_id = a2.player_id WHERE DATEDIFF(a1.min_date, a2.event_date) = -1)/( SELECT COUNT(DISTINCT player_id) FROM Activity), 2) AS fraction
SELECT ROUND((SELECT COUNT(DISTINCT player_id) FROM Activity WHERE (player_id, DATE_ADD(event_date, INTERVAL -1 DAY)) IN (SELECT player_id, MIN(event_date) FROM Activity GROUP BY player_id)) / (SELECT COUNT(DISTINCT player_id) FROM Activity), 2) AS fraction
SELECT ROUND((SUM(CASE WHEN a1.event_date = a2.first_login_date + 1 THEN 1 ELSE 0 END) / COUNT(DISTINCT a2.player_id)), 2) AS fraction FROM activity a1 JOIN ( SELECT player_id, MIN(event_date) AS first_login_date FROM activity GROUP BY 1 ) a2 ON a1.player_id = a2.player_id
SELECT ROUND(1-AVG(activity.player_id IS NULL), 2) AS fraction FROM activity RIGHT OUTER JOIN ( SELECT player_id, MIN(event_date) AS min_date FROM activity GROUP BY player_id ) AS first_date ON first_date.player_id = activity.player_id AND DATEDIFF(activity.event_date, first_date.min_date) = 1
SELECT ROUND(COALESCE(SUM(if_login_day2)/COUNT(*),0),2) AS fraction FROM (SELECT player_id, event_date, MIN(event_date) OVER (PARTITION BY player_id) AS first_login, CASE WHEN DATEDIFF(LEAD(event_date,1) OVER (PARTITION BY player_id ORDER BY event_date), event_date) = 1 THEN 1 ELSE 0 END AS if_login_day2 FROM Activity) sub WHERE event_date = first_login
SELECT ROUND(COUNT( t2.player_id)/COUNT(t1.player_id),2) AS fraction FROM (SELECT player_id, MIN(event_date) AS first_login FROM Activity GROUP BY player_id) t1 LEFT JOIN Activity t2 ON t1.player_id = t2.player_id AND DATEDIFF(t2.event_date, t1.first_login) = 1
SELECT ROUND(COUNT(A.player_id) / (SELECT COUNT(1) FROM (SELECT DISTINCT player_id FROM Activity) AS TBL), 2) AS fraction FROM (SELECT DISTINCT player_id, DATE_ADD(MIN(event_date), INTERVAL 1 DAY) AS test_date FROM Activity GROUP BY player_id) AS A, (SELECT player_id, test_date FROM ( SELECT player_id, event_date as test_date, MIN(event_date) OVER (PARTITION BY player_id) AS min_date FROM Activity GROUP BY player_id, event_date) as X WHERE test_date > min_date) AS B WHERE A.player_id = B.player_id AND A.test_date = B.test_date
SELECT ROUND(COUNT(A1.PLAYER_ID)/(SELECT COUNT(DISTINCT(A3.PLAYER_ID)) FROM ACTIVITY A3),2) as fraction FROM ACTIVITY A1, ACTIVITY A2 WHERE A1.PLAYER_ID = A2.PLAYER_ID AND A1.EVENT_DATE<>A2.EVENT_DATE AND DATEDIFF(A2.EVENT_DATE,A1.EVENT_DATE) = 1 and (a1.player_id, a1.event_date) in (select a3.player_id, min(a3.event_date) from activity a3 group by 1)
SELECT ROUND(COUNT(A2.player_id)/COUNT(DISTINCT A1.player_id),2) AS fraction FROM Activity AS A1 LEFT JOIN (SELECT player_id, MIN(event_date) AS first_date FROM Activity GROUP BY player_id) AS A2 ON A1.player_id = A2.player_id AND A1.event_date = A2.first_date + 1
SELECT ROUND(COUNT(D1.player_id) / (SELECT COUNT(DISTINCT player_id) FROM Activity), 2) AS fraction FROM (SELECT player_id, MIN(event_date) AS first_day FROM Activity GROUP BY player_id) AS D1 INNER JOIN Activity D2 ON DATEDIFF(D2.event_date, D1.first_day) = 1 AND D1.player_id = D2.player_id
SELECT ROUND(COUNT(DISTINCT A.player_id)/(SELECT COUNT(DISTINCT player_id) FROM Activity),2) AS fraction FROM Activity A JOIN ( SELECT player_id, MIN(event_date) AS day FROM Activity GROUP BY player_id ) AS T ON A.player_id = T.player_id AND A.event_date = T.day+1
SELECT ROUND(COUNT(DISTINCT A2.player_id)/COUNT(DISTINCT A1.player_id),2) AS fraction FROM Activity AS A1 LEFT JOIN (SELECT player_id, MIN(event_date) AS first_date FROM Activity GROUP BY player_id) AS A2 ON A1.player_id = A2.player_id AND A1.event_date = A2.first_date + 1
SELECT ROUND(COUNT(DISTINCT a.player_id) /COUNT(DISTINCT b.player_id) ,2) AS fraction FROM( SELECT DISTINCT player_id, MIN(event_date) AS event_date FROM Activity GROUP BY player_id) t, Activity a, Activity b WHERE t.player_id = a.player_id AND DATEDIFF(a.event_date, t.event_date) = 1
SELECT ROUND(COUNT(DISTINCT a.player_id)/COUNT(DISTINCT t.player_id), 2) fraction FROM ( SELECT player_id, MIN(event_date) first_login FROM activity GROUP BY player_id ) t LEFT JOIN activity a ON t.player_id = a.player_id AND t.first_login + 1 = a.event_date
SELECT ROUND(COUNT(DISTINCT a1.player_id)/COUNT(DISTINCT a2.player_id),2) fraction FROM ( SELECT player_id, MIN(event_date) min_date FROM Activity GROUP BY 1 ) a1 RIGHT JOIN Activity a2 ON a1.player_id=a2.player_id AND a1.min_date=a2.event_date- INTERVAL 1 DAY
SELECT ROUND(COUNT(DISTINCT a2.player_id)*1.0/COUNT(DISTINCT a1.player_id),2) AS fraction FROM ( SELECT player_id, MIN(event_date) as first_date FROM Activity GROUP BY player_id ) a1 LEFT JOIN Activity a2 ON a1.player_id = a2.player_id AND DATEDIFF(a2.event_date, a1.first_date) = 1
SELECT ROUND(COUNT(DISTINCT a2.player_id)/COUNT(DISTINCT a1.player_id),2) as fraction FROM ( SELECT player_id, MIN(event_date) OVER(PARTITION BY player_id) AS first_login FROM Activity) a1 LEFT JOIN Activity a2 ON a1.player_id = a2.player_id AND DATEDIFF(a2.event_date, a1.first_login)=1
SELECT ROUND(COUNT(DISTINCT a2.player_id)/COUNT(DISTINCT a1.player_id),2) as fraction FROM (SELECT player_id, MIN(event_date) OVER(PARTITION BY player_id) AS first_login FROM Activity) a1 LEFT JOIN Activity a2 ON a1.player_id = a2.player_id AND DATEDIFF(a2.event_date, a1.first_login)=1
SELECT ROUND(COUNT(DISTINCT b.player_id) / COUNT(DISTINCT a.player_id), 2) AS "fraction" FROM (SELECT player_id, min(event_date) as "min_date" FROM Activity GROUP BY player_id) as a LEFT JOIN Activity as b ON a.player_id = b.player_id and a.min_date = b.event_date - 1
SELECT ROUND(COUNT(DISTINCT b.player_id) / COUNT(DISTINCT a.player_id), 2) AS fraction FROM ( SELECT player_id, MIN(event_date) AS event_date FROM Activity GROUP BY player_id ) a LEFT JOIN Activity AS b ON a.player_id = b.player_id AND a.event_date + 1 = b.event_date
SELECT ROUND(COUNT(DISTINCT b.player_id)/(SELECT COUNT(DISTINCT player_id) FROM Activity),2) AS 'fraction' FROM (SELECT player_id , MIN(event_date) AS 'first_date' FROM Activity GROUP BY player_id ) a LEFT JOIN Activity b ON a.player_id=b.player_id AND a.first_date=b.event_date-1
SELECT ROUND(COUNT(DISTINCT b.player_id)/COUNT(DISTINCT a.player_id),2) AS fraction FROM (SELECT player_id, MIN(event_date) AS event_date FROM Activity GROUP BY player_id) a LEFT JOIN Activity b ON a.player_id = b.player_id AND a.event_date + 1 = b.event_date
SELECT ROUND(COUNT(DISTINCT b.player_id)/COUNT(DISTINCT a.player_id),2) AS fraction FROM (SELECT player_id, min(event_date) as event_date FROM activity GROUP BY player_id) a LEFT JOIN activity b ON a.player_id = b.player_id and a.event_date + 1 = b.event_date
SELECT ROUND(COUNT(DISTINCT b.player_id)/COUNT(DISTINCT a.player_id),2) as fraction FROM (SELECT player_id, min(event_date) as event_date from Activity group by player_id) a LEFT JOIN Activity b ON a.player_id = b.player_id and a.event_date +1 = b.event_date
SELECT ROUND(COUNT(DISTINCT d0.player_id)/(SELECT COUNT(DISTINCT player_id) FROM Activity), 2) 'fraction' FROM ( SELECT player_id, MIN(event_date) event_date FROM Activity GROUP BY player_id ) d0 CROSS JOIN Activity d1 WHERE ((d1.event_date - d0.event_date) = 1) AND (d1.player_id = d0.player_id)
SELECT ROUND(COUNT(DISTINCT player_id) / (SELECT COUNT(DISTINCT player_id) FROM Activity),2) as fraction FROM Activity WHERE (player_id, DATE_SUB(event_date, INTERVAL 1 DAY)) IN (SELECT player_id, MIN(event_date) as first_login FROM Activity GROUP BY player_id)
SELECT ROUND(COUNT(DISTINCT player_id)/(SELECT COUNT(DISTINCT player_id) FROM Activity), 2) AS fraction FROM ( SELECT player_id, event_date, LAG(event_date, 1, null) OVER(PARTITION BY player_id ORDER BY event_date ASC) AS prev_date, DENSE_RANK() OVER(PARTITION BY player_id ORDER BY event_date ASC) AS date_rank FROM Activity ) AS temp WHERE DATEDIFF(event_date, prev_date) = 1 AND date_rank = 2
SELECT ROUND(COUNT(DISTINCT player_id)/(SELECT COUNT(DISTINCT player_id) FROM Activity), 2) AS fraction FROM ( SELECT player_id, event_date, MIN(event_date) OVER(PARTITION BY player_id) AS first_date FROM Activity ) t WHERE event_date = DATE_ADD(first_date, INTERVAL 1 DAY)
SELECT ROUND(COUNT(DISTINCT player_id)/(SELECT COUNT(DISTINCT player_id) FROM Activity),2) AS fraction FROM( SELECT player_id,event_date,MIN(event_date) OVER (PARTITION BY player_id ORDER BY event_date) as lag_date FROM Activity) a WHERE event_date-a.lag_date=1
SELECT ROUND(COUNT(DISTINCT player_id)/(SELECT COUNT(DISTINCT player_id) FROM Activity),2) fraction FROM Activity WHERE (player_id, DATE_SUB(event_date, INTERVAL 1 DAY)) IN (SELECT player_id, MIN(event_date) FIRST_LOGIN FROM Activity GROUP BY player_id)
SELECT ROUND(COUNT(DISTINCT sub.player_id)/COUNT(DISTINCT a0.player_id),2) AS fraction FROM( SELECT * FROM( SELECT player_id, event_date, LEAD(event_date,1) OVER (PARTITION BY player_id ORDER BY event_date) AS lead0, RANK() OVER (PARTITION BY player_id ORDER BY event_date) AS rank0 FROM activity) sub0 WHERE lead0 - event_date = 1 AND rank0 = 1 ) sub, activity a0
SELECT ROUND(COUNT(DISTINCT t.player_id)/(SELECT COUNT(DISTINCT player_id) FROM Activity),2) AS fraction FROM (SELECT player_id, MIN(event_date) AS event_date FROM Activity GROUP BY player_id) AS t JOIN Activity a ON t.player_id = a.player_id AND t.event_date = a.event_date - 1
SELECT ROUND(COUNT(DISTINCT t.player_id)/(SELECT COUNT(DISTINCT player_id) FROM activity), 2) fraction FROM ( SELECT player_id, MIN(event_date) first_login FROM activity GROUP BY player_id ) t INNER JOIN activity a ON t.player_id = a.player_id AND t.first_login + 1 = a.event_date
SELECT ROUND(COUNT(DISTINCT t1.player_id) / (SELECT COUNT(DISTINCT player_id) FROM Activity),2) AS fraction FROM ( SELECT player_id, MIN(event_date) AS first_time FROM Activity GROUP BY player_id ) t1 JOIN Activity a ON t1.player_id = a.player_id AND t1.first_time = a.event_date - 1
SELECT ROUND(COUNT(DISTINCT t2.player_id)/COUNT(DISTINCT t1.player_id),2) AS fraction FROM (SELECT player_id, MIN(event_date) AS first_login FROM Activity GROUP BY player_id) t1 LEFT JOIN Activity t2 ON t1.player_id = t2.player_id AND t1.first_login = t2.event_date - 1
SELECT ROUND(COUNT(DISTINCT temp.player_id) / COUNT(DISTINCT b.player_id), 2) AS 'fraction' FROM (SELECT DISTINCT player_id, MIN(event_date) AS 'event_date' FROM Activity GROUP BY player_id) AS temp, Activity AS a, Activity AS b WHERE temp.player_id = a.player_id AND DATEDIFF(a.event_date, temp.event_date) = 1
SELECT ROUND(COUNT(DISTINCT(CASE WHEN B.PLAYER_ID IS NOT NULL THEN B.PLAYER_ID END))/COUNT(*), 2) AS FRACTION FROM ( SELECT PLAYER_ID, MIN(EVENT_DATE) AS FIRST_EVENT FROM ACTIVITY GROUP BY PLAYER_ID ) A LEFT JOIN ACTIVITY B ON A.PLAYER_ID = B.PLAYER_ID AND A.FIRST_EVENT = DATE_ADD(B.EVENT_DATE, INTERVAL -1 DAY)
SELECT ROUND(COUNT(DISTINCT(a2.player_id))/COUNT(DISTINCT(a1.player_id)),2) AS fraction FROM (SELECT player_id, MIN(event_date) AS first_login FROM Activity GROUP BY player_id) a1 LEFT JOIN Activity a2 ON a1.player_id = a2.player_id AND a1.first_login = a2.event_date - 1
SELECT ROUND(COUNT(DISTINCT(t.player_id)) / (SELECT COUNT(DISTINCT(player_id)) FROM activity), 2) AS fraction FROM (SELECT player_id, (event_date - LAG(event_date) OVER(PARTITION BY player_id ORDER BY event_date)) AS dif, ROW_NUMBER() OVER(PARTITION BY player_id ORDER BY event_date) AS num FROM activity) AS t WHERE dif = 1 AND num = 2
SELECT ROUND(COUNT(DISTINCT(temp2.player_id))/(SELECT COUNT(DISTINCT(player_id)) FROM Activity),2) AS fraction FROM (SELECT temp.player_id, first_date, a2.event_date FROM (SELECT a1.player_id, MIN(a1.event_date) as first_date FROM Activity a1 GROUP BY a1.player_id) temp JOIN Activity a2 ON temp.player_id=a2.player_id AND first_date + 1 = a2.event_date) temp2
SELECT ROUND(COUNT(T2.player_id) / COUNT(T1.player_id), 2) AS fraction FROM (SELECT player_id, MIN(event_date) AS first_login FROM Activity GROUP BY player_id) AS T1 LEFT JOIN Activity AS T2 ON T1.player_id = T2.player_id AND T1.first_login = T2.event_date - 1
SELECT ROUND(COUNT(a.player_id) / COUNT(DISTINCT b.player_id), 2) AS fraction FROM (SELECT player_id, MIN(event_date) AS first_date FROM Activity GROUP BY player_id) a RIGHT JOIN Activity b ON a.player_id = b.player_id AND a.first_date + 1 = b.event_date
SELECT ROUND(COUNT(a.player_id)/COUNT(f.player_id),2) AS fraction FROM ( SELECT player_id, MIN(event_date) AS first_date FROM Activity GROUP BY player_id) f LEFT JOIN Activity a ON DATEDIFF(a.event_date, f.first_date)=1 AND a.player_id = f.player_id
SELECT ROUND(COUNT(b.player_id) / COUNT(a.player_id), 2) AS fraction FROM Activity AS a LEFT JOIN Activity AS b ON DATEDIFF(a.event_date, b.event_date) = -1 AND a.player_id = b.player_id WHERE (a.player_id, a.event_date) IN ( SELECT player_id, MIN(event_date) FROM Activity GROUP BY player_id)
SELECT ROUND(COUNT(distinct player_id)/(SELECT COUNT(distinct player_id) FROM Activity),2) fraction FROM (SELECT player_id, DATEDIFF(LEAD(event_date ,1) OVER(PARTITION BY player_id ORDER BY event_date),event_date) diff, MIN(event_date) OVER(PARTITION BY player_id)=event_date compare_min FROM Activity)t WHERE diff = 1 AND compare_min = True
SELECT ROUND(COUNT(distinct t2.player_id)/COUNT(distinct t1.player_id),2) AS fraction FROM (SELECT player_id, MIN(event_date) AS first_login FROM Activity GROUP BY player_id) t1 LEFT JOIN Activity t2 ON t1.player_id = t2.player_id AND t1.first_login = t2.event_date - 1
SELECT ROUND(COUNT(t2.player_id) / COUNT(t1.player_id), 2) AS fraction FROM (SELECT player_id, MIN(event_date) AS first_login FROM Activity GROUP BY player_id) t1 LEFT JOIN Activity t2 ON t1.player_id = t2.player_id AND t1.first_login = t2.event_date - 1
SELECT ROUND(COUNT(t2.player_id) / COUNT(t1.player_id),2) AS fraction FROM (SELECT player_id, MIN(event_date) AS min_date FROM Activity GROUP BY player_id) AS t1 LEFT JOIN Activity AS t2 ON t1.player_id = t2.player_id AND t1.min_date = DATE_SUB(t2.event_date, INTERVAL 1 DAY)
SELECT ROUND(COUNT(t2.player_id)/COUNT(t1.player_id), 2) AS fraction FROM (SELECT player_id, MIN(event_date) AS first_login FROM Activity GROUP BY player_id) t1 LEFT JOIN Activity t2 ON t1.player_id = t2.player_id AND DATEDIFF(t2.event_date, t1.first_login) = 1
SELECT ROUND(COUNT(t2.player_id)/COUNT(t1.player_id),2) AS fraction FROM (SELECT player_id, MIN(event_date) AS first_login FROM Activity GROUP BY player_id) AS t1 LEFT JOIN Activity AS t2 ON t1.player_id = t2.player_id AND t1.first_login = t2.event_date - 1
SELECT ROUND(COUNT(t2.player_id)/COUNT(t1.player_id),2) AS fraction FROM (SELECT player_id, MIN(event_date) AS first_login FROM Activity GROUP BY player_id) as t1 LEFT JOIN Activity t2 ON t1.player_id = t2.player_id AND datediff(t2.event_date,t1.first_login) =1
SELECT ROUND(COUNT(t2.player_id)/COUNT(t1.player_id),2) AS fraction FROM (SELECT player_id, MIN(event_date) AS first_login FROM Activity GROUP BY player_id) t1 LEFT JOIN Activity t2 ON t1.player_id = t2.player_id AND datediff(t2.event_date,t1.first_login)= 1
SELECT ROUND(COUNT(t2.player_id)/COUNT(t1.player_id),2) AS fraction FROM (SELECT player_id, MIN(event_date) AS first_login FROM Activity GROUP BY player_id) t1 LEFT JOIN Activity t2 ON t1.player_id = t2.player_id AND t1.first_login = t2.event_date - 1
SELECT ROUND(IFNULL(SUM(CASE WHEN (player_id, DATE_SUB(event_date,INTERVAL -1 DAY) )IN (SELECT player_id, event_date FROM Activity) THEN 1 ELSE 0 END)/COUNT(DISTINCT player_id),0),2) AS fraction FROM Activity WHERE (player_id, event_date) IN (SELECT player_id, MIN(event_date) AS first_date FROM Activity GROUP BY player_id)
SELECT ROUND(SUM(CASE WHEN (player_id, DATE_ADD(first_login, INTERVAL 1 DAY)) IN (SELECT DISTINCT player_id, event_date FROM Activity) THEN 1 ELSE 0 END) / COUNT(DISTINCT player_id), 2) AS fraction FROM (SELECT player_id, MIN(event_date) AS first_login FROM Activity GROUP BY player_id) t1
SELECT ROUND(SUM(CASE WHEN DATEDIFF(nextday, event_date) = 1 then 1 else 0 end)/COUNT(DISTINCT player_id), 2) AS fraction FROM ( SELECT *, LEAD(event_date, 1) OVER(PARTITION BY player_id ORDER BY event_date) as nextday, ROW_NUMBER() OVER(PARTITION BY player_id ORDER BY event_date) as day_rank FROM Activity ) base WHERE day_rank = 1
SELECT ROUND(SUM(CASE WHEN a.event_date + 1 = b.event_date THEN 1 ELSE 0 END)/COUNT(DISTINCT a.player_id), 2) AS fraction FROM (SELECT player_id, MIN(event_date) AS event_date FROM Activity GROUP BY player_id) AS a JOIN Activity AS b ON a.player_id = b.player_id
SELECT ROUND(SUM(CASE WHEN event_date - 1 = first_time THEN 1 ELSE 0 END) / COUNT(DISTINCT player_id),2) AS fraction FROM ( SELECT player_id, event_date, MIN(event_date) OVER(PARTITION BY player_id) AS first_time FROM Activity ) sub
SELECT ROUND(SUM(CASE WHEN t1.first_login + 1 = t2.event_date THEN 1 ELSE 0 END)/COUNT(DISTINCT t1.player_id),2) fraction FROM ( SELECT player_id, MIN(event_date) as first_login FROM Activity GROUP BY player_id ) t1 LEFT JOIN Activity t2 ON t1.player_id = t2.player_id
SELECT ROUND(SUM(event_date = min_date + 1)/COUNT(DISTINCT player_id), 2) fraction FROM (SELECT player_id, event_date, MIN(event_date) OVER (Partition by player_id) min_date FROM Activity) t
SELECT ROUND(count( a.player_id)/ count(f.player_id),2) as fraction FROM (SELECT player_id, MIN(event_date) as first_date FROM Activity GROUP BY player_id) as f LEFT JOIN Activity AS a ON a.player_id = f.player_id AND f.first_date = a.event_date - 1
SELECT ROUND(count(distinct a.player_id)/count(distinct temp.player_id), 2) as fraction FROM (SELECT player_id, MIN(event_date) as min_date FROM Activity GROUP BY player_id) temp LEFT JOIN Activity a ON a.player_id = temp.player_id AND a.event_date = min_date+1
SELECT ROUND(count(distinct a.player_id)/count(distinct temp.player_id), 2) as fraction FROM (SELECT player_id, MIN(event_date) as min_date FROM Activity GROUP BY player_id) temp LEFT JOIN Activity a ON min_date+1 = a.event_date AND a.player_id = temp.player_id
SELECT ROUND(count(distinct a2.player_id)/count(a1.player_id),2)as fraction from ( select player_id, min(event_date)dates from Activity group by 1)a1 left join activity a2 on a1.player_id = a2.player_id and datediff(a2.event_date,a1.dates)=1
SELECT ROUND(ifnull(COUNT(t2.player_id), 0)/COUNT(t1.player_id), 2) as fraction FROM (SELECT player_id, MIN(event_date) AS first_login from ACTIVITY GROUP BY player_id) t1 LEFT OUTER JOIN ACTIVITY t2 on t2.player_id = t1.player_id and t1.first_login = t2.event_date - 1
SELECT round(COUNT(player_id) /(Select count(distinct player_id) from activity),2) fraction from ( select player_id, event_date, row_number() over (partition by player_id order by event_date asc) as login_rank, lead(event_date) over (partition by player_id order by event_date asc) as next_login from activity)a where next_login is not null and login_rank=1 and abs(datediff(event_date,next_login))=1
SELECT round(SUM(IF(DATE_SUB(event_date, INTERVAL 1 DAY) = prev_day, 1,0))/COUNT(DISTINCT player_id),2) as fraction FROM ( SELECT player_id, event_date, LAG(event_date) OVER (PARTITION BY player_id ORDER BY event_date) as prev_day, RANK() OVER (PARTITION BY player_id ORDER BY event_date) as log_in_rank FROM Activity ) as t WHERE log_in_rank <= 2
SELECT round(count(distinct b.player_id)/count(distinct a.player_id),2) as fraction from (select player_id, min(event_date) as first_day from Activity group by player_id) as a left join Activity as b on a.first_day = b.event_date -1 and a.player_id = b.player_id
SELECT round(sum(datediff(event_date, first_login)=1)/count(distinct player_id), 2) AS fraction FROM (SELECT *, min(event_date) over(partition by player_id) AS first_login FROM Activity) t
Select ROUND(COUNT(t2.player_id) / COUNT(t1.player_id),2) as fraction From (Select player_id, min(event_date) as min_date from Activity Group By player_id) t1 LEFT JOIN Activity t2 ON t1.player_id = t2.player_id AND min_date = t2.event_date - 1
Select ROUND(SUM(CASE WHEN temp.min_date + 1 = a1.event_date THEN 1 ELSE 0 END) / count(distinct temp.player_id), 2) as fraction from (Select player_id, MIN(event_date) as min_date from Activity group by 1) as temp, Activity a1 where a1.player_id = temp.player_id
Select ROUND(count(DISTINCT B.player_id )/count(DISTINCT A.player_id),2) AS fraction from (Select player_id,MIN(event_date) as mineventdate from Activity GROUP BY player_id) AS A left join Activity B on A.player_id = B.player_id and A.mineventdate = B.event_date - 1
Select ROUND(count(distinct first_login.player_id)/ (select count(distinct player_id) from Activity),2) as fraction FROM ( Select player_id, min(event_date) as first_login_dt from Activity GROUP BY player_id ) as first_login left join ( Select player_id, event_date as nxt_login_dt from Activity) as nxt_login on first_login.player_id = nxt_login.player_id and first_login.first_login_dt+1 = nxt_login.nxt_login_dt Where nxt_login_dt is not null
Select Round(Sum(case when A1.event_date = A2.event_date_min+1 then 1 else 0 end)/ count(distinct(A1.player_id)),2) as fraction from Activity as A1 inner join (select player_id,min(event_date) as event_date_min from Activity group by player_id) as A2 on A1.player_id=A2.player_id
Select round(count(a1.player_id)/(Select count(distinct player_id) from Activity), 2) as fraction from Activity a1, Activity a2 Where DateDiff(a2.event_date, a1.event_date) = 1 and a1.player_id = a2.player_id and (a1.player_id, a1.event_date) in (select a1.player_id, min(a1.event_date) from activity a1 group by a1.player_id)
Select round(count(a2.player_id)/count(a1.player_id),2) as fraction from Activity a1 left join Activity a2 on a1.player_id = a2.player_id and a1.event_date + 1 = a2.event_date where (a1.player_id, a1.event_date) in ( Select player_id, min(event_date) from Activity group by player_id )
Select round(count(distinct case when first_login+1 = nextlogin then player_id end)/count(distinct player_id), 2) fraction from ( select player_id, first_value(event_date) over(partition by player_id order by event_date) first_login, lead(event_date) over(partition by player_id order by event_date) nextlogin from Activity ) A
Select round(count(distinct case when first_login+1 = nextlogin then player_id end)/count(distinct player_id), 2) fraction from ( select player_id, min(event_date) over(partition by player_id order by event_date) first_login, lead(event_date) over(partition by player_id order by event_date) nextlogin from Activity ) A
Select round(count(player_id)/(Select count(distinct player_id) from Activity),2) as fraction from ( Select a.event_date, a.player_id from Activity a Join ( Select min(event_date) as eventdate, player_id from Activity group by player_id) act on a.player_id = act.player_id and a.event_date = act.eventdate + 1 )res
Select round(count(player_id)/(select count(distinct player_id) from activity), 2) as fraction FRom( select player_id, row_number() over (partition by player_id order by event_date) grp, datediff(lead(event_date, 1) over(partition by player_id order by event_date), event_date) diff FROM Activity ) as L Where grp = 1 and diff=1
Select round(sum(case when a.event_date = date_add(f_lg, interval 1 day) then 1 else 0 end)/count(distinct a.player_id),2) as fraction From activity a left join ( Select player_id, min(event_date) as f_lg from Activity Group by 1) a1 on a.player_id = a1.player_id
WITH A AS (SELECT player_id, event_date, LEAD(event_date, 1) OVER (PARTITION BY player_id ORDER BY event_date) AS next_login, DENSE_RANK() OVER(PARTITION BY player_id ORDER BY event_date) AS rnk FROM Activity), B AS ( SELECT player_id, event_date, CASE WHEN next_login - event_date = 1 THEN 1 ELSE 0 END AS consecutive FROM a WHERE rnk = 1) SELECT ROUND(SUM(consecutive) / COUNT(*),2) AS fraction FROM b
WITH CTE AS ( SELECT player_id, MIN(event_date) AS first_login FROM Activity GROUP BY player_id) SELECT ROUND(COUNT(a.player_id)/ COUNT(CTE.player_id),2) AS fraction FROM CTE LEFT JOIN Activity a ON CTE.player_id = a.player_id AND a.event_date - CTE.first_login = 1
WITH CTE AS (SELECT player_id, MIN(event_date) AS first_login FROM Activity GROUP BY player_id) SELECT ROUND(IFNULL(COUNT(DISTINCT b.player_id), 0) / IFNULL(COUNT(DISTINCT a.player_id), 0), 2) AS fraction FROM CTE a LEFT JOIN Activity b ON a.player_id = b.player_id AND DATEDIFF (event_date, first_login) = 1
WITH CTE AS( SELECT player_id, MIN(event_date) OVER (PARTITION BY player_id) AS first_login, event_date - MIN(event_date) OVER (PARTITION BY player_id) AS diff FROM Activity ) SELECT ROUND((SELECT COUNT(DISTINCT player_id) FROM CTE WHERE diff = 1) / COUNT(DISTINCT player_id),2) AS fraction FROM Activity
WITH CTE_0 AS ( SELECT PLAYER_ID, MIN(EVENT_DATE) AS FIRST_LOGIN FROM ACTIVITY GROUP BY PLAYER_ID ) ,CTE_1 AS ( SELECT COUNT(DISTINCT A.PLAYER_ID) P_COUNT FROM ACTIVITY A, CTE_0 C0 WHERE A.PLAYER_ID = C0.PLAYER_ID AND EXISTS ( SELECT 'X' FROM ACTIVITY AA WHERE AA.PLAYER_ID = A.PLAYER_ID AND AA.EVENT_DATE = DATE_ADD(C0.FIRST_LOGIN, INTERVAL 1 DAY) ) ) ,CTE_2 AS ( SELECT COUNT(DISTINCT PLAYER_ID) TOT_COUNT FROM ACTIVITY ) SELECT ROUND(C1.P_COUNT / C2.TOT_COUNT, 2) FRACTION FROM CTE_1 C1, CTE_2 C2
WITH FIRST_LOGIN_TABLE AS( SELECT *, IF(event_date - MIN(event_date) over(partition by player_id order by event_date) = 1, 1, 0) AS FIRST_LOGIN FROM Activity ) SELECT ROUND(SUM(FIRST_LOGIN) / (SELECT COUNT(DISTINCT(player_id )) FROM Activity), 2) AS fraction FROM FIRST_LOGIN_TABLE
WITH FirstLogin AS (SELECT player_id ,MIN(event_date) AS first_login FROM Activity GROUP BY player_id), NextLogin AS (SELECT player_id ,event_date ,LEAD(event_date,1) OVER(PARTITION BY player_id ORDER BY event_date ASC) AS next_login FROM Activity), Retention AS (SELECT NL.player_id ,IF(DATEDIFF(NL.next_login,NL.event_date) = 1,1,0) AS day1retention FROM NextLogin NL INNER JOIN FirstLogin FL ON FL.player_id = NL.player_id AND FL.first_login = NL.event_date) SELECT ROUND(SUM(day1retention)/COUNT(player_id),2) AS fraction FROM Retention
WITH T AS ( SELECT player_id, MIN(event_date) AS first_date FROM Activity GROUP BY player_id ) SELECT ROUND(COUNT(DISTINCT player_id)/(SELECT COUNT(DISTINCT player_id) FROM Activity), 2) AS fraction FROM Activity JOIN T USING(player_id) WHERE DATEDIFF(event_date, first_date)=1
WITH T1 AS ( SELECT A1.player_id, MIN(A1.event_date) as d1, MIN(A2.event_date) as d2 FROM Activity A1 LEFT JOIN Activity A2 ON A2.event_date = A1.event_date +1 AND A1.player_id = A2.player_id GROUP BY A1.player_id ) SELECT ROUND(COUNT(DISTINCT player_id) / (SELECT COUNT(DISTINCT player_id) FROM Activity),2) as fraction FROM T1 WHERE DATEDIFF(d2,d1) = 1
WITH T1 AS ( SELECT player_id,MIN(event_date) AS first_login FROM Activity GROUP BY player_id) SELECT ROUND(COUNT(DISTINCT T1.player_id)/(SELECT COUNT(DISTINCT player_id) FROM Activity),2) AS fraction FROM T1 INNER JOIN Activity A ON T1.player_id = A.player_id AND DATEDIFF(event_date,first_login) = 1
WITH T1 AS ( WITH LEAD_DAY_TABLE AS( SELECT *, MIN(event_date) over(partition by player_id order by event_date ) AS MIN_DAY, LEAD (event_date) over(partition by player_id order by event_date ) AS LEAD_DAY FROM Activity ) SELECT * FROM LEAD_DAY_TABLE WHERE LEAD_DAY = DATE_ADD(event_date , INTERVAL 1 DAY) AND event_date = MIN_DAY ) SELECT ROUND(COUNT(*) / (SELECT COUNT(DISTINCT(player_id)) FROM Activity), 2) AS fraction FROM T1
WITH a AS( select *, row_number() over (partition by player_id order by event_date) as row_num, (event_date - lag(event_date) over (partition by player_id)) as diff_of_one from activity ) select round(count(*)/(select count(distinct player_id) from activity), 2) as fraction from a where row_num = 2 and diff_of_one = 1
WITH cte AS (SELECT * ,LEAD(event_date,1,event_date) OVER (PARTITION BY player_id ORDER BY event_date) AS next_event_date FROM Activity) SELECT ROUND(IFNULL(SUM(CASE WHEN DATEDIFF(next_event_date,event_date) = 1 THEN 1 ELSE 0 END)/COUNT(DISTINCT player_id),0),2) AS fraction FROM cte WHERE (player_id,event_date) IN (SELECT player_id,MIN(event_date) FROM Activity GROUP BY 1)
WITH cte AS (SELECT player_id, DENSE_RANK() OVER(PARTITION BY player_id ORDER BY event_date) AS rnk, event_date FROM Activity) SELECT ROUND(COUNT(a.player_id)/(SELECT COUNT(DISTINCT player_id) FROM Activity), 2) AS fraction FROM cte a JOIN cte b ON a.player_id = b.player_id AND DATEDIFF(b.event_date, a.event_date) = 1 WHERE a.rnk = 1
WITH cte AS( SELECT player_id, MIN(event_date)OVER(PARTITION BY player_id) AS first_login, LEAD(event_date,1)OVER(PARTITION BY player_id ORDER BY event_date) AS lags FROM activity) SELECT ROUND((SELECT COUNT(DISTINCT player_id) FROM cte WHERE ABS(first_login - lags)=1) / COUNT(DISTINCT player_id),2) AS fraction FROM activity
WITH cte1 AS (SELECT player_id as d1, MIN(event_date) as mevent_date FROM Activity GROUP BY player_id) , cte2 AS (SELECT a1.player_id as s1 FROM cte1 INNER JOIN Activity as a1 ON d1=a1.player_id and cte1.mevent_date+1=a1.event_date) SELECT ROUND(COUNT(DISTINCT(s1))/COUNT(DISTINCT(d1)),2) as fraction FROM cte2,cte1
WITH cte1 AS( SELECT player_id, event_date, RANK() OVER(PARTITION BY player_id ORDER BY event_date ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS drank, MIN(event_date) OVER(PARTITION BY player_id ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS first_login FROM Activity ) SELECT ROUND(COUNT(DISTINCT player_id) / (SELECT COUNT(DISTINCT player_id) FROM Activity ), 2) AS fraction FROM cte1 WHERE drank = 2 AND DATEDIFF(event_date, first_login) = 1
WITH cte_first_date AS ( SELECT player_id, event_date FROM ( SELECT player_id, event_date, ROW_NUMBER() OVER (PARTITION BY player_id ORDER BY event_date ASC) as event_date_rank FROM Activity ) r WHERE event_date_rank = 1 ) SELECT ROUND(relogin_count/total_count, 2) AS fraction FROM ( SELECT COUNT(DISTINCT f.player_id) AS relogin_count FROM cte_first_date f INNER JOIN Activity a ON f.player_id = a.player_id AND DATEDIFF(a.event_date, f.event_date) = 1 ) r INNER JOIN ( SELECT COUNT(DISTINCT player_id) AS total_count FROM Activity ) t ON 1 = 1
WITH first_login AS ( SELECT a.player_id, MIN(a.event_date) as first_login FROM activity a GROUP BY 1 ), lead_date AS( SELECT f.player_id, f.first_login, a.event_date - f.first_login as event_datediff FROM first_login f LEFT JOIN activity a ON a.player_id = f.player_id AND a.event_date != f.first_login ) SELECT ROUND(COUNT(DISTINCT CASE WHEN event_datediff = 1 THEN player_id END) / COUNT(DISTINCT player_id),2) as fraction FROM lead_date
WITH first_login AS ( SELECT a.player_id, a.event_date FROM Activity a JOIN ( SELECT player_id, MIN(event_date) AS first_login FROM Activity GROUP BY 1) b ON a.player_id = b.player_id AND a.event_date = DATE_ADD(b.first_login, INTERVAL 1 DAY)) SELECT ROUND(COUNT(DISTINCT player_id) / (SELECT COUNT(DISTINCT player_id) FROM Activity), 2) AS fraction FROM first_login
WITH first_login AS ( SELECT player_id, event_date first_date FROM ( SELECT player_id, event_date, ROW_NUMBER() OVER(PARTITION BY player_id ORDER BY event_date ASC) rn FROM Activity) a WHERE rn = 1 ) SELECT ROUND(SUM(CASE WHEN s.event_date IS NOT NULL THEN 1 ELSE 0 END)/COUNT(*), 2) fraction FROM first_login f LEFT JOIN Activity s ON f.player_id = s.player_id AND DATEDIFF(s.event_date, f.first_date) = 1
WITH first_login AS (SELECT player_id, MIN(event_date) first_log FROM activity GROUP BY 1), T1 AS (SELECT player_id, CASE WHEN DATEDIFF(event_date, first_log) = 1 THEN 1 ELSE 0 END AS date_check FROM activity JOIN first_login USING(player_id)) SELECT ROUND(COUNT(DISTINCT player_id)/(SELECT COUNT(DISTINCT player_id) FROM activity),2) fraction FROM T1 WHERE date_check = 1
WITH first_login_date AS ( SELECT player_id, MIN(event_date) AS event_date FROM Activity GROUP BY player_id ) SELECT ROUND(COUNT(DISTINCT a.player_id) / (SELECT COUNT(DISTINCT player_id) FROM Activity), 2) AS fraction FROM Activity a JOIN first_login_date fld ON a.player_id = fld.player_id AND a.event_date = fld.event_date + 1
WITH nactivity AS( SELECT player_id, event_date, DENSE_RANK() OVER (PARTITION BY player_id ORDER BY event_date) drank FROM activity ), second_day AS (SELECT a1.player_id, a1.event_date FROM nactivity a1 JOIN nactivity a2 ON a1.player_id = a2.player_id AND a2.event_date = DATE_ADD(a1.event_date, INTERVAL 1 DAY) AND a1.drank = 1) SELECT ROUND((SELECT COUNT(*) FROM second_day)/(SELECT COUNT(DISTINCT player_id) FROM activity), 2) AS fraction
WITH sub AS ( SELECT * FROM ( SELECT player_id, DENSE_RANK() OVER (PARTITION BY player_id ORDER BY event_date) AS rnk, event_date FROM Activity )tmp WHERE rnk IN (1,2) ), cnt AS ( SELECT COUNT(DISTINCT player_id) AS cnt FROM Activity ) SELECT ROUND(COUNT(s1.player_id)/cnt, 2) AS fraction FROM sub s1 JOIN sub s2 USING(player_id) JOIN cnt WHERE DATEDIFF(s2.event_date,s1.event_date) = 1
WITH t AS ( SELECT a.*, b.first_date, CASE WHEN DATEDIFF(a.event_date, b.first_date) = 1 THEN 1 ELSE 0 END AS flag FROM activity a LEFT JOIN (SELECT player_id, MIN(event_date) AS first_date FROM activity GROUP BY player_id) b ON a.player_id = b.player_id ) SELECT ROUND(SUM(flag) / COUNT(DISTINCT player_id), 2) AS fraction FROM t
WITH t AS ( SELECT player_id, DATE_ADD(MIN(event_date), INTERVAL 1 DAY) AS event_date FROM Activity GROUP BY player_id ) SELECT ROUND(COUNT(DISTINCT player_id) / (SELECT COUNT(DISTINCT player_id) FROM t), 2) AS fraction FROM Activity WHERE (player_id, event_date) IN (SELECT player_id, event_date FROM t)
WITH t AS ( SELECT player_id, event_date, LEAD(event_date, 1) OVER(PARTITION BY player_id ORDER BY event_date) AS next_login, DENSE_RANK() OVER(PARTITION BY player_id ORDER BY event_date) AS rnk FROM Activity ) SELECT ROUND(SUM(CASE WHEN next_login - event_date = 1 THEN 1 ELSE 0 END)/COUNT(*),2) AS fraction FROM t WHERE rnk = 1
WITH t1 AS ( SELECT player_id, event_date, RANK() OVER (PARTITION BY player_id ORDER BY event_date) AS rnk FROM activity ), t2 AS ( SELECT player_id, event_date FROM t1 WHERE rnk = 1 ), t3 AS ( SELECT t2.player_id FROM t2 JOIN activity a ON t2.player_id = a.player_id AND DATE_ADD(t2.event_date, INTERVAL 1 DAY) = a.event_date ) SELECT ROUND((SELECT COUNT(*) FROM t3)/(SELECT COUNT(DISTINCT player_id) FROM activity), 2) AS fraction
WITH table1 AS (SELECT *, RANK() OVER (PARTITION BY player_id ORDER BY event_date ASC) AS rk, DATEDIFF(LEAD(event_date, 1) OVER (PARTITION BY player_id ORDER BY event_date ASC), event_date) AS diff FROM Activity), table2 AS (SELECT COUNT(DISTINCT player_id) AS num_players FROM Activity) SELECT ROUND(COUNT(DISTINCT player_id)/table2.num_players, 2) AS fraction FROM table1, table2 WHERE rk = 1 AND diff = 1
WITH table1 AS( SELECT player_id, event_date, LEAD(event_date) OVER(PARTITION BY player_id ORDER BY event_date) AS lead_date, RANK() OVER(PARTITION BY player_id ORDER BY event_date) AS rnk FROM Activity ) SELECT ROUND((SELECT COUNT(DISTINCT player_id) FROM table1 WHERE DATEDIFF(lead_date, event_date) = 1 AND rnk=1) / (SELECT COUNT(DISTINCT player_id) FROM Activity),2) AS fraction
WITH temp AS ( SELECT player_id, event_date, RANK() OVER(PARTITION BY player_id ORDER BY event_date) AS rk FROM Activity ) SELECT ROUND( COUNT(DISTINCT t2.player_id) / COUNT(DISTINCT t1.player_id), 2) AS fraction FROM temp t1 LEFT JOIN temp t2 ON t1.player_id = t2.player_id AND t1.rk = 1 AND t2.rk = 2 AND DATEDIFF(t2.event_date, t1.event_date) = 1
WITH temp AS ( SELECT player_id, event_date, RANK() OVER(PARTITION BY player_id ORDER BY event_date) AS rk FROM Activity ) SELECT ROUND( COUNT(IF(t2.event_date IS NOT NULL, t2.player_id, NULL)) / COUNT(DISTINCT t1.player_id), 2) AS fraction FROM temp t1 LEFT JOIN temp t2 ON t1.player_id = t2.player_id AND t1.rk = 1 AND t2.rk = 2 AND DATEDIFF(t2.event_date, t1.event_date) = 1
WITH temp AS ( SELECT player_id, event_date, RANK() OVER(PARTITION BY player_id ORDER BY event_date) AS rk FROM Activity ) SELECT ROUND(COUNT(DISTINCT IF(t2.event_date IS NOT NULL, t2.player_id, NULL)) / COUNT(DISTINCT t1.player_id), 2) AS fraction FROM temp t1 LEFT JOIN temp t2 ON t1.player_id = t2.player_id AND t1.rk = 1 AND t2.rk = 2 AND DATEDIFF(t2.event_date, t1.event_date) = 1
WITH temp_first as ( SELECT player_id, MIN(event_date) as event_date FROM Activity GROUP BY 1 ORDER BY 1,event_date ) SELECT ROUND(COUNT(t.player_id)/(SELECT COUNT(*) FROM temp_first),2) AS fraction FROM( SELECT t.player_id as player_id FROM temp_first t JOIN Activity a ON t.player_id = a.player_id WHERE DATEDIFF(a.event_date, t.event_date) = 1) as t
WITH tot_player AS ( SELECT player_id,event_date, LEAD(event_date) OVER (PARTITION BY player_id ORDER BY event_date ) as next_date, ROW_NUMBER() OVER(PARTITION BY player_id ORDER BY event_date) row_num FROM activity ) SELECT ROUND(SUM(CASE WHEN datediff(next_date,event_date)=1 THEN 1 ELSE 0 END) / COUNT(distinct player_id),2) fraction FROM tot_player WHERE row_num = 1
WITH total_players AS ( SELECT COUNT(DISTINCT player_id) AS total_players FROM Activity ), players_signup_date AS( SELECT player_id, min(event_date) as signup_date FROM Activity GROUP BY 1 ), players_login_day_after_signup AS( SELECT COUNT(a.player_id) AS players_login_day_after_signup FROM players_signup_date AS a INNER JOIN Activity AS b ON a.player_id = b.player_id AND a.signup_date = b.event_date - 1 ) SELECT ROUND(players_login_day_after_signup / total_players,2) AS fraction FROM players_login_day_after_signup LEFT JOIN total_players ON 1 = 1
With CTE as (Select b.player_id, b.event_date From Activity a INNER JOIN (Select player_id, min(event_date) as event_date From Activity Group by player_id) b ON b.player_id = a.player_id AND b.event_date = a.event_date - 1) Select round(count(*)/(Select count(distinct player_id) From Activity), 2) as fraction From CTE
With a as ( select player_id, event_date, rank() over (partition by player_id order by event_date) as ordered_days, lead(event_date, 1) over (partition by player_id order by event_date) as next_day from Activity), b as (select player_id, event_date, next_day from a where ordered_days = 1 and datediff(event_date, next_day) = -1) select round(count(*)/(select count(distinct player_id) from activity), 2) as fraction from b
With cte as ( Select distinct a.player_id, a.event_date as first_login, b.event_date as next_login from activity a join activity b Where a.player_id = b.player_id and b.event_date = a.event_date + 1 ), cte2 as ( Select player_id, min(event_date) as first_login from activity group by player_id ), cte3 as ( select cte.player_id from cte join cte2 where cte.player_id = cte2.player_id and cte.first_login = cte2.first_login ) select round(count(distinct cte3.player_id) / count(distinct activity.player_id), 2) as fraction from cte3 join activity
With first_data as (Select player_id, min(event_date) as first_login From Activity Group by player_id) Select round(count(a.player_id)/(Select count(player_id) From first_data),2) as fraction From Activity a Left join first_data f On a.player_id = f.player_id Where datediff(a.event_date, f.first_login) = 1
With first_log as ( select player_id, min(event_date) as event_date from Activity group by 1) select round(count(distinct a.player_id)/ count(distinct fl.player_id),2) as fraction from first_log as fl left join Activity as a on fl.player_id = a.player_id and datediff(a.event_date, fl.event_date) = 1
With row_nbr as ( select player_id, event_date, row_number() over (partition by player_id order by event_date ASC) as rn from activity ) , first_login as ( select player_id, event_date as first_dt from row_nbr where rn = 1 ) , second_login as ( select player_id, event_date as second_dt from row_nbr where rn = 2 ) select round(avg(if_cont),2) as fraction from (select f.player_id, f.first_dt, (case when (s.second_dt - f.first_dt) = 1 then 1 else 0 end) as if_cont from first_login f left join second_login s on f.player_id = s.player_id ) tmp
select ROUND( (select count(1) from Activity a, (select player_id, min(event_date) as first_date from Activity group by 1) t where a.player_id=t.player_id and DATEDIFF(a.event_date, t.first_date) = 1 ) / ( select count(distinct player_id) from Activity ) , 2) as fraction
select ROUND( COUNT(DISTINCT(a1.player_id)) / (select count(DISTINCT(player_id)) from activity), 2) as fraction from activity a1 INNER JOIN ( select MIN(event_date) as first_date, player_id as pid from activity a1 group by pid ) fdt on datediff(a1.event_date, fdt.first_date) = 1 and fdt.pid=a1.player_id
select ROUND( COUNT(f.player_id)/(SELECT count(distinct player_id) FROM activity), 2) as fraction from activity as a JOIN ( select player_id, min(event_date) as first_login from activity group by player_id ) f ON datediff(a.event_date, f.first_login)=1 and a.player_id=f.player_id
select ROUND((count(b.player_id) /count(a.player_id)), 2) as fraction from (select player_id, min(event_date) as first_logged from Activity group by player_id ) as a left join Activity b on a.player_id = b.player_id and b.event_date - a.first_logged = 1
select ROUND(SUM(CASE WHEN temp.min_date+1 = a.event_date THEN 1 else 0 end)/count(distinct temp.player_id),2) as fraction FROM (select player_id, min(event_date) as min_date from Activity group by player_id) as temp JOIN activity a ON temp.player_id=a.player_id
select distinct round(count(distinct a.player_id)/count(distinct b.player_id),2) as fraction from ( select distinct a.player_id, min(a.event_date) as event_date from activity a group by a.player_id ) b left join ( select distinct a.player_id, a.event_date from activity a ) a on b.player_id = a.player_id and a.event_date = b.event_date + 1
select ifnull(round( (select count(distinct a.player_id) from activity a join activity b on a.player_id=b.player_id and datediff(b.event_date,a.event_date)=1 join (select player_id, min(event_date) as first_date from activity group by 1) c on a.player_id=c.player_id and a.event_date=c.first_date ) / (select count(distinct player_id) from activity) ,2),0) as fraction
select round ((select count(distinct player_id) as A from (select player_id, event_date, lead(event_date) over (partition by player_id order by event_date) as tom, dense_rank() over (partition by player_id order by event_date) as rnk from activity) a where datediff(tom, event_date) = 1 and rnk = 1) / (select count(distinct player_id) as B from activity) ,2) as fraction from activity limit 1
select round( cast(count(distinct case when flag = 1 then player_id else null end) as float)/ cast(count( distinct player_id) as float) ,2)as fraction from ( select player_id, case when (lead(event_date) over (partition by player_id order by event_date)) = adddate(event_date, interval 1 day) and (min(event_date) over (partition by player_id) = event_date) then 1 else 0 end as flag from Activity )a
select round( cast(count(distinct case when flag = 1 then player_id else null end) as float)/ cast(count( distinct player_id) as float) ,2)as fraction from ( select player_id, case when (min(event_date) over (partition by player_id) = adddate(event_date, -1)) then 1 else 0 end as flag from Activity )a
select round( sum(case when b.player_id is null then 0 else 1 end)/count(*),2) fraction from (select a.player_id,min(event_date) first_date from Activity a group by 1)a left join Activity b on a.player_id = b.player_id and b.event_date = date_add(a.first_date,interval 1 day)
select round(( (select count(*) from (select player_id, min(event_date) as min_date from activity where (player_id,event_date) IN (select player_id, date(min(event_date) + 1) from activity group by player_id) group by player_id)g) / (select count(distinct player_id) from activity)),2) as fraction
select round(( select count(a.player_id)player_id from ( select a.* from ( select *, lead(event_date,1) over(partition by player_id order by event_date) as ld from Activity )a where a.ld-a.event_date=1 ) a inner join (select player_id, min(event_date) as event_date from Activity group by player_id) b on a.player_id=b.player_id and a.event_date=b.event_date )/ (select count(distinct player_id) from Activity),2) as fraction
select round(( select count(distinct t1.player_id) from( select player_id, min(event_date) as firstdate from Activity group by player_id) as t1, Activity as t2 where t1.player_id=t2.player_id and datediff(t2.event_date, t1.firstdate)=1 )/( select count(distinct player_id) from Activity),2) as fraction
select round((count(f.player_id)/(select count(distinct player_id) from activity)),2) as fraction from activity f join activity s on f.player_id = s.player_id and (s.event_date-f.event_date)=1 where (f.player_id, f.event_date) in (select player_id, min(event_date) from activity group by player_id)
select round((select count(distinct a.player_id) as n_con from (select player_id, min(event_date) as firstdate from activity group by player_id) temp inner join activity a on temp.firstdate + 1 = a.event_date and a.player_id = temp.player_id)/ (select count(distinct player_id) from activity), 2) as fraction
select round((select count(distinct a1.player_id) from (select player_id, min(event_date) as event_date from Activity group by player_id ) a1 left join Activity a2 on a1.event_date = a2.event_date-1 and a1.player_id = a2.player_id where a2.player_id is not null)/(select count(distinct player_id) from Activity),2) as fraction from dual
select round((sum(if(datediff(event_date, first_login) = 1, 1, 0))/count(distinct player_id)), 2) fraction from (select *, min(event_date) over (partition by player_id) first_login from activity) t
select round((sum(if(datediff(event_date,first_login)=1,1,0))/count(distinct player_id)),2) fraction from (select *, min(event_date) over(partition by player_id) first_login from activity) t
select round(act_user.u_loggedtwo / count(distinct(a1.player_id)), 2) fraction from ( select count(distinct(a.player_id)) u_loggedtwo from activity a, activity b where a.player_id = b.player_id and DATEDIFF(a.event_date, b.event_date) = 1 and b.event_date = (select min(event_date) l_date from activity c where c.player_id = b.player_id group by c.player_id) ) act_user, activity a1
select round(cn/c,2) as fraction from (select count(t1.player_id) as cn from (select player_id,min(event_date) as event_date from Activity group by player_id)t1 join Activity on Activity.player_id = t1.player_id and DATE_ADD(T1.EVENT_DATE,INTERVAL 1 DAY) = Activity.event_date)t2,(select count(distinct player_id) as c from Activity)t3
select round(cnt /(select count(distinct player_id) from Activity),2) as fraction from(select count(distinct player_id) as cnt from(select player_id, event_date, lead(event_date) over(partition by player_id order by event_date) as next_day, dense_rank() over(partition by player_id order by event_date) as rnk from Activity) t where datediff(next_day, event_date) = 1 and rnk = 1) as temp
select round(count( distinct case when r=1 and d=1 then player_id else null end)/count(distinct player_id),2) as fraction from ( select a.*, datediff(lead(event_date,1) over(partition by player_id order by event_date asc),event_date) as d, row_number() over(partition by player_id order by event_date asc) as r from activity a ) abc
select round(count(*)/(select count(distinct player_id) from Activity),2) as fraction from( select player_id, device_id, event_date, lead(event_date,1) over(partition by player_id order by event_date)as ldate, row_number() over(partition by player_id order by event_date) as rn from Activity)a where a.event_date + 1 = a.ldate and rn =1
select round(count(1)/(select count(distinct player_id) from activity), 2) fraction from ( select *, row_number() over(partition by player_id order by event_date) rownum, datediff(lead(event_date, 1) over(partition by player_id order by event_date), event_date) diff from activity ) t where rownum = 1 and diff = 1
select round(count(1)/(select count(distinct player_id) from activity),2) as fraction from ( select *, row_number() over (partition by player_id order by event_date) as rn, datediff(lead(event_date,1) over(partition by player_id order by event_date), event_date) as date_diff from Activity )r where rn = 1 and date_diff = 1
select round(count(a.player_id) / count(temp.player_id),2) fraction from (select player_id, min(event_date) login from Activity group by 1) temp left join Activity a on temp.player_id = a.player_id and a.event_date - temp.login = 1
select round(count(a.player_id)/ count(*) , 2) as fraction from ( select player_id, min(event_date) as first_date from activity group by 1 ) f left join activity a on f.player_id = a.player_id and date_add(a.event_date, interval -1 day) = f.first_date and a.player_id is not null
select round(count(a.player_id)/(select count(distinct player_id) from Activity),2) fraction from (select player_id,min(event_date) firstday from Activity group by player_id) a left join Activity b on a.player_id=b.player_id where datediff(b.event_date,a.firstday)=1
select round(count(a2.player_id)/count(a1.player_id),2) as fraction from (select player_id, min(event_date) as first_login from activity group by player_id) a1 left join activity a2 on a1.player_id=a2.player_id and datediff(a2.event_date, a1.first_login)=1
select round(count(b.event_date)/count(*), 2) as fraction from (select player_id, min(event_date) as event_date from Activity group by player_id) a left join (select distinct player_id, event_date from Activity) b on a.player_id = b.player_id and datediff(b.event_date, a.event_date) = 1
select round(count(b.player_id)/count(a.player_id),2) as fraction from (select player_id, min(event_date) as first_login from activity group by 1) a left join activity b on datediff(b.event_date,first_login)=1 and a.player_id=b.player_id
select round(count(b.player_id)/count(a.player_id),2) as fraction from (select player_id, min(event_date) as min_event_date from activity group by 1) as a left join activity as b on datediff(b.event_date,a.min_event_date)=1 and a.player_id=b.player_id
select round(count(case when b.event_date is not null then 1 end)/count(distinct a.player_id),2) as fraction from (select player_id,min(event_date) as event_date from Activity group by 1) a left join Activity b on a.player_id=b.player_id and b.event_date=a.event_date+1
select round(count(distinct (case when b.event_date is not null then a.player_id else null end))/ count(distinct a.player_id), 2) as fraction from (select player_id, min(event_date) as first_date from Activity group by player_id) a left join activity b on a.player_id = b.player_id and datediff(b.event_date, a.first_date) = 1
select round(count(distinct a.player_id) / count(distinct b.player_id), 2) as 'fraction' from (select distinct player_id, min(event_date) as 'event_date' from Activity group by player_id) as temp, Activity as a, Activity as b where temp.player_id = a.player_id and datediff(a.event_date, temp.event_date) = 1
select round(count(distinct a.player_id) / count(distinct b.player_id), 2) as 'fraction' from (select distinct player_id, min(event_date) as 'event_date' from Activity group by player_id) as temp, Activity as a, Activity as b where temp.player_id = a.player_id and datediff(a.event_date, temp.event_date) =1
select round(count(distinct a.player_id) / count(distinct b.player_id), 2) as fraction from ( select player_id, event_date, rank() over (partition by player_id order by event_date) as rk, lead(event_date, 1) over (partition by player_id order by event_date) as ld from activity) a, activity b where rk = 1 and datediff(ld, a.event_date) = 1
select round(count(distinct a.player_id) / count(distinct b.player_id), 2) as fraction from (select player_id, min(event_date) as firstlogin from activity group by player_id) b left join activity a on b.firstlogin + 1 = a.event_date and a.player_id = b.player_id
select round(count(distinct a.player_id) / count(distinct t.player_id), 2) as fraction from (select player_id, date_add(min(event_date), interval 1 DAY) as next_day from activity group by player_id) t left join activity a on t.player_id = a.player_id and t.next_day = a.event_date
select round(count(distinct a.player_id)/ (select count(distinct player_id) from Activity),2) fraction from (select player_id, min(event_date) as event_date from Activity group by player_id ) a join Activity b on a.player_id = b.player_id and a.event_date = b.event_date - 1
select round(count(distinct a.player_id)/(select count(distinct player_id) as denom from Activity),2) as fraction from (select distinct player_id,min(event_date) as first_L_I from Activity group by player_id)as a inner join ( select distinct player_id,event_date from Activity )as b on a.first_L_I = b.event_date - interval 1 day and a.player_id = b.player_id
select round(count(distinct a.player_id)/(select count(distinct player_id) from activity), 2) as fraction from (select player_id, event_date, lead(event_date) over (partition by player_id order by event_date asc) as next_date, rank() over (partition by player_id order by event_date asc) as rnk from activity) a where datediff(next_date, event_date) = 1 and rnk = 1
select round(count(distinct a.player_id)/(select count(distinct player_id) from activity), 2) as fraction from (select player_id, min(event_date) as event_date from activity group by player_id) a inner join activity b on a.player_id = b.player_id and a.event_date = date_sub(b.event_date, interval 1 day)
select round(count(distinct a.player_id)/count(distinct b.player_id), 2) as fraction from (select distinct player_id, min(event_date) as event_date from activity group by player_id) as min_dates, activity as a, activity as b where a.player_id = min_dates.player_id and datediff(a.event_date, min_dates.event_date) =1
select round(count(distinct a.player_id)/count(distinct b.player_id),2) as "fraction" from Activity a, Activity b, (select player_id, min(event_date) as "first_login" from Activity group by player_id) as temp where datediff(a.event_date,temp.first_login) = 1 and a.player_id = temp.player_id
select round(count(distinct a.player_id)/count(distinct log.player_id),2) as fraction from activity a right join (select player_id, min(event_date) as first_login from activity group by player_id) log on a.player_id=log.player_id and a.event_date = log.first_login+1
select round(count(distinct a.player_id)/count(distinct t.player_id),2) as fraction from (select distinct player_id, min(event_date) as first_log from Activity group by player_id) t left join Activity a on t.player_id = a.player_id and datediff(a.event_date, t.first_log) = 1
select round(count(distinct a1.player_id) / (select count(distinct player_id) from Activity),2) as fraction from Activity a1 join Activity a2 on a1.player_id = a2.player_id and datediff(a2.event_date, a1.event_date) = 1 and (a1.player_id, a1.event_date) in (select player_id, min(event_date) from Activity group by 1)
select round(count(distinct a1.player_id)/(select count(distinct player_id) from activity), 2) fraction from (select player_id, event_date, games_played, dense_rank() over(partition by player_id order by event_date asc) r from Activity a) a1 inner join Activity a2 on a1.player_id = a2.player_id where (date_add(a1.event_date, interval 1 day) = a2.event_date) and (a1.r = 1)
select round(count(distinct a3.player_id)/count(distinct a1.player_id),2) as fraction from (select player_id, event_date, dense_rank() over (partition by player_id order by event_date asc) rnk from Activity) a1 left join (select * from (select player_id, event_date, dense_rank() over (partition by player_id order by event_date asc) rnk from Activity) a2 where rnk = 2) a3 on a1.player_id = a3.player_id and a1.event_date = date_sub(a3.event_date, interval 1 day)
select round(count(distinct b.player_id)/(count(distinct a.player_id)), 2) as fraction from (select player_id, min(event_date) as event_date from activity group by player_id) a left join activity b on a.player_id = b.player_id and a.event_date = date_sub(b.event_date, interval 1 day)
select round(count(distinct b.player_id)/count(a.player_id),2) fraction from (select player_id, min(event_date) minddt from activity group by player_id) a left join activity b on a.player_id = b.player_id and a.minddt = b.event_date-1
select round(count(distinct b.player_id)/count(distinct a.player_id), 2) as fraction from (select player_id, min(event_date) as event_date from Activity group by 1) as a left join Activity as b on datediff(b.event_date, a.event_date) =1 and a.player_id = b.player_id
select round(count(distinct b.player_id)/count(distinct a.player_id), 2)as fraction from (select player_id, min(event_date) event_date from activity group by 1) a left join activity b on a.player_id = b.player_id and a.event_date = b.event_date - interval '1' day
select round(count(distinct b.player_id)/count(distinct a.player_id),2) as fraction from (select player_id, min(event_date) as event_date from activity a group by player_id) a left join activity b on a.player_id = b.player_id and a.event_date + 1 = b.event_date
select round(count(distinct b.player_id)/count(distinct a.player_id),2) as fraction from (select player_id, min(event_date) as first_login from Activity group by 1)a left join Activity b on a.player_id = b.player_id and datediff(b.event_date, a.first_login) = 1
select round(count(distinct b.player_id)/count(distinct a.player_id),2) as fraction from (select player_id, min(event_date) as first_login from Activity group by player_id) as a left join Activity b on a.player_id=b.player_id and b.event_date-a.first_login=1
select round(count(distinct b.player_id)/count(distinct a.player_id),2) as fraction from (select player_id, min(event_date) as min_event_date from activity group by player_id) a left join activity b on a.player_id=b.player_id and a.min_event_date=b.event_date - 1
select round(count(distinct b.player_id)/count(distinct a.player_id),2) as fraction from Activity a left join (select player_id, min(event_date) as first_date from Activity group by player_id) b on a.player_id=b.player_id AND a.event_date= b.first_date+1
select round(count(distinct b.player_id)/count(distinct a.player_id),2) as fraction from Activity a, (select *, row_number() over (partition by player_id order by event_date) date_num, lag(DATE_ADD(event_date, interval 1 day), 1, 0) over (partition by player_id order by event_date) next_date from Activity)b where b.event_date = b.next_date AND b.date_num=2
select round(count(distinct b.player_id)/count(distinct a.player_id),2) as fraction from activity a left join activity b on a.player_id=b.player_id and b.event_date-a.event_date=1 and (a.player_id, a.event_date) in (select player_id,min(event_date) from activity group by player_id)
select round(count(distinct b.player_id)/count(distinct act.player_id),2) as fraction from (select * from (select player_id, event_date, lead(event_date) over (partition by player_id order by event_date asc) as previous, rank() over (partition by player_id order by event_date asc) as num from activity) a where num = 1 and previous = event_date + 1) b, activity act
select round(count(distinct c.Player_ID) / count(distinct b.Player_id),2) as fraction from Activity b left outer join (select min(a.event_date) MinDate, a.Player_ID from Activity a group by Player_id) c on date_sub(b.event_date, INTERVAL 1 DAY) = c.MinDate and b.Player_id = c.Player_ID
select round(count(distinct case when date_rank =1 and days_since_first_login = -1 then player_id end) / count(distinct player_id),2) as fraction from (select player_id, event_date, RANK() OVER(PARTITION BY player_id ORDER BY event_date ASC) as date_rank , event_date - LEAD(event_date,1) OVER(PARTITION BY player_id ORDER BY event_date) as days_since_first_login from Activity) a
select round(count(distinct if(t2.event_date is not null, t1.player_id, null)) / count(distinct t1.player_id), 2) as fraction from (select player_id, min(event_date) as event_date from activity group by player_id) as t1 left join activity as t2 on datediff(t2.event_date, t1.event_date) = 1 and t1.player_id = t2.player_id
select round(count(distinct min_table.player_id)/ (select count(distinct player_id) from Activity), 2) as fraction from (select a1.player_id, min(a1.event_date) as min_date from Activity a1 group by a1.player_id) min_table join Activity a2 on min_table.player_id = a2.player_id and DATE_ADD(min_table.min_date, INTERVAL 1 DAY) = a2.event_date
select round(count(distinct player_id)/(select count(distinct player_id) from Activity), 2) as fraction from( select player_id, lead(event_date, 1, null) over(partition by player_id order by event_date asc) as p_day, min(event_date) over(partition by player_id) as D_min from Activity ) temp where datediff(p_day, D_min) = 1
select round(count(distinct player_id)/(select count(distinct player_id) from Activity),2) as fraction from ( select player_id ,event_date ,lead(event_date,1) over (partition by player_id order by event_date) as next_date from Activity ) A where next_date = date_add(event_date,interval 1 day) and (player_id,event_date) in ( select player_id,min(event_date) as event_date from Activity group by player_id )
select round(count(distinct player_id)/(select count(distinct player_id) from Activity),2) as fraction from ( select player_id ,event_date ,lead(event_date,1) over (partition by player_id order by event_date) as next_date from Activity ) A where next_date = date_add(event_date,interval 1 day) and event_date = ( select min(event_date) from Activity where A.player_id = player_id )
select round(count(distinct player_id)/(select count(distinct player_id) from Activity),2) as fraction from (select player_id, event_date, lead(event_date) over (partition by player_id order by event_date) as next_event, rank() over (partition by player_id order by event_date) as rnk from Activity) a where rnk=1 and datediff(next_event, event_date )=1
select round(count(distinct player_id)/(select count(distinct player_id) from Activity),2) as fraction from( select player_id, device_id,event_date,games_played, lead(event_date ) over(partition by player_id order by event_date ) as next_login_date, rank()over(partition by player_id order by event_date ) as rnk from Activity ) t where next_login_date-event_date=1 and rnk=1
select round(count(distinct player_id)/(select count(distinct player_id) from activity), 2) as fraction from (select player_id, event_date, lag(event_date) over(partition by player_id order by event_date) as pre_date, min(event_date) over (partition by player_id order by event_date) as min_event_date from activity) as tmpt where datediff(event_date, pre_date) = 1 and pre_date = min_event_date
select round(count(distinct return_user) / count(distinct player_id), 2) as fraction from (select a.player_id, a.event_date as first_date, b.player_id as return_user from (select player_id, min(event_date) as event_date from Activity group by 1) a left join Activity b on a.player_id = b.player_id and date_add(a.event_date, interval 1 day) = b.event_date) c
select round(count(distinct t.player_id) / (select count(distinct player_id) from activity),2)as fraction from (select player_id, min(event_date) as event_date from activity group by player_id) t join activity a on t.event_date = subdate(a.event_date,1) and t.player_id = a.player_id
select round(count(distinct t.player_id)/count(distinct a.player_id), 2) as fraction from (select * from (select player_id, event_date, LEAD(event_date,1) over(partition by player_id order by event_date) as lead0, rank() over(partition by player_id order by event_date) as cn from Activity ) as temp where lead0-event_date = 1 and cn = 1) t, Activity a
select round(count(distinct t1.player_id)/(select count(distinct player_id) from Activity), 2) as fraction from (select player_id, event_date, min(event_date) over(partition by player_id) as first_date, lead(event_date) over(partition by player_id order by event_date asc) as next_date from Activity) t1 where event_date=first_date and next_date = date_add(event_date, INTERVAL 1 DAY)
select round(count(distinct t1.player_id)/(select count(distinct player_id) from Activity), 2) as fraction from (select player_id, event_date, min(event_date) over(partition by player_id) as min_date, lag(event_date) over(partition by player_id order by event_date asc) as prev_date from Activity) t1 where prev_date=min_date and event_date = date_add(prev_date, INTERVAL 1 DAY)
select round(count(distinct t1.player_id)/t2.total_players, 2) as fraction from ( select a.player_id, a.event_date from Activity a, Activity b, (select player_id, min(event_date) as login_1st from Activity group by player_id) as c where a.player_id = b.player_id and abs(datediff(a.event_date, b.event_date)) = 1 and a.player_id = c.player_id and a.event_date = c.login_1st ) as t1 , (select count(distinct player_id) as total_players from Activity ) as t2
select round(count(distinct y.player_id)/count(distinct x.player_id), 2) as fraction from activity x left join activity y on x.player_id=y.player_id and datediff(x.event_date, y.event_date)=-1 where (x.player_id, x.event_date) in (select player_id, min(event_date) as event_date from activity group by 1)
select round(count(distinct(a1.player_id))/(select count(distinct(player_id)) from Activity),2) as fraction from Activity as a1, Activity as a2 where a1.player_id = a2.player_id and a1.event_date+1=a2.event_date and (a1.player_id, a1.event_date) in (select player_id, min(event_date) from Activity group by player_id)
select round(count(distinct(tbl2.player_id))/count(distinct(tbl1.player_id)), 2) as fraction from (select *, min(event_date) over(partition by player_id order by event_date asc) as first_login from activity) tbl1 left join activity tbl2 on tbl1.player_id=tbl2.player_id and datediff(tbl2.event_date, tbl1.first_login) =1
select round(count(player_id) / (select count(distinct player_id) from activity), 2) as fraction from ( select player_id, event_date, row_number() over (partition by player_id order by event_date asc) as login_rank, lead(event_date) over (partition by player_id order by event_date asc) as next_login from Activity ) login_table where login_table.login_rank = 1 and login_table.next_login is not null and datediff(login_table.next_login, login_table.event_date) = 1
select round(count(player_id) / (select count(distinct player_id) from activity), 2) as fraction from ( select player_id, event_date, row_number() over (partition by player_id order by event_date asc) as login_rank, lead(event_date) over (partition by player_id order by event_date asc) as next_login from activity ) login_table where login_table.login_rank = 1 and login_table.next_login is not null and datediff(login_table.next_login, login_table.event_date) = 1
select round(count(player_id)/count(*),2) fraction from ( select a.player_id, a.event_date from activity a right join (select player_id, min(event_date) initial from activity group by player_id) temp on a.player_id = temp.player_id and a.event_date = temp.initial+1) temp2
select round(count(t2.player_id) / count(t1.player_id), 2) as fraction from ( select player_id, min(event_date) as first_login from activity group by player_id ) t1 left join activity t2 on t2.player_id = t1.player_id and datediff(t2.event_date, t1.first_login) = 1
select round(count(t2.player_id)/count(distinct t1.player_id),2) as fraction from (select player_id,min(event_date) as m from Activity group by player_id) as t2 right join Activity t1 on t2.m=t1.event_date-1 and t1.player_id=t2.player_id
select round(count(t2.player_id)/count(t1.player_id), 2) as fraction from (select player_id, min(event_date) as first_login from Activity group by 1) t1 left join Activity t2 on t1.player_id = t2.player_id and t1.first_login = t2.event_date-1
select round(count(t2.player_id)/count(t1.player_id), 2) as fraction from (select player_id, min(event_date) as first_login from Activity group by player_id) as t1 left join Activity as t2 on t1.player_id = t2.player_id and t1.first_login = t2.event_date - 1
select round(count(t2.player_id)/count(t1.player_id), 2) as fraction from (select player_id, min(event_date) as first_login from Activity group by player_id) as t1 left join Activity t2 on t1.player_id = t2.player_id and first_login = subdate(t2.event_date,1)
select round(count(t2.player_id)/count(t1.player_id),2) as fraction from (select player_id, min(event_date) as first_login from activity group by player_id) t1 left join activity t2 on t1.player_id = t2.player_id and t1.first_login = t2.event_date - 1
select round(count(t2.player_id)/count(t1.player_id),2) as fraction from (select player_id,min(event_date) as first_login from activity group by player_id) t1 Left join activity t2 on t1.player_id=t2.player_id and t2.event_date=t1.first_login+1
select round(count(table2.player_id)/count(table1.player_id), 2) as fraction from (select player_id, min(event_date) as first_login from activity group by player_id) as table1 left join activity as table2 on table1.player_id = table2.player_id and table1.first_login = table2.event_date - 1
select round(count_/(select count(distinct player_id) from activity),2) as fraction from (select count(player_id) count_ from (select player_id,event_date,lead(event_date) over(partition by player_id order by event_date)next_date,rank() over(partition by player_id order by event_date) rank_ from activity )f where event_date=subdate(next_date,INTERVAL 1 DAY) and rank_=1)c
select round(ifnull(count(a2.player_id),0)/count(distinct a1.player_id), 2) as fraction from (select player_id, min(event_date) as event_date from Activity group by player_id) a1 left join Activity a2 on a1.player_id=a2.player_id and a2.event_date=a1.event_date+1
select round(round(sum(case when b.event_date is not null then 1 else 0 end)/count(*), 2), 5) as fraction from (select player_id, min(event_date) as event_date from Activity group by player_id) a left join (select distinct player_id, event_date from Activity) b on a.player_id = b.player_id and datediff(b.event_date, a.event_date) = 1
select round(sum( CASE When a1.event_date = a2.event_date+1 Then 1 else 0 End)/ count(distinct(a1.player_id)),2) as fraction from Activity a1 inner join (select player_id, min(event_date) as event_date from Activity group by player_id) as a2 on a1.player_id = a2.player_id
select round(sum(case when a.first_login_date + 1 = b.event_date then 1 else 0 end) / count(distinct a.player_id),2) fraction from (select player_id, min(event_date) first_login_date from activity group by player_id) a join activity b on a.player_id = b.player_id
select round(sum(case when a2.player_id is not null then 1 else 0 end) / count(0),2) fraction from ( select player_id, min(event_date) first_login, min(event_date) + 1 day_after_login from activity group by player_id ) a1 left join activity a2 on a2.player_id = a1.player_id and a2.event_date = a1.day_after_login
select round(sum(case when a2.player_id is not null then 1 else 0 end)/count(distinct a1.player_id),2) as fraction from (select min(event_date) as event_date,player_id from activity group by player_id) a1 left join activity a2 on a1.player_id=a2.player_id and datediff(a2.event_date, a1.event_date)=1
select round(sum(case when event_date is not NULL then 1 else 0 end)/count(player_id), 2) as fraction from (select p1.player_id, firstlog, event_date from (select player_id, min(event_date) as firstlog from Activity group by player_id)p1 left join Activity on Activity.player_id = p1.player_id and datediff(event_date, firstlog)=1)p2
select round(sum(case when event_date is not null then 1 else 0 end)/count(distinct player_id),2) as fraction from (select distinct a.player_id, a.min_event_date, b.event_date from (select player_id, min(event_date) as min_event_date from activity group by player_id)a left join activity b on b.event_date = a.min_event_date + 1 and a.player_id = b.player_id)c
select round(sum(case when first.player_id is null then 0 else 1 end)/count(distinct Activity.player_id),2) as fraction from Activity left join (select player_id, min(event_date) as join_date from Activity group by player_id) as first on first.player_id = Activity.player_id and DATEDIFF(activity.event_date, first.join_date ) = 1
select round(sum(case when t1.event_date - t2.first_date = 1 then 1 else 0 end)/count(distinct t1.player_id), 2) as fraction from activity t1 inner join (select player_id, min(event_date) as first_date from activity group by player_id) as t2 on t1.player_id = t2.player_id
select round(sum(case when t1.event_date = t2.first_event+1 then 1 else 0 end)/count(distinct t1.player_id), 2) as fraction from Activity as t1 inner join (select player_id, min(event_date) as first_event from Activity group by player_id) as t2 on t1.player_id = t2.player_id
select round(sum(case when t1.event_date = t2.first_login+1 then 1 else 0 end)/count(distinct t1.player_id),2) as fraction from Activity as t1 inner join ( select player_id, min(event_date) as first_login from Activity group by player_id) as t2 on t1.player_id = t2.player_id
select round(sum(case when t1.event_date=t2.first_date+1 then 1 else 0 end)/count(distinct t1.player_id),2) as fraction from Activity t1 inner join (select player_id, min(event_date) as first_date from Activity group by 1) as t2 on t1.player_id=t2.player_id
select round(sum(case when temp.min_date + 1 = a.event_date then 1 else 0 end) / count(distinct temp.player_id), 2) as fraction from (select player_id, min(event_date) as min_date from activity group by player_id) as temp join activity a on temp.player_id = a.player_id
select round(sum(case when temp.min_date + 1 = a.event_date then 1 else 0 end) / count(distinct temp.player_id), 2) as fraction from (select player_id, min(event_date) as min_date from activity group by player_id) temp join activity a on temp.player_id = a.player_id
select round(sum(case when temp.mindate+1=a.event_date then 1 else 0 end)/count(distinct a.player_id),2) as fraction from (select player_id,min(event_date) as mindate from Activity group by player_id) as temp join Activity a on a.player_id = temp.player_id
select round(sum(flag)/count(distinct player_id),2) as fraction from (select player_id ,event_date,next_date,row_num, case when datediff(next_date,event_date) = 1 then 1 else 0 end as flag from (select player_id ,event_date, lead (event_date) over(partition by player_id order by event_date) as next_date, row_number() over (partition by player_id order by event_date) as row_num from Activity) as t1 ) as t2 where row_num=1
select round(sum(if(a.event_date=b.min_date+1, 1, 0)) / count(distinct b.player_id), 2) as fraction from ( select player_id, min(event_date) min_date from activity group by 1 ) b left join activity a on a.player_id=b.player_id
select round(sum(if(t2.event_date is not null, 1,0)) / count(distinct(t1.player_id)),2) fraction from (select player_id, min(event_date) as event_date from Activity group by player_id) t1 left join Activity t2 on t1.player_id = t2.player_id and datediff(t2.event_date, t1.event_date) = 1
select round(t.count1/count(distinct a_full.player_id),2) as fraction from activity a_full, (select count(distinct a1.player_id) as count1 from activity a1 inner join (select player_id, min(event_date) as first_date from activity group by player_id) a2 on Datediff(a1.event_date, a2.first_date) = 1 and a1.player_id = a2.player_id where a2.player_id is not null) t
select round(z.c / count(distinct a.player_id),2) as fraction from Activity a , (select count(a1.player_id) as c from (select distinct player_id,event_date from Activity) a1, (select player_id,min(event_date) as event_date from Activity group by player_id ) a2 where a1.player_id=a2.player_id and datediff(a1.event_date,a2.event_date)=1) z
with A AS (select min(event_date) as min_date, player_id from Activity Group by player_id) SELECT round(count(A.player_id) / (select count(distinct player_id) from Activity),2) as fraction FROM A JOIN Activity ON A.player_id = Activity.player_id and A.min_date + 1 = Activity.event_date
with A as (select player_id,min(event_date) as min_dt from activity group by 1) select round(sum(case when exists (select 1 from A where A.min_dt + 1 = b.event_date and A.player_id = b.player_id) then 1 else 0 end)/count(distinct b.player_id),2) as fraction from activity b
with CTE1 as ( SELECT player_id, min(event_date) as first_login FROM Activity GROUP BY player_id ) SELECT ROUND(COUNT(DISTINCT CT1.player_id)/( SELECT COUNT(DISTINCT player_id) FROM Activity),2) as fraction FROM CTE1 AS CT1 INNER JOIN Activity as T2 ON CT1.player_id = T2.player_id AND CT1.first_login = T2.event_date-1
with Ranked as ( select player_id, rank() over w as date_rank, nth_value(event_date, 1) over w as first_date, nth_value(event_date, 2) over w as second_date from Activity window w as ( partition by player_id order by event_date ) ) select round(sum(first_date + 1 = second_date and date_rank = 2) / sum(date_rank = 1), 2) as fraction from Ranked
with a as (Select player_id,min(event_date) as first_login from Activity group by player_id) Select round(sum(case when datediff(Activity.event_date,first_login)=1 then 1 else 0 end)/count(distinct a.player_id),2) as fraction from Activity join a on Activity.player_id=a.player_id
with a as (Select player_id,min(event_date) as firstday from Activity group by player_id) select round(sum(case when datediff(event_date,firstday)=1 then 1 else 0 end)/count(distinct Activity.player_id),2) as fraction from Activity join a on a.player_id=Activity.player_id
with a as (select player_id, event_date, ROW_NUMBER() over(partition by player_id order by event_date) as row_num from Activity) select round((select count(*) from (select a1.player_id, (a2.event_date - a1.event_date) as diff from a a1, a a2 where a1.player_id = a2.player_id and a1.row_num = 1 and a2.row_num = 2 having diff = 1) as t) / (select count(distinct player_id) from Activity),2) as fraction
with a as (select player_id, event_date, rank() over (partition by player_id order by event_date) as rk from (select player_id, event_date from activity group by player_id, event_date) t ) select round(count(distinct case when a1.rk=1 and a2.event_date is not null then a1.player_id end)/count(distinct a1.player_id), 2) as fraction from a a1 left join a a2 on a1.player_id = a2.player_id and datediff(a1.event_date, a2.event_date)=-1
with a as (select player_id,min(event_date) as first_login from Activity group by player_id) select round(sum(case when datediff(event_date,first_login)=1 then 1 else 0 end)/count(distinct Activity.player_id),2) as fraction from a join Activity on a.player_id=Activity.player_id
with a as( select *, min(event_date) over(partition by player_id) as firstday from activity ) select round (sum(case when diffdate =1 then 1 else 0 end)/ count(distinct player_id),2) as fraction from (select *, datediff(event_date,firstday) as diffdate from a) new
with a as(select player_id,min(event_date) as d from Activity group by player_id) select round((count(player_id)/(select count(*) from a)),2) as fraction from (select a.player_id from a,Activity a1 where a.player_id=a1.player_id and a.d+1=a1.event_date) as t1
with a1 as (select player_id, min(event_date) as joindate from Activity group by player_id) select round( count(*) / ( select count(distinct player_id) from Activity),2) as fraction from a1 join Activity a2 on a1.player_id = a2.player_id and a2.event_date = date_add(a1.joindate, interval 1 day)
with a1 as( select player_id, min(event_date) as first_login from activity group by player_id ) select round(count(a2.player_id) / count(a1.player_id),2) as fraction from a1 left join activity a2 on a1.player_id = a2.player_id and a2.event_date = a1.first_login + 1
with consecutive as (select a2.player_id, a2.event_date from activity a1, activity a2 where a1.player_id = a2.player_id and a2.event_date = a1.event_date + 1 and (a1.player_id, a1.event_date) in (select a1.player_id, min(a1.event_date) from activity a1 group by 1)) select round((select count(player_id) from consecutive)/ (select count(distinct player_id) from activity), 2) as fraction
with consecutive as (select player_id, DATE_ADD(MIN(event_date) OVER(PARTITION BY player_id), INTERVAL 1 DAY) event_date1 from Activity group by player_id, event_date) select cast(count(distinct b.player_id)/count(distinct a.player_id) as decimal(5,2)) fraction from Activity a left join consecutive b on a.player_id = b.player_id and a.event_date = b.event_date1
with consecutive_logins as ( select a1.player_id, a1.event_date from activity a1 inner join activity a2 on a1.event_date = date_sub(a2.event_date, interval 1 day) and a1.player_id = a2.player_id ), first_consecutive_logins as ( select player_id from consecutive_logins where (player_id, event_date) in (select player_id, min(event_date) from activity group by player_id) ) select round((select count(distinct player_id) from first_consecutive_logins) / (select count(distinct player_id) from activity), 2) as fraction
with cte as ( select * , min(event_date) over (partition by player_id) as first_event_date from Activity ) select round( ( select count(distinct player_id) from cte where datediff(event_date, first_event_date) = 1 ) / count(distinct player_id) , 2 ) as fraction from Activity
with cte as ( select *, row_number()over(partition by player_id order by event_date) num, lead(event_date,1)over(partition by player_id order by event_date) nextday from Activity ) select round(count(distinct player_id)/(select count(distinct player_id) from Activity),2) as fraction from cte where num = 1 and datediff(nextday,event_date) = 1
with cte as ( select a.player_id, a.event_date, fl from activity a left join (select player_id, min(event_date) as fl from activity group by 1) b on a.player_id = b.player_id) select round(sum(case when timestampdiff(day, fl, event_date) = 1 then 1 else 0 end)/count(distinct player_id),2) as fraction from cte
with cte as ( select player_id from ( select player_id,lead(event_date,1)over(partition by player_id order by event_date) as next_date,event_date, dense_rank()over(partition by player_id order by event_date) rn from Activity)t where datediff(next_date,event_date)=1 and rn =1) select round(count(distinct player_id)/(select count(distinct player_id) from Activity),2) as fraction from cte
with cte as ( select player_id, event_date, lead(event_date, 1) over(partition by player_id order by event_date) as next_event_date, min(event_date) over (partition by player_id order by event_date) as min_event_date from Activity ) select round(count(player_id) / (select count(distinct player_id) from cte), 2) as fraction from cte where datediff(event_date, next_event_date) = -1 and event_date = min_event_date
with cte as ( select player_id, event_date, row_number() over (partition by player_id order by event_date) as r, datediff(lead(event_date, 1) over (partition by player_id order by event_date),event_date ) as diff from Activity ) select round(((select count(distinct player_id) from cte where r=1 and diff=1)/ (select count(distinct player_id) from Activity)), 2) as fraction
with cte as ( select player_id, min(event_date) as first_login from Activity group by player_id) select round((count(distinct c.player_id)/count(distinct a.player_id)),2) as fraction from Activity a left join cte c on a.player_id = c.player_id and datediff(a.event_date,c.first_login) = 1
with cte as ( select player_id, min(event_date) event_date from Activity group by player_id ) select round(count(c.player_id) / count(distinct a1.player_id), 2) as fraction from activity a1 left join cte c on c.player_id = a1.player_id and datediff(a1.event_date, c.event_date) = 1
with cte as (SELECT *, RANK()OVER(PARTITION BY player_id ORDER BY event_date ASC) as 'RNK', lead(event_date)OVER(PARTITION BY player_id ORDER BY event_date ASC) as 'after' from Activity), cte2 as ( SELECT player_id FROM cte WHERE RNK=1 AND datediff(after, event_date)=1) SELECT ROUND(count(player_id)/(SELECT count(distinct player_id) from Activity),2) as fraction FROM cte2
with cte as (SELECT player_id, event_date, MIN(event_date) OVER (Partition by player_id) min_date FROM Activity) SELECT ROUND(SUM(event_date = min_date + 1)/COUNT(DISTINCT player_id), 2) fraction FROM cte
with cte as (select count(distinct player_id) as cnt from (select *, lead(event_date,1) over(partition by player_id order by event_date) as num, dense_rank() over (partition by player_id order by event_date asc) as rnk from activity) a where event_date = num -1 and rnk = 1) select round(cnt/(select count(distinct player_id) from activity),2) as fraction from cte
with cte as (select count(distinct player_id) count1 from (select player_id, event_date, lead(event_date,1,0)over(partition by player_id order by event_date) as next_day,dense_rank() over (partition by player_id order by event_date) as rnk from activity)t where DATEDIFF(next_day,event_date)=1 and rnk=1) select round(cte.count1/count(distinct Activity.player_id),2) as fraction from Activity,cte
with cte as (select player_id, event_date, lag(event_date, 1) over (partition by player_id order by event_date) as lag_event_date, min(event_date) over (partition by player_id order by event_date) as min_event_date from Activity), cte2 as (select player_id from cte where lag_event_date = date_sub(event_date, interval 1 day) and min_event_date=lag_event_date) select round( (select count(distinct player_id) from cte2)/ (select count(distinct player_id) from Activity),2) as fraction
with cte as (select player_id, event_date, lead(event_date) over (partition by player_id order by event_date)next_date, dense_rank() over (partition by player_id order by event_date) as rnk from activity ) select round(sum(case when datediff(next_date,event_date) = 1 then 1 else 0 end)/count(distinct player_id),2)fraction from cte where rnk = 1
with cte as (select player_id, event_date, lead(event_date) over (partition by player_id order by event_date)next_day, row_number() over (partition by player_id order by event_date)row_num from Activity) select round(sum(case when datediff(next_day, event_date) = 1 then 1 else 0 end)/count(distinct player_id), 2) fraction from cte where row_num = 1
with cte as (select player_id, min(event_date) as first_day, date_add(min(event_date), interval 1 day) as next_day from Activity group by player_id) select round(count(distinct a.player_id)/(select count(distinct player_id) from Activity), 2) as fraction from Activity as a join cte on cte.player_id = a.player_id and a.event_date = cte.next_day
with cte as (select player_id, min(event_date) as first_log from activity group by player_id) SELECT round(sum(case when first_log+1=event_date then 1 else 0 end)/count(distinct activity.player_id),2) as fraction from activity join cte on activity.player_id=cte.player_id
with cte as (select player_id, min(event_date) as first_login from Activity group by 1) select round(count(b.player_id) / count(a.player_id), 2) as fraction from cte a left join Activity b on a.player_id = b.player_id and datediff(b.event_date, a.first_login) = 1
with cte as (select player_id, min(event_date) as first_login from activity group by 1 ) select ifnull(round(avg(case when a.event_date is null then 0 else 1 end),2),0) as fraction from cte left join activity a on a.player_id = cte.player_id and datediff(a.event_date,cte.first_login) = 1
with cte as (select player_id, min(event_date) as min_date from activity group by 1) select round(count(*)/(select count(*) from cte),2) as fraction from activity a join cte b on datediff(a.event_date, b.min_date) = 1 and a.player_id = b.player_id
with cte as( select *, min(event_date) over(partition by player_id order by event_date) minn from Activity) select round(count(distinct player_id)/(select count(distinct player_id) from Activity),2) fraction from cte where event_date - minn = 1
with cte as( select player_id, event_date, dense_rank()over(partition by player_id order by event_date asc) as loginRank from Activity ) select round(sum(case when datediff(l2.event_date,l1.event_date)=1 then 1 else 0 end)/(select count(distinct player_id) from Activity),2) as fraction from (select player_id, event_date from cte where loginRank = 1) l1 join (select player_id, event_date from cte where loginRank = 2) l2 on l1.player_id = l2.player_id
with cte as( select player_id, event_date, lead(event_date) over(partition by player_id order by event_date) as lead1, row_number() over (partition by player_id order by event_date) as row_num from activity ) select round(sum(case when datediff(lead1, event_date) = 1 then 1 else 0 end)/count(distinct player_id), 2) as fraction from cte where row_num = 1
with cte as( select player_id, min(event_date) as first_day from Activity group by 1 ) select round(sum(case when a.player_id is null then 0 else 1 end)/count(distinct cte.player_id),2) as fraction from cte left join Activity a on cte.player_id = a.player_id and cte.first_day +1 = a.event_date
with cte as( select player_id, rowNum, datediff(nextEvent,event_date) nextEventDiff from( select player_id, event_date, row_number() over(partition by player_id order by event_date) rowNum, lead(event_date, 1) over(partition by player_id order by event_date) nextEvent from Activity)z where rowNum = 1 and datediff(nextEvent,event_date) = 1) select round((select count(distinct player_id) from cte) / (select count(distinct player_id) from Activity),2) as fraction
with cte1 as ( select distinct a1.player_id, a1.event_date as login_date, a2.event_date as next_login from Activity a1 join Activity a2 on a1.player_id = a2.player_id and a1.event_date + 1 = a2.event_date ), cte2 as (select player_id, min(event_date) as first_login from Activity a group by player_id), cte3 as (select distinct cte2.player_id from cte1 join cte2 on cte1.player_id = cte2.player_id and cte1.login_date = cte2.first_login ) select round(count(*) / (select count(distinct player_id) from Activity),2) as fraction from cte3
with cte1 as ( select player_id, event_date, lead(event_date, 1) over (partition by player_id order by event_date) next_day from activity ), cte2 as ( select count(distinct cte1.player_id) player_id from cte1 join (select player_id, min(event_date) first_day from activity group by 1) f on cte1.player_id = f.player_id and cte1.event_date = f.first_day where datediff(cte1.next_day, cte1.event_date) = 1 ) select round((select player_id from cte2) / (select count(distinct player_id) from activity), 2) fraction
with cte1 as( select a.player_id,a.event_date from( select player_id,event_date,rank() over (partition by player_id order by event_date asc) as r1 from activity) a where a.r1 in (1,2) ), cte2 as( select count(distinct a.player_id) as c1 from cte1 a,cte1 b where a.player_id = b.player_id and datediff(b.event_date,a.event_date) = 1), cte3 as( select count(distinct(player_id)) as c2 from activity) select round(a.c1/b.c2 , 2) as fraction from cte2 a,cte3 b
with cte1 as( select count(*) as num from( select player_id, device_id, event_date, row_number() over(partition by player_id order by event_date asc) as rnk, lead(event_date,1) over(partition by player_id) as ld0 from activity ) tbl where ld0-event_date=1 AND rnk=1) select round(num/(select count(distinct player_id) from activity),2) as fraction from cte1
with cteY as ( select count(distinct player_id) as Y from Activity ), cteX as ( select count(a.event_date) as X from ( select event_date, lead(event_date, 1) over (partition by player_id order by event_date) as next_date, DENSE_RANK() OVER (partition by player_id order by event_date) as dateorder from Activity ) as a where a.dateorder=1 and if(ifnull(a.next_date, 0)=adddate(a.event_date, 1), true, false) ) select round(cteX.X/cteY.Y,2) as fraction from cteY, cteX where 1=1
with datecalc as( select distinct player_id, event_date, lead(event_date, 1) over(partition by player_id order by event_date ) as second_day from Activity), firstlogindate as ( select player_id, min(event_date) as min_date from Activity group by player_id ), logged as ( select count(distinct a.Player_id) as logged from datecalc a,firstlogindate b where datediff(a.second_day,a.event_date ) =1 and a.event_date = b.min_date and a.player_id = b.player_id ), totalp as ( select count(distinct Player_id) as total from datecalc ) select round(logged/total,2) as fraction from logged, totalp
with events_rnked as ( select *, dense_rank() over(partition by player_id order by event_date) as dt_rnk from Activity ) select round(count(distinct case when e1.dt_rnk = 1 and datediff(e2.event_date, e1.event_date) = 1 then e1.player_id else null end)/count(distinct e1.player_id),2) as fraction from events_rnked e1 JOIN events_rnked e2 ON e1.player_id = e2.player_id
with f as ( select player_id, min(event_date) event_date from Activity group by player_id ) select round(count(distinct b.player_id) / count(distinct a.player_id), 2) fraction from f a left join Activity b on a.player_id = b.player_id and a.event_date = date_add(b.event_date, interval -1 day)
with f as (select n.player_id, min(n.event_date) as first, case when n.nex is null then 0 when datediff(n.nex,n.event_date) = 1 then 1 else 0 end as w from ( select player_id, event_date,lead(event_date,1) over(partition by player_id order by event_date) as nex from activity) n group by 1) select round(sum(w=1)/count(*),2) as fraction from f
with first_activity as ( select player_id, min(event_date) as event_date from activity group by player_id ) select round(sum(if(t2.player_id is null, 0, 1)) / count(*), 2) as fraction from ( select distinct player_id from activity ) t1 left join ( select distinct t1.player_id from first_activity t1 join activity t2 on t2.player_id = t1.player_id and datediff(t2.event_date, t1.event_date) = 1 ) t2 on t2.player_id = t1.player_id
with first_loggin as ( select player_id, event_date, MIN(event_date) OVER (partition by player_id) as first_loggin_date from Activity ) select ROUND( (select COUNT(distinct player_id) from first_loggin where event_date = DATE_ADD(first_loggin_date, interval 1 day)) / (select Count(distinct player_id) from first_loggin), 2) as fraction
with first_login as ( SELECT player_id, min(event_date) as first_login, min(event_date) + 1 as target_date FROM Activity GROUP BY player_id ), second_logins as ( SELECT Activity.player_id, Activity.event_date, CASE WHEN first_login.player_id IS NULL THEN 0 ELSE 1 END as target_login FROM Activity LEFT JOIN first_login ON Activity.player_id = first_login.player_id AND Activity.event_date = first_login.target_date ) SELECT round(sum(target_login)/count(distinct player_id),2) as fraction FROM second_logins
with first_login_info as( select player_id, date_add(min(event_date), interval 1 day) as second_day from activity group by player_id) ,second_login as( select max(case when event_date = second_day then 1 else 0 end) as flag from activity A left join first_login_info B on A.player_id = B.player_id group by A.player_id) select round(avg(flag), 2) as fraction from second_login
with firsts as ( select *, min(event_date) over (partition by player_id) as first_login from Activity ) select round(1.0*count(distinct if(date_add(first_login,interval 1 day)=event_date,player_id,null))/count(distinct player_id),2) as fraction from firsts
with fl as ( select player_id, event_date, min(event_date) over(partition by player_id) as first_login from activity ) SELECT round(count(case when event_date = first_login + 1 then 1 else null end) / count(distinct player_id),2) fraction from fl
with fr as ( select player_id, min(event_date) as first_login from activity group by player_id ) select round(count(a2.player_id) / count(fr.player_id), 2) as fraction from fr left join activity a2 on fr.player_id = a2.player_id and fr.first_login = a2.event_date -1
with min_date as ( select player_id, min(event_date) as first_date from Activity group by player_id ) select round(count(distinct (case when b.event_date is not null then a.player_id else null end))/ count(distinct a.player_id), 2) as fraction from min_date a left join activity b on a.player_id = b.player_id and datediff(b.event_date, a.first_date) = 1
with min_date_tmp as ( select player_id,event_date, min(event_date) over(partition by player_id) as min_date from activity ) select round(count(distinct p1.player_id)/ count(distinct p2.player_id),2) as fraction from activity p2 left join min_date_tmp p1 on p1.player_id=p2.player_id and datediff(p2.event_date,p1.min_date) =1
with nd as(select player_id,device_id, event_date, lead(event_date,1) over(partition by player_id order by event_date asc) as next_day, first_value(event_date) over(partition by player_id order by event_date asc) as first_log from Activity) select round(sum(case when datediff(event_date,first_log)=1 then (1) else 0 end)/(count(distinct player_id)),2) as fraction from nd
with next_day_log as ( Select player_id, lead(event_date) over (partition by player_id order by event_date) - event_date as date_diff, rank() over (partition by player_id order by event_date asc) rnk, event_date from Activity ) Select round(count(distinct nedl.player_id) / count(distinct act.player_id), 2) as fraction from Activity act left outer join next_day_log nedl on act.player_id = nedl.player_id and act.event_date = nedl.event_date and rnk = 1 and date_diff = 1
with next_event as( select *, lead(event_date)over(partition by player_id order by event_date) as next_date, rank()over(partition by player_id order by event_date) as rak from activity ) select round(sum(case when datediff(next_date,event_date)=1 then 1 else 0 end)/count(distinct player_id), 2 ) as fraction from next_event where rak = 1
with player_login as ( select player_id, min(event_date) as date from Activity group by 1 ), main as ( select p.player_id from player_login p join activity a on p.player_id = a.player_id and date_add(p.date, interval 1 DAY) = a.event_date ) select round((select count(*) from main) / count(distinct(player_id)), 2) as fraction from activity
with stat as (select player_id, min(event_date) as "first_login" from Activity group by player_id) select round( (select count(distinct a2.player_id) from Activity a2 join stat on datediff(a2.event_date, stat.first_login) = 1 and a2.player_id = stat.player_id) / (select count(distinct player_id) from Activity),2) as "fraction"
with t as ( select a1.player_id from activity a1 join (select player_id,min(event_date) as event_date from activity group by 1) a2 on a1.player_id = a2.player_id and a1.event_date = date_add(a2.event_date, INTERVAL 1 DAY) ) select cast(cast(count(distinct player_id) as decimal(18,2))/ cast((select count(distinct player_id) from activity) as decimal(18,2)) as decimal(4,2)) as fraction from t
with t as(select player_id, event_date, row_number() over(partition by player_id order by event_date asc) as rw_num from Activity group by 1,2 order by 1,2) select round(sum(case when datediff(event_date_2,event_date)=1 then 1 else 0 end)/count(*),2) as fraction from (select player_id, event_date, rw_num, lead(event_date) over (partition by player_id order by event_date) as event_date_2 from t ) a where rw_num=1
with t1 as (select player_id, min(event_date) as first_login from activity group by 1), t2 as (select player_id from t1 where (player_id, date_add(first_login, interval 1 day)) in (select player_id, event_date from activity)) select round((select count(*) from t2)/(select count(distinct player_id) from activity), 2) as fraction
with t3 as ( SELECT COUNT(player_id) As count_player_consec FROM( SELECT player_id, SUM(consec_or_not) As player_consec FROM ( SELECT player_id, IF(num=1, 1, 0) As 'consec_or_not' FROM ( SELECT player_id, DATEDIFF(event_date, MIN(event_date) OVER(PARTITION BY player_id)) As 'num' FROM Activity )As t0 ) As t1 GROUP BY player_id ) As t2 WHERE player_consec <> 0 ), t5 as ( SELECT COUNT(DISTINCT player_id) AS count_player FROM Activity ) SELECT ROUND(count_player_consec/count_player, 2) As 'fraction' FROM t3 JOIN t5
with tb1 as( select player_id,min(event_date) as min_date from Activity group by player_id) , tb2 as( select a.player_id, a.event_date, a.event_date - tb1.min_date as tag from Activity a, tb1 where a.player_id = tb1.player_id) select distinct round((count(player_id) / (select count(distinct player_id) from Activity)),2) as fraction from tb2 where tag = 1
with temp as ( select count(distinct player_id) as num_logged from ( select *, event_date-lag(event_date,1) over(partition by player_id order by event_date) as diff, row_number() over(partition by player_id order by event_date) as row_num from Activity ) t where diff is not null and diff = 1 and row_num<=2 group by diff ) select round(num_logged/(select count(distinct player_id) from Activity),2) as fraction from temp
with temp as ( select player_id from (select *, lead(event_date) over (partition by player_id order by event_date) as next_login, row_number() over (partition by player_id order by event_date) as rn from activity ) t where datediff(next_login,event_date) = 1 and rn = 1) select round(count(player_id)/(select count(distinct player_id) from activity),2) as fraction from temp
with temp as ( select player_id, event_date, rank() over (partition by player_id order by event_date) as ranking from Activity ) select round(sum(case when DATEDIFF(t.event_date, u.event_date) = 1 and t.ranking = 2 then 1 else 0 end)/count(distinct t.player_id),2) as fraction from temp as t join temp as u on t.player_id = u.player_id
with temp as ( select player_id, min(event_date) as first_date from activity group by 1) select round(count(a.player_id)/(select count(*) from temp),2) as fraction from activity a join temp t on a.player_id=t.player_id and a.event_date=t.first_date+1
with temp as ( select player_id, min(event_date) as first_login from activity group by player_id ) select round( sum(case when datediff(first_login,event_date) = -1 then 1 else 0 end) /count(distinct temp.player_id), 2) as fraction from temp join activity a on temp.player_id = a.player_id
with temp as (select *, lead(event_date, 1) over (partition by player_id order by event_date) lead_, rank() over (partition by player_id order by event_date) rank_ from Activity) select round(x.active / (select count(distinct player_id) from temp), 2) as fraction from (select count(distinct player_id) as active from temp where datediff(lead_, event_date) = 1 and rank_ = 1) x
with temp as (select player_id, min(event_date) as event_date from activity group by 1) select round(count(distinct y.player_id)/count(distinct x.player_id), 2) as fraction from temp x left join activity y on x.player_id=y.player_id and datediff(x.event_date, y.event_date)=-1
with temp as( Select *, lead(event_date,1) OVER (Partition by player_id Order By event_date) AS LEAD_, rank() OVER (Partition by player_id Order By event_date) AS RANK_ FROM Activity) SELECT round((temp2.active)/(SELECT COUNT(DISTINCT player_id) FROM temp),2) AS 'fraction' FROM (Select COUNT(DISTINCT player_id) active FROM temp where datediff(LEAD_,event_date)=1 AND RANK_ = 1) AS temp2
with temp as( select player_id, min(event_date) as first_login from Activity group by 1) select round(sum( case when datediff(event_date,first_login) = 1 then 1 else 0 end) / count(distinct temp.player_id),2) as fraction from temp join activity a on temp.player_id = a.player_id
with temp1 as ( select *, event_date - lag(event_date,1) over (partition by player_id order by event_date) diff, row_number() over (partition by player_id order by event_date) number from activity ), temp2 as (select count(distinct player_id) player_num from activity) select round( count(distinct player_id)/ temp2.player_num, 2) fraction from temp1, temp2 where diff=1 and number<=2
with temp1 as (SELECT player_id, event_date, DENSE_RANK() OVER (PARTITION BY player_id ORDER BY event_date) drank FROM activity), next_day as (SELECT a1.player_id, a1.event_date FROM temp1 a1 JOIN temp1 a2 ON a1.player_id = a2.player_id AND a2.event_date = DATE_ADD(a1.event_date, INTERVAL 1 DAY) AND a1.drank = 1) SELECT ROUND((SELECT COUNT(*) FROM next_day)/(SELECT COUNT(DISTINCT player_id) FROM activity),2) as fraction
with temp1 as (select player_id, device_id, event_date, rank() over (partition by player_id order by event_date asc) as date_rank, lead(event_date,1,null) over (partition by player_id order by event_date asc) as next_login_date from Activity), temp2 as (select player_id from temp1 where date_rank = 1 and datediff(next_login_date,event_date) = 1) select round(count(distinct player_id)/(select count(distinct player_id) from Activity),2) as fraction from temp2
with temp_table as ( select player_id, event_date, rank() over (partition by player_id order by event_date) as login_order, event_date - lag(event_date) over (partition by player_id) as days_next_login from Activity ) select round(sum(case when login_order = 2 and days_next_login = 1 then 1 else 0 end) / count(distinct player_id), 2) as fraction from temp_table
with tmp as ( select player_id, device_id, min(event_date) over (partition by player_id) as first_date, lead(event_date) over (partition by player_id order by event_date asc) next_date from activity ) select round(sum(case when next_date - first_date = 1 then 1 else 0 end) / count(distinct player_id) ,2) as fraction from tmp
with tot_players as (select player_id,event_date,lead(event_date) over (partition by player_id order by event_date)next_date,row_number() over (partition by player_id order by event_date)row_num from activity ) select round(sum(case when datediff(next_date,event_date) = 1 then 1 else 0 end)/count(distinct player_id),2)fraction from tot_players where row_num = 1
with total_customer as (select count(*) as total_num from (select distinct player_id from activity) temp), customer_first_login_date as (select player_id, min(event_date) as start_date from activity group by 1), customer_login_next_day as (select count(distinct player_id) as login_net_date_num from (select a1.player_id,a1.start_date,a2.event_date from customer_first_login_date a1 join activity a2 on a1.player_id = a2.player_id and datediff(a2.event_date,a1.start_date) = 1) temp) select round(ifnull( ((select login_net_date_num from customer_login_next_day)/ (select total_num from total_customer)),0),2) as fraction
