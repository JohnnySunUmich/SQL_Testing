SELECT t1.mth AS 'month', IF(t1.total = 0, 0.00, ROUND(t1.active/t1.total*100, 2)) AS 'working_percentage' FROM (SELECT mth, (SELECT COUNT(*) FROM drivers d1 WHERE YEAR(d1.join_date) < 2020 OR (YEAR(d1.join_date) = 2020 AND MONTH(d1.join_date) <= mth)) AS 'total', (SELECT COUNT(DISTINCT a1.driver_id) FROM rides r1, AcceptedRides a1 WHERE r1.ride_id = a1.ride_id AND YEAR(r1.requested_at) = 2020 AND MONTH(r1.requested_at) = mth) AS 'active' FROM (SELECT 1 AS 'mth' UNION SELECT 2 AS 'mth' UNION SELECT 3 AS 'mth' UNION SELECT 4 AS 'mth' UNION SELECT 5 AS 'mth' UNION SELECT 6 AS 'mth' UNION SELECT 7 AS 'mth' UNION SELECT 8 AS 'mth' UNION SELECT 9 AS 'mth' UNION SELECT 10 AS 'mth' UNION SELECT 11 AS 'mth' UNION SELECT 12 AS 'mth') t_months) t1 ORDER BY t1.mth
WITH Canlendar AS ( SELECT 1 AS 'month' UNION SELECT 2 AS 'month' UNION SELECT 3 AS 'month' UNION SELECT 4 AS 'month' UNION SELECT 5 AS 'month' UNION SELECT 1 AS 'month' UNION SELECT 6 AS 'month' UNION SELECT 7 AS 'month' UNION SELECT 8 AS 'month' UNION SELECT 9 AS 'month' UNION SELECT 10 AS 'month' UNION SELECT 11 AS 'month' UNION SELECT 12 AS 'month' ), Temp AS ( SELECT MONTH(r.requested_at) AS 'month', COUNT(ar.ride_id) AS 'accepted_rides' FROM AcceptedRides ar LEFT JOIN Drivers d ON d.driver_id=ar.driver_id LEFT JOIN Rides r ON r.ride_id=ar.ride_id WHERE YEAR(r.requested_at)=2020 GROUP BY MONTH(r.requested_at) ), T_available_driver AS ( SELECT c.month, COUNT(d.driver_id) AS 'available_drivers' FROM Canlendar c LEFT JOIN Temp t ON t.month=c.month LEFT JOIN Drivers d ON YEAR(d.join_date)<2020 OR (YEAR(d.join_date)=2020 AND MONTH(d.join_date)<=c.month) GROUP BY c.month ORDER BY c.month ), T_active_driver AS ( SELECT MONTH(r.requested_at) AS 'month', COUNT(DISTINCT(a.driver_id)) AS 'active_drivers' FROM AcceptedRides a LEFT JOIN Rides r ON a.ride_id=r.ride_id WHERE YEAR(r.requested_at)=2020 GROUP BY MONTH(r.requested_at) ) SELECT t_ava.month, ( CASE WHEN t_act.active_drivers IS NULL THEN 0 ELSE ROUND((t_act.active_drivers/t_ava.available_drivers)*100, 2) END ) AS 'working_percentage' FROM T_available_driver t_ava LEFT JOIN T_active_driver t_act ON t_act.month=t_ava.month ORDER BY t_ava.month
WITH DATE_TAB AS( SELECT '202001' AS MON_YY ,1 AS MON_ID FROM DUAL UNION ALL SELECT '202002' AS MON_YY ,2 AS MON_ID FROM DUAL UNION ALL SELECT '202003' AS MON_YY ,3 AS MON_ID FROM DUAL UNION ALL SELECT '202004' AS MON_YY ,4 AS MON_ID FROM DUAL UNION ALL SELECT '202005' AS MON_YY ,5 AS MON_ID FROM DUAL UNION ALL SELECT '202006' AS MON_YY ,6 AS MON_ID FROM DUAL UNION ALL SELECT '202007' AS MON_YY ,7 AS MON_ID FROM DUAL UNION ALL SELECT '202008' AS MON_YY ,8 AS MON_ID FROM DUAL UNION ALL SELECT '202009' AS MON_YY ,9 AS MON_ID FROM DUAL UNION ALL SELECT '202010' AS MON_YY ,10 AS MON_ID FROM DUAL UNION ALL SELECT '202011' AS MON_YY ,11 AS MON_ID FROM DUAL UNION ALL SELECT '202012' AS MON_YY ,12 AS MON_ID FROM DUAL ) , TRIP_CNT AS(SELECT DATE_FORMAT(REQUESTED_AT,'%Y%m') REQ_MON_YY ,COUNT(DISTINCT D.DRIVER_ID) DRIVER_CNT ,COUNT(DISTINCT A.DRIVER_ID) TRIP_CNT FROM ACCEPTEDRIDES A JOIN RIDES R ON A.RIDE_ID = R.RIDE_ID JOIN DRIVERS D ON DATE_FORMAT(R.REQUESTED_AT,'%Y%m') >= DATE_FORMAT(D.JOIN_DATE,'%Y%m') WHERE R.REQUESTED_AT <= '2020-12-31' AND R.REQUESTED_AT >= '2020-01-01' GROUP BY 1 ) SELECT DT.MON_ID AS month ,COALESCE(ROUND((TC.TRIP_CNT/TC.DRIVER_CNT)*100,2) ,0.00) AS working_percentage FROM DATE_TAB DT LEFT JOIN TRIP_CNT TC ON DT.MON_YY = TC.REQ_MON_YY
WITH Month AS ( SELECT * FROM ( SELECT 1 as month UNION ALL SELECT 2 as month UNION ALL SELECT 3 as month UNION ALL SELECT 4 as month UNION ALL SELECT 5 as month UNION ALL SELECT 6 as month UNION ALL SELECT 7 as month UNION ALL SELECT 8 as month UNION ALL SELECT 9 as month UNION ALL SELECT 10 as month UNION ALL SELECT 11 as month UNION ALL SELECT 12 as month ) A ), T1 AS ( SELECT MONTH(R.requested_at) as month, COUNT(DISTINCT A.driver_id) as accepted_num FROM AcceptedRides A INNER JOIN Rides R ON A.ride_id = R.ride_id WHERE YEAR(R.requested_at) = 2020 GROUP BY month ), T2 as ( select M.month, ifnull(max(t1.active_driver) over (order by M.month),0) as available_num from Month M left join (select month(join_date) as month, count(driver_id) over (order by join_date rows unbounded preceding) as active_driver from drivers where year(join_date) <= 2020) t1 on t1.month = M.month ) SELECT M.month, IFNULL(ROUND(AVG((T1.accepted_num/T2.available_num)*100),2),0) as working_percentage FROM Month M LEFT JOIN T1 ON M.month = T1.month LEFT JOIN T2 ON M.month = T2.month GROUP BY M.month ORDER BY M.month
WITH RECURSIVE A1 AS (SELECT 1 AS MONTH UNION ALL SELECT MONTH + 1 FROM A1 WHERE MONTH < 12), A2 AS (SELECT MONTH(requested_at) AS MONTH, COUNT(DISTINCT driver_id) AS NUM FROM AcceptedRides A JOIN Rides R ON A.ride_id = R.ride_id WHERE YEAR(requested_at) = 2020 GROUP BY MONTH(requested_at)), A3 AS (SELECT driver_id, (CASE WHEN YEAR(join_date)=2019 THEN '1' ELSE MONTH(join_date) END) AS MONTH FROM Drivers WHERE YEAR(join_date) < 2021) SELECT A1.MONTH AS month, IFNULL(ROUND(IFNULL(NUM,0)/IFNULL(COUNT(driver_id),0)*100, 2), 0) AS working_percentage FROM A1 LEFT JOIN A2 ON A1.MONTH = A2.MONTH LEFT JOIN A3 ON A1.MONTH >= A3.MONTH GROUP BY A1.MONTH
WITH RECURSIVE AllMonths AS (SELECT 1 AS month UNION ALL SELECT month + 1 AS month FROM AllMonths WHERE month < 12), AvailableDrivers AS (SELECT driver_id ,IF(YEAR(join_date) < 2020, 1 , MONTH(join_date)) AS month FROM Drivers WHERE YEAR(join_date) <= 2020), AvailableDriversMonthlySummary AS (SELECT Al.month ,COUNT(AD.driver_id) AS drivers FROM AllMonths Al LEFT JOIN AvailableDrivers AD ON Al.month = AD.month GROUP BY Al.month), AvailableDriversMonthlyCumulative AS (SELECT month ,SUM(drivers) OVER(ORDER BY month ASC) AS available_drivers FROM AvailableDriversMonthlySummary), DriversAcceptedRides AS (SELECT DISTINCT AR.driver_id ,MONTH(R.requested_at) AS month FROM AcceptedRides AR INNER JOIN Rides R ON R.ride_id = AR.ride_id WHERE YEAR(R.requested_at) = 2020), DriversSummary AS (SELECT Al.month ,COUNT(DAR.driver_id) AS actice_drivers FROM AllMonths Al LEFT JOIN DriversAcceptedRides DAR ON DAR.month = Al.month GROUP BY Al.month) SELECT DS.month ,IFNULL(ROUND(DS.actice_drivers*100/ADMC.available_drivers,2),0) AS working_percentage FROM DriversSummary DS INNER JOIN AvailableDriversMonthlyCumulative ADMC ON ADMC.month = DS.month ORDER BY 1 ASC
WITH RECURSIVE AllMonths AS (SELECT 1 AS month UNION ALL SELECT month + 1 AS month FROM AllMonths WHERE month < 12), DriversActiveSince AS (SELECT driver_id ,CASE WHEN YEAR(join_date) < 2020 THEN 1 ELSE MONTH(join_date) END AS Month FROM Drivers WHERE YEAR(join_date) <= 2020), ActiveDriversMonths AS (SELECT AM.Month ,COUNT(DAS.driver_id) AS new_active_drivers FROM DriversActiveSince DAS RIGHT JOIN AllMonths AM ON AM.month = DAS.month GROUP BY AM.Month), CumulativeActiveDrivers AS (SELECT Month ,SUM(new_active_drivers) OVER(ORDER BY Month ASC) AS active_drivers FROM ActiveDriversMonths), WorkingDrivers AS (SELECT DISTINCT AR.driver_id AS drivers ,MONTH(R.requested_at) AS month FROM AcceptedRides AR INNER JOIN Rides R ON R.ride_id = AR.ride_id WHERE YEAR(R.requested_at) = 2020), WorkingDriversSummary AS (SELECT month ,COUNT(drivers) AS drivers FROM WorkingDrivers GROUP BY month) SELECT CAD.Month ,IFNULL(ROUND(WDS.drivers*100/CAD.active_drivers,2),0) AS working_percentage FROM CumulativeActiveDrivers CAD LEFT JOIN WorkingDriversSummary WDS ON WDS.month = CAD.month
WITH RECURSIVE CTE AS ( SELECT 1 AS month UNION ALL SELECT month+1 FROM CTE WHERE month<12 ), B AS ( SELECT YEAR(join_date) AS yr, MONTH(join_date) AS mth, COUNT(*) AS ct FROM Drivers WHERE join_date<='2020-12-31' GROUP BY YEAR(join_date), MONTH(join_date)), C AS ( SELECT (CASE WHEN yr<2020 THEN 1 ELSE mth END) AS mth, ct FROM B), D AS ( SELECT mth, SUM(ct) AS ct FROM C GROUP BY mth), E AS ( SELECT CTE.month, IFNULL(ct, 0) AS ct FROM CTE LEFT JOIN D ON CTE.month = D.mth), TOTALD AS ( SELECT month, SUM(ct) OVER (ORDER BY MONTH) AS available FROM E), F AS ( SELECT Rides.requested_at, AcceptedRides.driver_id FROM Rides JOIN AcceptedRides ON Rides.ride_id = AcceptedRides.ride_id), G AS ( SELECT MONTH(requested_at) AS month, COUNT(DISTINCT driver_id) AS ct FROM F WHERE YEAR(requested_at) = 2020 GROUP BY MONTH(requested_at)) SELECT TOTALD.month, ROUND(IFNULL(G.ct/available, 0)*100, 2) AS working_percentage FROM TOTALD LEFT JOIN G ON TOTALD.month = G.month ORDER BY month
WITH RECURSIVE CTE AS ( SELECT 1 AS month UNION SELECT month+1 FROM CTE WHERE month< 12 ), Available_Drivers As ( SELECT month, SUM(drivers)OVER(ORDER BY month) AS drivers FROM ( SELECT c.month, IFNULL(a.drivers,0) AS drivers FROM CTE c LEFT JOIN ( SELECT MONTH(join_date) AS month, COUNT(driver_id) AS drivers FROM Drivers WHERE join_date between '2020-1-1' AND '2020-12-31' GROUP BY 1 ) a ON c.month=a.month UNION SELECT 0 AS month, COUNT(driver_id) AS drivers FROM Drivers WHERE join_date < '2020-1-1' ) accumulated_drivers ), Accepted_Drivers AS ( SELECT c.month, IFNULL(ac.acpt_drivers,0) AS acpt_drivers FROM CTE c LEFT JOIN ( SELECT MONTH(requested_at) AS month, COUNT(DISTINCT driver_id) AS acpt_drivers FROM( SELECT A.ride_id, A.driver_id, R.requested_at FROM AcceptedRides A JOIN Rides R On A.ride_id=R.ride_id WHERE R.requested_at between '2020-1-1' AND '2020-12-31' ) Accepted GROUP BY 1 ) ac ON c.month=ac.month ) SELECT avd.month AS month, ROUND(IFNULL(acd.acpt_drivers/avd.drivers,0)*100,2) As working_percentage FROM Available_Drivers avd JOIN Accepted_Drivers acd ON avd.month=acd.month
WITH RECURSIVE CTE(month) AS ( SELECT 1 UNION ALL SELECT month+1 AS month FROM CTE WHERE month < 12 ), d AS ( SELECT driver_id, CASE WHEN YEAR(join_date) < 2020 THEN 1 ELSE MONTH(join_date) END AS month FROM Drivers WHERE YEAR(join_date) <= 2020 ), e AS ( SELECT a.driver_id, MONTH(r.requested_at) AS month FROM Rides r LEFT JOIN AcceptedRides a ON r.ride_id = a.ride_id WHERE YEAR(r.requested_at) = 2020 ) SELECT c.month, IFNULL(ROUND(100*COUNT(DISTINCT e.driver_id)/COUNT(DISTINCT d.driver_id), 2), 0) AS working_percentage FROM CTE c LEFT JOIN d ON d.month <= c.month LEFT JOIN e ON e.month = c.month GROUP BY 1 ORDER BY 1
WITH RECURSIVE CTE1 (month) AS ( SELECT 1 UNION ALL SELECT month + 1 AS month FROM CTE1 WHERE month < 12 ) , CTE2 AS ( SELECT A.month, COUNT(driver_id) OVER (ORDER BY A.month) AS active_drivers FROM CTE1 A LEFT JOIN (SELECT driver_id, CASE WHEN YEAR(join_date) < 2020 THEN 1 ELSE MONTH(join_date) END AS month FROM Drivers WHERE YEAR(join_date) <= 2020) B ON A.month = B.month ) , CTE3 AS ( SELECT MONTH(requested_at) AS month, COUNT(DISTINCT driver_id) AS accepted FROM AcceptedRides A LEFT JOIN Rides B ON A.ride_id = B.ride_id WHERE YEAR(requested_at) = 2020 GROUP BY MONTH(requested_at) ) SELECT DISTINCT CTE2.month, ROUND(COALESCE(accepted / active_drivers * 100, 0), 2) AS working_percentage FROM CTE2 LEFT JOIN CTE3 ON CTE2.month = CTE3.month
WITH RECURSIVE CTE1 AS ( SELECT 1 AS month UNION SELECT 1 + month FROM CTE1 WHERE month < 12 ), CTE2 AS ( SELECT CASE WHEN join_date <= '2020-01-31' THEN 1 WHEN join_date <= '2020-02-29' THEN 2 WHEN join_date <= '2020-03-31' THEN 3 WHEN join_date <= '2020-04-30' THEN 4 WHEN join_date <= '2020-05-31' THEN 5 WHEN join_date <= '2020-06-30' THEN 6 WHEN join_date <= '2020-07-31' THEN 7 WHEN join_date <= '2020-08-31' THEN 8 WHEN join_date <= '2020-09-30' THEN 9 WHEN join_date <= '2020-10-31' THEN 10 WHEN join_date <= '2020-11-30' THEN 11 WHEN join_date <= '2020-12-31' THEN 12 END as month, COUNT(driver_id) as num_of_active_drivers FROM Drivers WHERE join_date <= '2020-12-31' GROUP BY CASE WHEN join_date <= '2020-01-31' THEN 1 WHEN join_date <= '2020-02-29' THEN 2 WHEN join_date <= '2020-03-31' THEN 3 WHEN join_date <= '2020-04-30' THEN 4 WHEN join_date <= '2020-05-31' THEN 5 WHEN join_date <= '2020-06-30' THEN 6 WHEN join_date <= '2020-07-31' THEN 7 WHEN join_date <= '2020-08-31' THEN 8 WHEN join_date <= '2020-09-30' THEN 9 WHEN join_date <= '2020-10-31' THEN 10 WHEN join_date <= '2020-11-30' THEN 11 WHEN join_date <= '2020-12-31' THEN 12 END ), CTE3 AS ( SELECT d1.month, IFNULL(d2.num_of_active_drivers,0) as num_of_active_drivers FROM CTE1 as d1 LEFT JOIN CTE2 as d2 ON d1.month = d2.month ORDER BY 1 ), CTE4 AS ( SELECT month, SUM(num_of_active_drivers) OVER(ORDER BY month ASC) as num_of_active_drivers_running_total FROM CTE3 ORDER BY 1 ), CTE5 AS ( SELECT d2.driver_id, d1.requested_at FROM Rides as d1 JOIN AcceptedRIdes as d2 ON d1.ride_id = d2.ride_id WHERE d1.requested_at BETWEEN '2020-01-01' AND '2020-12-31' ORDER BY 2 ), CTE6 AS ( SELECT CASE WHEN requested_at <= '2020-01-31' THEN 1 WHEN requested_at <= '2020-02-29' THEN 2 WHEN requested_at <= '2020-03-31' THEN 3 WHEN requested_at <= '2020-04-30' THEN 4 WHEN requested_at <= '2020-05-31' THEN 5 WHEN requested_at <= '2020-06-30' THEN 6 WHEN requested_at <= '2020-07-31' THEN 7 WHEN requested_at <= '2020-08-31' THEN 8 WHEN requested_at <= '2020-09-30' THEN 9 WHEN requested_at <= '2020-10-31' THEN 10 WHEN requested_at <= '2020-11-30' THEN 11 WHEN requested_at <= '2020-12-31' THEN 12 END as month, COUNT(DISTINCT driver_id) as num_of_driver_accepted_rides FROM CTE5 GROUP BY CASE WHEN requested_at <= '2020-01-31' THEN 1 WHEN requested_at <= '2020-02-29' THEN 2 WHEN requested_at <= '2020-03-31' THEN 3 WHEN requested_at <= '2020-04-30' THEN 4 WHEN requested_at <= '2020-05-31' THEN 5 WHEN requested_at <= '2020-06-30' THEN 6 WHEN requested_at <= '2020-07-31' THEN 7 WHEN requested_at <= '2020-08-31' THEN 8 WHEN requested_at <= '2020-09-30' THEN 9 WHEN requested_at <= '2020-10-31' THEN 10 WHEN requested_at <= '2020-11-30' THEN 11 WHEN requested_at <= '2020-12-31' THEN 12 END ) SELECT d1.month, ROUND(IFNULL(100.00*d2.num_of_driver_accepted_rides/d1.num_of_active_drivers_running_total,0.00),2) as working_percentage FROM CTE4 as d1 LEFT JOIN CTE6 as d2 ON d1.month = d2.month ORDER BY 1
WITH RECURSIVE CTE1 AS ( SELECT 1 AS month UNION SELECT 1 + month FROM CTE1 WHERE month < 12 ), CTE2 AS ( SELECT MONTH(CASE WHEN join_date <= '2019-12-31' THEN '2020-01-01' ELSE join_date END) as month, COUNT(driver_id) as den FROM Drivers WHERE join_date <= '2020-12-31' GROUP BY 1 ), CTE3 AS ( SELECT MONTH(requested_at) as month, COUNT(DISTINCT d2.driver_id) as num FROM Rides as d1 JOIN AcceptedRides as d2 ON d1.ride_id = d2.ride_id WHERE YEAR(d1.requested_at) = 2020 GROUP BY 1 ) SELECT d1.month, ROUND(100.00*IFNULL(d3.num/SUM(den) OVER(ORDER BY d1.month),0),2) as working_percentage FROM CTE1 as d1 LEFT JOIN CTE2 as d2 ON d1.month = d2.month LEFT JOIN CTE3 as d3 ON d1.month = d3.month ORDER BY 1
WITH RECURSIVE CTE1 AS ( SELECT 1 AS month UNION SELECT 1 + month FROM CTE1 WHERE month < 12 ), CTE2 AS ( SELECT driver_id, CASE WHEN join_date <= '2020-1-31' THEN 1 WHEN join_date <= '2020-2-29' THEN 2 WHEN join_date <= '2020-3-31' THEN 3 WHEN join_date <= '2020-4-30' THEN 4 WHEN join_date <= '2020-5-31' THEN 5 WHEN join_date <= '2020-6-30' THEN 6 WHEN join_date <= '2020-7-31' THEN 7 WHEN join_date <= '2020-8-31' THEN 8 WHEN join_date <= '2020-9-30' THEN 9 WHEN join_date <= '2020-10-31' THEN 10 WHEN join_date <= '2020-11-30' THEN 11 WHEN join_date <= '2020-12-31' THEN 12 END AS earliest_active_month FROM Drivers WHERE join_date <= '2020-12-31' ), CTE3 AS ( SELECT earliest_active_month, COUNT(DISTINCT driver_id) AS new_driver_count FROM CTE2 GROUP BY earliest_active_month ), CTE4 AS ( SELECT CTE1.month, COALESCE(new_driver_count, 0) AS new_driver_count FROM CTE1 LEFT JOIN CTE3 ON CTE1.month = CTE3.earliest_active_month ), CTE5 AS ( SELECT month, COALESCE(SUM(new_driver_count) OVER(ORDER BY month),0) AS active_driver_count FROM CTE4 ), CTE6 AS ( SELECT EXTRACT(MONTH FROM r.requested_at) AS month, COUNT(DISTINCT a.driver_id) AS accepted_driver_count FROM AcceptedRides a INNER JOIN Rides r ON a.ride_id = r.ride_id WHERE r.requested_at >= '2020-01-01' AND r.requested_at <= '2020-12-31' GROUP BY EXTRACT(MONTH FROM r.requested_at) ), CTE7 AS ( SELECT CTE1.month, COALESCE(CTE6.accepted_driver_count,0) AS accepted_driver_count FROM CTE1 LEFT JOIN CTE6 ON CTE1.month = CTE6.month ) SELECT CTE7.month, CASE WHEN CTE5.active_driver_count = 0 THEN 0 ELSE ROUND(100 * CTE7.accepted_driver_count / CTE5.active_driver_count, 2) END AS working_percentage FROM CTE7 LEFT JOIN CTE5 ON CTE7.month = CTE5.month ORDER BY CTE7.month
WITH RECURSIVE CTE1 AS ( SELECT 1 AS month UNION SELECT month + 1 FROM CTE1 WHERE month < 12 ), CTE2 AS ( SELECT month, COUNT(DISTINCT driver_id) as drivers_den FROM ( SELECT *, CASE WHEN join_date <= '2019-12-31' THEN 1 ELSE MONTH(join_date) END AS month FROM Drivers WHERE join_date <= '2020-12-31' ) as sub GROUP BY month ), CTE3 AS ( SELECT MONTH(d1.requested_at) as month, COUNT(DISTINCT d2.driver_id) as drivers_num FROM Rides as d1 JOIN AcceptedRides as d2 ON d1.ride_id = d2.ride_id WHERE d1.requested_at BETWEEN '2020-01-01' AND '2020-12-31' GROUP BY MONTH(d1.requested_at) ) SELECT d1.month, ROUND(100.00*IFNULL(drivers_num/SUM(drivers_den) OVER(ORDER BY month ASC),0),2) as working_percentage FROM CTE1 as d1 LEFT JOIN CTE2 as d2 ON d1.month = d2.month LEFT JOIN CTE3 as d3 ON d1.month = d3.month GROUP BY d1.month ORDER BY 1
WITH RECURSIVE CTE1(MONTH) AS ( SELECT 1 AS MONTH UNION ALL SELECT MONTH + 1 FROM CTE1 WHERE MONTH < 12 ) , CTE2 AS ( SELECT DRIVER_ID, CASE WHEN YEAR(JOIN_DATE) < 2020 THEN 1 ELSE MONTH(JOIN_DATE) END AS MONTH FROM DRIVERS WHERE YEAR(JOIN_DATE) <=2020 ) , CTE3 AS ( SELECT CTE1.MONTH, COUNT(DRIVER_ID) OVER(ORDER BY CTE1.MONTH) AS ACTIVE_DRIVERS FROM CTE1 LEFT JOIN CTE2 USING(MONTH) ) , CTE4 AS ( SELECT DRIVER_ID, MONTH(REQUESTED_AT) MONTH FROM RIDES JOIN ACCEPTEDRIDES USING(RIDE_ID) WHERE YEAR(REQUESTED_AT) = 2020 ) , CTE5 AS ( SELECT CTE1.MONTH, COUNT(DISTINCT DRIVER_ID) NUM_DRIVERS_ACCRIDES FROM CTE1 LEFT JOIN CTE4 USING(MONTH) GROUP BY CTE1.MONTH ) SELECT DISTINCT CTE5.MONTH, (CASE WHEN ACTIVE_DRIVERS = 0 THEN 0 ELSE ROUND(NUM_DRIVERS_ACCRIDES/ACTIVE_DRIVERS *100, 2) END) working_percentage FROM CTE5 JOIN CTE3 USING(MONTH)
WITH RECURSIVE DATE_TAB AS( SELECT '202001' AS MON_YY ,1 AS MON_ID UNION ALL SELECT MON_YY+1 ,MON_ID+1 FROM DATE_TAB WHERE MON_ID < 12 ) , TRIP_CNT AS(SELECT DATE_FORMAT(REQUESTED_AT,'%Y%m') REQ_MON_YY ,COUNT(DISTINCT D.DRIVER_ID) DRIVER_CNT ,COUNT(DISTINCT A.DRIVER_ID) TRIP_CNT FROM ACCEPTEDRIDES A JOIN RIDES R ON A.RIDE_ID = R.RIDE_ID JOIN DRIVERS D ON DATE_FORMAT(R.REQUESTED_AT,'%Y%m') >= DATE_FORMAT(D.JOIN_DATE,'%Y%m') WHERE R.REQUESTED_AT <= '2020-12-31' AND R.REQUESTED_AT >= '2020-01-01' GROUP BY 1 ) SELECT DT.MON_ID AS month ,COALESCE(ROUND((TC.TRIP_CNT/TC.DRIVER_CNT)*100,2) ,0.00) AS working_percentage FROM DATE_TAB DT LEFT JOIN TRIP_CNT TC ON DT.MON_YY = TC.REQ_MON_YY
WITH RECURSIVE Date_Ranges AS ( SELECT '2019-01-01' as Date UNION ALL SELECT Date + INTERVAL 1 MONTH FROM Date_Ranges WHERE Date < '2021-01-01'), Drivers_Available AS( SELECT join_date, COUNT(DISTINCT(driver_id)) AS 'joiners' FROM( SELECT driver_id, DATE_FORMAT(join_date, '%Y-%m') AS 'join_date' FROM Drivers ) AS q GROUP BY q.join_date ), Drivers_Accepted AS( SELECT ride_date, COUNT(DISTINCT(driver_id)) AS 'driver_count' FROM( SELECT ar.ride_id, ar.driver_id, DATE_FORMAT(r.requested_at, '%Y-%m') AS 'ride_date' FROM AcceptedRides AS ar LEFT JOIN Rides AS r ON r.ride_id=ar.ride_id ) AS q GROUP BY q.ride_date ) SELECT RANK() OVER(ORDER BY p.Date) AS 'month', ROUND(COALESCE(100*p.active_drivers/p.drivers_available, 0), 2) AS 'working_percentage' FROM ( SELECT q.Date, SUM(q.joiners) OVER(ORDER BY Date) AS 'drivers_available', COALESCE(driv_acc.driver_count, 0) AS 'active_drivers' FROM( SELECT dr.Date, COALESCE(da.joiners, 0) AS joiners FROM Date_Ranges AS dr LEFT JOIN Drivers_Available AS da ON DATE_FORMAT(dr.Date, '%Y-%m')=da.join_date ) AS q LEFT JOIN Drivers_Accepted AS driv_acc ON DATE_FORMAT(q.Date, '%Y-%m')=driv_acc.ride_date ) AS p WHERE p.Date>='2020-01-01' AND p.Date<= '2020-12-31'
WITH RECURSIVE M AS ( SELECT 1 AS month UNION ALL SELECT month + 1 FROM M WHERE month < 12 ), Available_Driver AS ( SELECT a.month, SUM(IFNULL(b.available_driver, 0)) OVER(ORDER BY a.month) AS available_driver FROM M a LEFT JOIN ( SELECT CASE WHEN YEAR(join_date) < 2020 THEN 1 ELSE MONTH(join_date) END AS month, COUNT(driver_id) AS available_driver FROM Drivers WHERE YEAR(join_date) <= 2020 GROUP BY 1 ) b ON a.month = b.month ), Active_Driver AS ( SELECT MONTH(a.requested_at) AS month, COUNT(DISTINCT b.driver_id) AS active_driver FROM Rides a INNER JOIN AcceptedRides b ON a.ride_id = b.ride_id WHERE YEAR(a.requested_at) = 2020 GROUP BY 1 ) SELECT a.month, CASE WHEN a.available_driver = 0 THEN 0.00 ELSE ROUND(IFNULL(b.active_driver, 0)/a.available_driver * 100, 2) END AS working_percentage FROM Available_Driver a LEFT JOIN Active_Driver b ON a.month = b.month ORDER BY a.month
WITH RECURSIVE MONTH AS ( SELECT 1 AS month UNION SELECT month + 1 FROM MONTH WHERE month < 12 ), T1 AS ( SELECT MONTH(R.requested_at) AS month, A.driver_id, COUNT(A.ride_id) AS accepted_num FROM (SELECT * FROM Rides WHERE YEAR(requested_at) = 2020) R LEFT JOIN AcceptedRides A ON R.ride_id = A.ride_id GROUP BY 1,2 HAVING COUNT(A.ride_id) > 0 ), T2 AS ( SELECT M.month, COUNT(DISTINCT T1.driver_id) as driver_num FROM MONTH M LEFT JOIN T1 ON M.month = T1.month GROUP BY 1 ), T3 AS ( SELECT CASE WHEN YEAR(join_date) < 2020 THEN 1 ELSE MONTH(join_date) END AS month, COUNT(driver_id) as num FROM Drivers WHERE Year(join_date) <= 2020 GROUP BY 1 ), T4 AS ( SELECT M.month, SUM(IFNULL(T3.num,0)) OVER(ORDER BY M.month ASC) as available_num FROM MONTH M LEFT JOIN T3 ON M.month = T3.month ) SELECT T2.month, ROUND(IFNULL((T2.driver_num / T4.available_num),0) * 100,2) AS working_percentage FROM T2 INNER JOIN T4 ON T2.month = T4.month
WITH RECURSIVE MONTHS AS ( SELECT 1 AS MONTH UNION SELECT MONTH+1 AS MONTH FROM MONTHS WHERE MONTH<12), ACTIVE_DRIVERS as ( select month(join_date) as month, count(driver_id) over (order by join_date) as active_drivers from drivers where year(join_date) <= 2020 ), ACCEPTED_DRIVERS as ( select month(requested_at) as month, count(distinct DRIVER_ID) as accepted_DRIVERS from AcceptedRides join rides using (ride_id) where year(requested_at) = 2020 group by month ) SELECT distinct M.MONTH as month, CASE WHEN IFNULL(max(active_drivers) over (order by month),0)=0 THEN 0 ELSE IFNULL(ROUND(100* accepted_DRIVERS/max(active_drivers) over (order by month),2),0) END as working_percentage FROM MONTHS M LEFT JOIN ACTIVE_DRIVERS AD ON M.MONTH=AD.MONTH LEFT JOIN ACCEPTED_DRIVERS AD1 ON M.MONTH=AD1.MONTH
WITH RECURSIVE MONTHS AS ( SELECT 1 AS MONTH UNION SELECT MONTH+1 AS MONTH FROM MONTHS WHERE MONTH<12), ACTIVE_DRIVERS as ( select month(join_date) as month, count(driver_id) over (order by join_date) as active_drivers from drivers where year(join_date) <= 2020 ), ACCEPTED_DRIVERS as ( select month(requested_at) as month, count(distinct DRIVER_ID) as accepted_DRIVERS from AcceptedRides join rides using (ride_id) where year(requested_at) = 2020 group by month ) SELECT distinct M.MONTH as month, CASE WHEN IFNULL(max(active_drivers) over (order by month),0)=0 THEN 0 ELSE ROUND(100* IFNULL(accepted_DRIVERS,0)/IFNULL(max(active_drivers) over (order by month),0),2) END as working_percentage FROM MONTHS M LEFT JOIN ACTIVE_DRIVERS AD ON M.MONTH=AD.MONTH LEFT JOIN ACCEPTED_DRIVERS AD1 ON M.MONTH=AD1.MONTH
WITH RECURSIVE MONTHS AS ( SELECT 1 AS MONTH UNION SELECT MONTH+1 AS MONTH FROM MONTHS WHERE MONTH<12), ACTIVE_DRIVERS as ( select month(join_date) as month, count(driver_id) over (order by join_date) as active_drivers from drivers where year(join_date) <= 2020 ), ACCEPTED_DRIVERS as ( select month(requested_at) as month, count(distinct DRIVER_ID) as accepted_DRIVERS from AcceptedRides join rides using (ride_id) where year(requested_at) = 2020 group by month ) SELECT distinct M.MONTH as month, IFNULL(ROUND(100* accepted_DRIVERS/max(active_drivers) over (order by month),2),0) as working_percentage FROM MONTHS M LEFT JOIN ACTIVE_DRIVERS AD ON M.MONTH=AD.MONTH LEFT JOIN ACCEPTED_DRIVERS AD1 ON M.MONTH=AD1.MONTH
WITH RECURSIVE T1 AS (SELECT 1 AS join_month UNION SELECT join_month + 1 FROM T1 WHERE join_month < 12), T2 AS (SELECT IF(YEAR(join_date) < '2020', '1', MONTH(join_date)) AS join_month, COUNT(driver_id) AS driver_num FROM Drivers WHERE YEAR(join_date) <= '2020' GROUP BY join_month), T3 AS (SELECT MONTH(requested_at) AS join_month, COUNT(DISTINCT ar.driver_id) AS ride_num FROM AcceptedRides ar LEFT JOIN Rides r ON ar.ride_id = r.ride_id WHERE YEAR(requested_at) = '2020' GROUP BY join_month) SELECT T1.join_month AS 'month', ROUND(100 * IFNULL(T3.ride_num / SUM(T2.driver_num), 0),2) AS working_percentage FROM T1 LEFT JOIN T2 ON T1.join_month >= T2.join_month LEFT JOIN T3 ON T1.join_month = T3.join_month GROUP BY T1.join_month ORDER BY T1.join_month
WITH RECURSIVE T1 AS (SELECT 1 AS join_month UNION SELECT join_month + 1 FROM T1 WHERE join_month < 12), T2 AS (SELECT IF(YEAR(join_date) < '2020', '1', MONTH(join_date)) AS join_month, COUNT(driver_id) AS driver_num FROM Drivers WHERE YEAR(join_date) <= '2020' GROUP BY join_month), T3 AS (SELECT MONTH(requested_at) AS join_month, COUNT(DISTINCT ar.driver_id) AS ride_num FROM AcceptedRides ar LEFT JOIN Rides r ON ar.ride_id = r.ride_id WHERE YEAR(requested_at) = '2020' GROUP BY join_month) SELECT T1.join_month AS 'month',ROUND(100 * IFNULL(T3.ride_num / SUM(T2.driver_num), 0),2) AS working_percentage FROM T1 LEFT JOIN T2 ON T1.join_month >= T2.join_month LEFT JOIN T3 ON T1.join_month = T3.join_month GROUP BY T1.join_month ORDER BY T1.join_month
WITH RECURSIVE all_month as ( SELECT '2020-01-01' as mon UNION SELECT DATE_ADD(mon, INTERVAL 1 MONTH) as mon FROM all_month where DATE_ADD(mon, INTERVAL 1 MONTH) <= '2020-12-31' ), monthly_driver as ( SELECT MONTH(m.mon) as month, COUNT(DISTINCT d.driver_id) as n_monthly_driver FROM all_month m LEFT JOIN Drivers d ON DATE_FORMAT(d.join_date,'%Y%m') <= DATE_FORMAT(m.mon,'%Y%m') GROUP BY m.mon ), accepted as ( SELECT MONTH(requested_at) as month, COUNT(DISTINCT ar.driver_id) as n_driver FROM AcceptedRides ar LEFT JOIN Rides as r ON ar.ride_id = r.ride_id WHERE r.requested_at between '2020-01-01' AND '2020-12-31' GROUP BY month ) SELECT md.month, CASE WHEN a.n_driver > 0 THEN ROUND(a.n_driver/md.n_monthly_driver*100,2) ELSE 0 END as working_percentage FROM monthly_driver md LEFT JOIN accepted a ON md.month = a.month
WITH RECURSIVE counter AS ( SELECT 1 as n UNION ALL SELECT n + 1 FROM counter WHERE n < 12 ), first1 as (select month(join_date) as m, count(driver_id) as total1 from Drivers where year(join_date) = 2020 group by month(join_date)), second1 as (select c.n as month,sum(f.total1) over (order by c.n) + (select count(driver_id) from Drivers where year(join_date)<2020) as available from counter c left join first1 f on c.n=f.m), third1 as (select month(r.requested_at) as month,count(distinct a.driver_id) as worked from AcceptedRides a left join Rides r on a.ride_id = r.ride_id where year(r.requested_at)=2020 group by month(r.requested_at)) select s.month,round(ifnull(t.worked/s.available,0)*100.0,2) as working_percentage from second1 s left join third1 t on s.month=t.month
WITH RECURSIVE cte (month) AS ( SELECT 1 AS month UNION ALL SELECT month + 1 FROM CTE WHERE month < 12 ), driver2 AS ( SELECT a.month, COUNT(DISTINCT IFNULL(driver_id,0)) as n_driver FROM cte a LEFT JOIN ( SELECT driver_id, join_date, CASE WHEN YEAR(join_date)<2020 THEN 1 ELSE MONTH(join_date) END AS join_month FROM Drivers WHERE YEAR(join_date)<=2020) b ON a.month >= b.join_month GROUP BY a.month ) SELECT d.month, ROUND(IFNULL(drivers,0)*100 / n_driver,2) AS working_percentage FROM driver2 d LEFT JOIN ( SELECT MONTH(requested_at) as month, COUNT(DISTINCT driver_id) as drivers FROM AcceptedRides a LEFT JOIN Rides b on a.ride_id = b.ride_id WHERE YEAR(requested_at) = 2020 GROUP BY MONTH(requested_at) )c ON d.month = c.month
WITH RECURSIVE cte AS ( SELECT 1 AS month UNION ALL SELECT month+1 FROM cte WHERE month < 12 ), temp1 AS ( SELECT month, SUM(COALESCE(avail_drivers, 0)) OVER (ORDER BY month) AS drivers FROM cte LEFT JOIN (SELECT MONTH(CASE WHEN join_date < '2020-01-01' THEN '2020-01-01' ELSE join_date END) AS mon, COUNT(driver_id) AS avail_drivers FROM Drivers WHERE YEAR(join_date) < 2021 GROUP BY MONTH(CASE WHEN join_date < '2020-01-01' THEN '2020-01-01' ELSE join_date END)) sub ON cte.month = sub.mon ), temp2 AS ( SELECT month, COALESCE(COUNT(driver_id),0) AS working FROM ( SELECT MONTH(requested_at) AS month, a.driver_id FROM Rides r INNER JOIN AcceptedRides a ON r.ride_id = a.ride_id AND YEAR(requested_at) = 2020 GROUP BY MONTH(requested_at), a.driver_id HAVING COUNT(a.ride_id) > 0 ) sub GROUP BY month ) SELECT temp1.month, ROUND(COALESCE(working/drivers*100,0),2) AS working_percentage FROM temp1 LEFT JOIN temp2 ON temp1.month = temp2.month ORDER BY month
WITH RECURSIVE cte AS ( SELECT 1 AS month UNION SELECT month+1 AS month FROM cte WHERE month < 12 ), temp1 AS ( SELECT MONTH(CASE WHEN YEAR(join_date) < 2020 THEN '2020-1-1' ELSE join_date END) AS month, COUNT(*) AS tot_driver FROM Drivers WHERE YEAR(join_date) < 2021 GROUP BY MONTH(CASE WHEN YEAR(join_date) < 2020 THEN '2020-1-1' ELSE join_date END) ), temp2 AS ( SELECT cte.month, SUM(tot_driver) OVER (ORDER BY cte.month) AS tot_driver FROM cte LEFT JOIN temp1 t1 ON cte.month = t1.month ), temp3 AS ( SELECT MONTH(requested_at) AS month, d.driver_id FROM Drivers d LEFT JOIN AcceptedRides a ON d.driver_id = a.driver_id LEFT JOIN Rides r ON r.ride_id = a.ride_id WHERE YEAR(requested_at) = 2020 GROUP BY MONTH(requested_at), d.driver_id HAVING COUNT(a.ride_id) > 0 ), temp4 AS ( SELECT cte.month, COALESCE(COUNT(driver_id),0) AS act FROM temp3 t3 RIGHT JOIN cte ON t3.month = cte.month GROUP BY cte.month ) SELECT t2.month, ROUND(COALESCE(act/tot_driver,0)*100,2) AS working_percentage FROM temp2 t2 INNER JOIN temp4 t4 ON t2.month = t4.month
WITH RECURSIVE cte AS ( SELECT 1 as month UNION ALL SELECT month +1 FROM cte WHERE month <12 ), cte1 AS ( SELECT month(join_date) as month, ifnull(max(cnt),0) as cnt FROM ( SELECT join_date, count(driver_id) over (ORDER BY join_date) as cnt FROM drivers ) as t1 WHERE year(join_date) = '2020' GROUP BY 1 ), cte2 AS ( SELECT month(requested_at) as month, count(distinct a.driver_id) as driver_cnt FROM rides as r JOIN acceptedrides as a ON r.ride_id = a.ride_id WHERE year(r.requested_at) = '2020' GROUP BY 1 ) SELECT cte.month, round(IFNULL(ifnull(cte2.driver_cnt, 0)*100/( CASE WHEN cte1.cnt IS NULL THEN ifnull(max(cte1.cnt) over (order by month),0) ELSE cte1.cnt END),0),2) as working_percentage FROM cte LEFT JOIN cte1 ON cte.month = cte1.month LEFT JOIN cte2 ON cte.month = cte2.month
WITH RECURSIVE cte AS (SELECT 1 AS month UNION ALL SELECT month+1 FROM cte WHERE month<12 ) select cte.month , coalesce(round(100.0*count(distinct r.driver_id)/count(distinct d.driver_id),2),0) as working_percentage from cte left outer join drivers d on d.join_date<'2021-01-01' and str_to_date(concat('2020-',cte.month,'-01'),'%Y-%m-%d')>=DATE_FORMAT(d.join_date,'%Y-%m-01') left outer join (select a.driver_id, DATE_FORMAT(requested_at,'%Y-%m-01') as ride_month, count(*) as rides from acceptedrides a inner join rides r on r.ride_id=a.ride_id and year(r.requested_at)='2020' group by 1,2) r on r.driver_id=d.driver_id and str_to_date(concat('2020-',cte.month,'-01'),'%Y-%m-%d')=ride_month group by cte.month
WITH RECURSIVE cte AS( SELECT 1 AS month UNION ALL SELECT month+1 FROM cte WHERE month < 12 ), table1 As( SELECT MONTH(join_date) AS month, COUNT(driver_id) AS cnt_driver FROM Drivers WHERE YEAR(join_date) = 2020 GROUP BY month ), table2 AS( SELECT cte.month, SUM(COALESCE(cnt_driver,0))OVER(ORDER BY month) + (SELECT COUNT(DISTINCT driver_id) FROM Drivers WHERE YEAR(join_date) < 2020) AS avail_driver FROM cte LEFT JOIN table1 USING(month) ), table3 AS( SELECT MONTH(requested_at) AS month, COUNT(DISTINCT a.driver_id) AS accepted_driver FROM AcceptedRides a INNER JOIN Rides r USING(ride_id) WHERE YEAR(requested_at) = 2020 GROUP BY month ) SELECT table2.month, ROUND(COALESCE(accepted_driver/avail_driver,0)*100,2) AS working_percentage FROM table2 LEFT JOIN table3 USING(month) ORDER BY month ASC
WITH RECURSIVE cte(month) AS (SELECT 1 UNION ALL SELECT month + 1 FROM cte WHERE month < 12), Drivers_2020 AS (SELECT driver_id, CASE WHEN YEAR(join_date) < 2020 THEN 1 ELSE MONTH(join_date) END AS month FROM Drivers WHERE YEAR(join_date) <= 2020), Working_drivers AS (SELECT MONTH(r.requested_at) AS month, COUNT(DISTINCT ar.driver_id) AS working_drivers FROM Rides AS r JOIN AcceptedRides AS ar ON r.ride_id = ar.ride_id WHERE YEAR(r.requested_at) = 2020 GROUP BY month) SELECT DISTINCT c.month, ROUND(IFNULL(IFNULL(w.working_drivers, 0)/COUNT(d.driver_id) OVER(ORDER BY c.month),0)*100, 2) AS working_percentage FROM cte AS c LEFT JOIN Drivers_2020 AS d ON c.month = d.month LEFT JOIN Working_drivers AS w ON c.month = w.month
WITH RECURSIVE getMonth AS( SELECT 1 AS month UNION ALL SELECT month+1 AS month FROM getMonth WHERE month < 12 ), getDates AS( SELECT month, LAST_DAY(CONCAT('2020-',month,'-01')) AS last_day FROM getMonth ), getRides AS ( SELECT MONTH(requested_at) AS month_, COUNT(DISTINCT ar.driver_id) AS accepted_drivers FROM Rides r INNER JOIN AcceptedRides ar ON r.ride_id = ar.ride_id WHERE Year(requested_at) = '2020' GROUP BY 1 ), getDrivers AS( SELECT month, SUM(CASE WHEN Drivers.driver_id IS NOT NULL THEN 1 ELSE 0 END) AS active_drivers FROM getDates LEFT OUTER JOIN Drivers ON Drivers.join_date <= last_day GROUP BY 1 ) SELECT month, COALESCE( ROUND((COALESCE(accepted_drivers,0)/active_drivers) * 100 , 2) ,0) AS working_percentage FROM getDrivers LEFT OUTER JOIN getRides ON month = month_ ORDER BY 1
WITH RECURSIVE mon as ( SELECT 1 as m UNION ALL SELECT m + 1 FROM mon WHERE m < 12), available_new_driver as ( SELECT CASE WHEN join_date < '2020-1-1' THEN 1 ELSE month(join_date) END as mon, COUNT(*) as nd FROM Drivers WHERE join_date < '2021-1-1' GROUP BY 1), accepted_ride as ( SELECT month(requested_at) as mon, COUNT(DISTINCT driver_id) as driver FROM Rides r JOIN AcceptedRides ar ON r.ride_id = ar.ride_id WHERE requested_at BETWEEN '2020-1-1' AND '2020-12-31' GROUP BY 1) SELECT mon.m AS month, ROUND(100*IFNULL(driver/(SUM(nd) OVER(ORDER BY m)), 0),2) as working_percentage FROM mon LEFT JOIN accepted_ride ar ON mon.m = ar.mon LEFT JOIN available_new_driver ad ON mon.m = ad.mon
WITH RECURSIVE month AS ( SELECT 1 AS month UNION ALL SELECT month + 1 AS month FROM month WHERE month < 12 ), active_driver AS ( SELECT month.month AS month, COUNT(d.driver_id) AS num_of_driver FROM Drivers d CROSS JOIN month WHERE (YEAR(d.join_date) < "2020") OR (YEAR(d.join_date) = "2020" AND MONTH(d.join_date) <= month.month) GROUP BY month.month ), working_driver AS ( SELECT MONTH(r.requested_at) AS run_time, COUNT(DISTINCT driver_id) AS num_of_working_driver FROM Rides r LEFT JOIN AcceptedRides a ON r.ride_id = a.ride_id WHERE YEAR(r.requested_at) = "2020" GROUP BY run_time ) SELECT m.month AS month, ROUND(IFNULL(w.num_of_working_driver / a.num_of_driver * 100, 0.00), 2) AS working_percentage FROM month m LEFT JOIN active_driver a ON m.month = a.month LEFT JOIN working_driver w ON m.month = w.run_time ORDER BY month ASC
WITH RECURSIVE month_list(month) AS ( SELECT 1 UNION SELECT month+1 FROM month_list WHERE month<12 ), accept_rides AS ( SELECT MONTH(requested_at) AS month, driver_id, COUNT(ride_distance) AS accepted_rides FROM Rides LEFT JOIN AcceptedRides USING(ride_id) WHERE YEAR(requested_at) = 2020 GROUP BY month, driver_id ) SELECT month_list.month AS month, IFNULL(ROUND((COUNT(DISTINCT accept_rides.driver_id)*100/COUNT(Drivers.driver_id)),2),0) AS working_percentage FROM month_list LEFT JOIN Drivers ON (YEAR(join_date) =2020 AND MONTH(join_date)<=month_list.month) OR (YEAR(join_date)<2020) LEFT JOIN accept_rides ON month_list.month = accept_rides.month AND Drivers.driver_id = accept_rides.driver_id GROUP BY month_list.month ORDER BY month_list.month
WITH RECURSIVE monthcount as ( SELECT 1 month UNION SELECT month+1 month FROM monthcount WHERE month < 12) SELECT month,ROUND(IFNULL(COUNT(DISTINCT a.driver_id)/COUNT(DISTINCT d.driver_id)*100,0),2) working_percentage FROM monthcount m LEFT JOIN Drivers d ON (YEAR(d.join_date)<2020) OR (m.month>=MONTH(join_date) AND YEAR(d.join_date)=2020 ) LEFT JOIN Rides r ON (m.month=MONTH(r.requested_at) AND YEAR(r.requested_at)=2020) LEFT JOIN AcceptedRides a ON a.ride_id=r.ride_id GROUP BY 1
WITH RECURSIVE months (month) AS ( SELECT 1 UNION ALL SELECT month + 1 FROM months WHERE month < 12 ), t1 AS ( SELECT MONTH(join_date) AS month, COUNT(driver_id) OVER (ORDER BY join_date) AS cnt FROM Drivers WHERE YEAR(join_date) <= 2020 ), t2 AS ( SELECT MONTH(requested_at) AS month, COUNT(DISTINCT a.driver_id) AS cnt FROM Rides r JOIN AcceptedRides a ON r.ride_id = a.ride_id WHERE YEAR(r.requested_at) = 2020 GROUP BY MONTH(requested_at) ) SELECT DISTINCT m.month, ROUND(CASE WHEN t2.cnt IS NULL THEN 0 ELSE t2.cnt / IFNULL(MAX(t1.cnt) OVER (ORDER BY m.month),0) * 100 END, 2) AS working_percentage FROM months m LEFT JOIN t1 ON m.month = t1.month LEFT JOIN t2 ON m.month = t2.month
WITH RECURSIVE months AS ( SELECT '2020-01' AS month UNION SELECT LEFT(DATE_ADD(CONCAT(month, '-01'), INTERVAL 1 MONTH),7) FROM months WHERE month < '2020-12' ), a AS ( SELECT month, SUM(driver_cnt) OVER(ORDER BY month) AS driver_cnt FROM ( SELECT LEFT(join_date, 7) AS month, COUNT(*) AS driver_cnt FROM Drivers GROUP BY month ) t ), a_drivers AS ( SELECT m.month, COALESCE(MAX(driver_cnt) OVER(ORDER BY month), 0) AS driver_cnt FROM months m LEFT JOIN a ON m.month = a.month ), ac AS ( SELECT LEFT(requested_at, 7) AS month, COUNT(DISTINCT driver_id) AS ac_driver_cnt FROM AcceptedRides ar INNER JOIN Rides r ON ar.ride_id = r.ride_id GROUP BY month ), ac_drivers AS ( SELECT m.month, COALESCE(ac_driver_cnt, 0) AS ac_driver_cnt FROM months m LEFT JOIN ac ON m.month = ac.month ) SELECT CAST(RIGHT(a_drivers.month, 2) AS SIGNED) AS month, ROUND(100 * COALESCE(ac_driver_cnt / driver_cnt, 0), 2) AS working_percentage FROM a_drivers INNER JOIN ac_drivers ON a_drivers.month = ac_drivers.month ORDER BY month
WITH RECURSIVE months AS ( SELECT 1 AS 'month', 2020 AS 'year' UNION ALL SELECT m.month + 1 AS 'month', m.year FROM months m WHERE m.month + 1 <= 12 ), active_drivers AS ( SELECT m1.month, COUNT(d.driver_id) AS 'active_drives_count' FROM months m1 LEFT JOIN Drivers d ON YEAR(d.join_date) < m1.year OR (YEAR(d.join_date) = m1.year AND MONTH(d.join_date) <= m1.month) GROUP BY m1.month ), active_accepted_drivers_table AS ( SELECT m1.month, COUNT(DISTINCT t.driver_id) AS 'active_accepted_driver' FROM months m1 LEFT JOIN ( SELECT a.ride_id, a.driver_id, r.requested_at FROM AcceptedRides a JOIN Rides r ON a.ride_id = r.ride_id ) t ON YEAR(t.requested_at) = m1.year AND MONTH(t.requested_at) = m1.month GROUP BY m1.month ) SELECT a1.month, ROUND(CASE WHEN a1.active_drives_count = 0 THEN 0 ELSE a2.active_accepted_driver/a1.active_drives_count END * 100, 2) AS 'working_percentage' FROM active_drivers a1 LEFT JOIN active_accepted_drivers_table a2 ON a1.month = a2.month ORDER BY month ASC
WITH RECURSIVE months AS ( SELECT 1 AS m UNION ALL SELECT m + 1 FROM months WHERE m < 12 ), available_drivers AS ( SELECT mo.m, COUNT(d.driver_id) AS cnt FROM months mo LEFT JOIN Drivers d ON CAST(CONCAT('2020-', mo.m,'-01') AS DATE) >= DATE_ADD(DATE_ADD(LAST_DAY(d.join_date), INTERVAL 1 DAY), INTERVAL -1 MONTH) GROUP BY mo.m ) SELECT ad.m AS month, ROUND(IFNULL(COUNT(DISTINCT ar.driver_id)/NULLIF(ad.cnt, 0), 0) * 100.0, 2) AS working_percentage FROM available_drivers ad LEFT JOIN ( AcceptedRides ar JOIN Rides r ON ar.ride_id = r.ride_id ) ON ad.m = MONTH(r.requested_at) AND YEAR(r.requested_at) = 2020 GROUP BY ad.m, ad.cnt
WITH RECURSIVE months AS ( SELECT 1 AS month UNION ALL SELECT month + 1 FROM months WHERE month < 12 ) SELECT m.month ,CASE WHEN COUNT(DISTINCT d.driver_id) > 0 THEN ROUND(COUNT(DISTINCT t.driver_id)*100.0/COUNT(DISTINCT d.driver_id), 2) ELSE 0 END AS working_percentage FROM months m LEFT JOIN Drivers d ON YEAR(d.join_date) < 2020 OR (YEAR(d.join_date) = 2020 AND MONTH(d.join_date) <= m.month) LEFT JOIN ( SELECT driver_id, requested_at FROM AcceptedRides a INNER JOIN Rides r ON a.ride_id = r.ride_id) t ON YEAR(t.requested_at) = 2020 AND m.month = MONTH(t.requested_at) AND d.driver_id = t.driver_id GROUP BY m.month ORDER BY m.month
WITH RECURSIVE months AS ( SELECT 1 AS month UNION ALL SELECT month + 1 FROM months WHERE month < 12 ) SELECT m.month ,CASE WHEN COUNT(DISTINCT d.driver_id) > 0 THEN ROUND(COUNT(DISTINCT t.driver_id)*100.0/COUNT(DISTINCT d.driver_id), 2) ELSE 0 END AS working_percentage FROM months m LEFT JOIN Drivers d ON YEAR(d.join_date) < 2020 OR (YEAR(d.join_date) = 2020 AND MONTH(d.join_date) <= m.month) LEFT JOIN ( SELECT driver_id, requested_at FROM AcceptedRides a INNER JOIN Rides r ON a.ride_id = r.ride_id) t ON YEAR(t.requested_at) = 2020 AND m.month = MONTH(t.requested_at) GROUP BY m.month ORDER BY m.month
WITH RECURSIVE months AS ( SELECT 1 AS month UNION ALL SELECT month + 1 FROM months WHERE month < 12 ) SELECT m.month ,ROUND(CASE WHEN COUNT(DISTINCT d.driver_id) > 0 THEN COUNT(DISTINCT t.driver_id)*100.0/COUNT(DISTINCT d.driver_id) ELSE 0 END, 2) AS working_percentage FROM months m LEFT JOIN Drivers d ON YEAR(d.join_date) < 2020 OR (YEAR(d.join_date) = 2020 AND MONTH(d.join_date) <= m.month) LEFT JOIN ( SELECT driver_id, requested_at FROM AcceptedRides a INNER JOIN Rides r ON a.ride_id = r.ride_id) t ON YEAR(t.requested_at) = 2020 AND m.month = MONTH(t.requested_at) AND d.driver_id = t.driver_id GROUP BY m.month ORDER BY m.month
WITH RECURSIVE months AS ( SELECT 1 AS month UNION SELECT month + 1 AS month FROM months WHERE month < 12), available_drivers AS ( SELECT MONTH(join_date) AS month, MAX(drivers) AS drivers FROM (SELECT join_date, COUNT(driver_id) OVER (ORDER BY join_date) AS drivers FROM Drivers) t1 WHERE YEAR(join_date) = 2020 GROUP BY month), active_drivers AS ( SELECT MONTH(r.requested_at) AS month, COUNT(DISTINCT ar.driver_id) AS active_drivers FROM AcceptedRides ar LEFT JOIN Rides r ON ar.ride_id = r.ride_id WHERE YEAR(r.requested_at) = 2020 GROUP BY month) SELECT t2.month, ROUND(IFNULL(ac.active_drivers/t2.drivers*100, 0), 2) AS working_percentage FROM (SELECT m.month, MAX(av.drivers) OVER (ORDER BY month) AS drivers FROM months m LEFT JOIN available_drivers av ON m.month = av.month) t2 LEFT JOIN active_drivers ac ON t2.month = ac.month
WITH RECURSIVE months AS ( SELECT CASE WHEN DATE_FORMAT(MIN(join_date),'%Y-%m-01')<=DATE_FORMAT('2020-01-01','%Y-%m-01') THEN DATE_FORMAT(MIN(join_date),'%Y-%m-01') ELSE DATE_FORMAT('2020-01-01','%Y-%m-01') END AS d FROM Drivers UNION SELECT d + INTERVAL 1 MONTH FROM months WHERE d<=DATE_FORMAT('2020-11-01','%Y-%m-d')), num_drivers AS ( SELECT m.d, COUNT(d.driver_id) AS num_drivers FROM months m LEFT JOIN Drivers d ON YEAR(d.join_date)=YEAR(m.d) AND MONTH(d.join_date)=MONTH(m.d) GROUP BY 1), total_mthly_drivers AS ( SELECT d, SUM(num_drivers) OVER (ORDER BY d ROWS UNBOUNDED PRECEDING) AS total_num_drivers FROM num_drivers), total_drivers AS ( SELECT MONTH(d) as month, total_num_drivers FROM total_mthly_drivers t WHERE YEAR(d)=2020), active_monthly AS ( SELECT MONTH(r.requested_at) as month, COUNT(DISTINCT a.driver_id) as mthly_driver_cnt FROM AcceptedRides as a JOIN Rides r ON r.ride_id=a.ride_id WHERE YEAR(r.requested_at)=2020 GROUP BY 1) SELECT t.month, IFNULL(ROUND(IFNULL(a.mthly_driver_cnt,0)/t.total_num_drivers*100,2),0) AS working_percentage FROM total_drivers t LEFT JOIN active_monthly a ON t.month=a.month ORDER BY 1
WITH RECURSIVE months AS (SELECT 1 Month UNION ALL SELECT Month+1 FROM months WHERE Month < 12 ), AvailableDrivers AS (SELECT M1.Month, COUNT(D1.driver_id) AvailableDriversCNT FROM months M1 LEFT JOIN (SELECT * FROM Drivers WHERE YEAR(join_date) <= 2020) D1 ON M1.Month >= Month(D1.join_date) OR YEAR(D1.join_date) < 2020 GROUP BY Month), WorkingDrivers AS (SELECT Month(requested_at) Month, COUNT(DISTINCT T1.driver_id) WorkingDriversCNT FROM AcceptedRides T1 JOIN Rides T2 ON T1.ride_id = T2.ride_id WHERE YEAR(requested_at) = 2020 GROUP BY MONTH(requested_at) ORDER BY Month) SELECT T1.Month, ROUND(IFNULL(WorkingDriversCNT/AvailableDriversCNT,0)*100,2) working_percentage FROM AvailableDrivers T1 LEFT JOIN WorkingDrivers T2 ON T1.Month = T2.Month ORDER BY T1.Month
WITH RECURSIVE months AS( SELECT 1 AS month UNION ALL SELECT month + 1 FROM months WHERE month < 12 ) SELECT t.month , IFNULL(ROUND(100*(SELECT COUNT(DISTINCT driver_id) FROM AcceptedRides a INNER JOIN Rides b USING(ride_id) WHERE MONTH(requested_at) = t.month AND YEAR(requested_at) = 2020) / (SELECT COUNT(driver_id) FROM Drivers WHERE YEAR(join_date) < 2021 AND (MONTH(join_date) <= t.month OR YEAR(join_date) < 2020)),2),0) AS working_percentage FROM months t ORDER BY month ASC
WITH RECURSIVE monthtable (month) as( SELECT 1 UNION ALL SELECT month+1 FROM monthtable WHERE month<12 ), drivertable AS ( SELECT month(join_date) as month, COUNT(driver_id) OVER(ORDER BY join_date) AS num_drivers FROM drivers WHERE year(join_date)<=2020 ), ridetable AS ( SELECT a.ride_id, a.driver_id, r.user_id, month(r.requested_at) as month FROM AcceptedRides as a JOIN Rides as r using(ride_id) WHERE year(requested_at)=2020 ) SELECT DISTINCT m.month, IFNULL(ROUND( COUNT(distinct r.driver_id)/d.availabledrivers*100, 2) , 0) as working_percentage FROM monthtable as m LEFT JOIN ridetable as r using (month) LEFT JOIN( SELECT m.month, IFNULL(MAX(d.num_drivers)OVER(ORDER BY m.month), 0) as availabledrivers FROM monthtable as m LEFT JOIN drivertable as d using (month) ) d using (month) GROUP BY m.month ORDER BY m.month
WITH RECURSIVE monthtable AS (SELECT 1 month_num UNION ALL SELECT month_num+1 FROM monthtable WHERE month_num<12), AvailableDrivers AS (SELECT month_num, COUNT(driver_id) available_drivers_num FROM monthtable M1 LEFT JOIN Drivers D1 ON (M1.month_num >= MONTH(join_date) AND YEAR(join_date) = 2020) OR YEAR(join_date) < 2020 GROUP BY month_num), WorkingDrivers AS (SELECT MONTH(requested_at) month_num, COUNT(DISTINCT driver_id) working_drivers_num FROM AcceptedRides A1 JOIN Rides R1 ON A1.ride_id = R1.ride_id WHERE YEAR(requested_at) = 2020 GROUP BY month_num) SELECT A2.month_num month, ROUND(IFNULL(working_drivers_num/IFNULL(available_drivers_num,0),0) * 100,2) working_percentage FROM AvailableDrivers A2 LEFT JOIN WorkingDrivers W1 ON A2.month_num = W1.month_num ORDER BY month
WITH RECURSIVE s (month) AS ( SELECT 1 UNION ALL SELECT month + 1 FROM s WHERE month < 12 ), c1 as (select month, driver_id, cum_sum from (select join_date, month(join_date) month, driver_id, row_number() over(order by join_date) as cum_sum from drivers where year(join_date) < '2021') a where year(a.join_date) ='2020'), c2 as (select month(requested_at) month, count(distinct driver_id) num_rides from rides join acceptedrides r using(ride_id) where year(requested_at) = '2020' and ride_id in (select ride_id from acceptedrides) group by 1) select s.month, round(ifnull(num_rides/max(cum_sum),0) * 100, 2) working_percentage from c1 right join s on s.month >= c1.month left join c2 on s.month = c2.month group by 1
WITH RECURSIVE seq AS (SELECT 0 as cnt ,1 AS value UNION ALL SELECT 0 as cnt, value + 1 FROM seq WHERE value < 12), rides_2020 as ( select ride_id, month(requested_at) as month from rides where year(requested_at) = 2020 ) , dam as ( select count(distinct b.driver_id) as cnt, a.month from rides_2020 a inner join acceptedrides b on a.ride_id = b.ride_id group by 2 ), damn as ( select a.cnt + ifnull(b.cnt,0) as cnt, a.value as month from seq a left join dam b on a.value = b.month ), avp as ( select count(driver_id) as d_cnt from drivers where year(join_date) < 2020 ), avc as ( select count(driver_id) as ad_cnt, month(join_date) as month from drivers where year(join_date) = 2020 group by 2 ), avs as ( select a.cnt + ifnull(b.ad_cnt,0) as cnt, a.value as month from seq a left join avc b on a.value = b.month ), avl as ( select sum(cnt) over(order by month) + avp.d_cnt as cnt, month from avs, avp ), final as ( select avl.month as month, damn.cnt as d_cnt, avl.cnt as a_cnt from avl inner join damn on damn.month = avl.month ) select month, round(ifnull(d_cnt*100/a_cnt,0),2) as working_percentage from final
WITH RECURSIVE t AS ( SELECT 1 AS month UNION ALL SELECT month + 1 AS month FROM t WHERE month < 12 ), t1 AS ( SELECT driver_id, IF(YEAR(join_date) < 2020, 1, MONTH(join_date)) AS month FROM Drivers WHERE YEAR(join_date) <= 2020 ), t2 AS ( SELECT t.month, SUM(IFNULL(COUNT(driver_id),0)) OVER (ORDER BY t.month) AS available_drivers FROM t LEFT JOIN t1 USING (month) GROUP BY month ), t3 AS ( SELECT COUNT(DISTINCT a.driver_id) AS ride_drivers, MONTH(requested_at) AS month FROM AcceptedRides a JOIN Rides r USING (ride_id) WHERE YEAR(requested_at) = 2020 GROUP BY MONTH(requested_at) ) SELECT t.month, ROUND( IFNULL( IF(available_drivers=0, 0, (ride_drivers/available_drivers)*100), 0), 2) AS working_percentage FROM t LEFT JOIN t2 USING (month) LEFT JOIN t3 USING (month)
WITH RECURSIVE t1 AS ( SELECT 1 AS month UNION ALL SELECT month + 1 AS month FROM t1 WHERE month < 12 ), t2 AS ( SELECT t1.month, COUNT(driver_id) AS num_drivers_available FROM t1 LEFT JOIN Drivers d ON d.join_date <= LAST_DAY(CONCAT('2020-', t1.month, '-1')) GROUP BY t1.month ), t3 AS ( SELECT month(r.requested_at) AS month, COUNT(DISTINCT a.driver_id) AS num_drivers_accepted FROM AcceptedRides a JOIN Rides r ON a.ride_id = r.ride_id WHERE r.requested_at BETWEEN '2020-1-1' AND '2020-12-31' GROUP BY month ) SELECT t2.month, ROUND(COALESCE(t3.num_drivers_accepted / t2.num_drivers_available * 100, 0), 2) AS working_percentage FROM t2 LEFT JOIN t3 ON t2.month = t3.month ORDER BY t2.month
WITH RECURSIVE t1 AS( SELECT 1 as month UNION SELECT month + 1 FROM t1 WHERE month < 12 ), t2 AS( SELECT MONTH(join_date) AS month, (SELECT SUM(join_date < '2020-01-01') FROM Drivers) + SUM(COUNT(MONTH(join_date))) OVER (ORDER BY join_date) AS avai FROM Drivers WHERE YEAR(join_date) = 2020 GROUP BY 1 ORDER BY 1), t3 AS( SELECT t1.month, IFNULL(MAX(t2.avai) OVER (ORDER BY t1.month), 0) AS avlb FROM t1 LEFT JOIN t2 ON t1.month = t2.month ), t4 AS( SELECT MONTH(a.requested_at) as month, IFNULL(COUNT(DISTINCT b.driver_id), 0) as act FROM Rides AS a JOIN AcceptedRides AS b ON a.ride_id = b.ride_id WHERE YEAR(a.requested_at) = 2020 GROUP BY 1 ) SELECT t3.month, IFNULL(ROUND(CASE WHEN t3.avlb <> 0 THEN t4.act * 100 / t3.avlb ELSE 0 END, 2), 0.00) AS working_percentage FROM t3 LEFT JOIN t4 ON t3.month = t4.month ORDER BY 1
WITH RECURSIVE year_cte AS ( SELECT MIN(YEAR(join_date)) year, MAX(YEAR(join_date)) max_year FROM drivers UNION ALL SELECT year + 1, max_year FROM year_cte WHERE year < max_year ), header AS ( SELECT year, 1 month, 12 max_month FROM year_cte UNION ALL SELECT year, month + 1, max_month FROM header WHERE month < max_month ), drivers_count AS( SELECT MAX(YEAR(join_date)) 'year', MAX(MONTH(join_date)) 'month', COUNT(driver_id) drivers_count FROM drivers GROUP BY LEFT(join_date, 7) ), working_drivers_count AS ( SELECT MAX(YEAR(r.requested_at)) 'year', MAX(MONTH(r.requested_at)) 'month', COUNT(DISTINCT a.driver_id) working_drivers FROM rides r LEFT JOIN acceptedrides a ON r.ride_id = a.ride_id GROUP BY LEFT(r.requested_at, 7) ) SELECT month, ROUND(IFNULL(working_drivers/active_drivers*100, 0), 2) AS working_percentage FROM ( SELECT t1.month, t1.year, IFNULL(SUM(t2.drivers_count) OVER (ORDER BY t1.year, t1.month), 0) active_drivers, IFNULL(t3.working_drivers, 0) working_drivers FROM header t1 LEFT JOIN drivers_count t2 ON t1.year = t2.year AND t1.month = t2.month LEFT JOIN working_drivers_count t3 ON t1.year = t3.year AND t1.month = t3.month ) temp WHERE year = 2020
WITH active_drivers_per_recorded_months AS( SELECT temp2.month AS month, temp2.number_of_active_drivers AS number_of_active_drivers FROM( SELECT temp.month AS month, temp.join_year AS join_year, SUM(number_of_drivers_joined_in_month) OVER(ORDER BY join_year ASC, month ASC) AS number_of_active_drivers FROM( SELECT MONTH(join_date) AS month, YEAR(join_date) AS join_year, COUNT(DISTINCT driver_id) AS number_of_drivers_joined_in_month FROM Drivers GROUP BY 1, 2 )temp )temp2 WHERE temp2.join_year = 2020 ), drivers_in_all_months AS( SELECT temp.month AS month, COALESCE(ad.number_of_active_drivers, 0) AS number_of_active_drivers FROM( SELECT 1 AS `month` UNION SELECT 2 AS `month` UNION SELECT 3 AS `month` UNION SELECT 4 AS `month` UNION SELECT 5 AS `month` UNION SELECT 6 AS `month` UNION SELECT 7 AS `month` UNION SELECT 8 AS `month` UNION SELECT 9 AS `month` UNION SELECT 10 AS `month` UNION SELECT 11 AS `month` UNION SELECT 12 AS `month` )temp LEFT JOIN active_drivers_per_recorded_months ad ON temp.month = ad.month ORDER BY 1 ASC ), active_drivers_in_all_months AS( SELECT temp2.month AS month, MAX(number_of_active_drivers) OVER(PARTITION BY temp2.grouping_variable) AS number_of_active_drivers FROM( SELECT *, MAX(temp.relevant_month) OVER(ORDER BY month ROWS UNBOUNDED PRECEDING) AS grouping_variable FROM( SELECT *, CASE WHEN number_of_active_drivers = 0 THEN 0 ELSE month END AS relevant_month FROM drivers_in_all_months )temp )temp2 ), rides_accepted_per_month AS( SELECT temp2.month AS month, temp2.number_of_rides_accepted AS number_of_rides_accepted FROM( SELECT temp.month AS month, temp.requested_year AS requested_year, COUNT(DISTINCT temp.driver_id) AS number_of_rides_accepted FROM( SELECT r.ride_id AS ride_id, MONTH(r.requested_at) AS month, YEAR(r.requested_at) AS requested_year, ar.driver_id AS driver_id FROM Rides r LEFT JOIN AcceptedRides ar ON r.ride_id = ar.ride_id )temp GROUP BY 1, 2 )temp2 WHERE temp2.requested_year = 2020 ) SELECT temp.month AS month, CASE WHEN temp.number_of_active_drivers = 0 THEN 0 ELSE ROUND(temp.number_of_rides_accepted / temp.number_of_active_drivers * 100, 2) END AS working_percentage FROM( SELECT a.month AS month, a.number_of_active_drivers AS number_of_active_drivers, CASE WHEN r.number_of_rides_accepted IS NULL THEN 0 ELSE r.number_of_rides_accepted END AS number_of_rides_accepted FROM active_drivers_in_all_months a LEFT JOIN rides_accepted_per_month r on a.month = r.month )temp ORDER BY 1 ASC
WITH c1 AS (SELECT CASE WHEN YEAR(join_date) < 2020 THEN 1 ELSE MONTH(join_date) END AS month ,COUNT(driver_id) AS active_drivers FROM Drivers WHERE YEAR(join_date) <= 2020 GROUP BY 1) ,c2 AS (WITH RECURSIVE se AS (SELECT 1 AS month UNION ALL SELECT month+1 AS month FROM se WHERE month < 12) SELECT * FROM se) ,c3 AS (SELECT MONTH(r.requested_at) AS month ,COUNT(DISTINCT a.driver_id) AS working_drivers FROM Rides r LEFT JOIN AcceptedRides a ON r.ride_id = a.ride_id WHERE YEAR(r.requested_at) = 2020 GROUP BY 1) SELECT c2.month ,ROUND(IFNULL(c3.working_drivers/SUM(IFNULL(c1.active_drivers,0)) OVER (ORDER BY c2.month)*100,0),2) AS working_percentage FROM c2 LEFT JOIN c1 ON c2.month = c1.month LEFT JOIN c3 ON c2.month = c3.month ORDER BY 1
WITH gen AS ( SELECT 1 AS month UNION ALL SELECT 2 AS month UNION ALL SELECT 3 AS month UNION ALL SELECT 4 AS month UNION ALL SELECT 5 AS month UNION ALL SELECT 6 AS month UNION ALL SELECT 7 AS month UNION ALL SELECT 8 AS month UNION ALL SELECT 9 AS month UNION ALL SELECT 10 AS month UNION ALL SELECT 11 AS month UNION ALL SELECT 12 AS month ), agg AS ( SELECT CASE WHEN YEAR(join_date) < 2020 THEN 1 WHEN YEAR(join_date) = 2020 THEN MONTH(join_date) ELSE null END AS month, COUNT(DISTINCT driver_id) AS ct FROM drivers GROUP BY 1 ), deno AS ( SELECT g.month, SUM(COALESCE(a.ct, 0)) OVER (ORDER BY g.month ASC) AS ct_deno FROM gen AS g LEFT JOIN agg AS a ON g.month = a.month ), nume AS( SELECT MONTH(r.requested_at) AS month, COUNT(DISTINCT a.driver_id) AS ct_nume FROM acceptedrides AS a JOIN rides AS r ON a.ride_id = r.ride_id AND YEAR(r.requested_at) = 2020 GROUP BY 1 ) SELECT d.month AS month, ROUND(COALESCE(n.ct_nume / d.ct_deno, 0) * 100, 2) AS working_percentage FROM deno AS d LEFT JOIN nume AS n ON d.month = n.month ORDER BY d.month ASC
WITH recursive CTE AS ( SELECT 1 AS month UNION SELECT month + 1 FROM CTE WHERE month < 12 ), CTE1 AS ( SELECT CASE WHEN year(join_date) < 2020 THEN 1 ELSE month(join_date) END AS month, driver_id FROM Drivers d WHERE year(join_date) <= 2020 ), CTE2 AS ( SELECT month(r.requested_at) AS month, COUNT(distinct driver_id) AS working_driver FROM AcceptedRides a JOIN Rides r ON a.ride_id =r.ride_id WHERE year(r.requested_at) = 2020 GROUP BY month ) SELECT t1.month, IFNULL(ROUND(100*working_driver/total_driver,2),0.00) AS working_percentage FROM (SELECT distinct CTE.month, COUNT(CTE1.driver_id) OVER(order by CTE.month) AS total_driver FROM CTE LEFT JOIN CTE1 ON CTE.month = CTE1.month) AS t1 LEFT JOIN CTE2 ON t1.month = CTE2.month ORDER BY t1.month
WITH recursive CTE1 AS ( SELECT 1 AS month UNION SELECT month + 1 AS month FROM CTE1 WHERE month < 12 ), CTE2 AS ( SELECT driver_id, CASE WHEN year(join_date) < 2020 THEN 1 ELSE month(join_date) END AS month FROM Drivers WHERE year(join_date) <= 2020 ), CTE3 AS ( SELECT CTE1.month, IFNULL(COUNT(driver_id) OVER(ORDER BY CTE1.month),0) AS active_driver FROM CTE1 LEFT JOIN CTE2 ON CTE1.month = CTE2.month ) SELECT c.month, ROUND(100*IFNULL(COUNT(distinct driver_id)/active_driver,0),2) AS working_percentage FROM CTE3 c LEFT JOIN Rides r ON c.month = month(r.requested_at) AND year(r.requested_at) = 2020 LEFT JOIN AcceptedRides a ON r.ride_id = a.ride_id GROUP BY c.month
WITH recursive cte AS ( SELECT 1 AS month UNION ALL SELECT 1+month FROM cte WHERE month<12), b AS ( SELECT COUNT(*) AS ct FROM Drivers WHERE join_date<'2020-01-01'), c AS ( SELECT MONTH(join_date) AS month, COUNT(*) AS ct FROM Drivers WHERE YEAR(join_date) = 2020 GROUP BY MONTH(join_date)), d AS ( SELECT cte.month, IFNULL(ct, 0) AS ct FROM cte LEFT JOIN c ON cte.month = c.month), available AS ( SELECT month, (SELECT * FROM b)+SUM(ct) OVER (ORDER BY month) AS available FROM d), e AS ( SELECT AcceptedRides.driver_id, Rides.requested_at FROM AcceptedRides JOIN Rides ON AcceptedRides.ride_id = Rides.ride_id), f AS ( SELECT MONTH(requested_at) AS month, COUNT(DISTINCT driver_id) as accept FROM e WHERE YEAR(requested_at) = 2020 GROUP BY MONTH(requested_at)), final AS ( SELECT available.month, available.available, IFNULL(f.accept, 0) AS accept FROM available LEFT JOIN f ON available.month = f.month) SELECT month, ROUND(IFNULL(accept/available, 0)*100, 2) AS working_percentage FROM final ORDER BY month
WITH recursive cte AS (SELECT 1 AS month UNION ALL SELECT month + 1 AS month FROM cte WHERE month < 12), driver_tbl AS (SELECT CASE WHEN YEAR(join_date) < 2020 THEN 1 ELSE MONTH(join_date) END AS month, COUNT(driver_id) AS driver_nums FROM Drivers WHERE YEAR(join_date) <= 2020 GROUP BY 1), ride_tbl AS (SELECT MONTH(requested_at) AS month, COUNT(DISTINCT a.driver_id) AS accepted_nums FROM Rides r JOIN AcceptedRides a ON r.ride_id = a.ride_id WHERE YEAR(requested_at) = 2020 GROUP BY 1) SELECT c.month, ROUND(IFNULL(accepted_nums / SUM(driver_nums) OVER(ORDER BY month), 0) * 100, 2) AS working_percentage FROM cte c LEFT JOIN driver_tbl d ON c.month = d.month LEFT JOIN ride_tbl r ON c.month = r.month
WITH recursive cte_count(month) AS ( select cast('2020-01-01' as date) UNION ALL SELECT date_add(month,interval 1 month) FROM cte_count WHERE date_add(month,interval 1 month) <= '2020-12-31' ) select month(tmp4.month) as month, round(coalesce(coalesce(tmp5.accepted_drivers,0)*100.0/tmp4.active_drivers,0),2) as working_percentage from (select month, active_drivers from (select month, sum(active_drivers ) over(order by month asc) as active_drivers from (select last_day(cte_count.month) as month, tmp1.active_drivers from cte_count left join (select last_day(join_date) as month, count(driver_id) as active_drivers from drivers where last_day(join_date) BETWEEN '2020-01-01' AND '2020-12-31' group by last_day(join_date) ) as tmp1 on last_day(cte_count.month) = tmp1.month UNION ALL select cast('2019-12-31' as date) as month, count(*) from Drivers where join_date <= '2019-12-31') as tmp2) as tmp3 where month >= '2020-01-01') as tmp4 left join (select last_day(r.requested_at) as month, count(distinct d.driver_id) as accepted_drivers from AcceptedRides as a join drivers as d on d.driver_id = a.driver_id join rides as r on r.ride_id = a.ride_id where last_day(r.requested_at) <= '2020-12-31' group by last_day(r.requested_at) ) as tmp5 on tmp4.month = tmp5.month
WITH recursive month_tbl AS (SELECT 1 AS month UNION ALL SELECT month + 1 AS month FROM month_tbl WHERE month < 12), driver_tbl AS (SELECT CASE WHEN YEAR(join_date) = 2019 THEN 1 ELSE MONTH(join_date) END AS month, COUNT(driver_id) AS driver_nums FROM Drivers WHERE YEAR(join_date) < 2021 GROUP BY 1), ride_tbl AS (SELECT MONTH(requested_at) AS month, COUNT(DISTINCT driver_id) AS ride_nums FROM Rides r JOIN AcceptedRides a ON r.ride_id = a.ride_id WHERE YEAR(requested_at) = 2020 GROUP BY 1) SELECT m.month AS month, ROUND(IFNULL((ride_nums / SUM(driver_nums) OVER(ORDER BY month)), 0) * 100, 2) AS working_percentage FROM month_tbl m LEFT JOIN driver_tbl d ON m.month = d.month LEFT JOIN ride_tbl r ON m.month = r.month
WITH recursive s1 as ( select 1 as month union all select month + 1 from s1 where month < 12 ) , s2a as ( select (case when year(join_date) < 2020 then 1 when year(join_date) = 2020 then month(join_date) else 0 end) as month, count(*) c1 from Drivers where year(join_date)<=2020 group by 1 ), s2b as ( select s1.month, sum(c1) OVER(ORDER BY s1.month rows between unbounded preceding and current row) as drivers_available from s1 left join s2a on s1.month = s2a.month ) , s3 as ( select month(requested_at) as month , count(distinct driver_id) as accepted_rides from Rides r join AcceptedRides a on r.ride_id = a.ride_id where year(requested_at)=2020 group by 1 ) select s2b.month, round(coalesce(s3.accepted_rides/s2b.drivers_available,0) * 100,2) as working_percentage from s2b left join s3 on s2b.month = s3.month
WITH recursive t(Month) AS (SELECT 1 AS Month UNION ALL SELECT Month+1 FROM t WHERE Month<12 ) SELECT t.month, CASE WHEN COUNT(distinct x.driver_id)+0.00 = 0.00 OR COUNT(DISTINCT d.Driver_id)+0.00=0.00 THEN 0.00 ELSE ROUND((COUNT(distinct x.driver_id)+0.00)*100 /(COUNT(DISTINCT d.Driver_id)+0.00),2) END as 'Working_percentage' FROM t LEFT JOIN Drivers d ON YEAR(d.join_date) < 2020 OR (MONTH(d.join_Date)<=t.month AND YEAR(d.JOIN_DATE)<=2020) LEFT JOIN (SELECT a.driver_id,r.requested_at FROM Rides r INNER JOIN acceptedrides a ON a.ride_id=r.ride_id WHERE year(r.requested_at)=2020 )x ON t.Month=Month(x.requested_at) GROUP BY t.month ORDER BY t.month
WITH recursive t1 AS ( SELECT MONTH(requested_at) AS m, COUNT(DISTINCT driver_id) AS c FROM Rides a JOIN AcceptedRides b ON a.ride_id = b.ride_id WHERE requested_at between "2020-01-01" and "2020-12-31" GROUP BY MONTH(requested_at) ), t2 AS ( SELECT 1 AS m UNION ALL SELECT m+1 AS m FROM t2 WHERE m < 12 ), t3 AS ( SELECT m, SUM( CASE WHEN (YEAR(join_date)<=2019) OR (YEAR(join_date)=2020 AND MONTH(join_date)<=m) THEN 1 ELSE 0 END ) AS available_drivers FROM t2 a JOIN Drivers b GROUP BY a.m ), t4 AS ( SELECT t2.m, COALESCE(t1.c,0) AS c FROM t2 LEFT JOIN t1 ON t2.m = t1.m ) SELECT t3.m as month, CASE WHEN t3.available_drivers = 0 THEN 0 ELSE ROUND(t4.c * 100 / t3.available_drivers, 2) END AS working_percentage FROM t3 JOIN t4 ON t3.m = t4.m
WITH recursive t1 aS ( SELECT MONTH(requested_at) as m, COUNT(distinct driver_id) as c FROM rides a JOIN acceptedrides b ON a.ride_id = b.ride_id WHERE requested_at between "2020-01-01" and "2020-12-31" GROUP BY MONTH(requested_at) ), t2 as ( select 1 as m union all select m+1 as m from t2 where m < 12 ) , t3 as ( SELECT m, SUM( CASE WHEN (YEAR(join_date) <= 2019) OR (YEAR(join_date) = 2020 and MONTH(join_date) <= m) THEN 1 ELSE 0 END ) as available_drivers FROM t2 a JOIN drivers b GROUP BY a.m ), t4 as ( SELECT t2.m, COALESCE(t1.c,0) as c FROM t2 LEFT JOIN t1 oN t2.m = t1.m ) select t3.m as month, CASE WHEN t3.available_drivers = 0 THEN 0 ELSE ROUND(t4.c * 100 / t3.available_drivers, 2) END as working_percentage from t3 join t4 on t3.m = t4.m
WITH working_drivers_by_month AS (SELECT MONTH(R.requested_at) AS month, COUNT(DISTINCT A.driver_id) AS wd FROM Rides R JOIN AcceptedRides A ON R.ride_id = A.ride_id WHERE YEAR(R.requested_at)=2020 GROUP BY month), month AS (SELECT 1 AS month UNION ALL SELECT 2 AS month UNION ALL SELECT 3 AS month UNION ALL SELECT 4 AS month UNION ALL SELECT 5 AS month UNION ALL SELECT 6 AS month UNION ALL SELECT 7 AS month UNION ALL SELECT 8 AS month UNION ALL SELECT 9 AS month UNION ALL SELECT 10 AS month UNION ALL SELECT 11 AS month UNION ALL SELECT 12 AS month), active_drivers_by_month AS (SELECT CASE WHEN YEAR(join_date)<2020 THEN 1 ELSE MONTH(join_date) END AS month, COUNT(driver_id) AS ad FROM Drivers WHERE YEAR(join_date)<=2020 GROUP BY month) SELECT M.month, ROUND(IFNULL(IFNULL(W.wd,0)/(SUM(IFNULL(A.ad,0)) OVER(ORDER BY M.month))*100,0),2) AS working_percentage FROM Month M LEFT JOIN working_drivers_by_month W ON W.month = M.month LEFT JOIN active_drivers_by_month A ON A.month = M.month
With RECURSIVE month as ( SELECT 1 as m UNION SELECT m + 1 FROM month WHERE m < 12), ad as ( SELECT driver_id, CASE WHEN join_date <= '2020-1-1' THEN 1 ELSE month(join_date) END as join_month FROM Drivers WHERE join_date < '2021-1-1'), ar as ( SELECT month(requested_at) as m, COUNT(distinct driver_id) as accepted_rides FROM Rides R JOIN AcceptedRides ar ON r.ride_id = ar.ride_id WHERE year(requested_at) = '2020' GROUP BY 1 ) SELECT DISTINCT month.m as month, ROUND(IFNULL(100.0*accepted_rides/COUNT(ad.driver_id), 0),2) AS working_percentage FROM month LEFT JOIN ad ON month.m >= ad.join_month LEFT JOIN ar ON month.m = ar.m GROUP BY 1 ORDER BY 1
With Recursive CET as (select 1 as month UNION ALL select 1+month as month from CET where 1+month<=12), CET2 as (select sum(case when driver_id is not null then 1 else 0 end) as driver_count, CET.month from CET left join (select *, month(join_date) as month from Drivers where year(join_date)=2020)d on d.month=CET.month group by CET.month UNION ALL SELECT count(driver_id) as driver_count, 0 as month from Drivers where year(join_date)<2020), CET3 as (SELECT count(distinct driver_id) as working_driver, month(requested_at) as month from AcceptedRides a1 left join Rides a2 on a1.ride_id=a2.ride_id where year(requested_at)=2020 group by month(requested_at)) SELECT b1.month, round(coalesce(working_driver/driver_count*100,0),2) as working_percentage from (SELECT sum(driver_count) over(order by month) as driver_count, month from CET2)b1 left join CET3 on b1.month=CET3.month where b1.month!=0
With month As (Select 1 As month Union Select 2 As month Union Select 3 As month Union Select 4 As month Union Select 5 As month Union Select 6 As month Union Select 7 As month Union Select 8 As month Union Select 9 As month Union Select 10 As month Union Select 11 As month Union Select 12 As month) Select d1.month, Round(ifnull(d3.accept_ride/d2.available_driver,0)*100,2) as working_percentage From month as d1 Left Join (Select a.month, count(Distinct b.driver_id) as available_driver From month as a Join Drivers as b On b.join_date <= last_day(Date(Concat('2020-',a.month,'-1'))) Group By a.month) as d2 On d1.month = d2.month Left Join (Select a.month, count(Distinct c.driver_id) as accept_ride From month as a Join Rides as b On b.requested_at between Date(Concat('2020-',a.month,'-1')) And last_day(Date(Concat('2020-',a.month,'-1'))) Join AcceptedRides as c On b.ride_id = c.ride_id Group By a.month) as d3 On d1.month = d3.month Order By month ASC
With recursive cal as ( SELECT LEAST(MIN(join_date),DATE('2020-01-01')) jdate, YEAR(LEAST(MIN(join_date),DATE('2020-01-01'))) years, MONTH(LEAST(MIN(join_date),DATE('2020-01-01'))) months, DATE('2020-12-01') maxdate FROM drivers UNION ALL SELECT DATE_ADD(jdate, INTERVAL 1 MONTH) jdate, YEAR(DATE_ADD(jdate, INTERVAL 1 MONTH)) years, MONTH(DATE_ADD(jdate, INTERVAL 1 MONTH)) months, maxdate FROM cal WHERE jdate<maxdate ) , a as ( SELECT YEAR(join_date) years, MONTH(join_date) months, driver_id FROM Drivers WHERE join_date<DATE('2021-01-01') ) , b as( SELECT months, tot_av_drivers FROM( SELECT years, months, SUM(mt) OVER(ORDER BY years,months) tot_av_drivers FROM( SELECT years, months, COUNT(driver_id) mt FROM( SELECT c.years, c.months, driver_id FROM cal c LEFT JOIN a USING (years,months) )t1 GROUP BY 1,2 )t2 )t3 WHERE years>2019 ) ,c as( SELECT month(requested_at) months, count(DISTINCT AcceptedRides.driver_id) tot_accept_drivers FROM AcceptedRides JOIN Rides USING(ride_id) WHERE requested_at>DATE('2019-12-31') AND requested_at<=DATE('2020-12-31') GROUP BY 1 ) SELECT b.months month, round(100*ROUND(IF(tot_accept_drivers IS NULL, 0, tot_accept_drivers)/IF(tot_av_drivers=0,1,tot_av_drivers),4),5) working_percentage FROM B LEFT JOIN c USING (months)
select months_drivers.month, round(coalesce(100 * coalesce(total_active_drivers, 0) / total_drivers, 0), 2) as working_percentage from ( select month, count(driver_id) as total_drivers from Drivers as a right join ( select "2020-1-31" as day, 1 as month union select "2020-2-29", 2 union select "2020-3-31", 3 union select "2020-4-30", 4 union select "2020-5-31", 5 union select "2020-6-30", 6 union select "2020-7-31", 7 union select "2020-8-31", 8 union select "2020-9-30", 9 union select "2020-10-31", 10 union select "2020-11-30", 11 union select "2020-12-31", 12 ) as months on join_date <= day group by month ) months_drivers left join ( select month, count(distinct b.driver_id) as total_active_drivers from ( select ride_id, cast(substr(requested_at, 6, 2) as unsigned) as month from Rides where substr(requested_at, 1, 4) = "2020" ) month_rides join AcceptedRides as b on month_rides.ride_id = b.ride_id group by month ) months_active_drivers on months_drivers.month = months_active_drivers.month
select t.month, ROUND(COALESCE(count(distinct rides.driver_id) / count(distinct d.driver_id) * 100.0, 0), 2) working_percentage from ( (select 1 as month) union (select 2 as month) union (select 3 as month) union (select 4 as month) union (select 5 as month) union (select 6 as month) union (select 7 as month) union (select 8 as month) union (select 9 as month) union (select 10 as month) union (select 11 as month) union (select 12 as month) ) t left join ( select driver_id, (case when year(join_date)=2019 then '1' else month(join_date) end) `month` from Drivers where year(join_date)<=2020 ) d on d.month <= t.month left join ( select month(requested_at) as `month`, a.ride_id, a.driver_id from AcceptedRides a join Rides r on r.ride_id = a.ride_id where year(requested_at)=2020 ) rides on t.month = rides.month group by t.month order by t.month
select t1.month, ifnull(round(100 * count(distinct t3.driver_id) / count(distinct t2.driver_id), 2), 0) as working_percentage from ( select 1 as month union select 2 as month union select 3 as month union select 4 as month union select 5 as month union select 6 as month union select 7 as month union select 8 as month union select 9 as month union select 10 as month union select 11 as month union select 12 as month ) t1 left join ( select driver_id, case when year(join_date) < 2020 then 1 else month(join_date) end as month from drivers where year(join_date) <= 2020 ) t2 on t2.month <= t1.month left join ( select t1.driver_id, month(t2.requested_at) as month from acceptedrides t1 join rides t2 on t2.ride_id = t1.ride_id where year(requested_at) = 2020 ) t3 on t3.month = t1.month group by t1.month
select t1.month, round(ifnull(t2.active_drivers*100/t1.available_drivers,0),2) as working_percentage from (select m.month, count(d.driver_id) as available_drivers from ((select 1 as month) union (select 2 as month) union (select 3 as month) union (select 4 as month) union (select 5 as month) union (select 6 as month) union (select 7 as month) union (select 8 as month) union (select 9 as month) union (select 10 as month) union (select 11 as month) union (select 12 as month)) as m left join drivers as d on d.join_date <= last_day(concat('2020-',m.month,'-1')) group by m.month) as t1 left join (select month(r.requested_at) as month, count(distinct driver_id) as active_drivers from rides as r join acceptedrides as ar on r.ride_id=ar.ride_id and year(r.requested_at)=2020 group by month(r.requested_at)) as t2 on t1.month=t2.month order by t1.month
select tmp2.month, round(ifnull(count_tmp3*100/count_tmp2, 0), 2) working_percentage from ( select month, sum(ifnull(count_tmp1, 0)) over(order by month) + ( select count(d1.driver_id) from drivers d1 where year(join_date)<2020 ) as count_tmp2 from ((select 1 as month) union (select 2 as month) union (select 3 as month) union (select 4 as month) union (select 5 as month) union (select 6 as month) union (select 7 as month) union (select 8 as month) union (select 9 as month) union (select 10 as month) union (select 11 as month) union (select 12 as month)) month1 left join ( select month(join_date) month_tmp1, count(distinct driver_id) count_tmp1 from drivers where year(join_date) = 2020 group by month(join_date) ) tmp1 on month = month_tmp1 ) tmp2 left join ( select month(requested_at) month, count(distinct driver_id) count_tmp3 from AcceptedRides join rides on AcceptedRides.ride_id = rides.ride_id and year(requested_at) = 2020 group by month(requested_at) ) tmp3 on tmp2.month=tmp3.month
with RECURSIVE a as ( select distinct '2020-01-01' as m_start from drivers union all select date_add(m_start, interval +1 month) from a where m_start < '2020-12-01' ), b as( select * , if(date_format(join_date,'%Y-%m') <= date_format(m_start,'%Y-%m'), 1, 0) as joined from drivers cross join a), t1 as ( select m_start , sum(joined) as num_avail_drivers from b group by m_start), t2 as ( select m_start, count(distinct driver_id) as num_active_drivers from( select ar.driver_id, DATE_SUB(r.requested_at, interval dayofmonth(r.requested_at)-1 day) as m_start from rides as r right join acceptedrides as ar on r.ride_id = ar.ride_id) as temp group by m_start) select month, if(working_percentage is null, 0, working_percentage) as working_percentage from( select month(t1.m_start) as month , round(100*if(t2.num_active_drivers is null, 0, t2.num_active_drivers)/ if(t1.num_avail_drivers is null, 0, t1.num_avail_drivers), 2) as working_percentage from t1 left join t2 on t1.m_start=t2.m_start order by t1.m_start asc) as temp
with RECURSIVE active_driver as ( select driver_id, join_date, join_date as dur from drivers union select driver_id, join_date, date_add(dur, interval 1 MONTH) dur from active_driver where dur<date_add(last_day(curdate()), interval 1 MONTH ) ) , datedim as ( select 1 as m union select m+1 from datedim where m<12 ) select m as month, round(coalesce(wd.working_driver,0)*100/coalesce(ad.monthly_ad,1),2) as working_percentage from datedim dd left outer join ( select month(r.requested_at) month, count(distinct ar.driver_id) working_driver from acceptedrides ar inner join rides r on r.ride_id=ar.ride_id where year(r.requested_at)=2020 group by month(r.requested_at) )wd on wd.month=dd.m left outer join ( select month(dur) as month, count(distinct driver_id) monthly_ad from active_driver where year(dur)=2020 group by month(dur) )ad on ad.month=dd.m
with RECURSIVE months as ( select 1 month union select month + 1 as month from months where month < 12 ), available_drivers as ( select months.month, ifnull(max(t1.active_driver) over (order by month),0) as active_driver from months left join (select month(join_date) as month, count(driver_id) over (order by join_date rows unbounded preceding) as active_driver from drivers where year(join_date) <= 2020) t1 on t1.month = months.month ), working_drivers as ( select month(requested_at) as month, count(distinct driver_id) as working_driver from Rides R join AcceptedRides A on R.ride_id = A.ride_id where year(requested_at) = 2020 group by month(requested_at)) select m.month, ifnull(round(working_driver/active_driver*100,2),0) as working_percentage from months m left join available_drivers a on a.month = m.month left join working_drivers w on w.month = m.month group by m.month
with accept as ( select month(requested_at) as month, count(distinct a.driver_id) as cnt from Rides r JOIN AcceptedRides a using (ride_id) where year(requested_at) = 2020 group by 1 ), allM as ( select 1 as month UNION ALL select 2 as month UNION ALL select 3 as month UNION ALL select 4 as month UNION ALL select 5 as month UNION ALL select 6 as month UNION ALL select 7 as month UNION ALL select 8 as month UNION ALL select 9 as month UNION ALL select 10 as month UNION ALL select 11 as month UNION ALL select 12 as month ), driver_num as ( select distinct month, count(driver_id) over(order by month) as cnt2 from (select driver_id, if(join_date < '2020-01-01', month('2020-01-01'), month(join_date)) as join_date from Drivers where join_date <= '2020-12-31') a RIGHT JOIN allM m on month = join_date ) select d.month, round(ifnull(cnt/cnt2*100,0), 2) as working_percentage from driver_num d LEFT JOIN accept a using (month) order by d.month asc
with calendar as ( select 1 as month union all select 2 as month union all select 3 as month union all select 4 as month union all select 5 as month union all select 6 as month union all select 7 as month union all select 8 as month union all select 9 as month union all select 10 as month union all select 11 as month union all select 12 as month ), avail_driver_tr1 as ( select join_date, count(driver_id) over (order by join_date asc) as driver_count from Drivers ), avail_driver_tr2 as ( select MONTH(join_date) as month, max(driver_count) as driver_count from avail_driver_tr1 where YEAR(join_date) = 2020 group by YEAR(join_date), MONTH(join_date) ), avail_driver_tr3 as ( select c.month as month, max(ad.driver_count) as driver_count from Calendar c left join avail_driver_tr2 ad on c.month >= ad.month group by c.month ), working_driver_tr1 as ( select MONTH(r.requested_at) as month, count(distinct driver_id) as driver_count from Rides r join AcceptedRides ar on r.ride_id = ar.ride_id where YEAR(r.requested_at) = 2020 group by MONTH(r.requested_at) ) select c.month as month, if(ad.driver_count is null, 0.00, round(ifnull(wd.driver_count, 0) * 100 / ad.driver_count, 2)) as working_percentage from calendar c join avail_driver_tr3 ad on c.month = ad.month left join working_driver_tr1 wd on c.month = wd.month
with cte as ( select month(join_date) as month, count(driver_id) over (order by join_date) as rnk from drivers where year(join_date) <= 2020), cte2 as (select month(requested_at) as month, count(distinct driver_id) as cnt from Rides x inner join AcceptedRides y on x.ride_id = y.ride_id where year(requested_at ) = 2020 group by 1), cte3 as( with recursive cte as ( select 1 as month union all select month+1 as month from cte where month <= 11 ) select * from cte ) select month, round(ifnull(activ*100/num_drivers,0),2) as working_percentage from(select x.month, max(ifnull(y.rnk,0)) as num_drivers, max(ifnull(z.cnt,0)) as activ from cte3 x left join cte y on x.month >= y.month left join cte2 z on x.month = z.month group by 1) a
with cte as ( select month(requested_at) as month,convert(count(distinct driver_id),decimal(12,6) )as adriver from Rides r inner join AcceptedRides ar on r. ride_id = ar.ride_id where left(requested_at,4) = 2020 group by month(requested_at) ) , ctem as ( select convert('2020-1-31', date) as dt union all select '2020-2-29' union all select '2020-3-31' union all select '2020-4-30' union all select '2020-5-31' union all select '2020-6-30' union all select '2020-7-31' union all select '2020-8-31' union all select '2020-9-30' union all select '2020-10-31' union all select '2020-11-30' union all select '2020-12-31' ) , cte3 as ( select month(c.dt) as month, ifnull( nullif( count(d.driver_id) ,0) ,100) as alldrivers from ctem c left join Drivers d on c.dt >= d.join_date group by c.dt) select c3.month,round(ifnull(adriver,0)/alldrivers*100,2) as working_percentage from cte3 c3 left join cte c1 on c3.month = c1.month order by 1
with cte as ( select sum(Jan) as Jan, sum(Feb) as Feb, sum(Mar) as Mar, sum(Apr) as Apr, sum(May) as May, sum(Jun) as Jun, sum(Jul) as Jul, sum(Aug) as Aug, sum(Sep) as Sep, sum(Oct) as Oct, sum(Nov) as Nov, sum(Dece) as Dece from (select *, case when join_date<='2020-01-31' then 1 else 0 end as Jan, case when join_date<='2020-02-29' then 1 else 0 end as Feb, case when join_date<='2020-03-31' then 1 else 0 end as Mar, case when join_date<='2020-04-30' then 1 else 0 end as Apr, case when join_date<='2020-05-31' then 1 else 0 end as May, case when join_date<='2020-06-30' then 1 else 0 end as Jun, case when join_date<='2020-07-31' then 1 else 0 end as Jul, case when join_date<='2020-08-31' then 1 else 0 end as Aug, case when join_date<='2020-09-30' then 1 else 0 end as Sep, case when join_date<='2020-10-31' then 1 else 0 end as Oct, case when join_date<='2020-11-30' then 1 else 0 end as Nov, case when join_date<='2020-12-31' then 1 else 0 end as Dece from Drivers) as a ), cte1 as ( select 1 as month, Jan as active_driver from cte union all select 2 as month, Feb as active_driver from cte union all select 3 as month, Mar as active_driver from cte union all select 4 as month, Apr as active_driver from cte union all select 5 as month, May as active_driver from cte union all select 6 as month, Jun as active_driver from cte union all select 7 as month, Jul as active_driver from cte union all select 8 as month, Aug as active_driver from cte union all select 9 as month, Sep as active_driver from cte union all select 10 as month, Oct as active_driver from cte union all select 11 as month, Nov as active_driver from cte union all select 12 as month, Dece as active_driver from cte ), cte2 as ( select month, count(distinct driver_id) as activer_driver_w_rides from (select *, month(requested_at) as month from (select A.*, B.requested_at from AcceptedRides as A left join Rides as B on A.ride_id = B.ride_id) as C where requested_at >='2020-01-01' and requested_at<='2020-12-31') as D group by month ) select month, round(ifnull(activer_driver_w_rides/active_driver*100,0),2) as working_percentage from (select AA.*, ifnull(BB.activer_driver_w_rides,0) as activer_driver_w_rides from cte1 as AA left join cte2 as BB on AA.month = BB.month) as CC order by month
with cte1 as (select distinct month(r.requested_at) as requested_month,d.driver_id from AcceptedRides a inner join Rides r on a.ride_id = r.ride_id inner join Drivers d on d.driver_id = a.driver_id where year(join_date) <= '2020' and year(requested_at) > '2019' and year(requested_at) < '2021' order by 1), cte_recur as ( WITH RECURSIVE tmp AS ( SELECT 1 as id UNION ALL SELECT id + 1 AS id FROM tmp WHERE id < 12 ) SELECT * FROM tmp ), cte2 as (select month,count(*) as driver_cnt from ( select month(new_joindate) as month,driver_id from (select driver_id, case when year(join_date) < '2020' then '2020-1-1' else join_date end as new_joindate from drivers where year(join_date) <= '2020') t) t2 group by month), active_driver_month as (select month,sum(driver_cnt) over (order by month) as active_driver from( select id as 'month',ifnull(driver_cnt,0) as driver_cnt from cte2 right join cte_recur on cte2.month = cte_recur.id) t), accept_driver_month as (select cte_recur.id as month,ifnull(driver_accept_cnt,0) as driver_accept_cnt from (select requested_month,count(driver_id) as driver_accept_cnt from cte1 group by requested_month) r1 right join cte_recur on r1.requested_month = cte_recur.id) select acc.month, round(ifnull(driver_accept_cnt/active_driver*100,0),2) as working_percentage from accept_driver_month acc inner join active_driver_month act on acc.month = act.month order by 1
with dates as ( SELECT 1 AS MONTH UNION SELECT 2 AS MONTH UNION SELECT 3 AS MONTH UNION SELECT 4 AS MONTH UNION SELECT 5 AS MONTH UNION SELECT 6 AS MONTH UNION SELECT 7 AS MONTH UNION SELECT 8 AS MONTH UNION SELECT 9 AS MONTH UNION SELECT 10 AS MONTH UNION SELECT 11 AS MONTH UNION SELECT 12 AS MONTH ), join_year_dates AS ( select distinct (drivers_inner.year) as year, coalesce(dates.month,drivers_inner.month) as month from (select YEAR(join_date) as year, MONTH(join_date) as month from drivers ) drivers_inner join dates on 1=1 ), driver_cnt as ( select join_year_dates.year as year, join_year_dates.month as month, coalesce(driver_cnt_inner.joined_drivers_per_month,0.0) as joined_drivers from join_year_dates left join (select YEAR(drivers.join_date) as year, MONTH(drivers.join_date) as month, count(*) as joined_drivers_per_month from drivers group by year, month )driver_cnt_inner on join_year_dates.year=driver_cnt_inner.year and join_year_dates.month=driver_cnt_inner.month ) select total_accepted_rides.month as month, round(case when active_drivers_per_month.current_active_drivers = 0 then 0.00 else coalesce((total_accepted_rides.driver_count*100.0)/active_drivers_per_month.current_active_drivers, 0.0) end,2) as working_percentage from ( select dates.month, count(x.driver_id) as driver_count FROM dates left join (select distinct MONTH(r.requested_at) as month, driver_id from ( select * from rides where YEAR(requested_at) >= 2020 and YEAR(requested_at) < 2021 ) r join AcceptedRides ar on r.ride_id = ar.ride_id )x on x.month = dates.month group by month ) total_accepted_rides join ( select dates.month as month, coalesce(current_active_drivers,0.0) as current_active_drivers from dates left join ( select * from (select x1.year as year, x1.month as month, x1.joined_drivers as joined_drivers, sum(x1.joined_drivers)over(order by x1.year,x1.month) AS current_active_drivers from (select * from driver_cnt where year < 2021 order by year, month)x1 )x where year >= 2020 ) driver_cnt on driver_cnt.month = dates.month )active_drivers_per_month on active_drivers_per_month.month = total_accepted_rides.month order by month
with dates as ( SELECT 1 AS MONTH UNION SELECT 2 AS MONTH UNION SELECT 3 AS MONTH UNION SELECT 4 AS MONTH UNION SELECT 5 AS MONTH UNION SELECT 6 AS MONTH UNION SELECT 7 AS MONTH UNION SELECT 8 AS MONTH UNION SELECT 9 AS MONTH UNION SELECT 10 AS MONTH UNION SELECT 11 AS MONTH UNION SELECT 12 AS MONTH ), join_year_dates AS ( select distinct (drivers_inner.year) as year, coalesce(dates.month,drivers_inner.month) as month from (select YEAR(join_date) as year, MONTH(join_date) as month from drivers ) drivers_inner join dates on 1=1 ), driver_cnt as ( select join_year_dates.year as year, join_year_dates.month as month, coalesce(driver_cnt_inner.joined_drivers_per_month,0.0) as joined_drivers from join_year_dates left join (select YEAR(drivers.join_date) as year, MONTH(drivers.join_date) as month, count(*) as joined_drivers_per_month from drivers group by year, month )driver_cnt_inner on join_year_dates.year=driver_cnt_inner.year and join_year_dates.month=driver_cnt_inner.month ), cumulative_total_driver_cnt AS ( select x1.year as year, x1.month as month, x1.joined_drivers as joined_drivers, sum(x1.joined_drivers)over(order by x1.year,x1.month) AS current_active_drivers from driver_cnt x1 ) select total_accepted_rides.month as month, round(case when active_drivers_per_month.current_active_drivers = 0 then 0.00 else coalesce((total_accepted_rides.driver_count*100.0)/active_drivers_per_month.current_active_drivers, 0.0) end ,2) as working_percentage from ( select dates.month, count(x.driver_id) as driver_count FROM dates left join (select distinct MONTH(r.requested_at) as month, driver_id from ( select * from rides where YEAR(requested_at) >= 2020 and YEAR(requested_at) < 2021 ) r join AcceptedRides ar on r.ride_id = ar.ride_id )x on x.month = dates.month group by month ) total_accepted_rides join ( select * from cumulative_total_driver_cnt x where year >= 2020 and year < 2021 ) active_drivers_per_month on active_drivers_per_month.month = total_accepted_rides.month order by month
with end_month(d) as ( select date('2020-01-31') union select date('2020-02-29') union select date('2020-03-31') union select date('2020-04-30') union select date('2020-05-31') union select date('2020-06-30') union select date('2020-07-31') union select date('2020-08-31') union select date('2020-09-30') union select date('2020-10-31') union select date('2020-11-30') union select date('2020-12-31') ) select a.month, ifnull(round(100*b.ct/a.ct,2),0) as working_percentage from ( select month(d) month ,sum(case when driver_id is not null then 1 else 0 end) ct from end_month e left join Drivers d on e.d >= d.join_date group by month(d) ) a left join( select month(requested_at) month, count(distinct a.driver_id) ct from Rides r, AcceptedRides a, Drivers d where d.driver_id = a.driver_id and r.ride_id = a.ride_id and r.requested_at >= d.join_date and year(r.requested_at) = 2020 and year(d.join_date) <= 2020 group by month(requested_at) ) b on a.month = b.month order by a.month
with m(month) as ( select '2020-01' union all select '2020-02' union all select '2020-03' union all select '2020-04' union all select '2020-05' union all select '2020-06' union all select '2020-07' union all select '2020-08' union all select '2020-09' union all select '2020-10' union all select '2020-11' union all select '2020-12' ) , num_drivers_month as ( select left(join_date, 7) as join_month, count(*) as drivers_avail_month from drivers as d group by left(join_date, 7) ) , num_drivers as ( select join_month, sum(drivers_avail_month) over(order by join_month) as drivers_avail from num_drivers_month ) , num_acc as ( select left(r.requested_at, 7) as request_month, count(distinct ar.driver_id) as drivers_accepted from rides as r inner join acceptedrides as ar on r.ride_id = ar.ride_id group by left(r.requested_at, 7) ) , driver_months as ( select m.month, ( select max(join_month) as month from num_drivers where join_month <= m.month ) as driver_join_month from m ) select cast(right(dm.month, 2) as unsigned) as month , round(case when nd.drivers_avail > 0 then coalesce(na.drivers_accepted, 0) / nd.drivers_avail * 100. else 0 end, 2) as working_percentage from driver_months as dm left join num_drivers as nd on dm.driver_join_month = nd.join_month left join num_acc as na on dm.month = na.request_month order by dm.month
with months as ( select 1 as month UNION select 2 as month UNION select 3 as month UNION select 4 as month UNION select 5 as month UNION select 6 as month UNION select 7 as month UNION select 8 as month UNION select 9 as month UNION select 10 as month UNION select 11 as month UNION select 12 as month ), drivers_joined as (select month ,count(distinct driver_id) as n_drivers_joined from months a left join (select * from Drivers where YEAR(join_date)<=2020) b on a.month=(case when YEAR(join_date)<2020 then 1 else Month(b.join_date) end) group by 1 ), drivers_accepted as ( select Month(requested_at) as month,count(distinct driver_id) as n_drivers_active from Rides a left join AcceptedRides b on a.ride_id=b.ride_id where Year(a.requested_at)=2020 group by 1 ) select a.month, round(coalesce(n_drivers_active/sum(n_drivers_joined) over(order by month ASC)*100,0),2) as working_percentage from drivers_joined a left join drivers_accepted b on a.month=b.month
with months as ( select year(join_date) as year, month(join_date) as month, count(1) as joined_that_month from Drivers group by year(join_date), month(join_date) ), ride_months as ( SELECT 1 AS ride_month UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8 UNION ALL SELECT 9 UNION ALL SELECT 10 UNION ALL SELECT 11 UNION ALL SELECT 12 ), active_drivers as ( select month(requested_at) as month, count(distinct driver_id) as active_count from AcceptedRides ar join Rides r using (ride_id) where year(requested_at) = 2020 group by month(requested_at) ) select ride_months.ride_month as month, ifnull(round(100 * (active_drivers.active_count) / sum(months.joined_that_month), 2),0) as working_percentage from ride_months left join months on (ride_months.ride_month >= months.month and months.year = 2020) or months.year < 2020 left join active_drivers on ride_months.ride_month = active_drivers.month group by ride_months.ride_month
with months as( select 1 as month union select 2 as month union select 3 as month union select 4 as month union select 5 as month union select 6 as month union select 7 as month union select 8 as month union select 9 as month union select 10 as month union select 11 as month union select 12 as month) , drivers_join as( select driver_id, extract(month from join_date) month_j, extract(year from join_date) year_j from drivers ), base as (select driver_id, extract(month from requested_at) month_ride from rides ri inner join AcceptedRides ac on ri.ride_id = ac.ride_id where extract(year from requested_at) = 2020) select months.month, coalesce(round(count( distinct base.driver_id)/count(distinct dj.driver_id)*100,2),0) working_percentage from months left join drivers_join dj on 2020*100+months.month >= dj.year_j*100+dj.month_j left join base on dj.driver_id and base.driver_id and months.month = month_ride group by 1 order by month asc
with months_2020 as ( select '2020-01-31' as dt UNION select '2020-02-29' as dt UNION select '2020-03-31' as dt UNION select '2020-04-30' as dt UNION select '2020-05-31' as dt UNION select '2020-06-30' as dt UNION select '2020-07-31' as dt UNION select '2020-08-31' as dt UNION select '2020-09-30' as dt UNION select '2020-10-31' as dt UNION select '2020-11-30' as dt UNION select '2020-12-31' as dt ) ,available_drivers as ( select month(m.dt) as month, count(distinct driver_id) as num_drivers from months_2020 m JOIN Drivers d on d.join_date <= m.dt group by month(m.dt) ) ,working_drivers as ( select month(r.requested_at) as month, count(distinct driver_id) as num_drivers from AcceptedRides a JOIN Rides r on a.ride_id = r.ride_id where year(r.requested_at) = 2020 group by month(r.requested_at) ) select month(m.dt) as month, COALESCE(case when ad.num_drivers = 0 then 0.00 else round(100*wd.num_drivers/ad.num_drivers,2) end,0) as working_percentage from months_2020 m LEFT JOIN working_drivers wd on month(m.dt) = wd.month LEFT JOIN available_drivers ad on month(m.dt) = ad.month order by month(m.dt)
with months_table as ( SELECT 1 as fy_month UNION SELECT 2 as fy_month UNION SELECT 3 as fy_month UNION SELECT 4 as fy_month UNION SELECT 5 as fy_month UNION SELECT 6 as fy_month UNION SELECT 7 as fy_month UNION SELECT 8 as fy_month UNION SELECT 9 as fy_month UNION SELECT 10 as fy_month UNION SELECT 11 as fy_month UNION SELECT 12 as fy_month ) , accepted_drivers as ( Select month(r.requested_at) as fy_month , count( distinct ar.driver_id) as no_accepted_drivers FROM AcceptedRides AR inner join Rides r on ar.ride_id = r.ride_id AND year(r.requested_at) = 2020 group by month(r.requested_at) ) , available_drivers as ( SELECT agg.fy_month , COUNT( distinct agg.driver_id) as active_drivers FROM ( Select CASE WHEN extract(year from d.join_date) < 2020 then 1 else extract(month from d.join_date) END AS fy_month , driver_id FROM drivers d where extract(year from d.join_date) <= 2020 ) AGG group by agg.fy_month ) Select agg.month , IFNULL(ROUND( (no_accepted_drivers * 100)/active_drivers, 2 ),0) as working_percentage from ( SELECT mt.fy_month as "month" , IFNULL(SUM(ad.active_drivers), 0) AS active_drivers , IFNULL(ar.no_accepted_drivers, 0) AS no_accepted_drivers FROM months_table MT LEFT JOIN available_drivers ad ON mt.fy_month >= ad.fy_month LEFT JOIN accepted_drivers ar ON ar.fy_month = mt.fy_month group by mt.fy_month , IFNULL(ar.no_accepted_drivers,0) ) AGG order by "month"
with recursive 2020_m(m) as ( select 1 union all select m+1 from 2020_m where m<12 ), 2020_month as ( select m.m as month, ifnull(drv_cnt,0) as drv_cnt from 2020_m m left join (select case when join_date<"2020-01-01" then "01" else date_format(join_date,"%m") end as month, count(driver_id) as drv_cnt from Drivers where join_date<"2021-01-01" group by 1) d on m.m = d.month ), cur_drv as( select month, sum(drv_cnt) over(order by month) as cum_drv from 2020_month ) select c.month, round(ifnull(a.cnt_acc/c.cum_drv,0)*100,2) working_percentage from cur_drv c left join( select date_format(requested_at,"%m") as month, count(distinct driver_id) as cnt_acc from AcceptedRides a join Rides r using (ride_id) where requested_at<"2021-01-01" and requested_at>"2019-12-31" group by 1 ) a using (month)
with recursive CTE1 as ( select 1 as month union all select 1 + month from CTE1 where 1 + month <= 12 ), CTE2 as ( select driver_id, case when year(join_date) < 2020 then 1 else month(join_date) end as month from Drivers where year(join_date) <= 2020 ), CTE3 as ( select CTE1.month, count(CTE2.driver_id) over ( order by CTE1.month) as active_drivers from CTE1 left outer join CTE2 on CTE1.month = CTE2.month ), CTE4 as ( select month(R.requested_at) as month, A.driver_id from Rides as R, AcceptedRIdes as A where R.ride_id = A.ride_id and year(R.requested_at) = 2020 ), CTE5 as ( select CTE1.month, count(distinct CTE4.driver_id) as accepted_rides from CTE1 left outer join CTE4 on CTE1.month = CTE4.month group by CTE1.month ) select distinct CTE3.month, round(coalesce(100*CTE5.accepted_rides / CTE3.active_drivers,0),2) as working_percentage from CTE5, CTE3 where CTE5.month = CTE3.month
with recursive CTE1 as ( select 1 as month union all select 1 + month from CTE1 where 1 + month <= 12 ), CTE2 as ( select driver_id, case when year(join_date) < 2020 then 1 else month(join_date) end as month from Drivers where year(join_date) <= 2020 ), CTE3 as ( select CTE1.month, count(CTE2.driver_id) over (order by CTE1.month) as active_drivers from CTE1 left outer join CTE2 on CTE1.month = CTE2.month ), CTE4 as ( select month(R.requested_at) as month, A.driver_id from Rides as R, AcceptedRIdes as A where R.ride_id = A.ride_id and year(R.requested_at) = 2020 ), CTE5 as ( select CTE1.month, count(distinct CTE4.driver_id) as accepted_rides from CTE1 left outer join CTE4 on CTE1.month = CTE4.month group by CTE1.month ) select distinct CTE3.month, round(coalesce(100*CTE5.accepted_rides / CTE3.active_drivers,0),2) as working_percentage from CTE5, CTE3 where CTE5.month = CTE3.month
with recursive Month as ( select 1 as month union all select month+1 from Month where month < 12 ), monthly_drivers as ( select d.*, m.* from Month m, Drivers d where year(d.join_date) < 2020 or (year(d.join_date) = 2020 and month(d.join_date) <= m.month) ), monthly_avail_drivers as ( select m.month, coalesce(t2.num_avail_drivers, 0) as num_avail_drivers from ( select month, coalesce(count(driver_id), 0) as num_avail_drivers from monthly_drivers group by month ) t2 right join Month m on m.month = t2.month ), monthly_working_drivers as ( select Month.month, coalesce(count(distinct t2.driver_id), 0) as num_working_drivers from Month left join ( select a.driver_id, month(r.requested_at) as month from AcceptedRides a inner join Rides r on a.ride_id = r.ride_id where year(r.requested_at) = 2020 ) t2 on t2.month = Month.month group by Month.month ) select m1.month as month, coalesce(round(100*m2.num_working_drivers / m1.num_avail_drivers, 2), 0) as working_percentage from monthly_avail_drivers m1 join monthly_working_drivers m2 on m1.month = m2.month order by m1.month
with recursive a as( select 1 as m union all select m + 1 from a where m < 12), b as( select driver_id, case when join_date < '2020-01-01' then 0 else month(join_date) end as m from Drivers where join_date < '2021-01-01'), c as( select m, count(driver_id) as s from b where m = 0 union select m, count(driver_id) as s from b group by m), z as ( select 0 as m union all select m + 1 from z where m < 12), d as( select z.m, sum(ifnull(s, 0)) over(order by m asc) as s from c right join z on c.m = z.m), e as( select count(distinct ac.driver_id) as ri, month(requested_at) as m from Rides r join AcceptedRides ac on r.ride_id = ac.ride_id where r.requested_at between '2020-01-01' and '2020-12-31' group by month(requested_at)), f as( select a.m, ifnull(ri, 0) as ri from e right join a on e.m = a.m) select f.m as month, ifnull(round(100*f.ri/d.s, 2), 0.00) as working_percentage from f join d on f.m = d.m order by f.m asc
with recursive all_month as ( SELECT 1 month UNION ALL SELECT month+1 FROM all_month WHERE month<12 ), available_drivers as ( SELECT am.month , SUM(ifnull(drivers_avbl,0)) OVER ( ORDER BY am.month ASC) as avbl_drivers FROM all_month as am LEFT JOIN ( SELECT (CASE WHEN year(join_date)<2020 then 1 else month(join_date) end) join_month, COUNT(join_date) as drivers_avbl FROM Drivers WHERE year(join_date)<=2020 GROUP BY join_month ) as md ON am.month = md.join_month), monthly_active_drivers as ( SELECT month(requested_at) as month, count(distinct driver_id) as active_drivers FROM AcceptedRides as ar JOIN Rides as r ON ar.ride_id = r.ride_id WHERE YEAR(requested_at)=2020 GROUP BY month) SELECT ad.month , round(case when avbl_drivers=0 then 0 else (ifnull(active_drivers,0)/avbl_drivers)*100 end,2) as working_percentage FROM available_drivers as ad left join monthly_active_drivers as mad on ad.month = mad.month
with recursive all_months as ( select 1 as mon union select mon+1 as mon from all_months where mon+1<=12 ), available_drivers_monthly as ( with prep as ( select extract(month from join_date) as mon, extract(year from join_date) as year, count(distinct driver_id) as cnt from Drivers group by extract(month from join_date) , extract(year from join_date) ) select am.mon, coalesce(sum(p.cnt),0.0) as cnt from all_months am left join prep p on (p.year<2020 or (p.year=2020 and p.mon<=am.mon)) group by am.mon ), working_drivers_monthly as ( with prep as ( select extract(month from r.requested_at) as mon, count(distinct ar.driver_id) as cnt from AcceptedRides ar join Rides r on(ar.ride_id=r.ride_id) join Drivers d on(ar.driver_id=d.driver_id) where r.requested_at>='2020-01-01' and r.requested_at<='2020-12-31' group by extract(month from r.requested_at) ) select am.mon, coalesce(p.cnt,0.00) as cnt from all_months am left join prep p on(am.mon=p.mon) ) select adm.mon as month, coalesce(round(wdm.cnt*100.0/adm.cnt,2),0.00000) as working_percentage from available_drivers_monthly adm join working_drivers_monthly wdm on(adm.mon=wdm.mon)
with recursive all_months as ( select 1 as month union all select month+1 from all_months where month < 12 ), available_drivers as ( select month, sum(ct) over (order by month) as ct_available from (select a.month, count(b.driver_id) as ct from all_months a left join (select driver_id, case when join_date < '2020-01-01' then '2020-01-01' else join_date end as join_date from drivers where join_date <= '2020-12-31') b on a.month = date_format(b.join_date, '%m') group by a.month) c ), accepted_drivers as ( select a.month, b.ct as drivers_accepted_rides from all_months a left join (select date_format(r.requested_at, '%m') as month, count(distinct driver_id) as ct from acceptedrides ar inner join rides r using (ride_id) where requested_at between '2020-01-01' and '2020-12-31' group by date_format(r.requested_at, '%m')) b on a.month = b.month ) select ac.month, case when ac.drivers_accepted_rides is null then 0 else round((ac.drivers_accepted_rides*100)/av.ct_available, 2) end as working_percentage from accepted_drivers ac inner join available_drivers av using (month)
with recursive all_months(month) as ( select 1 union all select month + 1 from all_months where month < 12 ), drivers_pm as ( select YEAR(join_date) as 'year', MONTH(join_date) as month, count(driver_id) as num_drivers from Drivers where 'year' <= 2020 group by 1,2 ), drivers_pmc as ( select d1.month as month, sum(d2.num_drivers) num_available from all_months as d1 left join drivers_pm as d2 on ( 2020 > d2.year or (2020 = d2.year and d1.month >= d2.month) ) group by d1.month ) select drivers_pmc.month as month, coalesce(ROUND((100.0 * t1.num_working) / drivers_pmc.num_available, 2), 0) as working_percentage from drivers_pmc left join ( select MONTH(r.requested_at) as month, count(distinct driver_id) as num_working from AcceptedRides as ar join Rides as r on ar.ride_id = r.ride_id where YEAR(r.requested_at) = 2020 group by month ) as t1 on drivers_pmc.month = t1.month order by month
with recursive all_months0 as ( select '2020-02-01' as "the_month" union all select date_add(the_month, interval 1 month) as "the_month" from all_months0 where the_month < '2020-12-31' ), all_months as ( select date_sub(the_month, interval 1 day) as the_month from all_months0 ), drivers_count as ( select extract(month from a.the_month) as "the_month", count(driver_id) "driver_count" from all_months a left join drivers d on d.join_date <= a.the_month group by 1 ), accepted_rides as ( select extract(month from r.requested_at) "the_month", count(distinct a.driver_id) "ride_count" from acceptedrides a join rides r on a.ride_id = r.ride_id where requested_at between '2020-01-01' and '2020-12-31' group by 1 ) select month, ifnull(working_percentage, 0) "working_percentage" from (select d.the_month "month", round(100 * a.ride_count / d.driver_count, 2) "working_percentage" from drivers_count d left join accepted_rides a on d.the_month = a.the_month ) result_table
with recursive b as ( select 1 as month, (select count(driver_id) from Drivers where join_date < '2020-02-01') as active_drivers union all select month + 1, (select count(driver_id) from Drivers where join_date < if(month + 2 > 12, '2021-01-01', concat('2020-', month + 2, '-01'))) as active_drivers from b where month < 12 ), a as (select count(distinct ar.driver_id) working_drivers, date_format(requested_at, '%Y-%m') requested_at from Rides r join AcceptedRides ar using (ride_id) where year(requested_at) = 2020 group by 2), c as ( select working_drivers, case when right(requested_at, 2) like '0%' then right(requested_at, 1) else right(requested_at, 2) end as month from a ), d as ( select b.*, ifnull(working_drivers, 0) working_drivers from b left join c using (month) ) select month, round(if(active_drivers = 0, 0, 100 * working_drivers / active_drivers), 2) as working_percentage from d
with recursive calendar_months as( select 1 as month union select month+1 from calendar_months where month<12 ) select monthly_available_driver.month, round(ifnull(drivers_accepted_ride/sum(available_drivers) over(order by monthly_available_driver.month),0)*100,2) as working_percentage from( select CM.month, ifnull(D1.available_drivers,0) as available_drivers from calendar_months as CM left join( select month, case when month=1 then available_drivers+(select count( distinct driver_id) from Drivers where YEAR(join_date)<2020) else available_drivers end as available_drivers from( select MONTH(join_date) as month, count(driver_id) as available_drivers from Drivers where YEAR(join_date)=2020 group by month ) only_2020 ) D1 on CM.month = D1.month ) monthly_available_driver left join( select MONTH(requested_at) as month, count(distinct driver_id) as drivers_accepted_ride from Rides r left join AcceptedRides ar on r.ride_id = ar.ride_id where YEAR(requested_at)=2020 group by month ) monthly_accepted_rides on monthly_available_driver.month = monthly_accepted_rides.month
with recursive cte (month) as ( select 1 as month union all select month+1 from cte where month <12 ), driver as ( select date_format(join_date, '%Y-%m-01') as month, sum(count(*)) over (order by date_format(join_date, '%Y-%m-01')) as active_drivers from drivers where join_date <= '2020-12-31' group by 1 ), driver_2020 as ( select month, active_drivers from driver where date_format(driver.month, '%Y') = 2020 ), accepted_rides as ( select date_format(rides.requested_at, '%Y-%m-01') as month, count(distinct AcceptedRides.driver_id) as accepted_rides from rides inner join AcceptedRides using(ride_id) where rides.requested_at between '2020-01-01' and '2020-12-31' group by 1 ) select cte.month, ifnull(round(ifnull(accepted_rides.accepted_rides,0)/ifnull(max(driver_2020.active_drivers) over (order by cte.month),0)*100,2),0) as working_percentage from cte left join driver_2020 on cte.month = date_format(driver_2020.month, '%c') left join accepted_rides on cte.month = date_format(accepted_rides.month, '%c')
with recursive cte as ( select 1 as 'month' union all select month+1 from cte where month < 12 ) select A.month, round(ifnull(ifnull(B.num_count,0) * 100 / A.count,0),2) as 'working_percentage' from ( select c.month, count(driver_id) as 'count' from cte c left join drivers d on 2020*100+c.month >= year(d.join_date) * 100 + month (d.join_date) group by c.month ) as A left join ( select month(requested_at) as 'month', count(distinct driver_id) as 'num_count' from rides r left join acceptedRides a on r.ride_id = a.ride_id where year(requested_at) = 2020 and a.driver_id is not null group by month(requested_at)) as B on A.month = B.month
with recursive cte as ( select 1 as month union all select month + 1 as month from cte where month < 12 ), Driver_tmp as ( select cast(substr(t2.join_month, 6, 2) as unsigned) as month, sum(t1.driver_month) as driver_sum from (select date_format(join_date, "%Y-%m") as join_month, count(driver_id) as driver_month from Drivers group by join_month) t1, (select date_format(join_date, "%Y-%m") as join_month, count(driver_id) as driver_month from Drivers group by join_month) t2 where t1.join_month <= t2.join_month and t2.join_month between "2020-01" and "2020-12" group by t2.join_month ), rides_tmp as ( select month(requested_at) as month, count(distinct driver_id) as driver_count from AcceptedRides a left join Rides r on a.ride_id = r.ride_id where requested_at between "2020-01-01" and "2020-12-31" group by month ) select l.month, round(100*ifnull(ifnull(r.driver_count, 0) / l.driver_sum, 0), 2) as working_percentage from (select cte.month, ifnull(max(driver_sum), 0) as driver_sum from cte left join Driver_tmp on cte.month >= driver_tmp.month group by cte.month) l left join rides_tmp r on l.month = r.month order by l.month
with recursive cte as ( select 1 as month union all select month + 1 from cte where month < 12 ), temp as ( select MONTH(join_date) as month, max(drivers) over (order by date_format(join_date, '%Y-%m')) as drivers from (select driver_id, join_date, count(driver_id) over (order by join_date) as drivers from Drivers) as t where join_date >= '2020-01-01' and join_date <= '2020-12-31' ), temp1 as ( select cte.month, max(case when drivers is NULL then 0 else drivers end) over (order by month) as drivers from cte left join temp on cte.month = temp.month group by month ), temp2 as ( select MONTH(requested_at) as month, count(distinct driver_id) as working from Rides as r join AcceptedRides as a on r.ride_id = a.ride_id where requested_at >= '2020-01-01' and requested_at <= '2020-12-31' group by MONTH(requested_at) ) select temp1.month, case when drivers is NULL or working is NULL then 0.00 else round(working/drivers*100, 2) end as working_percentage from temp1 left join temp2 on temp1.month = temp2.month order by month
with recursive cte as ( select 1 as month union all select month + 1 from cte where month<12 ) select t.month, ifnull(round( cast((select count(distinct a.driver_id) from acceptedrides a join rides b on a.ride_id = b.ride_id and b.requested_at between '2020-01-01' and '2020-12-31' and month(b.requested_at) = t.month)as float) *100/ cast((select count(distinct driver_id) from drivers where join_date < '2021-01-01' and (join_date < '2020-01-01' or month(join_date) <= t.month)) as float), 2),0.00) working_percentage from cte t
with recursive cte as ( select 1 as month union all select month+1 from cte where month < 12 ) select c.month, round(ifnull(ifnull(naccept,0)/max(ifnull(ndriver,0))*100,0),2) as working_percentage from cte c left join (select trim(both '-' from right(left(requested_at, 7),2)) as month, count(distinct a.driver_id) as naccept from rides r join AcceptedRides a on r.ride_id= a.ride_id where left(requested_at,4)='2020' group by trim(both '-' from right(left(requested_at, 7),2)) ) r on c.month=r.month left join ( select left(join_date, 7) as ymonth, count(driver_id) over ( order by left(join_date, 7) ) as ndriver from Drivers ) d on trim(both '-' from right(d.ymonth,2)) <= c.month and left(d.ymonth, 4) = '2020' group by month order by c.month
with recursive cte as ( select 1 as month, 0 as driver_cnt union all select month + 1 as month, 0 as driver_cnt from cte where month < 12 ), cte1 as ( select month as driver_month, sum(driver_cnt ) over(order by month) as driver_cnt from ( select month, sum(driver_cnt) as driver_cnt from ( select month(join_date ) as month, count(driver_id) as driver_cnt from ( select case when join_date<'2020-01-01' then '2020-01-01'else join_date end as join_date, driver_id from Drivers where join_date <= '2020-12-31' )t0 group by month(join_date) union all select month, driver_cnt from cte )t1 group by month )t2 ), cte2 as ( select ride_month, count( distinct driver_id) as ride_driver_cnt from ( select driver_id, MONTH(requested_at) as ride_month from Rides r left join AcceptedRides a on r.ride_id = a.ride_id and YEAR(requested_at ) = '2020' )t2 group by ride_month ) select driver_month as month, case driver_cnt when 0 then 0 else coalesce( round( 100 * ( ride_driver_cnt / driver_cnt ), 2 ), 0 ) end as working_percentage from cte1 left join cte2 on cte1.driver_month = cte2.ride_month
with recursive cte as ( select 1 as month, 0 as driver_cnt union all select month + 1 as month, 0 as driver_cnt from cte where month < 12 ), cte1 as ( select month as driver_month, sum(driver_cnt ) over(order by month) as driver_cnt from ( select month, sum(driver_cnt) as driver_cnt from ( select month(join_date ) as month, count(driver_id) as driver_cnt from ( select case when join_date<'2020-01-01' then '2020-01-01'else join_date end as join_date, driver_id from Drivers where join_date <= '2020-12-31' )t0 group by month(join_date) union all select month, driver_cnt from cte )t1 group by month )t2 ), cte2 as ( select ride_month, count( distinct driver_id) as ride_driver_cnt from ( select driver_id, MONTH(requested_at) as ride_month from Rides r left join AcceptedRides a on r.ride_id = a.ride_id and YEAR(requested_at ) = '2020' )t2 group by ride_month ) select driver_month as month, case driver_cnt when 0 then 0 else coalesce( round( 100 * ( ride_driver_cnt / driver_cnt ), 2 ), 0 ) end as working_percentage from cte1 left join cte2 on cte1.driver_month = cte2.ride_month order by cte1.driver_month
with recursive cte as ( select 1 month union all select month + 1 from cte where month < 12 ), tmp_month_cnt as ( select month, count(driver_id) cnt from ( select driver_id, if(year(join_date) < 2020, 1, month(join_date)) month from Drivers where year(join_date) < 2021 ) T group by month ), acc_month as ( select month, sum(cnt) over (order by month) active_driver from ( select a.month, if(b.cnt is null, 0, b.cnt) cnt from cte a left join tmp_month_cnt b on a.month = b.month ) T ), order_driver as ( select month(a.requested_at) month, count(distinct b.driver_id) order_driver from Rides a join AcceptedRides b on a.ride_id = b.ride_id where year(a.requested_at) = 2020 group by month(a.requested_at) ) select a.month, case when a.active_driver is null or a.active_driver = 0 then 0 when b.order_driver is null then 0 else round(b.order_driver/a.active_driver * 100, 2) end working_percentage from acc_month a left join order_driver b on a.month = b.month
with recursive cte as (SELECT 1 as month UNION ALL SELECT month+1 as month from cte where month < 12), available_drivers_tbl as (SELECT cte.month, sum(available_drivers) over(order by month) as avail_drivers FROM cte LEFT JOIN (SELECT CASE WHEN join_date < '2020-01-01' THEN 1 ELSE EXTRACT(MONTH from join_date) END as month, count(driver_id) as available_drivers from Drivers where join_date < '2021-01-01' GROUP BY 1) tmp ON cte.month = tmp.month) select avail.month, Round(100.0 * IFNULL(accepted.driver_cnt/avail.avail_drivers, 0), 2) as working_percentage from available_drivers_tbl avail LEFT JOIN (SELECT EXTRACT(MONTH FROM requested_at) AS month, count(distinct driver_id) as driver_cnt from AcceptedRides a JOIN Rides r ON a.ride_id = r.ride_id WHERE EXTRACT(YEAR FROM requested_at) = 2020 GROUP BY 1) accepted ON avail.month = accepted.month order by avail.month
with recursive cte as (select '2020-01-31' as date union all select last_day(date_add(date, interval 1 month)) as date from cte where date<'2020-12-31'), base as ( select month(cte.date) as month, count(*) as available_driver from cte left join Drivers on cte.date>=Drivers.join_date group by 1 order by 1 asc ), base1 as ( select distinct month(requested_at) as month, count(distinct a.driver_id) as working_driver from AcceptedRides a inner join Rides b on a.ride_id = b.ride_id where year(requested_at) =2020 group by 1 ) select distinct base.month, round(ifnull(working_driver/available_driver*100,0),2) as working_percentage from base left join base1 on base.month = base1.month order by 1
with recursive cte as (select '2020-01-31' as date union all select last_day(date_add(date, interval 1 month)) as date from cte where date<'2020-12-31'), base as ( select month(cte.date) as month, count(*) as available_driver from cte left join Drivers on cte.date>=Drivers.join_date group by 1 order by 1 asc ), base1 as ( select distinct month(requested_at) as month, count(distinct a.driver_id) as working_driver from AcceptedRides a left join Rides b on a.ride_id = b.ride_id where year(requested_at) =2020 group by 1 ) select distinct base.month, round(ifnull(working_driver/available_driver*100,0),2) as working_percentage from base left join base1 on base.month = base1.month order by 1
with recursive cte as (select 1 as month union all select month + 1 from cte where month < 12), t1 as (select month(join_date) as month, count(driver_id) over (order by join_date) as active_drivers from drivers where year(join_date) <= 2020 ), t2 as (select month(r.requested_at) as month, count(distinct ar.driver_id) as accepted_rides from Rides r join AcceptedRides ar on ar.ride_id = r.ride_id where year(r.requested_at) = 2020 group by month ) select distinct c.month, round(ifnull(accepted_rides/max(t1.active_drivers) over (order by c.month)*100,0),2) as working_percentage from cte c left join t1 on c.month = t1.month left join t2 on c.month = t2.month
with recursive cte as (select 1 as month union all select month + 1 from cte where month < 12), t1 as (select month(join_date) as month, count(driver_id) over (order by join_date) as active_drivers from drivers where year(join_date) <= 2020 ), t2 as (select month(requested_at) as month, count(distinct driver_id) as accepted_rides from rides r join AcceptedRides ar on r.ride_id = ar.ride_id where year(requested_at) = 2020 group by month(requested_at) ) select distinct c.month, round(ifnull(accepted_rides / ifnull(max(active_drivers) over(order by c.month), 0) * 100, 0),2) as working_percentage from cte c left join t1 on c.month = t1.month left join t2 on c.month = t2.month
with recursive cte as( select '2020-01-01' as datemonth union all select date_add(datemonth, interval 1 month) as datemonth from cte where datemonth < '2020-12-01' ), cte1 as( select driver_id, requested_at, month(requested_at) as month from AcceptedRides a left join Rides r on a.ride_id = r.ride_id where requested_at between '2020-01-01' and '2020-12-31' ), cte2 as ( select driver_id, month(join_date) as month from( select driver_id, case when join_date < '2020-01-01' then '2020-01-01' else join_date end as join_date from Drivers where join_date <= '2020-12-31' )t ), cte3 as ( select month, sum(num_new_driver) over(order by month asc) as num_driver from( select t.month, ifnull(t2.num_new_driver , 0) as num_new_driver from ( select month(datemonth) as month from cte )t left join( select month, count(driver_id) as num_new_driver from cte2 group by month ) t2 on t.month = t2.month )t3 ) select c3.month, round( ifnull(c1.num_active_driver/ c3.num_driver,0) * 100,2 ) as working_percentage from cte3 c3 left join ( select month, count(distinct driver_id) as num_active_driver from cte1 group by month )c1 on c3.month = c1.month order by c3.month asc
with recursive cte as( select '2020-01-01' as month union select date_add(month, interval 1 month) as month from cte where month<'2020-12-01') select month(a.month) as month, case when ifnull(count(distinct b.driver_id),0)= 0 then 0 else round(ifnull(max(accepted_driver)/count(distinct b.driver_id) *100,0),2) end as working_percentage from cte as a left join drivers as b on last_day(a.month)>=b.join_date left join ( select month(a.requested_at) as month, ifnull(count(distinct b.driver_id),0) as accepted_driver from rides as a left join acceptedrides as b on a.ride_id = b.ride_id where year(a.requested_at) = 2020 and b.driver_id is not null group by 1 ) as c on month(a.month) = c.month group by 1 order by 1
with recursive cte as( select 1 as month union all select month +1 from cte where month <=11), cte2 as( select c.month, count(distinct d.driver_id) as ct_avail from cte c left join ( select driver_id, case when join_date < '2020-01-01' then '2020-01-01' else join_date end as join_date from Drivers ) d on c.month >= month(d.join_date) and year(d.join_date) < 2021 group by 1), cte3 as( select c.month, count(distinct a.driver_id) as ct_request from cte c left join Rides r on c.month = month(r.requested_at) and year(r.requested_at) = 2020 join AcceptedRides a on r.ride_id = a.ride_id group by 1) select cte2.month, ifnull(round(ct_request*100.00/ct_avail,2),0.00) as working_percentage from cte2 left join cte3 on cte2.month = cte3.month
with recursive cte as( select 1 as month union all select month+1 as month from cte where month<12), driversTable as(select month(join_date) as month,count(*) as drivers,row_number() over(order by join_date) as rowNum from Drivers d1 where join_date like '2020%' group by 1), driversTable2 as(select month,case when rowNum=1 then drivers+(select count(*) from Drivers where year(join_date)<2020) else drivers end as drivers2 from driversTable), acceptedDrivers as(select month(r1.requested_at) as month,count(distinct a1.driver_id) as driversDriving from AcceptedRides a1 left join Rides r1 on a1.ride_id=r1.ride_id where r1.requested_at like '2020%' group by 1), monthsTable as(select c1.month,a1.driversDriving from cte c1 left join acceptedDrivers a1 on c1.month=a1.month) select m1.month,coalesce(round((m1.driversDriving/SUM(d1.drivers2) over(order by m1.month))*100,2),0) as working_percentage from monthsTable m1 left join driversTable2 d1 on m1.month=d1.month
with recursive cte(month) as ( select 1 union all select month + 1 from cte where month < 12 ), driver as ( select if (year(join_date) < 2020, 1, month(join_date)) as month , count(driver_id) as driver_cnt from Drivers where year(join_date) <= 2020 group by month ), ride as ( select month(x.requested_at) as month , count(distinct y.driver_id) as driver_cnt2 from Rides as x inner join AcceptedRides as y on x.ride_id = y.ride_id where year(x.requested_at) = 2020 group by month ) select a.month , case when b.driver_cnt2/sum(c.driver_cnt)*100 is null then 0.00 else round(b.driver_cnt2/sum(c.driver_cnt)*100, 2) end as working_percentage from cte as a left join ride as b on a.month = b.month left join driver as c on c.month <= a.month group by a.month order by a.month
with recursive cte(month) as ( select 1 union all select month + 1 from cte where month < 12 ), t as ( select a.join_date, count(distinct b.driver_id) as drivers from Drivers as a cross join Drivers as b where a.join_date >= b.join_date group by a.join_date ), t1 as ( select MONTH(join_date) as month, max(drivers) as drivers from t where YEAR(join_date) = '2020' group by month ), t2 as ( select cte.month, case when t1.drivers is null then 0 else drivers end as drivers from cte left join t1 on cte.month = t1.month ), t3 as ( select a.month, max(b.drivers) as drivers from t2 as a join t2 as b on a.month >= b.month group by a.month ), t4 as ( select MONTH(requested_at) as month, count(distinct driver_id) as cnt from Rides as r join AcceptedRides as a on r.ride_id = a.ride_id where YEAR(requested_at) = '2020' group by month ) select t3.month, case when cnt is null then 0.00 else round(cnt/drivers*100, 2) end as working_percentage from t3 left join t4 on t3.month = t4.month order by month
with recursive cte1 (month) as ( select 1 as month union select month + 1 from cte1 where month < 12 ) , cte2 as ( select case when year(join_date) < 2020 then 1 else month(join_date) end as month, driver_id from Drivers where year(join_date) <= 2020 ) , cte3 as ( select distinct cte1.month, count(driver_id) over(order by cte1.month) as active_drivers from cte1 left join cte2 using(month) ) , cte4 as ( select month(requested_at) as month, driver_id as accepting_driver from AcceptedRides join Rides using(ride_id) where year(requested_at) = 2020 ) , cte5 as ( select cte1.month, count(distinct accepting_driver) as total_accepting_drivers from cte1 left join cte4 using(month) group by cte1.month ) select cte3.month, case when total_accepting_drivers = 0 then 0 else round((total_accepting_drivers / active_drivers) * 100, 2) end as working_percentage from cte3 join cte5 using(month)
with recursive cte1 as ( select 1 as month UNION ALL select month + 1 from cte1 where month <= 11 ), cte2 as ( select cte1.month, count(driver_id) dcount from cte1 left join Drivers on join_date <= LAST_DAY(CONCAT('2020-', cte1.month, '-', '01')) group by cte1.month ), cte3 as ( select month(requested_at) month, count(distinct driver_id) dc from Rides r, AcceptedRides a where r.ride_id = a.ride_id and year(requested_at) = '2020' group by month ) select cte1.month, CASE when (cte2.dcount is null or cte2.dcount = 0) THEN 0.00 ELSE ROUND((coalesce(cte3.dc, 0)/cte2.dcount) * 100, 2) END working_percentage from cte1 left join cte2 on cte1.month = cte2.month left join cte3 on cte1.month = cte3.month order by cte1.month
with recursive cte1 as (select 1 as month union all select month + 1 as month from cte1 where month < 12), d1 as (select driver_id, (case when year(join_date) < 2020 then 1 else month(join_date) end) as join_month from drivers where year(join_date) < 2021), c1 as (select cte1.month, count(distinct driver_id) as active_drivers from cte1 left join d1 on month >= join_month group by 1 ), c2 as (select month(requested_at) as month, count(distinct driver_id) as accepted_rides from rides join acceptedrides using (ride_id) where year(requested_at) = 2020 group by 1 ) select month, round(if(active_drivers = 0, 0, 100*ifnull(accepted_rides, 0)/active_drivers),2) as working_percentage from c1 left join c2 using (month) order by 1
with recursive cte1 as (select 1 as month union all select month + 1 as month from cte1 where month < 12), d1 as (select driver_id, (case when year(join_date) < 2020 then 1 else month(join_date) end) as join_month from drivers where year(join_date) < 2021), c1 as (select cte1.month, count(distinct driver_id) as active_drivers from cte1 left join d1 on month >= join_month group by 1 ), c2 as (select month(requested_at) as month, count(distinct driver_id) as accepted_rides from rides join acceptedrides using (ride_id) where year(requested_at) = 2020 group by 1 ) select month, round(if(active_drivers = 0,0, 100*ifnull(accepted_rides,0)/active_drivers),2) as working_percentage from c1 left join c2 using (month) order by 1
with recursive cte1(day) as ( select str_to_date('2020-1-31', '%Y-%m-%d') union all select last_day(date_add(day, INTERVAL 1 MONTH)) from cte1 where day <'2020-12-1' ), cte2 as ( select month(day) month, count(driver_id) active_drivers from cte1 left join drivers on join_date<=day group by month ), cte3 as ( select month(requested_at) month, count(distinct driver_id) working_drivers from AcceptedRides natural join Rides where year(requested_at) = 2020 group by month ) select cte2.month, (case when active_drivers = 0 then round(0,2) else round(ifnull(working_drivers, 0) / active_drivers *100, 2) end) working_percentage from cte2 left join cte3 on cte2.month=cte3.month order by 1
with recursive cte_month as ( select 1 as month union all select month+1 as month from cte_month where month+1<=12 ), driver as ( select c.month , count(d.driver_id) as active_drivers from cte_month c left join Drivers d on (extract(year from join_date)<2021 and extract(month from d.join_date)<=c.month) or extract(year from d.join_date)<2020 group by 1), ride as ( select extract(month from r.requested_at) as month , count(distinct a.driver_id) as num_of_driver from Rides r inner join AcceptedRides a on r.ride_id=a.ride_id where extract(year from r.requested_at)=2020 group by 1 ) select d.month , round(coalesce(r.num_of_driver/d.active_drivers,0)*100.0,2) as working_percentage from driver d left join ride r on d.month=r.month
with recursive cte_month_spine as ( select 1 as n union all select n + 1 as n from cte_month_spine where n < 12 ), cte_available_drivers as ( select ms.n as month, count(driver_id) as available_drivers from cte_month_spine as ms left join Drivers as d on last_day(concat('2020-', ms.n, '-01')) >= d.join_date group by 1 ), cte_working_drivers as ( select ms.n as month, count(distinct ar.driver_id) as working_drivers from cte_month_spine as ms left join Rides as r on r.requested_at between concat('2020-', ms.n, '-01') and last_day(concat('2020-', ms.n, '-01')) left join AcceptedRides as ar on r.ride_id = ar.ride_id group by 1 ), cte_final as ( select ad.month, round(100 * coalesce(working_drivers / available_drivers, 0), 2) as working_percentage from cte_available_drivers as ad join cte_working_drivers as wd on ad.month = wd.month order by 1 ) select * from cte_final
with recursive datedim as ( select str_to_date('20200101','%Y%m%d') as datevalue union all select date_add(datevalue, interval 1 month) from datedim where datevalue<'20201201' ) , active_driver_per_month as ( select last_day(dd.datevalue) as datevalue, count(d.join_date) active_drivers from datedim dd left outer join drivers d on d.join_date<=last_day(dd.datevalue) group by dd.datevalue ) , accepted_ride_per_month as ( select last_day(requested_at) requestDate, count(ar.ride_id) AcceptedRides from acceptedrides ar inner join rides r on r.ride_id=ar.ride_id where year(r.requested_at)=2020 group by last_day(requested_at) ) , workingdriver as ( select last_day(requested_at) requestDate, count(distinct driver_id) workingDriver from acceptedrides ar inner join rides r on r.ride_id=ar.ride_id where year(r.requested_at)=2020 group by last_day(requested_at) ) select month(ad.datevalue) month, coalesce(round((wd.workingDriver/ad.active_drivers)*100,2),0) working_percentage from active_driver_per_month ad left outer join workingdriver wd on wd.requestDate=ad.datevalue order by 1
with recursive dates (month) as ( select 1 union all select 1 + month from dates where month < 12 ), cte as ( select month(join_date) as month, count(driver_id) over(order by (join_date)) as no_drivers from Drivers where year(join_date) <= 2020 ), cte2 as ( select month(requested_at) as month, count(distinct driver_id) as no_drives from rides join acceptedrides on rides.ride_id = acceptedrides.ride_id where year(requested_at) = 2020 group by month ) select month, min(working_percentage) as working_percentage from( select dates.month, ifnull(round(ifnull(no_drives,0)/ max(no_drivers) over(ROWS UNBOUNDED PRECEDING)*100,2),0) as working_percentage from dates left join cte on dates.month = cte.month left join cte2 on dates.month = cte2.month ) as b group by 1
with recursive daymon as( select 1 as mon, last_day(concat('2020-',1,'-01')) as lastday union all select mon+1 as mon,last_day(concat('2020-',mon+1,'-01')) as lastday from daymon where mon < 12 ),availabledrivers as( select dm.mon ,drivers.driver_id from Drivers drivers join daymon dm on drivers.join_date <= dm.lastday where drivers.join_date <= '2020-12-31' ) select dm.mon as month ,round(case when ifnull(count(avrd.driver_id),0) = 0 then 0 else ifnull(cnt,0)*100/count(avrd.driver_id) end,2) as working_percentage from daymon dm left join availabledrivers avrd on dm.mon = avrd.mon left join( select month(requested_at) as mon ,count(distinct acctrides.driver_id) as cnt from Rides rides join AcceptedRides acctrides on acctrides.ride_id = rides.ride_id and rides.requested_at between '2020-01-01' and '2020-12-31' group by month(requested_at) ) aard on avrd.mon = aard.mon group by dm.mon
with recursive dummy as (select 1 as month union all select month+1 from dummy where month+1<=12 ), driver_count as (select month(join_date) as month, ifnull(count(driver_id),0) as totalD from Drivers where join_date between '2020-01-01' AND '2020-12-31' group by month(join_date) UNION ALL select 1 as month, count(*) as totalD from Drivers where join_date < '2020-01-01' ), driver_count_all as ( select dummy.month, ifnull(sum(totalD),0) as totalD from dummy left join driver_count on dummy.month = driver_count.month group by dummy.month ), driver_count_cum as ( select d1.month, sum(d2.totalD) as totalD from driver_count_all d1 cross join driver_count_all d2 where d1.month >= d2.month group by d1.month ), working_drivers as (select month(requested_at) as month, count(distinct driver_id) as no_of_drivers from AcceptedRides left join Rides on AcceptedRides.ride_id = rides.ride_id where requested_at between '2020-01-01' AND '2020-12-31' group by month(requested_at) ) select driver_count_cum.month, ifnull(round(100*ifnull(no_of_drivers,0)/totalD,2),0) as working_percentage from driver_count_cum left join working_drivers on driver_count_cum.month = working_drivers.month order by 1
with recursive fm as ( select 1 as m union all select m+1 from fm where m<12), d as ( select fm.m, sum(ifnull(count(driver_id),0))over(order by fm.m) as driver_cnt from fm left join (select driver_id, case when year(join_date)<2020 then 1 else month(join_date) end as join_month from drivers where year(join_date)<=2020) temp on fm.m = temp.join_month group by fm.m), w as ( select fm.m, ifnull(count(distinct driver_id),0) as work_driver_cnt from fm left join (select * from rides where year(requested_at) = 2020) as r on fm.m = month(r.requested_at) left join acceptedrides as ar on r.ride_id = ar.ride_id group by fm.m) select m as month, round(ifnull(work_driver_cnt/driver_cnt,0)*100,2) as working_percentage from d join w using (m)
with recursive header as (select 1 as month union all select month + 1 from header where month < 12 ) ,cte as ( select h.month, count(d.driver_id) over (order by h.month) + (select count(driver_id) from drivers where year(join_date) < 2020) as driver from header h left join (select * from drivers where year(join_date) = 2020) d on h.month = month(d.join_date) ) ,cte2 as ( select month(r.requested_at) as month, count(distinct a.driver_id) as adriver from acceptedrides a left join rides r using (ride_id) where year(r.requested_at) = 2020 group by 1 ) select distinct c1.month, ifnull(round(ifnull(adriver, 0) / ifnull(driver,0) * 100,2),0) as working_percentage from cte c1 left join cte2 c2 using (month)
with recursive m AS( SELECT 1 AS month UNION ALL SELECT month+1 FROM m WHERE month<12), ad AS( SELECT extract(month from requested_at) AS month, driver_id FROM AcceptedRides JOIN Rides USING(ride_id) WHERE extract(year from requested_at)=2020), d AS( SELECT CASE WHEN extract(year from join_date)<=2019 THEN 1 ELSE extract(month from join_date) END AS month, driver_id FROM Drivers WHERE extract(year from join_date)<=2020) SELECT m.month, round( ifnull(count(distinct ad.driver_id)/ sum(count(distinct d.driver_id)) over(order by m.month)*100,0) ,2) AS working_percentage FROM m LEFT JOIN ad ON m.month=ad.month LEFT JOIN d ON m.month=d.month GROUP BY 1
with recursive m AS( SELECT 1 AS month UNION ALL SELECT month+1 FROM m WHERE month<12), ad AS( SELECT extract(month from requested_at) AS month, driver_id FROM AcceptedRides JOIN Rides USING(ride_id) WHERE extract(year from requested_at)=2020), d AS( SELECT CASE WHEN extract(year from join_date)<=2019 THEN 1 ELSE extract(month from join_date) END AS month, driver_id FROM Drivers WHERE extract(year from join_date)<=2020) SELECT m.month, round(ifnull( count(distinct ad.driver_id)/ sum(count(distinct d.driver_id)) over(order by m.month)*100 ,0),2) AS working_percentage FROM m LEFT JOIN ad ON m.month=ad.month LEFT JOIN d ON m.month=d.month GROUP BY 1
with recursive m AS( SELECT 1 AS month UNION ALL SELECT month+1 FROM m WHERE month<12), ad AS( SELECT extract(month from requested_at) AS month, driver_id FROM AcceptedRides JOIN Rides USING(ride_id) WHERE extract(year from requested_at)=2020), d AS( SELECT CASE WHEN extract(year from join_date)<=2019 THEN 1 ELSE extract(month from join_date) END AS month, driver_id FROM Drivers WHERE extract(year from join_date)<=2020) SELECT m.month, round(ifnull( ifnull(count(distinct ad.driver_id),0)/ sum(count(distinct d.driver_id)) over(order by m.month)*100 ,0),2) AS working_percentage FROM m LEFT JOIN ad ON m.month=ad.month LEFT JOIN d ON m.month=d.month GROUP BY 1
with recursive m as ( select 1 as month union select month+1 from m where month <12 ), avil as( select month, ifnull(sum(num_d) over(order by month),0) as num_avl_drivers from m left join ( select month(case when join_date <'2020-01-01' then '2020-01-01' else join_date end) as join_month, count(driver_id) as num_d from drivers where join_date <'2021-01-01' group by 1) as t on m.month = t.join_month ), working as ( select month(requested_at) as working_month, count(distinct driver_id) as working_drivers from rides join AcceptedRides on rides.ride_id = AcceptedRides.ride_id where year(requested_at)= '2020' group by 1 ) select month, round(ifnull(working_drivers/num_avl_drivers,0) *100,2) as working_percentage from avil left join working on avil.month = working.working_month
with recursive m as (select 1 as month union all select month + 1 as month from m where month < 12) select m.month as 'month',round(ifnull(count(distinct a.driver_id)/count(distinct d.driver_id)*100,0),2) as working_percentage from m left join rides as r on m.month = month(r.requested_at) and year(r.requested_at) = 2020 left join acceptedrides as a on r.ride_id = a.ride_id left join drivers as d on (m.month >= month(d.join_date) and year(d.join_date) = 2020) or year(d.join_date)<2020 group by m.month
with recursive m as (select 1 as month union select month +1 from m where month <12 ), dr as ( select month(join_date) as join_month, count(driver_id) as num_drivers from ( select driver_id, (case when join_Date < '2020-01-01' then '2020-01-01' else join_Date end) as join_date from drivers where join_Date < '2021-01-01') as sub group by month(join_date) ), working_dr as ( select month(requested_at) as working_month, count( distinct driver_id) as working_drivers from ( select driver_id, requested_at from AcceptedRides join Rides on AcceptedRides.ride_id = rides.ride_id where requested_at <'2021-01-01' and requested_at >='2020-01-01') as ride group by month(requested_at) ) select month, round(ifnull(working_drivers/num_avl_drivers *100,0),2) as working_percentage from ( select month, sum(num_drivers) over(order by month) as num_avl_drivers, ifnull(working_drivers,0) as working_drivers from m left join dr on dr.join_month = m.month left join working_dr on working_dr.working_month = m.month ) as all_src
with recursive m as (select 1 mth union all select mth+1 mth from m where mth <12 ), d as( select m.mth,coalesce(accepted_ride,0) accepted_ride from m left join (select month(requested_at) mth,count(distinct driver_id) accepted_ride from rides r join AcceptedRides a on r.ride_id = a.ride_id where year(r.requested_at)=2020 group by 1) a on m.mth = a.mth ), r as ( select m.mth,sum(coalesce(a.driver_cnt,0)) over(order by m.mth) driver_cnt from m left join ( select a.mth,sum(a.driver_cnt) driver_cnt from ( select 1 mth, count(driver_id) driver_cnt from drivers d where year(d.join_date)<2020 union all select month(join_date) , count(driver_id) driver_cnt from drivers d where year(d.join_date)=2020 group by 1 )a group by 1 )a on m.mth = a.mth group by 1 order by 1 ) select r.mth month, coalesce(round((accepted_ride/driver_cnt) * 100 ,2) ,0) working_percentage from r join d on r.mth=d.mth order by 1
with recursive m as( select 1 as month union select month+1 from m where month<12 ), a as ( select m.month, ifnull(max(total_driver) over (order by month),0) as total_driver from m left join (select month(join_date) as month, count(driver_id) over (order by join_date rows unbounded preceding) as total_driver from drivers where year(join_date) <=2020 )t1 using (month) ), b as ( select count(distinct driver_id) as accepted_driver,month(requested_at) as month from acceptedrides a join rides r using (ride_id) where year(requested_at) = 2020 group by 2) select a.month, round(ifnull((accepted_driver/total_driver),0)*100,2) as working_percentage from a left join b using (month) group by 1
with recursive m as( select 1 as month union select month+1 from m where month<12 ), a as ( select m.month, ifnull(max(total_driver) over (order by month),0) as total_driver from m left join (select month(join_date) as month, count(driver_id) over (order by join_date rows unbounded preceding) as total_driver from drivers where year(join_date) <=2020 )t1 using (month) ), b as ( select count(distinct driver_id) as accepted_driver,month(requested_at) as month from acceptedrides a join rides r using (ride_id) where year(requested_at) = 2020 group by 2) select m.month, round(ifnull((accepted_driver/total_driver),0)*100,2) as working_percentage from m left join a using (month) left join b using(month) group by 1
with recursive mm as ( select 1 as month union all select month+1 from mm where month < 12 ) select avadriver.month month ,round(case when avadriver.availabledrivers=0 then 0 else ifnull(actdriver.accptdrivers,0)*100/avadriver.availabledrivers end,2) as working_percentage from ( select month(ride.requested_at) as month ,count(distinct acct.driver_id) as accptdrivers from AcceptedRides acct join Rides ride on acct.ride_id = ride.ride_id where ride.requested_at between '2020-01-01' and '2020-12-31' group by month ) actdriver right join( select tmm.month ,count(driver_id) as availabledrivers from mm tmm left join Drivers dr on dr.join_date < date_add(concat('2020-',tmm.month,'-01'),interval 1 month) group by month ) avadriver on avadriver.month = actdriver.month order by month
with recursive mo_cte as ( select 1 as month union all Select month+1 as month From mo_cte where month+1<=12 ), denom as ( Select m.month, SUM(case when year(t.join_date)<2020 or month(t.join_date)<=m.month then 1 else 0 end ) as avail_dri From Drivers t, mo_cte m where t.join_date <='2020-12-31' group by 1 ), nom as ( Select m.month, IFNULL(COUNT(distinct case when m.month = month(t.dt) then t.driver_id else null end), 0) as acep_dri From mo_cte m, (Select a.ride_id, a.driver_id, r.requested_at as dt From AcceptedRides a left join Rides r on a.ride_id = r.ride_id where r.requested_at between '2020-01-01' and '2020-12-31') t group by 1 ) Select de.month, case when de.avail_dri= 0 then 0.00 else ROUND(nom.acep_dri*100.0/de.avail_dri,2) end as working_percentage From denom de left join nom on de.month = nom.month order by de.month
with recursive mons as ( select 2020 as year,1 as mon union all select 2020 as year,mon+1 as mon from mons where mon+1 <= 12 ) ,active_drivers as ( select month(requested_at) as mon, count(distinct driver_id) as ct from AcceptedRides a join rides r on a.ride_id = r.ride_id where year(requested_at) = 2020 group by 1 ), dpm as ( select month(join_date) as mon,year(join_date) as year, count(1) as num_drivers from drivers group by 1,2 ), dpm1 as ( select coalesce(m.year,d.year) as year, coalesce(m.mon,d.mon) as mon, coalesce(num_drivers,0) num_drivers from dpm d left join mons m on m.year=d.year and m.mon=d.mon union all select coalesce(m.year,d.year) as year, coalesce(m.mon,d.mon) as mon, coalesce(num_drivers,0) num_drivers from dpm d right join mons m on m.year=d.year and m.mon=d.mon where d.mon is null ), avail_drivers as ( select year,mon, sum(num_drivers) over(order by year,mon rows between unbounded preceding and current row) as ct from dpm1 ) select t2.mon as month, coalesce(cast(coalesce(t1.ct,0)*100.0/t2.ct as decimal(65,2)),0) as working_percentage from active_drivers t1 right join avail_drivers t2 on t1.mon = t2.mon where t2.year = 2020
with recursive mons as ( select 2020 as year,1 as mon union all select 2020 as year,mon+1 as mon from mons where mon+1 <= 12 ) ,active_drivers as ( select month(requested_at) as mon, count(distinct driver_id) as ct from AcceptedRides a join rides r on a.ride_id = r.ride_id where year(requested_at) = 2020 group by 1 ), dpm as ( select month(join_date) as mon,year(join_date) as year, count(1) as num_drivers from drivers group by 1,2 ), dpm1 as ( select coalesce(m.year,d.year) as year, coalesce(m.mon,d.mon) as mon, coalesce(num_drivers,0) num_drivers from dpm d left join mons m on m.year=d.year and m.mon=d.mon union select coalesce(m.year,d.year) as year, coalesce(m.mon,d.mon) as mon, coalesce(num_drivers,0) num_drivers from dpm d right join mons m on m.year=d.year and m.mon=d.mon ), avail_drivers as ( select year,mon, sum(num_drivers) over(order by year,mon rows between unbounded preceding and current row) as ct from dpm1 ) select t2.mon as month, coalesce(cast(coalesce(t1.ct,0)*100.0/t2.ct as decimal(65,2)),0) as working_percentage from active_drivers t1 right join avail_drivers t2 on t1.mon = t2.mon where t2.year = 2020
with recursive month as ( select 1 as month union all select month+1 as month from month where month<12), driver_2020 as ( select z.month, count(driver_id) as cnt_total from month z left join (select driver_id, case when join_date<"2020-01-01" then 1 else month(join_date) end as month from drivers where join_date<"2021-01-01") y on z.month=y.month group by month), cul_driver_2020 as( select u.month, sum(v.cnt_total) as cul_cnt from driver_2020 u left join driver_2020 v on u.month>=v.month group by u.month), accepted as( select month(w.requested_at) as month, count(distinct x.driver_id) as accept_cnt from acceptedrides x left join rides w on x.ride_id=w.ride_id where year(w.requested_at)=2020 group by 1) select a.month, round(ifnull((b.accept_cnt/a.cul_cnt),0)*100,2) as working_percentage from cul_driver_2020 a left join accepted b on a.month=b.month order by a.month
with recursive month as( select 1 as month union select month+1 as month from month where month < 12 ), month_driver as( select if(year(join_date) < 2020, '1', month(join_date)) as 'month', count(distinct driver_id) as active_driver from drivers where year(join_date) <= 2020 group by 1 ), work_driver as( select month(r.requested_at) as 'month', count(distinct ar.driver_id) as acc_driver from rides r join acceptedrides ar on r.ride_id = ar.ride_id where year(r.requested_at) = '2020' group by 1 ) select m.month, round(100*ifnull(wd.acc_driver/sum(md.active_driver),0),2) as working_percentage from month m left join month_driver md on md.month <= m.month left join work_driver wd on wd.month = m.month group by 1 order by 1
with recursive month12 as ( select 1 as month union select month + 1 from month12 where month < 12 ) , total_driver as ( select month12.month, ifnull(max(tmp.rolling_total) over(order by month), 0) as total_driver from month12 left join ( select month(join_date) as join_month , count(driver_id) over(order by join_date rows unbounded preceding) as rolling_total from drivers where year(join_date) <= 2020 ) tmp on tmp.join_month=month12.month ) , accept_driver as ( select month(requested_at) as accept_month , count(distinct driver_id) as accept_driver from acceptedrides ar join rides r on r.ride_id=ar.ride_id where year(requested_at)=2020 group by 1 ) select month12.month , ifnull(round(accept_driver/total_driver*100, 2), 0) as working_percentage from month12 left join total_driver on total_driver.month=month12.month left join accept_driver on accept_driver.accept_month=month12.month group by 1
with recursive monthCount as (select 1 as month union all select month + 1 as month from monthCount where month < 12), driver_month as (select ride_month, count( distinct driver_id) as active_drivers from ( select driver_id, MONTH(requested_at) as ride_month from Rides r left join AcceptedRides a on r.ride_id = a.ride_id where YEAR(requested_at ) = '2020' )t2 group by ride_month ), available_drivers as (select month, count(distinct d.driver_id) available_drivers from monthcount m left join drivers d on (m.month >= month(d.join_date) and year(d.join_date) = 2020) or year(d.join_date) < 2020 group by month), active_drivers as (select month(r.requested_at) as month, count(distinct driver_id) as active_drivers from rides r join AcceptedRides a on r.ride_id= a.ride_id where year(r.requested_at) =2020 ) select m.month, case when available_drivers.available_drivers = 0 then 0 else ifnull(round((driver_month.active_drivers/available_drivers.available_drivers)*100, 2) ,0) end as working_percentage from monthCount m left join driver_month on m.month = driver_month.ride_month left join available_drivers on m.month =available_drivers.month order by 1
with recursive month_2020 as ( select 1 as month union all select month+1 from month_2020 where month +1 <13), accepted_driver as ( select accepted_driver_cnt,b.month from( select count(distinct driver_id) as accepted_driver_cnt, month(requested_at) as month from acceptedrides inner join rides on acceptedrides.ride_id = rides.ride_id where year(requested_at) = 2020 group by month(requested_at)) t right join month_2020 b on t.month = b.month ), available_driver_month as ( select sum(available_drivers) as available_drivers, month from( (select coalesce(available_drivers,0) as available_drivers , b.month from( select count(driver_id) as available_drivers, month(join_date) as join_month,year(join_date) as join_year from drivers group by year(join_date),month(join_date)) aa right join month_2020 b on aa.join_month = b.month and aa.join_year =2020) union all (select count(driver_id) as available_drivers, 1 as month from drivers where year(join_date) < 2020)) co group by month) select a.month, case when a.driver_during_month = 0 then 0.00 else ROUND((coalesce(b.accepted_driver_cnt,0) / coalesce(a.driver_during_month,1)) * 100,2) end as working_percentage from ( select month ,sum(available_drivers) over(order by month rows between unbounded preceding and current row) as driver_during_month from available_driver_month) a right join accepted_driver b on a.month = b.month
with recursive month_series as ( select 1 as mon union select mon+1 as mon from month_series where mon<12 ), available_users_monthly as ( select m.mon, coalesce(count(distinct d.driver_id),0.00) as cnt from month_series m left join Drivers d on(d.join_date<'2020-01-01' or (extract(YEAR from d.join_date)=2020 and m.mon>=extract(MONTH from d.join_date))) group by m.mon ), working_drivers_monthly as ( select m.mon, coalesce(count(distinct ar.driver_id),0.00) as cnt from month_series m left join rides r on (EXTRACT(YEAR from r.requested_at)=2020 and EXTRACT(MONTH from r.requested_at)=m.mon) left join AcceptedRides ar on (r.ride_id=ar.ride_id) group by m.mon ) select a.mon as month, coalesce(round((w.cnt*100.0)/a.cnt,2),0.00) as working_percentage from available_users_monthly a join working_drivers_monthly w on(a.mon=w.mon)
with recursive monthcount as ( select 1 month union all select month+1 month from monthcount where month < 12) select t1.month, round(ifnull(t2.active_drivers*100/t1.available_drivers,0),2) as working_percentage from (select m.month, count(d.driver_id) as available_drivers from monthcount as m left join drivers as d on d.join_date <= last_day(concat('2020-',m.month,'-1')) group by m.month) as t1 left join (select month(r.requested_at) as month, count(distinct driver_id) as active_drivers from rides as r join acceptedrides as ar on r.ride_id=ar.ride_id and year(r.requested_at)=2020 group by month(r.requested_at)) as t2 on t1.month=t2.month order by t1.month
with recursive monthid as ( select 1 as m union select m+1 as m from monthid where m<12), t as (select driver_id, join_date from Drivers union all select driver_id,adddate(join_date,interval 1 month) from t where join_date<str_to_date('20201201',"%Y%m%d")), t2 as (select date_format(join_date,"%Y-%m-01") date ,count(distinct driver_id) counts from t where date_format(join_date,"%Y-%m")<="2020-12" and date_format(join_date,"%Y-%m")>="2020-01" group by 1), t3 as (select month(date) months,counts from t2 group by 1), t4 as (select driver_id,requested_at from Rides join AcceptedRides using(ride_id)), t5 as (select month(requested_at) months,count(distinct driver_id) counts from t4 where date_format(requested_at,"%Y-%m")<="2020-12" and date_format(requested_at,"%Y-%m")>="2020-01" group by 1) select m as month, ifnull(round((ifnull(t5.counts,0)/ifnull(t3.counts,0)*100),2),0) as working_percentage from monthid left join t3 on m=t3.months left join t5 on m=t5.months group by 1 order by 1
with recursive months as ( select '2020-01-01' as month union all select month + interval 1 month from months where month + interval 1 month < '2021-01-01' ), total_drivers as ( select month, ifnull(count(*),0) as total_available_drivers from months left join drivers on last_day(months.month) >= drivers.join_date group by month ), working_drivers as ( select last_day(requested_at) + interval 1 day - interval 1 month as month, count(distinct driver_id) as working_drivers from acceptedrides a join rides on a.ride_id = rides.ride_id group by month ) select extract(month from total_drivers.month) as month, round(ifnull(working_drivers/total_available_drivers*100.0, 0),2) as working_percentage from total_drivers left join working_drivers on total_drivers.month = working_drivers.month where extract(year from total_drivers.month) = 2020 order by month
with recursive months as ( select 1 as month union all select month+1 from months where month <12), available_drivers as ( select distinct months.month, ifnull(max(t1.active_driver) over (order by month),0) as active_driver from months left join (select month(join_date) as month, count(driver_id) over (order by join_date rows unbounded preceding) as active_driver from drivers where year(join_date) <= 2020) t1 on t1.month = months.month ), working_drivers as ( select month(requested_at) as month, count(distinct driver_id) as working_driver from Rides R join AcceptedRides A on R.ride_id = A.ride_id where year(requested_at) = 2020 group by month(requested_at)) select ad.month, ifnull(round(working_driver/active_driver*100,2),0) as working_percentage from available_drivers ad left join working_drivers wd on wd.month = ad.month
with recursive months as ( select 1 as month union all select month+1 from months where month <12), available_drivers as ( select months.month, ifnull(max(t1.active_driver) over (order by month),0) as active_driver from months left join (select month(join_date) as month, count(driver_id) over (order by join_date rows unbounded preceding) as active_driver from drivers where year(join_date) <= 2020) t1 on t1.month = months.month ), working_drivers as ( select month(requested_at) as month, count(distinct driver_id) as working_driver from Rides R join AcceptedRides A on R.ride_id = A.ride_id where year(requested_at) = 2020 group by 1) select DISTINCT ad.month, ifnull(round(working_driver/active_driver*100,2),0) as working_percentage from available_drivers ad left join working_drivers wd on wd.month = ad.month
with recursive months as ( select 1 as month union all select month+1 from months where month <12), available_drivers as ( select months.month, ifnull(max(t1.active_driver) over (order by month),0) as active_driver from months left join (select month(join_date) as month, count(driver_id) over (order by join_date rows unbounded preceding) as active_driver from drivers where year(join_date) <= 2020) t1 on t1.month = months.month ), working_drivers as ( select month(requested_at) as month, count(distinct driver_id) as working_driver from Rides R join AcceptedRides A on R.ride_id = A.ride_id where year(requested_at) = 2020 group by 1) select months.month, ifnull(round(working_driver/active_driver*100,2),0) as working_percentage from months left join available_drivers on available_drivers.month = months.month left join working_drivers on working_drivers.month = months.month group by 1
with recursive months as ( select 1 as month union all select month+1 from months where month <12), available_drivers as ( select months.month, ifnull(max(t1.active_driver) over (order by month),0) as active_driver from months left join (select month(join_date) as month, count(driver_id) over (order by join_date) as active_driver from drivers where year(join_date) <= 2020) t1 on t1.month = months.month ), working_drivers as ( select month(requested_at) as month, count(distinct driver_id) as working_driver from Rides R join AcceptedRides A on R.ride_id = A.ride_id where year(requested_at) = 2020 group by 1) select months.month, ifnull(round(working_driver/active_driver*100,2),0) as working_percentage from months left join available_drivers on available_drivers.month = months.month left join working_drivers on working_drivers.month = months.month group by 1
with recursive months as ( select 1 as month union all select month+1 from months where month<12 ), driver_available as ( select (case when year(join_date)<2020 then 1 else month(join_date) end) as month, driver_id from drivers where year(join_date)<=2020 ), driver_acceptedrides as( select month(r.requested_at) as month,a.driver_id from rides as r join acceptedrides as a on r.ride_id=a.ride_id where year(r.requested_at)=2020 ) select m.month,round(ifnull(count(distinct a.driver_id)/count(distinct da.driver_id),0)*100,2) as working_percentage from months as m left join driver_available as da on m.month>=da.month left join driver_acceptedrides as a on m.month=a.month group by m.month order by m.month
with recursive months as ( select 1 as month union all select month+1 from months where month<12), driver as ( select driver_id, case when year(join_date) < 2020 then 1 else month(join_date) end as month from Drivers where year(join_date) <= 2020 ), avail_driver as ( select a.month,count(b.driver_id) as avails from months a left join driver b on a.month>=b.month group by 1), accept_rides as (select a.month, count(distinct driver_id) as rides from months a left join (select driver_id, month(requested_at) as month from acceptedrides a left join rides b on a.ride_id=b.ride_id where requested_at like '2020%')b on a.month=b.month group by 1 ) select a.month, ifnull(round(100*rides/avails,2),0) working_percentage from accept_rides a inner join avail_driver b on a.month=b.month order by 1
with recursive months as ( select 1 as month union select month+1 from months where month < 12 ) , available_drivers_each_month as ( select if(year(join_date)<2020, 1, month(join_date)) as month, count(driver_id) as drives from Drivers where year(join_date)<=2020 group by month ) , active_drive_each_month AS (SELECT MONTH(requested_at) AS month, COUNT(DISTINCT ar.driver_id) AS ride_num FROM AcceptedRides ar LEFT JOIN Rides r ON ar.ride_id = r.ride_id WHERE YEAR(requested_at) = '2020' GROUP BY month) SELECT T1.month AS 'month', ROUND(100 * IFNULL(T3.ride_num / SUM(T2.drives), 0),2) AS working_percentage FROM months T1 LEFT JOIN available_drivers_each_month T2 ON T1.month >= T2.month LEFT JOIN active_drive_each_month T3 ON T1.month = T3.month GROUP BY T1.month ORDER BY T1.month
with recursive months as ( select 1 month union all select month+1 from months where month <12), total_drivers as ( select m.month, count(d.driver_id) as "active_drivers" from months m, Drivers d where last_day(str_to_date(concat(2020,m.month),"%Y%m")) >= d.join_date group by m.month), working_drivers as ( select month(r.requested_at) month, count(distinct ar.driver_id) working_drivers from Rides r, AcceptedRides ar where r.ride_id = ar.ride_id and year(r.requested_at) = 2020 group by month(r.requested_at)) select m.month, ifnull(round(ifnull(w.working_drivers,0)/t.active_drivers*100,2),0.00) as "working_percentage" from months m left join total_drivers t on m.month = t.month left join working_drivers w on m.month = w.month
with recursive months as (select 1 as month union all select month + 1 as month from months where month < 12), drivers_updateMonth as (select driver_id, case when year(join_date) < 2020 then 1 else month(join_date) end as join_month from Drivers where year(join_date) < 2021), drivers_counted as (select join_month, count(*) as active_drivers from drivers_updateMonth group by join_month), ride_driver as (select a.ride_id, a.driver_id, month(r.requested_at) as month from AcceptedRides a left join Rides r on a.ride_id = r.ride_id where year(r.requested_at) = 2020), ride_driver_final as (select month, count(distinct driver_id) as active_driver from ride_driver group by month), final_prev as (select m.month, ifnull(rf.active_driver, 0) as adriver from months m left join ride_driver_final rf on m.month = rf.month), final_prev2 as (select f.*, ifnull(active_drivers, 0) as active_drive from final_prev f left join drivers_counted dc on f.month = dc.join_month), final_prev3 as (select month, adriver, sum(active_drive) over (order by month) as n_active_driver from final_prev2 as f2) select month, round(ifnull((adriver/n_active_driver)*100, 0),2) as working_percentage from final_prev3
with recursive months as (select 1 as month union all select month + 1 from months where month < 12), driver_count as (select month(join_date) as month , count(driver_id) over (order by join_date) as active_drivers from drivers where year(join_date) <= 2020), driver_num as (select m.month, max(dc.active_drivers)over(order by month) as active_drivers from months m left join driver_count dc on m.month = dc.month ), driver_acc as (select month(r.requested_at) as month, count(distinct driver_id) as driver_num from rides r join AcceptedRides a using (ride_id) where year(r.requested_at)=2020 group by month) select distinct dm.month, round(ifnull(case when dm.active_drivers = 0 then 0 else da.driver_num *100/dm.active_drivers end,0),2) as working_percentage from driver_num dm left join driver_acc da on dm.month = da.month
with recursive months as (select 1 as month union all select month + 1 from months where month<12), driver_month as( select month, sum(driver_cnt) over(order by month) + (select count(1) from Drivers where year(join_date)<2020) as driver_cnt from (select t1.month, ifnull(t2.driver_cnt,0) as driver_cnt from months t1 left join (select month(join_date) as month, count(1) driver_cnt from Drivers where year(join_date) = 2020 group by month(join_date)) t2 on t1.month = t2.month) t ) , working_driver_month as( select month(requested_at) as month, count(distinct driver_id) as working_driver_cnt from AcceptedRides t1 join Rides t2 on t1.ride_id = t2.ride_id where year(requested_at) = 2020 group by month(requested_at) ) select t1.month, ifnull(round(ifnull(working_driver_cnt,0)/driver_cnt*100,2),0.00) as working_percentage from driver_month t1 left join working_driver_month t2 on t1.month = t2.month order by t1.month
with recursive months as (select 1 as month union all select month +1 from months where month <12 ), av_drivers as ( select month, sum(num_drivers) over(order by month) as n_driver from ( select month, ifnull(count(driver_id),0) as num_drivers from months left join( select driver_id, (case when join_Date < '2020-01-01' then 1 else month(join_date) end) as active_month from drivers where join_date < '2021-01-01' ) as sub on sub.active_month = months.month group by month ) as t), r_tbl as ( select month(requested_at) as ride_month, ifnull(count(distinct driver_id),0) as active from rides left join acceptedrides on rides.ride_id = acceptedrides.ride_id where requested_at>= '2020-01-01' and requested_at <'2021-01-01' group by month(requested_at) ) select month, round(ifnull(active/n_driver *100,0),2) as working_percentage from av_drivers left join r_tbl on av_drivers.month = r_tbl.ride_month order by month
with recursive months as (select 1 num union all select num + 1 as num from months where num < 12), workdrivers as (select distinct month(a.requested_at) work_month, b.driver_id from Rides a right join AcceptedRides b using(ride_id) where year(a.requested_at) = 2020), availdrivers as (select x.num as av_month, sum(m.work_drivers) over(order by x.num) av_drivers from (select case when year(join_date) < 2020 then 1 else month(join_date) end as av_month, count(distinct driver_id) work_drivers from Drivers where year(join_date) <= 2020 group by 1) m right join months x on x.num = m.av_month group by 1) select x.num month, round(ifnull(ifnull(y.work_drivers, 0)/ifnull(z.av_drivers,0)*100,0), 2) working_percentage from months x left join (select work_month, count(driver_id) work_drivers from workdrivers group by 1) y on x.num = y.work_month left join availdrivers z on x.num = z.av_month order by 1
with recursive months(month) as ( select 1 as month union all select month + 1 from months where month < 12 ), t1 as ( select r.ride_id, requested_at, ar.driver_id from Rides r, AcceptedRides ar where r.ride_id = ar.ride_id and year(requested_at) = 2020 ) select m.month, round(ifnull(count(distinct t1.driver_id)/count(distinct d.driver_id)*100,0),2) as working_percentage from months m left join Drivers d on d.join_date < adddate(concat('2020-',m.month,'-01'), interval 1 month) left join t1 on t1.driver_id = d.driver_id and month(t1.requested_at) = m.month group by m.month order by 1
with recursive months(month) as ( select 1 union all select month + 1 from months where month < 12 ), t1 as ( select month(join_date) as month, count(driver_id) over (order by join_date) as active_drivers from drivers where year(join_date) <= 2020 ), t2 as ( select month(r.requested_at) as month, count(distinct ar.driver_id) as drivers_accepted from AcceptedRides ar join Rides r on ar.ride_id = r.ride_id where year(r.requested_at) = 2020 group by month ) select distinct m.month, round(ifnull(drivers_accepted/max(t1.active_drivers) over (order by m.month)*100,0),2) as working_percentage from months m left join t1 on m.month = t1.month left join t2 on m.month = t2.month
with recursive months(month) as (select 1 union all select month+1 from months where month< 12), t1 as (select month(join_date) as `month`, count(driver_id) over (order by join_date) as driver_count from Drivers where year(join_date)<=2020), t2 as ( select month(r.requested_at) as `month`, count(distinct a.driver_id) as active_driver from Rides r join AcceptedRides a on r.ride_id=a.ride_id where year(r.requested_at)=2020 group by month(r.requested_at) ) select a.month, round(ifnull(a.act_cnt/a.tot_cnt*100,0),2) as working_percentage from (select distinct m.month, ifnull(max(t1.driver_count) over (order by m.month),0) as tot_cnt, ifnull(t2.active_driver,0) as act_cnt from months m left join t1 on m.month=t1.month left join t2 on m.month=t2.month) a
with recursive monthtable as( select 1 as month, 2020 as year union all select month+1 as month, year from monthtable where month<12 ), drivertable as( select month(join_date) as month, year(join_date) as year, count(driver_id) over(order by join_date) as active_driver from drivers where year(join_date)<=2020 ), ridetable as( select month(requested_at) as month, a.driver_id from rides as r join AcceptedRides as a using (ride_id) where year(requested_at)=2020 ) select distinct m.month, ifnull( ROUND( count(distinct r.driver_id)/m.numdrivers*100, 2) ,0) as working_percentage from ( select m.month, ifnull(max(d.active_driver)over(order by m.month), 0) as numdrivers from monthtable as m left join drivertable as d using (month) )m left join ridetable as r using (month) group by m.month order by m.month
with recursive r as ( select 1 as month union select 1+ month from r where month < 12), a as ( select month(join_date) month, count(*) over (order by join_date) active_drivers from drivers where year(join_date) <= '2020' ), b as ( select month(requested_at) month, count(distinct driver_id) accepted_drivers from rides join acceptedrides using (ride_id) where year(requested_at) ='2020' group by 1 ) select distinct r.month, ifnull(round(accepted_drivers/max(active_drivers) over (order by month)*100,2),0) working_percentage from r left join a using (month) left join b using (month)
with recursive rec as ( select 1 as month union select month+1 from rec where month<12), available as ( select driver_id, 0 as join_month from drivers where year(join_date) < 2020 union select driver_id, month(join_date) as join_month from drivers where year(join_date) = 2020), active as (select month(requested_at) as month_req, count(distinct b.driver_id) as counts from Rides a join AcceptedRides b on a.ride_id=b.ride_id where year(requested_at) = 2020 group by month(requested_at) ), temp as (select a.month, count(distinct(driver_id)) as available_d, ifnull(c.counts,0) as accepted from rec a left join available b on a.month >= b.join_month left join active c on a.month = c.month_req group by a.month order by a.month) select month, ifnull(round(accepted/available_d*100,2),0) as working_percentage from temp order by month
with recursive seq as ( select 1 as month union select 1+month from seq where month < 12), drive as (select driver_id, if(year(join_date) < 2020, 1, month(join_date)) as month from Drivers where year(join_date) <= 2020), acc_ride as(select a.driver_id, month(requested_at) as month from AcceptedRides a inner join Rides b on a.ride_id = b.ride_id where year(requested_at) = 2020) select a.month, ifnull(round(100*count(distinct c.driver_id)/count(distinct b.driver_id), 2), 0) as working_percentage from seq a left join drive b on a.month >= b.month left join acc_ride c on a.month = c.month group by 1 order by 1
with recursive seq as (select 1 as month union all select month+1 from seq where month <12), new_driver as (select case when join_date < '2020-01-01' then 1 else convert(substring(join_date,6,2),unsigned integer) end as join_month, count(distinct driver_id) as new_driver from drivers where join_date <= '2020-12-31' group by 1), monthly_driver as (select seq.month,sum(ifnull(n.new_driver,0)) as total_driver from seq left join new_driver n on seq.month >= n.join_month group by 1), active_driver as (select convert(substring(r.requested_at,6,2),unsigned integer) as month, ifnull(count(distinct a.driver_id),0) as active_driver from acceptedrides a left join rides r on a.ride_id = r.ride_id where r.requested_at between '2020-01-01' and '2020-12-31' group by 1) select m.month, round(ifnull(a.active_driver/m.total_driver*100,0),2) as working_percentage from monthly_driver m left join active_driver a on m.month = a.month order by 1
with recursive t as ( select 1 as month union all select month + 1 from t where month < 12), t1 as ( select driver_id, join_date, case when year(join_date) < 2020 then '2020-01-01' else join_date end as new_date from drivers), t2 as ( select distinct t.month, count(distinct t1.driver_id) as active_driver from t left join t1 on t.month = month(t1.new_date) and year(t1.new_date) = 2020 group by 1), t3 as ( select distinct t.month, count(distinct driver_id) as accepted_rider from t left join ( select a.driver_id, r.requested_at from acceptedrides a left join rides r on a.ride_id = r.ride_id and year(r.requested_at) = 2020) t4 on t.month = month(t4.requested_at) group by 1) select t3.month, round(100*(ifnull(t3.accepted_rider/sum(t2.active_driver)over(order by t2.month),0)),2) as working_percentage from t3 join t2 on t3.month = t2.month
with recursive t as ( select 1 month union all select month+1 from t where month<12 ) ,t2 as (select distinct t.month, count(drivers.driver_id) over(partition by t.month) as valid_drivers from t left join (select driver_id, case when join_date <"2020-01-01" then "2020-01-01" else join_date end as new_date from drivers) drivers on t.month = month(drivers.new_date) and year(drivers.new_Date) = 2020) ,t3 as (select t.month, count(distinct driver_id) as accepted_driver from rides right join AcceptedRides on rides.ride_id = acceptedRides.ride_id right join t on t.month = month(rides.requested_at) and year(rides.requested_at) = 2020 group by t.month) select t2.month, round(ifnull(accepted_driver/sum(valid_drivers) over(order by t2.month)*100,0),2) as working_percentage from t2 join t3 on t2.month = t3.month
with recursive t as (select 1 as month union all select month+1 from t where month < 12), t2 as (select *, if(year(join_date) < 2020, 1, month(join_date)) month from drivers where year(join_date) <= 2020), t3 as (select r.*, month(r.requested_at) month, a.driver_id from rides r inner join acceptedrides a on r.ride_id = a.ride_id where year(r.requested_at) = 2020), t4 as (select month, count(distinct driver_id) work_cnt from t3 group by month), t5 as (select t.month, sum(ifnull(count(distinct t2.driver_id),0)) over(order by month) cnt from t left join t2 on t.month = t2.month group by month) select t.month, ifnull(round((ifnull(t4.work_cnt,0))*100/(t5.cnt),2), 0.00) working_percentage from t left join t4 on t.month = t4.month left join t5 on t.month = t5.month
with recursive t as (select 1 as month union all select month+1 from t where month+1 <= 12) ,Drivers_t as (select month(join_date) month, count(driver_id) over (order by join_date) as cnt from Drivers where year(join_date) <= '2020') , request_t as (select month(requested_at) as month, count(distinct driver_id) as ride_cnt from Rides join AcceptedRides using(ride_id) where year(requested_at) = '2020' group by 1) select t2.month, round(ifnull(ride_cnt/driver_cnt,0)*100,2) as working_percentage from (select distinct month, ifnull(max(cnt) over (order by month),0) as driver_cnt from t left join Drivers_t using(month)) t2 left join request_t using(month)
with recursive t0 (m) as (select "2020-02-01" as m union all select date_add(m, interval 1 month) from t0 where m < "2021-01-01"), t1 as (select date_sub(m, interval 1 day) as mon from t0), t2 as (select t1.mon, count(driver_id) as active_drivers from t1 left join Drivers d on t1.mon >= d.join_date group by 1), t3 as (select t1.mon, driver_id from t1 left join (select a.ride_id, a.driver_id, r.requested_at from AcceptedRides a left join Rides r on a.ride_id = r.ride_id) tmp on date_format(requested_at,"%Y-%m") = date_format(t1.mon,"%Y-%m") group by 1, 2 having count(ride_id) >= 1), t4 as (select mon, count(driver_id) as driver_one_ride from t3 group by 1) select month(t2.mon) as month, round(ifnull(driver_one_ride / active_drivers * 100, 0), 2) as working_percentage from t2 left join t4 on t2.mon = t4.mon
with recursive t0 as( select 1 as month union all select month+1 as month from t0 where month<12 ), t1 as( select month(requested_at) as month, count(distinct a.driver_id) as cnt1 from Rides as r join AcceptedRides as a on r.ride_id = a.ride_id where requested_at between date('2020-1-1') and date('2020-12-31') group by month(requested_at) having count(r.ride_id)>=1), t2 as( select t0.month, sum(n) over (order by t0.month) + (select count(*) from Drivers where join_date < date('2020-1-1')) as cnt2 from (select month(join_date) as month, count(*) as n from Drivers where join_date between date('2020-1-1') and date('2020-12-31') group by month)a right join t0 on a.month = t0.month ) select t0.month, round(ifnull(cnt1/cnt2,0)*100,2) as working_percentage from t0 left join t1 on t0.month = t1.month left join t2 on t0.month = t2.month order by t0.month
with recursive t1 as ( select 1 as month union select month+1 as month from t1 where month < 12 ), t2 as ( select if(year(join_date)=2019, 1, month(join_date)) as 'month', count(distinct driver_id) as active_drivers from Drivers where year(join_date)<=2020 group by month ), t3 as ( select month(requested_at) as 'month', count(distinct AcceptedRides.driver_id) as accepted_rides from Rides join AcceptedRides on Rides.ride_id = AcceptedRides.ride_id where year(requested_at)=2020 group by month ) select t1.month, round(ifnull(100*t3.accepted_rides/sum(t2.active_drivers), 0), 2) as working_percentage from t1 left join t2 on t1.month>=t2.month left join t3 on t1.month=t3.month group by 1 order by 1
with recursive t1 as ( select 1 as month union select month+1 from t1 where month < 12 ), t2 as ( select if(year(join_date)='2019', 1, month(join_date)) as month, count(driver_id) as num_drivers from Drivers where year(join_date) <= '2020' group by 1 ), t3 as ( select month(requested_at) as month, count(distinct AcceptedRides.driver_id) as num_accepted_rides from Rides join AcceptedRides on Rides.ride_id = AcceptedRides.ride_id where year(requested_at) = '2020' group by 1 ) select t1.month, round(ifnull(100*t3.num_accepted_rides/sum(t2.num_drivers), 0), 2) as working_percentage from t1 left join t2 on t2.month <= t1.month left join t3 on t3.month = t1.month group by 1 order by 1
with recursive t1 as ( select 1 as month union select t1.month + 1 from t1 where t1.month < 12 ), t2 as ( select month(rs.requested_at) as month, count(distinct ar.driver_id) as num_workdriver from rides rs join AcceptedRides ar on rs.ride_id = ar.ride_id where rs.requested_at between '2020-01-01' and '2020-12-31' group by month(rs.requested_at) ), t3 as ( select t1.month, sum(case when d.join_date <= last_day(concat('2020-', t1.month, '-01')) then 1 else 0 end) as num_activedriver from t1, drivers d group by t1.month ) select t3.month, round(ifnull(100*t2.num_workdriver/t3.num_activedriver,0),2) as working_percentage from t3 left join t2 on t3.month = t2.month order by t3.month
with recursive t1 as (select 1 as 'month' union all select month + 1 from t1 where month < 12), t2 as (select case when year(join_date) < 2020 then 1 else month(join_date) end as 'month', count(driver_id) as new_drivers from drivers where year(join_date) <= 2020 group by month), t3 as (select month(requested_at) as 'month', count(distinct driver_id) as active_drivers from rides a join acceptedrides b on a.ride_id = b.ride_id where year(requested_at) = 2020 group by month), t4 as (select t1.month, sum(ifnull(new_drivers, 0)) over (order by t1.month) as all_drivers from t1 left join t2 on t1.month = t2.month) select t4.month, round(100*ifnull(active_drivers/all_drivers, 0), 2) as working_percentage from t4 left join t3 on t4.month = t3.month
with recursive t1 as (select 1 as 'month' union select month + 1 from t1 where month < 12), t2 as (select month(requested_at) as 'month', count(distinct driver_id) as driver_cnt1 from rides a join acceptedrides b on a.ride_id = b.ride_id where year(requested_at) = 2020 group by 1), t3 as (select case when year(join_date) < 2020 then 1 else month(join_date) end as 'month', count(*) as driver_cnt2 from drivers where year(join_date) <= 2020 group by 1), t4 as (select t1.month, ifnull(driver_cnt1, 0) as driver_cnt, sum(ifnull(driver_cnt2, 0)) over (order by t1.month) as driver_sum from t1 left join t3 on t1.month = t3.month left join t2 on t1.month = t2.month) select month, round(ifnull(100*driver_cnt/driver_sum, 0), 2) as working_percentage from t4
with recursive t1 as (select 1 as month union select month + 1 as month from t1 where month < 12 ), t2 as (select month(requested_at) as month, count(distinct driver_id) as act_id from rides a inner join AcceptedRides b using (ride_id) where year(requested_at)=2020 group by 1 ) select a.month, case when count(b.driver_id)=0 then round(0,2) else round(100*ifnull(act_id,0)/count(b.driver_id),2) end as working_percentage from t1 a left join drivers b on (year(join_date)=2020 and month(join_date)<=a.month) or year(join_date)<2020 left join t2 c on a.month=c.month group by 1 order by 1
with recursive t1 as( select 1 as month union select month+1 from t1 where month<12 ), t2 as ( select case when year(join_date)<2020 then 1 else month(join_date) end as month , count( driver_id) as new_drivers from Drivers where year(join_date) < 2021 group by month ) , t3 as (select t1.month, sum(ifnull(new_drivers, 0)) over (order by t1.month) as all_drivers from t1 left join t2 on t1.month = t2.month), t4 as ( select month(requested_at) as 'month', count(distinct driver_id) as cnt from rides a join acceptedrides b on a.ride_id = b.ride_id where year(requested_at) = 2020 group by month) select t3.month, round(100*ifnull(cnt/all_drivers,0),2) as working_percentage from t3 left join t4 on t3.month = t4.month
with recursive t1 as( select 1 as month union select month+1 from t1 where month<12 ), t2 as ( select case when year(join_date)<2020 then 1 else month(join_date) end as month , count( driver_id) as new_drivers from Drivers where year(join_date) < 2021 group by month ) , t3 as (select t1.month, sum(ifnull(new_drivers, 0)) over (order by t1.month) as all_drivers from t1 left join t2 on t1.month = t2.month), t4 as ( select month(requested_at) as month, count(distinct driver_id) as cnt from rides a join acceptedrides b on a.ride_id= b.ride_id where year(requested_at) = 2020 group by month ) select t3.month, round(100*ifnull(cnt/all_drivers,0),2) as working_percentage from t3 left join t4 on t3.month = t4.month
with recursive t1 as(select 1 as month union all select 1+ month as month from t1 where month<12) , t2 as ( select extract( month from b.requested_at) as month, count(distinct driver_id) as nbr_drivers from AcceptedRides a left join rides b on a.ride_id = b.ride_id where extract(year from b.requested_at)= 2020 group by extract(month from b.requested_at) ), t3 as ( select driver_id, case when join_date <= '2019-12-31' then 1 else extract( month from join_date) end as month from Drivers where join_date<= '2020-12-31' ), t4 as ( select month, sum(avail_drivers) over (order by month) as available_drivers from (select t1.month, count(distinct t3.driver_id) as avail_drivers from t1 left join t3 on t1.month=t3.month group by t1.month order by t1.month) a ) select t1.month, case when t2.nbr_drivers>0 and t4.available_drivers>0 then round(100* t2.nbr_drivers / t4.available_drivers,2) else 0 end as working_percentage from t1 left join t2 on t1.month=t2.month left join t4 on t1.month=t4.month
with recursive t1 as(select 1 as month union all select month+1 from t1 where month<12), t2 as (select case when year(join_date) < 2020 then 1 else month(join_date) end as 'month', count(driver_id) as new_drivers from drivers where year(join_date) <= 2020 group by month), t3 as(select t1.month, sum(ifnull(new_drivers, 0)) over (order by t1.month) as all_drivers from t1 left join t2 on t1.month = t2.month), t4 as (select month(requested_at) as month,count(distinct driver_id) as accepted_driver from Rides a join Acceptedrides b on a.ride_id=b.ride_id where year(requested_at)=2020 group by 1), t5 as (select t1.month,ifnull(t4.accepted_driver,0) as accepted_driver from t1 left join t4 on t1.month=t4.month) select t3.month,ifnull(round(accepted_driver/all_drivers*100,2),0.00) as working_percentage from t3 join t5 on t3.month=t5.month
with recursive t1(n) as ( SELECT 1 UNION all SELECT n+1 FROM T1 WHERE n<12 ), t3 as ( SELECT T2.year*100+T1.n ym FROM T1 CROSS JOIN ( SELECT 2019 year UNION SELECT 2020 year UNION SELECT 2021 year ) t2 ), t6 as ( SELECT ym-202000 ym, cnt FROM ( SELECT ym, SUM(cnt) OVER (ORDER BY ym) cnt FROM ( SELECT t3.ym, COALESCE(count(driver_id), 0) cnt FROM Drivers d RIGHT OUTER JOIN t3 ON year(join_date)*100 + month(join_date) = t3.ym GROUP BY t3.ym ) t4 ) t5 where ym between 202001 and 202012 ), t7 as ( SELECT t3.ym-202000 ym ,count(distinct driver_id) cnt FROM AcceptedRides ar INNER JOIN Rides r ON ar.ride_id = r.ride_id RIGHT OUTER JOIN t3 ON year(requested_at)*100+month(requested_at) = t3.ym WHERE t3.ym between 202001 and 202012 GROUP BY t3.ym-202000 ) SELECT t6.ym month, COALESCE(round(t7.cnt/t6.cnt*100, 2), 0) working_percentage FROM T6 INNER JOIN T7 ON T6.ym = T7.ym
with recursive t2 as (select month(requested_at) as mon, count(distinct b.driver_id) as accept_cnt from rides a inner join AcceptedRides b on a.ride_id=b.ride_id where year(requested_at)=2020 group by 1 ), t3 as (select 1 as month union all select month + 1 as month from t3 where month<12 ) select a.month, case when c.accept_cnt is null or count(b.driver_id)=0 then round(0.00,2) else round(100*c.accept_cnt/count(b.driver_id),2) end as working_percentage from t3 a left join (select * from drivers) b on (a.month>=month(b.join_date) and year(b.join_date)=2020) or year(b.join_date)<2020 left join t2 c on a.month=c.mon group by a.month, c.accept_cnt order by 1
with recursive t_seq(month) as ( select 1 as month union all select month+1 as month from t_seq where month < 12 ), available_driver as ( select month(j_d) as month, count(driver_id) as available from (select driver_id, case when join_date<date('2020-01-01') then date('2020-01-01') else join_date end as j_d from drivers where join_date<date('2021-01-01')) s group by 1 ), accept as ( select month(requested_at) as month, count(distinct driver_id) as working_dris from rides r join acceptedrides a on r.ride_id = a.ride_id where requested_at >= date('2020-01-01') and requested_at <= date('2020-12-31') group by 1 ) select month, round((case when working_dris is null then 0 else working_dris/available_dris*100 end),2) as working_percentage from ( select t_seq.month, sum(available) over(order by t_seq.month) available_dris, working_dris from t_seq left join available_driver a on t_seq.month = a.month left join accept on accept.month = t_seq.month) t
with recursive tbMonth as ( select 1 as month union all select month+1 from tbMonth where month < 12 ), tbWorkingD as ( select month(r.requested_at) as month, count(distinct ar.driver_id) as cnt_working_drivers from AcceptedRides as ar join rides as r on ar.ride_id = r.ride_id where year(r.requested_at) = 2020 group by month(r.requested_at) ), tbAvailableD as ( select tbMonth.month, count(distinct d.driver_id) as cnt_available_drivers from tbMonth left join drivers as d on (year(d.join_date) < 2020 or (year(d.join_date) = 2020 and tbMonth.month >= month(d.join_date))) group by tbMonth.month ) select tbAvailableD.month, round(coalesce(tbWorkingD.cnt_working_drivers/tbAvailableD.cnt_available_drivers,0)*100,2) as working_percentage from tbAvailableD left join tbWorkingD on tbWorkingD.month = tbAvailableD.month
with recursive tbMonth as ( select 2020*100 + 1 as month union all select month + 1 from tbMonth where month < 2020*100+ 12 ), tbWorkingD as ( select 2020*100 + month(r.requested_at) as month, count(distinct ar.driver_id) as cnt_working_drivers from AcceptedRides as ar join rides as r on ar.ride_id = r.ride_id where year(r.requested_at) = 2020 group by month(r.requested_at) ), tbAvailableD as ( select tbMonth.month, count(distinct d.driver_id) as cnt_available_drivers from tbMonth left join drivers as d on year(d.join_date)*100 + month(d.join_date) <= tbMonth.month group by tbMonth.month ) select mod(tbAvailableD.month,100) as month, round(coalesce(tbWorkingD.cnt_working_drivers/tbAvailableD.cnt_available_drivers,0)*100,2) as working_percentage from tbAvailableD left join tbWorkingD on tbWorkingD.month = tbAvailableD.month
with recursive temp as (select 1 as month union all select month+1 from temp where month<12), temp2 as (select month, count(driver_id) as driver_num from (select driver_id,join_date,case when join_date < '2020-01-01' then 1 else month(join_date) end as month from Drivers where join_date <= '2020-12-31') as a group by month order by month) , temp3 as(select temp.month, sum(IFNULL(driver_num,0)) over (order by month) as active_drivers from temp left join temp2 on temp.month = temp2.month) , temp4 as (select AcceptedRides.ride_id,AcceptedRides.driver_id,month(requested_at) as month from AcceptedRides left join Rides on AcceptedRides.ride_id = Rides.ride_id where requested_at between '2020-01-01' and '2020-12-31') select temp.month,ROUND(IFNULL(IFNULL(accepted_rides,0)*100/active_drivers,0),2) as working_percentage from temp left join temp3 on temp.month = temp3.month left join (select month, count(Distinct driver_id) as accepted_rides from temp4 group by month ) as temp5 on temp.month = temp5.month
with recursive temp1 as ( select 1 as month union all select month+1 from temp1 where month < 12 ) , temp2 as ( select year(a.join_date) as join_year, month(a.join_date) as join_month, count(distinct b.driver_id) as cum_driver from Drivers a left join Drivers b on a.join_date >= b.join_date group by 1,2 order by 1,2 ) , temp3 as ( select count(distinct a.driver_id) as cnt, month(b.requested_at) as requested_month from AcceptedRides a join Rides b on a.ride_id = b.ride_id where year(b.requested_at) = 2020 group by 2 ) , temp4 as ( select a.month, max(b.cum_driver) as cum_driver from temp1 a left join temp2 b on a.month >= b.join_month and b.join_year = 2020 group by 1 order by 1 ) select a.month, round(coalesce(b.cnt/a.cum_driver,0)*100.00,2) as working_percentage from temp4 a left join temp3 b on a.month= b.requested_month order by 1
with recursive tmp (month) as (select 0 union all select month + 1 from tmp where month < 12), tmp1 as (select (case when join_date < '2020-01-01' then 0 when join_date > '2020-12-31' then 13 else month(join_date) end) as month, count(driver_id) as cnt from drivers group by month), tmp2 as (select a.month, sum(ifnull(cnt, 0)) over (order by month) as total from tmp a left join tmp1 b on a.month = b.month), tmp3 as (select month(requested_at) as month, count(distinct driver_id) as cnt from acceptedrides a join rides b on a.ride_id = b.ride_id where requested_at between '2020-01-01' and '2020-12-31' group by month) select a.month, ifnull(round(100 * cnt / total, 2), 0) as working_percentage from (select month from tmp where month between 1 and 12) a left join tmp2 b on a.month = b.month left join tmp3 c on a.month = c.month order by month
with recursive tmp as ( select 1 as month union select month + 1 from tmp where month < 12 ), tmp2 as( select * from drivers where year(join_date) = 2020 ), tmp3 as( select month, sum(count(join_date)) over(order by month) + (select count(*) from drivers where year(join_date) < 2020) as total_drivers from tmp left join tmp2 on month = month(join_date) group by 1 ), tmp4 as( select driver_id, requested_at from rides natural join acceptedrides where year(requested_at) = 2020 ), tmp5 as( select month, count(distinct driver_id) as active_drivers from tmp left join tmp4 on month = month(requested_at) group by 1 ) select month, ifnull(round(active_drivers / total_drivers * 100, 2), 0) as working_percentage from tmp3 natural join tmp5 order by 1
with recursive tmp as (select 1 as month, '2020-01-01' as day union all select month + 1 as month, date_add(day,interval 1 month) from tmp where month<12 ) select month, ifnull(round(100*sum(case when ride_cnt>0 then 1 else 0 end)/count(b.driver_id),2),0) as working_percentage from tmp a left join drivers b on left(join_date,7) <= left(day,7) left join (select left(requested_at,7) as mon, driver_id, count(ride_id) as ride_cnt from rides a inner join AcceptedRides b using (ride_id) where year(requested_at)=2020 group by 1,2) c on mon = left(day,7) and b.driver_id=c.driver_id group by 1 order by 1
with recursive years as( SELECT 1 as month UNION ALL SELECT month+1 FROM years WHERE month<12 ), no_drivers as( SELECT month, no_drivers FROM ( SELECT MONTH(join_date) AS month, ROW_NUMBER() OVER(ORDER BY join_date ASC) as no_drivers, join_date FROM Drivers ) a WHERE YEAR(join_date) = '2020' ), driver_years as( SELECT distinct y.month, MAX(no_drivers) OVER(ORDER BY y.month ASC) as no_drivers FROM years y LEFT JOIN no_drivers nd ON y.month = nd.month ), rides_accept as( SELECT MONTH(requested_at) AS month, COUNT(distinct a.driver_id) AS no_accept FROM Rides r JOIN AcceptedRides a ON r.ride_id=a.ride_id WHERE YEAR(requested_at) = '2020' GROUP BY MONTH(requested_at) ) SELECT d.month, ROUND(100*(COALESCE(no_accept/no_drivers, 0)), 2) AS working_percentage FROM driver_years d LEFT JOIN rides_accept r ON d.month=r.month
with recursive yr as ( select 2019 as y union select y + 1 from yr where y < year(current_date) ), mm as ( select 1 as m union select m + 1 from mm where m < 12 ), yymm as ( select y, m from yr join mm ), active_drivers as ( select y, m, count(driver_id) over (order by y, m) as 'dr_count' from Drivers right join yymm on year(join_date) = y and month(join_date) = m ), accepted_rides as ( select y, m, count(distinct driver_id) as 'acp_rides' from Rides join AcceptedRides using(ride_id) right join yymm on year(requested_at) = y and month(requested_at) = m group by y, m ) select distinct m as 'month', round(if(dr_count = 0, 0, acp_rides / dr_count * 100), 2) as 'working_percentage' from active_drivers join accepted_rides using(y, m) where y = 2020
with t as ( with t as ( with t as ( select month(join_date) m, count(*) c from drivers where year(join_date) = 2020 group by month(join_date) union all select 1, count(*) c from drivers where year(join_date) < 2020 union all select 1, 0 union all select 2, 0 union all select 3, 0 union all select 4, 0 union all select 5, 0 union all select 6, 0 union all select 7, 0 union all select 8, 0 union all select 9, 0 union all select 10, 0 union all select 11, 0 union all select 12, 0 ) select m, sum(c) as c from t group by m ) select m, sum(c) over (order by m ) as c from t ) , k as ( select month(b.requested_at) m, count(distinct driver_id) c from AcceptedRides a join rides b on a.ride_id = b.ride_id where year(b.requested_at) = 2020 group by month(b.requested_at) ) select t.m as month, round( if( t.c = 0, 0, 100 * ifnull(k.c, 0) / t.c ) ,2) as working_percentage from t left join k on k.m = t.m order by t.m
with t(Month) AS (SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8 UNION ALL SELECT 9 UNION ALL SELECT 10 UNION ALL SELECT 11 UNION ALL SELECT 12 ) SELECT t.month, CASE WHEN COUNT(distinct a.driver_id)+0.00 = 0.00 OR COUNT(DISTINCT d.Driver_id)+0.00=0.00 THEN 0.00 ELSE ROUND((COUNT(distinct a.driver_id)+0.00)*100 /(COUNT(DISTINCT d.Driver_id)+0.00),2) END as 'Working_percentage' FROM t LEFT JOIN Drivers d ON (MONTH(d.join_Date)<=t.month AND YEAR(d.JOIN_DATE)=2020) OR YEAR(d.join_date) < 2020 LEFT JOIN Rides r ON t.Month=Month(r.requested_at) AND YEAR(r.requested_at)=2020 LEFT JOIN AcceptedRides a ON r.ride_id=a.ride_id GROUP BY t.month ORDER BY t.month
with t(Month) AS (SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8 UNION ALL SELECT 9 UNION ALL SELECT 10 UNION ALL SELECT 11 UNION ALL SELECT 12 ) SELECT t.month, CASE WHEN COUNT(distinct x.driver_id)+0.00 = 0.00 OR COUNT(DISTINCT d.Driver_id)+0.00=0.00 THEN 0.00 ELSE ROUND((COUNT(distinct x.driver_id)+0.00)*100 /(COUNT(DISTINCT d.Driver_id)+0.00),2) END as 'Working_percentage' FROM t LEFT JOIN Drivers d ON (MONTH(d.join_Date)<=t.month AND YEAR(d.JOIN_DATE)=2020) OR YEAR(d.join_date) < 2020 LEFT JOIN (SELECT a.driver_id,r.requested_at FROM Rides r INNER JOIN acceptedrides a ON a.ride_id=r.ride_id WHERE year(r.requested_at)=2020 )x ON t.Month=Month(x.requested_at) GROUP BY t.month ORDER BY t.month
with t(Month) AS (SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4 UNION ALL SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7 UNION ALL SELECT 8 UNION ALL SELECT 9 UNION ALL SELECT 10 UNION ALL SELECT 11 UNION ALL SELECT 12 ) SELECT t.month, CASE WHEN COUNT(distinct x.driver_id)+0.00 = 0.00 OR COUNT(DISTINCT d.Driver_id)+0.00=0.00 THEN 0.00 ELSE ROUND((COUNT(distinct x.driver_id)+0.00)*100 /(COUNT(DISTINCT d.Driver_id)+0.00),2) END as 'Working_percentage' FROM t LEFT JOIN Drivers d ON YEAR(d.join_date) < 2020 OR (MONTH(d.join_Date)<=t.month AND YEAR(d.JOIN_DATE)=2020) LEFT JOIN (SELECT a.driver_id,r.requested_at FROM Rides r INNER JOIN acceptedrides a ON a.ride_id=r.ride_id WHERE year(r.requested_at)=2020 )x ON t.Month=Month(x.requested_at) GROUP BY t.month ORDER BY t.month
