SELECT CEIL(id) transactions_count, IFNULL(num, 0) visits_count FROM (SELECT (@t := @t+1) AS id FROM Transactions t0, (SELECT @t := 0) b, (SELECT MAX(cnt) maxi FROM Visits t11 LEFT JOIN (SELECT user_id, transaction_date, COUNT(*) cnt FROM Transactions GROUP BY user_id, transaction_date)t21 ON t11.user_id=t21.user_id AND visit_date=transaction_date) t31 WHERE @t < maxi UNION SELECT 0) t33 LEFT JOIN (SELECT IFNULL(cnt, 0) cnt, COUNT(*) num FROM Visits t1 LEFT JOIN (SELECT user_id, transaction_date, COUNT(*) cnt FROM Transactions GROUP BY user_id, transaction_date)t2 ON t1.user_id=t2.user_id AND visit_date=transaction_date GROUP BY IFNULL(cnt, 0)) t3 ON t33.id=t3.cnt ORDER BY id
SELECT b.transactions_count AS transactions_count, IFNULL(c.visits_count, 0) AS visits_count FROM (SELECT (@cnt := @cnt + 1) AS transactions_count FROM Transactions, (SELECT @cnt := -1) AS tmp WHERE @cnt < (SELECT COUNT(*) FROM Transactions GROUP BY user_id, transaction_date ORDER BY COUNT(*) DESC LIMIT 1) UNION SELECT 0) AS b LEFT JOIN (SELECT a.transactions_count AS transactions_count, COUNT(a.user_id) AS visits_count FROM (SELECT v.user_id AS user_id, v.visit_date AS visit_date, SUM(IF(t.transaction_date IS NULL, 0, 1)) AS transactions_count FROM Visits AS v LEFT JOIN transactions AS t ON v.user_id = t.user_id AND v.visit_date = t.transaction_date GROUP BY v.user_id, v.visit_date) AS a GROUP BY a.transactions_count) AS c ON b.transactions_count = c.transactions_count
SELECT c.counts AS transactions_count, COALESCE(COUNT(d.visit_date), 0) AS visits_count FROM (SELECT DISTINCT ROW_NUMBER() OVER(PARTITION BY user_id, transaction_date ORDER BY transaction_date) AS counts FROM transactions UNION ALL SELECT 0) c LEFT JOIN (SELECT a.user_id, a.visit_date, COALESCE(COUNT(amount), 0) AS num_transactions FROM Visits a LEFT JOIN Transactions b ON a.user_id = b.user_id AND a.visit_date = b.transaction_date GROUP BY 1, 2) d ON c.counts = d.num_transactions GROUP BY 1 ORDER BY 1
SELECT c.counts AS transactions_count, count(a.transactions_count) AS visits_count FROM (SELECT DISTINCT row_number() OVER (partition BY user_id, transaction_date ORDER BY transaction_date) AS counts FROM transactions UNION ALL SELECT 0) c LEFT JOIN (SELECT count(transaction_date) AS transactions_count FROM visits v LEFT JOIN transactions t ON v.user_id = t.user_id AND v.visit_date = t.transaction_date GROUP BY v.user_id, visit_date) a ON c.counts = a.transactions_count GROUP BY c.counts ORDER BY 1
SELECT c.counts AS transactions_count, count(a.transactions_count) AS visits_count FROM (SELECT DISTINCT row_number() OVER (partition BY user_id, transaction_date ORDER BY transaction_date) AS counts FROM transactions UNION ALL SELECT 0) c LEFT JOIN (SELECT count(transaction_date) AS transactions_count FROM visits v LEFT JOIN transactions t ON v.user_id = t.user_id AND v.visit_date = t.transaction_date GROUP BY v.user_id, visit_date) a ON c.counts = a.transactions_count GROUP BY c.counts ORDER BY transactions_count
SELECT c.counts AS transactions_count, count(a.transactions_count) AS visits_count FROM (SELECT DISTINCT row_number() OVER (partition BY user_id, transaction_date ORDER BY transaction_date) AS counts FROM transactions UNION ALL SELECT 0) c LEFT JOIN (SELECT count(transaction_date) AS transactions_count FROM visits v LEFT JOIN transactions t ON v.user_id = t.user_id AND v.visit_date = t.transaction_date GROUP BY v.user_id, visit_date) a ON c.counts = a.transactions_count GROUP BY c.counts order by 1
SELECT c.counts AS transactions_count, count(a.transactions_count) AS visits_count FROM (SELECT DISTINCT row_number() OVER (partition BY user_id, transaction_date ORDER BY transaction_date) AS counts FROM transactions UNION ALL SELECT 0) c LEFT JOIN (SELECT count(transaction_date) AS transactions_count FROM visits v LEFT JOIN transactions t ON v.user_id = t.user_id AND v.visit_date = t.transaction_date GROUP BY v.user_id, visit_date) a ON c.counts = a.transactions_count GROUP BY c.counts order by c.counts
SELECT c.counts AS transactions_count, count(a.transactions_count) AS visits_count FROM (SELECT DISTINCT row_number() OVER (partition BY user_id, transaction_date ORDER BY transaction_date) AS counts FROM transactions UNION ALL SELECT 0) c LEFT JOIN (SELECT count(transaction_date) AS transactions_count FROM visits v LEFT JOIN transactions t ON v.user_id = t.user_id AND v.visit_date = t.transaction_date GROUP BY v.user_id, visit_date) a ON c.counts = a.transactions_count GROUP BY c.counts order by transactions_count
SELECT t.COUNTS AS TRANSACTIONS_COUNT, IFNULL(c.COUNT_NUM, 0) AS VISITS_COUNT FROM (SELECT DISTINCT row_number() OVER (partition BY user_id, transaction_date) AS counts FROM transactions UNION ALL SELECT 0) t LEFT JOIN (SELECT IFNULL(NUM_TRANSACTIONS, 0) AS NUM_TRANSACTIONS, COUNT(*) AS COUNT_NUM FROM (SELECT a.NUM_TRANSACTIONS FROM VISITS v LEFT JOIN (SELECT USER_ID, TRANSACTION_DATE AS VISIT_DATE, COUNT(AMOUNT) AS NUM_TRANSACTIONS FROM TRANSACTIONS GROUP BY USER_ID, TRANSACTION_DATE) a ON v.USER_ID = a.USER_ID AND v.VISIT_DATE = a.VISIT_DATE) b GROUP BY NUM_TRANSACTIONS) c ON t.counts = c.NUM_TRANSACTIONS ORDER BY t.COUNTS
SELECT t.COUNTS AS TRANSACTIONS_COUNT, IFNULL(c.COUNT_NUM, 0) AS VISITS_COUNT FROM (SELECT DISTINCT row_number() OVER (partition BY user_id, transaction_date) AS counts FROM transactions UNION SELECT 0) t LEFT JOIN (SELECT IFNULL(NUM_TRANSACTIONS, 0) AS NUM_TRANSACTIONS, COUNT(*) AS COUNT_NUM FROM (SELECT a.NUM_TRANSACTIONS FROM VISITS v LEFT JOIN (SELECT USER_ID, TRANSACTION_DATE AS VISIT_DATE, COUNT(AMOUNT) AS NUM_TRANSACTIONS FROM TRANSACTIONS GROUP BY USER_ID, TRANSACTION_DATE) a ON v.USER_ID = a.USER_ID AND v.VISIT_DATE = a.VISIT_DATE) b GROUP BY NUM_TRANSACTIONS) c ON t.counts = c.NUM_TRANSACTIONS ORDER BY t.COUNTS
SELECT t4.TRANSACTIONS_COUNT, IFNULL(t3.COUNT_COUNT, 0) AS VISITS_COUNT FROM (SELECT DISTINCT ROW_NUMBER() OVER(PARTITION BY USER_ID, TRANSACTION_DATE) AS TRANSACTIONS_COUNT FROM TRANSACTIONS UNION SELECT 0) t4 LEFT JOIN (SELECT TRANSACTIONS_COUNT, COUNT(TRANSACTIONS_COUNT) AS COUNT_COUNT FROM (SELECT v.USER_ID, v.VISIT_DATE, IFNULL(COUNT(t.AMOUNT), 0) AS TRANSACTIONS_COUNT FROM VISITS v LEFT JOIN TRANSACTIONS t ON v.user_id = t.user_id AND v.VISIT_DATE = t.TRANSACTION_DATE GROUP BY v.USER_ID, v.VISIT_DATE) t2 GROUP BY TRANSACTIONS_COUNT) t3 ON t4.TRANSACTIONS_COUNT = t3.TRANSACTIONS_COUNT ORDER BY t4.TRANSACTIONS_COUNT
WITH CTE AS (SELECT DISTINCT V1.user_id, visit_date, COUNT(transaction_date) OVER(PARTITION BY V1.user_id, visit_date) transactions_count FROM Visits V1 LEFT JOIN Transactions T1 ON V1.user_id = T1.user_id AND V1.visit_date = T1.transaction_date), FREQ AS (SELECT transactions_count, COUNT(user_id) visits_count FROM CTE GROUP BY transactions_count), CNTSEQ AS ( WITH RECURSIVE CNT AS (SELECT 0 transactions_count UNION ALL SELECT transactions_count+1 FROM CNT WHERE transactions_count < (SELECT MAX(transactions_count) FROM FREQ)) SELECT * FROM CNT) SELECT CNTSEQ.transactions_count, IFNULL(visits_count,0) visits_count FROM CNTSEQ LEFT JOIN FREQ ON CNTSEQ.transactions_count = FREQ.transactions_count
WITH CTE AS( SELECT V.user_id, v.visit_date, IFNULL(COUNT(transaction_date),0) as transaction_count FROM Visits v LEFT JOIN Transactions t ON v.user_id = t.user_id and v.visit_date = t.transaction_date GROUP BY 1,2 ), CTE_RECUR AS( WITH RECURSIVE TEMP AS( SELECT 0 AS trans_cnt UNION ALL SELECT trans_cnt+1 as trans_cnt FROM TEMP WHERE trans_cnt<(SELECT MAX(transaction_count) from CTE)) SELECT * FROM TEMP ) SELECT trans_cnt AS transactions_count, IFNULL(COUNT(user_id),0) AS visits_count FROM CTE_RECUR cr LEFT JOIN CTE c ON cr.trans_cnt = c.transaction_count GROUP BY 1 ORDER BY 1
WITH CTE AS( SELECT v.user_id, v.visit_date, IFNULL(COUNT(transaction_date),0) as transaction_count FROM Visits v LEFT JOIN Transactions t ON v.user_id = t.user_id and v.visit_date = t.transaction_date group by 1,2 ), cte_recur AS( WITH RECURSIVE TEMP AS( SELECT 0 AS trans_cnt UNION ALL SELECT trans_cnt+1 AS trans_cnt FROM temp WHERE trans_cnt <(SELECT MAX(transaction_count) FROM cte)) SELECT * FROM TEMP ) SELECT trans_cnt AS transactions_count, COALESCE(COUNT(user_id),0) AS visits_count FROM cte_recur r LEFT JOIN cte c ON r.trans_cnt = c.transaction_count GROUP BY 1 ORDER BY 1
WITH CTE AS( SELECT v.user_id, v.visit_date, IFNULL(COUNT(transaction_date),0) as transaction_count FROM Visits v LEFT JOIN Transactions t ON v.user_id = t.user_id and v.visit_date = t.transaction_date group by 1,2 ), cte_recur AS( WITH RECURSIVE TEMP AS( SELECT 0 AS trans_cnt UNION ALL SELECT trans_cnt+1 AS trans_cnt FROM temp WHERE trans_cnt <(SELECT MAX(transaction_count) FROM cte)) SELECT * FROM TEMP ) SELECT trans_cnt AS transactions_count, IFNULL(COUNT(user_id),0) AS visits_count FROM cte_recur r LEFT JOIN cte c ON r.trans_cnt = c.transaction_count GROUP BY 1 ORDER BY 1
WITH RECURSIVE A AS ( SELECT * FROM TRANSACTIONS), B AS ( SELECT user_id, transaction_date, COUNT(*) AS ct FROM A GROUP BY user_id, transaction_date), C AS ( SELECT Visits.user_id, Visits.visit_date, IFNULL(ct, 0) AS ct FROM Visits LEFT JOIN B ON visits.user_id = B.user_id AND visits.visit_date = B.transaction_date), D AS ( SELECT ct AS transactions_count, COUNT(*) AS visits_count FROM C GROUP BY transactions_count), CTE AS ( SELECT 0 AS transactions_count UNION ALL SELECT 1+transactions_count FROM CTE WHERE transactions_count<(SELECT MAX(transactions_count) FROM D) ) SELECT CTE.transactions_count, IFNULL(visits_count, 0) AS visits_count FROM CTE LEFT JOIN D ON CTE.transactions_count = D.transactions_count
WITH RECURSIVE CTE AS ( SELECT 0 as transactions_count UNION SELECT transactions_count + 1 FROM CTE WHERE transactions_count < 100 ), CTE1 AS ( SELECT d1.user_id, d1.visit_date, d2.transaction_date, d2.amount FROM Visits as d1 LEFT JOIN Transactions as d2 ON d1.user_id = d2.user_id AND d1.visit_date = d2.transaction_date ), CTE2 AS ( SELECT ct as transactions_count, COUNT(user_id) as visits_count FROM ( SELECT user_id, visit_date, SUM(flag) as ct FROM ( SELECT user_id, visit_date, (CASE WHEN amount IS NULL THEN 0 ELSE 1 END) as flag FROM CTE1 ) as sub1 GROUP BY user_id, visit_date ) as sub2 GROUP BY ct ) SELECT CTE.transactions_count, IFNULL(CTE2.visits_count,0) as visits_count FROM CTE LEFT JOIN CTE2 ON CTE.transactions_count = CTE2.transactions_count WHERE CTE.transactions_count <= (SELECT MAX(transactions_count) FROM CTE2)
WITH RECURSIVE VisitSummary AS ( SELECT Visits.user_id, Visits.visit_date, COUNT(Transactions.user_id) AS visit_transactions FROM Visits LEFT JOIN Transactions ON Transactions.user_id = Visits.user_id AND Transactions.transaction_date = Visits.visit_date GROUP BY Visits.user_id, Visits.visit_date ), TransactionMaster AS ( SELECT 0 AS transactions_count UNION ALL SELECT transactions_count + 1 FROM TransactionMaster WHERE transactions_count < (SELECT MAX(visit_transactions) FROM VisitSummary) ) SELECT TransactionMaster.transactions_count, COUNT(VisitSummary.user_id) AS visits_count FROM TransactionMaster LEFT JOIN VisitSummary On VisitSummary.visit_transactions = TransactionMaster.transactions_count GROUP BY TransactionMaster.transactions_count
WITH RECURSIVE count_list AS( SELECT 0 transactions_count UNION ALL SELECT transactions_count + 1 FROM count_list WHERE transactions_count < (SELECT COUNT(*) FROM Transactions) ), visits_summary AS ( SELECT v.user_id, v.visit_date, SUM(CASE WHEN t.amount IS NULL THEN 0 ELSE 1 END) transactions_count FROM Visits v LEFT JOIN Transactions t ON v.user_id = t.user_id AND v.visit_date = t.transaction_date GROUP BY v.user_id, v.visit_date) SELECT c.transactions_count, COUNT(s.transactions_count) visits_count FROM count_list c LEFT JOIN visits_summary s ON c.transactions_count = s.transactions_count WHERE c.transactions_count <= (SELECT MAX(transactions_count) FROM visits_summary) GROUP BY 1
WITH RECURSIVE cte as ( select v.user_id,v.visit_date,count(transaction_date) trancount from visits v left join transactions t on v.user_id = t.user_id and v.visit_date = t.transaction_date group by v.user_id,v.visit_date ), autolist as ( select max(trancount) num from cte union all select num-1 from autolist where num > 0 ) select autolist.num as transactions_count,count(cte.trancount) as visits_count from autolist left join cte on autolist.num = cte.trancount group by autolist.num order by 1
WITH RECURSIVE cte as (SELECT transactions_count, count(user_id) as visits_count FROM (SELECT v.user_id, v.visit_date, count(t.transaction_date) as transactions_count FROM Visits v LEFT JOIN Transactions t ON v.user_id = t.user_id AND v.visit_date = t.transaction_date GROUP BY v.user_id, v.visit_date) temp GROUP BY transactions_count ), CTE2 as( select 0 as transactions_count UNION select transactions_count+1 from CTE2 where transactions_count < (select max(transactions_count) from cte) ) SELECT t1.transactions_count, IFNULL(t2.visits_count, 0) as visits_count FROM CTE2 t1 LEFT JOIN CTE t2 ON t1.transactions_count = t2.transactions_count order by transactions_count
WITH RECURSIVE cte1 AS ( SELECT user_id, transaction_date FROM Transactions GROUP BY user_id, transaction_date,amount ), cte2 AS ( SELECT user_id, COUNT(transaction_date) cnt FROM cte1 GROUP BY user_id ) , cte3 AS ( SELECT 0 AS cnt UNION ALL SELECT cnt+1 AS cnt FROM cte3 WHERE cnt < (select max(cnt) FROM ( select count(*) as cnt from transactions group by user_id,transaction_date)t) ) , cte4 AS ( SELECT a.user_id, a.visit_date, COUNT(b.transaction_date) trans_cnt FROM Visits a LEFT JOIN Transactions b ON a.user_id=b.user_id AND a.visit_date=b.transaction_date GROUP BY a.user_id, a.visit_date ) SELECT a.cnt transactions_count, COALESCE(COUNT(b.visit_date),0) visits_count FROM cte3 a LEFT JOIN cte4 b ON a.cnt=b.trans_cnt GROUP BY a.cnt
WITH RECURSIVE cte2 (n) AS ( SELECT 0 UNION ALL SELECT n + 1 FROM cte2 WHERE n < (SELECT count(*) from transactions group by user_id,transaction_date ORDER BY 1 DESC LIMIT 1) ) Select cte2.n as transactions_count,COALESCE(v_count,0) AS visits_count FROM cte2 left join ( SELECT Coalesce(TCOUNT,0) AS TRAN_COUNT ,Count(*) as v_count from Visits vi Left Join (SELECT t.user_id,t.transaction_date,count(*) AS TCOUNT FROM transactions t Group by t.user_id,t.transaction_date )tc On vi.user_id = tc.user_id and vi.visit_date = tc.transaction_date Group by Coalesce(TCOUNT,0))ABC on cte2.n = ABC.TRAN_COUNT
WITH RECURSIVE cte2 (n) AS ( SELECT 0 UNION ALL SELECT n + 1 FROM cte2 WHERE n < (SELECT count(*) from transactions group by user_id,transaction_date ORDER BY 1 DESC LIMIT 1) ) Select cte2.n as transactions_count,COALESCE(v_count,0) AS visits_count FROM cte2 left join ( SELECT Coalesce(TCOUNT,0) AS TRAN_COUNT ,Count(*) as v_count from Visits vi Left Join (SELECT user_id,transaction_date,count(*) AS TCOUNT FROM transactions Group by user_id,transaction_date)tc On vi.user_id = tc.user_id and vi.visit_date = tc.transaction_date Group by Coalesce(TCOUNT,0))ABC on cte2.n = ABC.TRAN_COUNT
WITH RECURSIVE cte2 AS ( SELECT 0 AS x UNION SELECT x+1 FROM cte2 WHERE x < (SELECT MAX(visit_transactions) FROM ( SELECT v.user_id, v.visit_date, SUM(CASE WHEN t.user_id IS NOT NULL THEN 1 ELSE 0 END) AS visit_transactions FROM Visits v LEFT JOIN Transactions t ON v.user_id = t.user_id AND v.visit_date = t.transaction_date GROUP BY 1,2 ) sub) ), cte1 AS ( SELECT v.user_id, v.visit_date, SUM(CASE WHEN t.user_id IS NOT NULL THEN 1 ELSE 0 END) AS visit_transactions FROM Visits v LEFT JOIN Transactions t ON v.user_id = t.user_id AND v.visit_date = t.transaction_date GROUP BY 1,2 ) SELECT c2.x AS transactions_count, COUNT(DISTINCT user_id, visit_date) AS visits_count FROM cte1 c1 RIGHT JOIN cte2 c2 ON c1.visit_transactions = c2.x GROUP BY 1
WITH RECURSIVE getTransactionCount AS ( SELECT visit_date, Visits.user_id, SUM(CASE WHEN transaction_date IS NULL THEN 0 ELSE 1 END) AS transactions_count FROM Visits LEFT OUTER JOIN Transactions ON Visits.user_id = Transactions.user_id AND visit_date = transaction_date GROUP BY 1,2 ), missingId (id) AS ( SELECT 0 UNION ALL SELECT id+1 FROM missingId WHERE id < (SELECT MAX(transactions_count) FROM getTransactionCount) ) SELECT id AS `transactions_count`, SUM(CASE WHEN transactions_count IS NULL THEN 0 ELSE 1 END) AS visits_count FROM missingId LEFT OUTER JOIN getTransactionCount ON transactions_count = id GROUP BY 1 ORDER BY 1
WITH RECURSIVE id_Ranges AS ( SELECT 0 AS transactions_count UNION ALL SELECT transactions_count + 1 FROM id_Ranges WHERE transactions_count < ( SELECT max(transactions_count) FROM ( SELECT ina.user_id, ina.visit_date, COUNT(inb.amount) AS transactions_count FROM Visits AS ina LEFT JOIN Transactions AS inb ON ina.user_id = inb.user_id and ina.visit_date = inb.transaction_date GROUP BY ina.user_id, ina.visit_date ) AS inc ) ), tmp1 AS ( SELECT ina.user_id, ina.visit_date, COUNT(inb.amount) AS transactions_count FROM Visits AS ina LEFT JOIN Transactions AS inb ON ina.user_id = inb.user_id and ina.visit_date = inb.transaction_date GROUP BY ina.user_id, ina.visit_date ), tmp2 AS ( SELECT transactions_count, COUNT(*) AS visits_count FROM tmp1 GROUP BY transactions_count ) SELECT ina.transactions_count, coalesce(inb.visits_count, 0) AS visits_count FROM id_ranges AS ina LEFT JOIN tmp2 AS inb on ina.transactions_count = inb.transactions_count ORDER BY ina.transactions_count
WITH RECURSIVE t AS ( SELECT v.user_id user_id, v.visit_date visit_date, COUNT(t.user_id) tran FROM visits v LEFT JOIN transactions t ON v.user_id=t.user_id AND v.visit_date=t.transaction_date GROUP BY v.user_id, v.visit_date ), c AS ( SELECT 0 tran UNION SELECT tran+1 tran FROM c WHERE tran<(SELECT MAX(tran) FROM t) ) SELECT c.tran transactions_count, COUNT(t.tran) visits_count FROM c LEFT JOIN t ON c.tran=t.tran GROUP BY c.tran ORDER BY c.tran
WITH RECURSIVE t AS (SELECT v.user_id, visit_date, transaction_date, CASE WHEN transaction_date IS NULL THEN 0 ELSE 1 END as trans FROM visits v LEFT JOIN transactions t ON v.user_id = t.user_id AND v.visit_date = t.transaction_date), u AS (SELECT DISTINCT user_id, visit_date, SUM(trans) OVER (PARTITION BY user_id, visit_date) transperdayperuser FROM t), w AS (SELECT transperdayperuser, COUNT(visit_date) visits_count FROM u GROUP BY 1), seq AS (SELECT 0 AS value UNION ALL SELECT value + 1 FROM seq WHERE value < (SELECT MAX(transperdayperuser) FROM w)) SELECT seq.value transactions_count, IFNULL(w.visits_count, 0) visits_count FROM seq LEFT JOIN w ON seq.value = w.transperdayperuser
WITH RECURSIVE t0 AS ( SELECT 0 AS n UNION SELECT n+1 FROM t0 WHERE n < (SELECT MAX(n) FROM ( SELECT ina.user_id, ina.visit_date, COUNT(amount) AS n FROM Visits AS ina LEFT JOIN Transactions AS inb ON ina.user_id=inb.user_id AND ina.visit_date=inb.transaction_date GROUP BY ina.user_id, ina.visit_date ) AS inc ) ), t1 AS ( SELECT ina.user_id, ina.visit_date, COUNT(amount) AS n FROM Visits AS ina LEFT JOIN Transactions AS inb ON ina.user_id=inb.user_id AND ina.visit_date=inb.transaction_date GROUP BY ina.user_id, ina.visit_date ), t2 AS ( SELECT n, COUNT(*) AS visits_count FROM t1 GROUP BY n ) SELECT t0.n AS transactions_count, IFNULL(t2.visits_count, 0) AS visits_count FROM t0 LEFT JOIN t2 ON t0.n = t2.n
WITH RECURSIVE t1 AS ( SELECT v.*, SUM(CASE WHEN t.amount IS NULL THEN 0 ELSE 1 END) AS transactions_count FROM Visits v LEFT JOIN Transactions t ON v.user_id = t.user_id AND v.visit_date = t.transaction_date GROUP BY v.user_id, v.visit_date ), t2 AS ( SELECT 0 AS transactions_count UNION ALL SELECT transactions_count + 1 AS transactions_count FROM t2 WHERE transactions_count < (SELECT MAX(transactions_count) FROM t1) ) SELECT t2.transactions_count, COALESCE(t.visits_count, 0) AS visits_count FROM t2 LEFT JOIN ( SELECT transactions_count, COUNT(DISTINCT user_id, visit_date) AS visits_count FROM t1 GROUP BY transactions_count ) t ON t2.transactions_count = t.transactions_count
WITH RECURSIVE t1 AS ( SELECT v.user_id, v.visit_date, SUM(CASE WHEN transaction_date IS NULL THEN 0 ELSE 1 END) transactions_count FROM Visits v LEFT JOIN Transactions i ON v.user_id = i.user_id AND v.visit_date = i.transaction_date GROUP BY 1, 2 ), t2 AS ( (SELECT 0 AS transactions_count ) UNION ALL (SELECT transactions_count+1 AS transactions_count FROM t2 WHERE transactions_count < (SELECT MAX(transactions_count) FROM t1)) ) SELECT t2.transactions_count, COUNT(t1.transactions_count) visits_count FROM t1 RIGHT JOIN t2 ON t2.transactions_count = t1.transactions_count GROUP BY 1
WITH RECURSIVE table1 AS( SELECT v.user_id, visit_date, transaction_date FROM Visits v LEFT JOIN Transactions t ON v.user_id=t.user_id AND v.visit_date=t.transaction_date ), visit_tran AS( SELECT user_id, visit_date, COUNT(transaction_date) AS trans_count FROM table1 GROUP BY visit_date, user_id ), cte AS( SELECT 0 AS n UNION ALL SELECT n + 1 FROM cte WHERE n < (SELECT MAX(trans_count) FROM visit_tran) ) SELECT n AS transactions_count, COUNT(trans_count) AS visits_count FROM cte LEFT JOIN visit_tran ON cte.n = visit_tran.trans_count GROUP BY transactions_count
WITH RECURSIVE table1 AS( SELECT v.user_id, visit_date, transaction_date, DENSE_RANK()OVER(PARTITION BY visit_date) FROM Visits v LEFT JOIN Transactions t ON v.user_id=t.user_id AND v.visit_date=t.transaction_date ), visit_tran AS( SELECT user_id, visit_date, COUNT(transaction_date) AS transaction_count FROM table1 GROUP BY visit_date, user_id ), cte AS( SELECT 0 AS n UNION ALL SELECT n + 1 FROM cte WHERE n < (SELECT MAX(transaction_count) FROM visit_tran) ) SELECT n AS transactions_count, COUNT(transaction_count) AS visits_count FROM cte LEFT JOIN visit_tran ON cte.n = visit_tran.transaction_count GROUP BY transactions_count
WITH RECURSIVE temp AS ( SELECT MAX(max_trans_ct) AS max_trans_ct FROM ( SELECT COUNT(*) AS max_trans_ct FROM Transactions GROUP BY user_id, transaction_date UNION SELECT 0 AS max_trans_ct ) sub ), cte AS ( SELECT 0 AS trans, max_trans_ct FROM temp UNION ALL SELECT trans+1, max_trans_ct FROM cte WHERE trans < max_trans_ct ) SELECT trans AS transactions_count, COALESCE(COUNT(user_id),0) AS visits_count FROM cte LEFT JOIN ( SELECT v.user_id, visit_date, COALESCE(COUNT(amount),0) AS transactions_count FROM Visits v LEFT JOIN Transactions t ON v.user_id = t.user_id AND v.visit_date = t.transaction_date GROUP BY v.user_id, visit_date ) sub ON cte.trans = sub.transactions_count GROUP BY cte.trans ORDER BY transactions_count
WITH RECURSIVE temp as (SELECT MAX(num) as maxim FROM (SELECT COUNT(*) as num FROM Transactions GROUP BY user_id, transaction_date) temb ), cte as ( SELECT 0 as transactions_count UNION SELECT transactions_count + 1 as transactions_count FROM cte WHERE cte.transactions_count < (SELECT maxim FROM temp) ), count_trans as (SELECT v.visit_date, v.user_id, COUNT(t.transaction_date) as trans FROM Visits v LEFT JOIN Transactions t ON v.user_id = t.user_id AND v.visit_date = t.transaction_date GROUP BY v.visit_date, v.user_id ) SELECT transactions_count,COALESCE( visits_count,0) as visits_count FROM cte LEFT JOIN (SELECT trans,COUNT(visit_date) as visits_count FROM count_trans GROUP BY trans) tab1 ON cte.transactions_count = tab1.trans ORDER BY transactions_count
WITH RECURSIVE trans_count_raw AS ( SELECT user_id, transaction_date, COUNT(*) AS transactions_count FROM Transactions GROUP BY user_id, transaction_date ) , trans_count AS ( SELECT IFNULL(trans_count_raw.transactions_count, 0) AS transactions_count, Visits.user_id AS user_id, Visits.visit_date AS visit_date FROM Visits LEFT JOIN trans_count_raw ON Visits.user_id = trans_count_raw.user_id AND Visits.visit_date = trans_count_raw.transaction_date ) , trans_visit_count AS ( SELECT transactions_count, COUNT(*) AS visits_count FROM trans_count GROUP BY transactions_count ) , transactions_count AS ( SELECT 0 as transactions_count, max(transactions_count) as temp FROM trans_visit_count UNION ALL SELECT transactions_count + 1 , temp FROM transactions_count WHERE transactions_count < temp ) SELECT transactions_count.transactions_count AS transactions_count, IFNULL(trans_visit_count.visits_count, 0) AS visits_count FROM transactions_count LEFT JOIN trans_visit_count ON transactions_count.transactions_count = trans_visit_count.transactions_count
WITH RECURSIVE trans_ct_per_visit as ( SELECT v.user_id, v.visit_date, COUNT(transaction_date) as transactions_count FROM visits v LEFT JOIN transactions t ON v.user_id = t.user_id AND v.visit_date = t.transaction_date GROUP BY v.user_id, v.visit_date ), seq (transactions_count) as ( SELECT 0 UNION ALL SELECT transactions_count + 1 FROM seq WHERE transactions_count + 1 <= (SELECT max(transactions_count) from trans_ct_per_visit) ) SELECT s.transactions_count, SUM(user_id is not NULL) as visits_count FROM trans_ct_per_visit t RIGHT JOIN seq s ON t.transactions_count = s.transactions_count GROUP BY s.transactions_count ORDER BY s.transactions_count
WITH RECURSIVE transact_counts AS ( SELECT v.user_id, v.visit_date, COUNT(t.transaction_date) AS transactions_count FROM visits v LEFT JOIN transactions t ON v.user_id = t.user_id AND v.visit_date = t.transaction_date GROUP BY v.user_id, v.visit_date) , number_series AS ( SELECT 0 AS val UNION ALL SELECT val + 1 FROM number_series where val < (SELECT MAX(transactions_count) FROM transact_counts)) SELECT s.val AS transactions_count, COUNT(user_id) AS visits_count FROM number_series s LEFT JOIN transact_counts tc ON s.val = tc.transactions_count GROUP BY s.val ORDER BY transactions_count
WITH RECURSIVE transactions_count AS ( SELECT 0 as t_count UNION ALL SELECT t_count +1 FROM transactions_count WHERE t_count < (SELECT MAX(trans_count) FROM ( SELECT v.user_id, v.visit_date, COUNT(DISTINCT v.visit_date) AS visit_count, COUNT(t.transaction_date) as trans_count FROM visits v LEFT JOIN transactions t ON v.user_id = t.user_id AND v.visit_date = t.transaction_date GROUP BY 1,2 ) as x ) ), visits_count AS ( SELECT v.user_id, v.visit_date, COUNT(t.transaction_date) as t_count FROM visits v LEFT JOIN transactions t ON v.user_id = t.user_id AND v.visit_date = t.transaction_date GROUP BY 1,2) SELECT tc.t_count as transactions_count, COUNT(vc.user_id) as visits_count FROM transactions_count tc LEFT JOIN visits_count vc ON tc.t_count = vc.t_count GROUP BY 1
WITH RECURSIVE transactions_count AS ( SELECT 0 as transaction_count , 0 as visits_count UNION ALL SELECT transaction_count +1 as transaction_count, 0 as visits_count FROM transactions_count WHERE transaction_count < (SELECT MAX(trans_count) FROM ( SELECT v.user_id, v.visit_date, COUNT(DISTINCT v.visit_date) AS visit_count, COUNT(t.transaction_date) as trans_count FROM visits v LEFT JOIN transactions t ON v.user_id = t.user_id AND v.visit_date = t.transaction_date GROUP BY 1,2 ) as x ) ) SELECT transaction_count as transactions_count , sum(visits_count) as visits_count FROM( SELECT 0 as transaction_count , count(v.visit_date) as visits_count From Visits v LEFT JOIN Transactions t on v.user_id = t.user_id and v.visit_date = t.transaction_date WHERE t.transaction_date IS NULL GROUP BY transaction_count UNION ALL SELECT nb_transactions as transaction_count , count(0) as visits_count FROM( SELECT v.user_id , v.visit_date , count(0) as nb_transactions From Visits v LEFT JOIN Transactions t on v.user_id = t.user_id and v.visit_date = t.transaction_date WHERE t.transaction_date IS NOT NULL GROUP BY v.visit_date, v.user_id)t GROUP BY transaction_count UNION ALL SELECT * FROM transactions_count) t GROUP BY 1 ORDER BY 1
WITH RECURSIVE trx_by_user AS ( SELECT COUNT(t.user_id) AS cnt FROM Transactions t GROUP BY t.transaction_date, t.user_id ), cnt_template AS ( SELECT 0 cnt UNION ALL SELECT cnt + 1 FROM cnt_template WHERE cnt < (SELECT MAX(cnt) FROM trx_by_user) ), trx_by_visit AS ( SELECT v.user_id, v.visit_date, COUNT(t.user_id) AS t_cnt FROM Visits v LEFT JOIN Transactions t ON v.user_id = t.user_id AND v.visit_date = t.transaction_date GROUP BY v.user_id, v.visit_date ) SELECT t.cnt AS transactions_count, COUNT(v.user_id) AS visits_count FROM cnt_template t LEFT JOIN trx_by_visit v ON t.cnt = v.t_cnt GROUP BY t.cnt
WITH RECURSIVE vt AS ( SELECT v.user_id, v.visit_date, t.amount FROM visits v LEFT JOIN transactions t ON v.user_id = t.user_id AND v.visit_date = t.transaction_date ), vt_2 AS ( SELECT user_id, visit_date, IFNULL(amount, 0) AS amount, COUNT(*) OVER (PARTITION BY user_id, visit_date) AS trans_count FROM vt ), vt_3 AS ( SELECT DISTINCT user_id, visit_date, CASE WHEN amount = 0 THEN 0 ELSE trans_count END AS transactions_count FROM vt_2 ), ct (trans_count) AS ( SELECT 0 UNION ALL SELECT trans_count + 1 FROM ct WHERE trans_count < (SELECT MAX(transactions_count) FROM vt_3) ) SELECT ct.trans_count AS transactions_count, COALESCE(visits_count, 0) AS visits_count FROM (SELECT transactions_count, COUNT(*) AS visits_count FROM vt_3 GROUP BY transactions_count ORDER BY 1 ) AS vt_4 RIGHT JOIN ct ON ct.trans_count = vt_4.transactions_count
WITH T AS ( SELECT ROW_NUMBER() OVER() AS row_num FROM Transactions UNION SELECT 0 ), T1 as ( SELECT COUNT(transaction_date) AS transaction_count FROM Visits v LEFT JOIN Transactions t ON v.user_id = t.user_id AND v.visit_date = transaction_date GROUP BY v.user_id, v.visit_date ) SELECT row_num AS transactions_count, COUNT(transaction_count) AS visits_count FROM T LEFT JOIN T1 ON row_num = transaction_count GROUP BY row_num HAVING row_num <= (SELECT MAX(transaction_count) FROM T1) ORDER BY row_num
WITH T AS ( SELECT ROW_NUMBER() OVER() row_num FROM Transactions UNION SELECT 0 ), T1 AS ( select v.user_id, visit_date, count(distinct v.user_id) as visits_count, sum(case when t.user_id is not null then 1 else 0 end) as trans_count from Visits v left join Transactions t on v.user_id = t.user_id and v.visit_date = t.transaction_Date group by 1,2 ) select row_num as transactions_count, count(visit_date) as visits_count from T left join T1 on row_num = trans_count group by row_num having row_num <= (select max(trans_count) from T1 ) order by row_num
WITH T AS ( SELECT ROW_NUMBER() OVER() row_num FROM Transactions UNION SELECT 0 ), T1 as ( SELECT COUNT(transaction_date) transaction_count FROM Visits v LEFT JOIN Transactions t ON v.user_id = t.user_id AND v.visit_date = transaction_date GROUP BY v.user_id, v.visit_date ) SELECT row_num transactions_count, COUNT(transaction_count) visits_count FROM T LEFT JOIN T1 ON row_num = transaction_count GROUP BY row_num HAVING row_num <= (SELECT MAX(transaction_count) FROM T1) ORDER BY row_num
WITH T AS ( SELECT ROW_NUMBER() OVER() row_num FROM Transactions UNION SELECT 0 ), T1 as ( select new_cnt as transactions_count , count(*) as visits_count from( select *,case when transaction_date is null then 0 else cnt end as new_cnt from( select v.user_id, visit_date, transaction_date,count(*) as cnt from Visits v left join Transactions t on t.user_id = v.user_id and v.visit_date = t.transaction_date group by v.user_id, visit_date, transaction_date)a)b group by new_cnt ) select row_num as transactions_count, coalesce(visits_count,0) as visits_count from T left join T1 on T.row_num = T1.transactions_count where row_num <= (select max(transactions_count) from t1) order by row_num
WITH TxnCount AS (SELECT V.user_id ,V.visit_date ,COUNT(T.transaction_date) AS transactions_count FROM Visits V LEFT JOIN Transactions T ON T.user_id = V.user_id AND T.transaction_date = V.visit_date GROUP BY V.user_id,V.visit_date), ALLTxnCount AS ( WITH RECURSIVE AllTxns AS (SELECT MAX(transactions_count) AS Num FROM TxnCount UNION ALL SELECT Num -1 AS Num FROM AllTxns WHERE Num > 0) SELECT Num FROM AllTxns ), TxnAnalysis AS (SELECT transactions_count ,COUNT(*) AS visits_count FROM TxnCount GROUP BY transactions_count) SELECT ATC.Num AS transactions_count ,IFNULL(visits_count,0) AS visits_count FROM ALLTxnCount ATC LEFT JOIN TxnAnalysis TA ON TA.transactions_count = ATC.Num ORDER BY 1 ASC
WITH a AS ( SELECT transition_count, COUNT(transition_count) AS visits_count FROM ( SELECT t1.user_id, t1.visit_date, SUM(CASE WHEN t2.transaction_date IS NULL THEN 0 ELSE 1 END) AS transition_count FROM Visits AS t1 LEFT JOIN ( SELECT * FROM Transactions ) AS t2 ON t1.user_id = t2.user_id AND t1.visit_date = t2.transaction_date GROUP BY t1.user_id, t1.visit_date ) AS t3 GROUP BY t3.transition_count ), T AS ( SELECT 0 AS num_range UNION SELECT ROW_NUMBER() OVER() row_num FROM Transactions ) SELECT num_range AS transactions_count, IFNULL(visits_count, 0) AS visits_count FROM T LEFT JOIN a ON T.num_range = a.transition_count WHERE num_range <= (SELECT MAX(transition_count) FROM a)
WITH a AS ( SELECT v.user_id, v.visit_date, IF(t.transaction_date IS NULL, 0, COUNT(*)) trans_cnt FROM Visits v LEFT JOIN Transactions t ON v.user_id = t.user_id AND v.visit_date = t.transaction_date GROUP BY 1, 2 ), b AS ( WITH RECURSIVE tmp AS ( SELECT 0 AS trans_cnt UNION SELECT trans_cnt + 1 FROM tmp WHERE trans_cnt < (SELECT MAX(trans_cnt) FROM a) ) SELECT * FROM tmp ) SELECT b.trans_cnt transactions_count, IFNULL(COUNT(user_id), 0) visits_count FROM b LEFT JOIN a ON a.trans_cnt = b.trans_cnt GROUP BY 1 ORDER BY 1
WITH all_trans AS (SELECT transactions_count, COUNT(*) AS visits_count FROM (SELECT v.user_id, v.visit_date, IFNULL(a.transactions_count, 0) AS transactions_count FROM Visits v LEFT JOIN (SELECT user_id, transaction_date, COUNT(*) AS transactions_count FROM Transactions GROUP BY user_id, transaction_date) a ON a.user_id = v.user_id AND a.transaction_date = v.visit_date) b GROUP BY transactions_count), all_counts AS (SELECT trans_count FROM (SELECT row_number() OVER(ORDER BY user_id)-1 AS trans_count FROM (SELECT user_id FROM Visits UNION ALL SELECT user_id FROM Transactions) c ) d WHERE trans_count<=(SELECT MAX(transactions_count) FROM all_trans) ) SELECT allc.trans_count AS transactions_count, IFNULL(allt.visits_count,0) visits_count FROM all_counts allc LEFT JOIN all_trans allt ON allt.transactions_count=allc.trans_count ORDER BY transactions_count
WITH by_visit_date AS ( SELECT v.user_id, visit_date, SUM(CASE WHEN transaction_date IS NOT NULL THEN 1 ELSE 0 END) AS transactions_count FROM Visits v LEFT JOIN Transactions t ON v.user_id = t.user_id AND visit_date = transaction_date GROUP BY v.user_id, visit_date ), row_nums AS ( SELECT ROW_NUMBER() OVER () as rn FROM Transactions UNION SELECT 0 ) SELECT rn AS transactions_count, COUNT(visit_date) AS visits_count FROM by_visit_date RIGHT JOIN row_nums ON transactions_count = rn WHERE rn <= (SELECT MAX(transactions_count) FROM by_visit_date) GROUP BY rn ORDER BY transactions_count
WITH cnt AS ( SELECT COUNT(t.user_id) AS transactions_count, 1 AS visits_count FROM Visits v LEFT JOIN Transactions t ON t.user_id = v.user_id AND t.transaction_date = v.visit_date GROUP BY v.user_id, v.visit_date ), row_num AS ( SELECT ROW_NUMBER() OVER() AS rn FROM Transactions UNION ALL SELECT 0 AS rn ) SELECT row_num.rn AS transactions_count, CASE WHEN SUM(visits_count) IS NULL THEN 0 ELSE SUM(visits_count) END AS visits_count FROM cnt RIGHT JOIN row_num ON row_num.rn = cnt.transactions_count WHERE rn <= (SELECT MAX(cnt.transactions_count) FROM cnt) GROUP BY row_num.rn ORDER BY transactions_count
WITH ct AS (SELECT COUNT(*) AS tran_ct FROM Transactions GROUP BY user_id,transaction_date) ,vt AS (SELECT v.user_id ,v.visit_date ,COUNT(t.amount) AS tran_ct FROM Visits v LEFT JOIN Transactions t ON v.user_id = t.user_id AND v.visit_date = t.transaction_date GROUP BY 1,2) ,rt AS (WITH RECURSIVE se AS (SELECT 0 AS tran_ct UNION ALL SELECT tran_ct+1 AS tran_ct FROM se WHERE tran_ct < (SELECT MAX(tran_ct) FROM ct)) SELECT * FROM se) SELECT rt.tran_ct AS transactions_count ,IFNULL(COUNT(vt.tran_ct),0) AS visits_count FROM rt LEFT JOIN vt ON rt.tran_ct = vt.tran_ct GROUP BY 1 ORDER BY 1
WITH ct AS (SELECT v.user_id, v.visit_date 'date', SUM(IF(ISNULL(t.amount),0,1)) trans FROM Visits v LEFT JOIN Transactions t ON v.user_id = t.user_id AND v.visit_date = t.transaction_date GROUP BY v.user_id, v.visit_date), cnt AS (SELECT roww-1 roww FROM (SELECT row_number() over (order by rowss) roww FROM (SELECT row_number() over (order by visit_date) rowss from Visits UNION ALL SELECT row_number() over (order by visit_date) rowss from Visits ) aaa) aaaa WHERE roww-1<=(SELECT MAX(trans) FROM ct)) SELECT cc.roww transactions_count, IFNULL(tt.visits_count,0) visits_count FROM cnt cc LEFT JOIN (SELECT trans transactions_count, COUNT(trans) visits_count FROM ct GROUP BY trans) tt ON cc.roww = tt.transactions_count
WITH cte AS (SELECT v.user_id, v.visit_date, COALESCE(COUNT(t.transaction_date),0) AS transactions_count FROM Visits v LEFT JOIN Transactions t ON v.user_id = t.user_id AND v.visit_date = t.transaction_date GROUP BY 1,2), ranking AS ( SELECT 0 AS transactions_count UNION SELECT ROW_NUMBER() OVER() FROM Transactions) SELECT r.transactions_count, COALESCE(sub.visits_count,0) AS visits_count FROM ranking r LEFT JOIN (SELECT transactions_count, COUNT(user_id) AS visits_count FROM cte GROUP BY transactions_count)sub USING (transactions_count) WHERE r.transactions_count <= (SELECT MAX(transactions_count) FROM cte) ORDER BY transactions_count
WITH cte1 AS ( SELECT v.user_id as user_id, visit_date, if(transaction_date is null, 0, count(*)) as transaction_count FROM Visits as v LEFT JOIN Transactions as t on v.visit_date = t.transaction_date and v.user_id=t.user_id GROUP BY 1, 2), cte2 as (SELECT ROW_NUMBER() OVER () as ranking FROM Transactions UNION SELECT 0) SELECT ranking as transactions_count, IF(transaction_count is null, 0, count(*)) as visits_count FROM cte1 RIGHT JOIN cte2 ON transaction_count = ranking WHERE ranking <= (SELECT MAX(transaction_count) FROM cte1) GROUP BY ranking ORDER BY 1
WITH cte1 AS (SELECT v.user_id, visit_date, COUNT(amount) AS transactions_count FROM Visits v LEFT JOIN Transactions t ON v.user_id = t.user_id AND visit_date = transaction_date GROUP BY v.user_id, visit_date), cte2 AS (SELECT ROW_NUMBER() OVER() AS num FROM Transactions UNION ALL SELECT 0 AS num) SELECT num AS transactions_count, COUNT(user_id) AS visits_count FROM cte1 RIGHT JOIN cte2 ON cte1.transactions_count = cte2.num WHERE num <= (SELECT MAX(transactions_count) FROM cte1) GROUP BY 1 ORDER BY 1
WITH num_transactions_by_users_by_date AS ( SELECT v.user_id , visit_date , count(transaction_date) AS num_transactions FROM visits v LEFT JOIN Transactions t ON v.user_id = t.user_id AND v.visit_date = t.transaction_date GROUP BY 1, 2 ORDER BY 1, 2 ) , num_transactions_by_date AS ( SELECT user_id ,visit_date , sum(num_transactions) AS num_transactions FROM num_transactions_by_users_by_date GROUP BY 1,2 ORDER BY 1,2 ) ,num_transactions AS ( SELECT row_number() over () as num_transactions FROM transactions UNION select 0 ) SELECT nt.num_transactions AS transactions_count , COUNT(ntbd.num_transactions) AS visits_count FROM num_transactions AS nt LEFT JOIN num_transactions_by_date AS ntbd ON nt.num_transactions = ntbd.num_transactions WHERE nt.num_transactions <= (SELECT MAX(num_transactions) FROM num_transactions_by_date) GROUP BY 1 ORDER by 1
WITH num_transactions_by_users_by_date AS ( SELECT v.user_id , visit_date , count(transaction_date) AS num_transactions FROM visits v LEFT JOIN Transactions t ON v.user_id = t.user_id AND v.visit_date = t.transaction_date GROUP BY v.user_id , visit_date ORDER BY v.user_id , visit_date ) , num_transactions_by_date AS ( SELECT user_id ,visit_date , sum(num_transactions) AS num_transactions FROM num_transactions_by_users_by_date GROUP BY user_id ,visit_date ORDER BY user_id ,visit_date ) ,num_transactions AS ( SELECT row_number() over () as num_transactions FROM transactions UNION select 0 ) SELECT nt.num_transactions AS transactions_count , COUNT(ntbd.num_transactions) AS visits_count FROM num_transactions AS nt LEFT JOIN num_transactions_by_date AS ntbd ON nt.num_transactions = ntbd.num_transactions WHERE nt.num_transactions <= (SELECT MAX(num_transactions) FROM num_transactions_by_date) GROUP BY 1 ORDER by 1
WITH recursive CTE AS ( SELECT v.user_id, v.visit_date, COUNT(t.transaction_date) AS cts FROM Visits v LEFT JOIN Transactions t ON v.user_id = t.user_id AND v.visit_date = t.transaction_date GROUP BY v.user_id, v.visit_date), CTE1 AS ( SELECT 0 AS transactions_count UNION SELECT transactions_count +1 AS transactions_count FROM CTE1 WHERE transactions_count < (SELECT MAX(cts) FROM CTE) ) SELECT CTE1.transactions_count, COUNT(CTE.cts) AS visits_count FROM CTE1 LEFT JOIN CTE ON CTE1.transactions_count = CTE.cts GROUP BY CTE1.transactions_count ORDER BY CTE1.transactions_count
WITH recursive CTE AS ( SELECT v.user_id, v.visit_date, IFNULL(COUNT(t.transaction_date),0) AS transactions_count FROM Visits AS v LEFT JOIN Transactions AS t ON v.user_id = t.user_id and v.visit_date = t.transaction_date GROUP BY v.user_id, v.visit_date ), CTE2 AS ( SELECT 0 as counts UNION SELECT counts + 1 as counts FROM CTE2 WHERE counts < (select max(transactions_count) from CTE) ) select counts as transactions_count , count(CTE.transactions_count) visits_count from CTE2 left join CTE on CTE2.counts = CTE.transactions_count group by 1
WITH recursive counts as ( SELECT 0 as cnt UNION ALL SELECT cnt+1 as cnt FROM counts WHERE cnt< ( SELECT max(cnt) FROM( SELECT ifnull(cnt,0) as cnt FROM visits as v LEFT JOIN ( SELECT user_id, transaction_date, count(user_id) as cnt FROM transactions GROUP BY 1,2 ) as t1 ON v.user_id = t1.user_id AND v.visit_date = t1.transaction_date ) as t2 ) ) SELECT c.cnt as transactions_count, ifnull(t3.visits_count,0) as visits_count FROM counts c LEFT JOIN ( SELECT cnt, count(cnt) as visits_count FROM ( SELECT ifnull(cnt,0) as cnt FROM visits as v LEFT JOIN ( SELECT user_id, transaction_date, count(user_id) as cnt FROM transactions GROUP BY 1,2 ) as t1 ON v.user_id = t1.user_id AND v.visit_date = t1.transaction_date ) as t2 GROUP BY cnt ) as t3 ON c.cnt = t3.cnt
WITH recursive cte1 AS ( SELECT transactions_count, COUNT(transactions_count) AS visits_count FROM ( SELECT v.user_id, visit_date, COUNT(transaction_date) AS transactions_count FROM Visits v LEFT JOIN Transactions t ON v.user_Id = t.user_id AND v.visit_date = t.transaction_date GROUP BY v.user_id, visit_date ) tmp GROUP BY transactions_count ), cte2 AS ( select 0 as transactions_count union all select transactions_count + 1 from cte2 where transactions_count < (SELECT MAX(transactions_count) FROM cte1) ) SELECT cte2.transactions_count, IFNULL(cte1.visits_count, 0) AS visits_count FROM cte2 LEFT JOIN cte1 ON cte2.transactions_count = cte1.transactions_count ORDER BY CTE2.transactions_count
WITH recursive cte1 AS (SELECT DISTINCT user_id, transaction_date, COUNT(amount) OVER(PARTITION BY user_id, transaction_date ORDER BY user_id, transaction_date) AS result1 FROM Transactions) ,cte2 AS (SELECT result1 as "transactions_count", COUNT(visit_date) as "visits_count" FROM (SELECT DISTINCT v.user_id, visit_date, CASE WHEN result1 IS NULL THEN 0 ELSE result1 END AS result1 FROM Visits as v LEFT JOIN cte1 as c ON c.user_id=v.user_id AND c.transaction_date=v.visit_date) as x GROUP BY result1) ,cte3 AS (SELECT 0 as t1 UNION ALL SELECT t1+1 FROM cte3 WHERE t1<(SELECT MAX(transactions_count) FROM cte2)) SELECT t1 as "transactions_count", CASE WHEN visits_count IS NULL THEN 0 ELSE visits_count END AS 'visits_count' FROM cte3 LEFT JOIN cte2 ON cte3.t1=cte2.transactions_count
WITH recursive id_Ranges AS ( select 0 as transactions_count union all select transactions_count + 1 from id_Ranges where transactions_count < (SELECT max(transactions_count) from (( SELECT ina.user_id, ina.visit_date, SUM(CASE WHEN inb.amount is Null THEN 0 ELSE 1 END) AS transactions_count FROM Visits AS ina LEFT JOIN Transactions AS inb ON ina.user_id = inb.user_id and ina.visit_date = inb.transaction_date GROUP BY ina.user_id, ina.visit_date ) ) AS inc)) select l.transactions_count, coalesce(r.visits_count, 0) AS visits_count from id_Ranges AS l LEFT JOIN (SELECT transactions_count, COUNT(*) AS visits_count FROM ( SELECT ina.user_id, ina.visit_date, SUM(CASE WHEN inb.amount is Null THEN 0 ELSE 1 END) AS transactions_count FROM Visits AS ina LEFT JOIN Transactions AS inb ON ina.user_id = inb.user_id and ina.visit_date = inb.transaction_date GROUP BY ina.user_id, ina.visit_date ) AS t GROUP BY transactions_count ) AS r ON l.transactions_count = r.transactions_count
WITH recursive t AS ( SELECT 0 AS transactions_count UNION ALL SELECT transactions_count + 1 FROM t WHERE transactions_count + 1 <= (SELECT COUNT(transaction_date) FROM Transactions GROUP BY user_id, transaction_date ORDER BY 1 DESC LIMIT 1) ), t1 AS ( SELECT v.user_id,COUNT(tr.transaction_date) AS cnt FROM Visits v LEFT JOIN Transactions tr ON v.visit_date = tr.transaction_date AND v.user_id = tr.user_id GROUP BY v.user_id, v.visit_date ) SELECT transactions_count, COUNT(user_id) AS visits_count FROM t LEFT JOIN t1 ON t.transactions_count = t1.cnt GROUP BY 1
WITH recursive t1 as (SELECT v.user_id, visit_date, SUM(CASE WHEN transaction_date IS NULL then 0 ELSE 1 END) AS t_cnt FROM Visits v LEFT JOIN Transactions t ON v.user_id = t.user_id AND v.visit_date = t.transaction_date GROUP BY 1, 2) , t2 AS (SELECT 0 AS cnt UNION ALL SELECT cnt + 1 from t2 WHERE cnt < (SELECT MAX(t_cnt) FROM t1)) SELECT t2.cnt as transactions_count, ifnull(count(t1.user_id), 0) as visits_count FROM t2 LEFT JOIN t1 ON t1.t_cnt = t2.cnt GROUP BY 1 ORDER BY 1
WITH recursive trs AS (SELECT 0 transactions_count UNION ALL SELECT 1 + transactions_count FROM trs WHERE transactions_count < (SELECT MAX(cnt) FROM (SELECT user_id, transaction_date, COUNT(transaction_date) cnt FROM transactions GROUP BY user_id, transaction_date) t)) SELECT trs.transactions_count, COALESCE(COUNT(user_id), 0) visits_count FROM trs LEFT JOIN (SELECT v.user_id, COALESCE(COUNT(tr.transaction_date),0) cnt FROM visits v LEFT JOIN transactions tr ON v.user_id = tr.user_id AND v.visit_date = tr.transaction_date GROUP BY v.user_id, v.visit_date) c ON trs.transactions_count = c. cnt GROUP BY trs.transactions_count ORDER BY trs.transactions_count
WITH res AS ( SELECT v.user_id, v.visit_date, SUM( CASE WHEN t.user_id IS NOT NULL AND t.transaction_date IS NOT NULL THEN 1 ELSE 0 END ) AS transactions_count FROM visits v LEFT JOIN transactions t ON v.user_id = t.user_id AND v.visit_date = t.transaction_date GROUP BY 1,2 ), dummy_rownum AS ( SELECT ROW_NUMBER() OVER() AS rn FROM transactions ), visit_count_by_transaction_count AS ( SELECT transactions_count, COUNT(1) AS visits_count FROM res GROUP BY 1 ), sequence AS ( SELECT rn FROM dummy_rownum WHERE rn <= ( SELECT MAX(transactions_count) FROM res ) UNION SELECT 0 AS rn ) SELECT s.rn AS transactions_count, COALESCE(vt.visits_count,0) AS visits_count FROM sequence s LEFT JOIN visit_count_by_transaction_count vt ON s.rn = vt.transactions_count ORDER BY 1
WITH t AS ( SELECT v.user_id as user_id, visit_date, count(t.transaction_date) as transaction_count FROM Visits v LEFT JOIN Transactions t on v.visit_date = t.transaction_date and v.user_id=t.user_id GROUP BY 1, 2), row_nums AS (SELECT ROW_NUMBER() OVER () as rn FROM Transactions UNION SELECT 0) SELECT row_nums.rn as transactions_count, count(t.transaction_count) as visits_count FROM t RIGHT JOIN row_nums ON transaction_count = rn WHERE rn <= (SELECT MAX(transaction_count) FROM t) GROUP BY rn ORDER BY 1
WITH t AS (SELECT v.user_id as user_id, visit_date, IF(transaction_date is null, 0, count(*)) as transaction_count FROM Visits v LEFT JOIN Transactions t on v.visit_date = t.transaction_date and v.user_id=t.user_id GROUP BY 1, 2), row_nums AS (SELECT ROW_NUMBER() OVER () as rn FROM Transactions UNION SELECT 0) SELECT rn as transactions_count, IF(transaction_count is null, 0, count(*)) as visits_count FROM t RIGHT JOIN row_nums ON transaction_count = rn WHERE rn <= (SELECT MAX(transaction_count) FROM t) GROUP BY rn ORDER BY 1
WITH t AS (SELECT v.user_id as user_id, visit_date, IFNULL(count(transaction_date), 0) as transaction_count FROM Visits v LEFT JOIN Transactions t on v.visit_date = t.transaction_date and v.user_id=t.user_id GROUP BY 1, 2), row_nums AS (SELECT ROW_NUMBER() OVER () as rn FROM Transactions UNION SELECT 0) SELECT rn as transactions_count, IFNULL(count(transaction_count), 0) as visits_count FROM t RIGHT JOIN row_nums ON transaction_count = rn WHERE rn <= (SELECT MAX(transaction_count) FROM t) GROUP BY rn ORDER BY 1
WITH t AS (SELECT v.user_id as user_id, visit_date, count(t.transaction_date) as transaction_count FROM Visits v LEFT JOIN Transactions t ON v.visit_date = t.transaction_date AND v.user_id=t.user_id GROUP BY 1, 2), row_nums AS (SELECT ROW_NUMBER() OVER () as rn FROM Transactions UNION SELECT 0) SELECT row_nums.rn as transactions_count, count(t.transaction_count) as visits_count FROM t RIGHT JOIN row_nums ON transaction_count = rn WHERE rn <= (SELECT MAX(transaction_count) FROM t) GROUP BY rn ORDER BY 1
WITH t AS (SELECT v.user_id as user_id, visit_date, count(t.transaction_date) as transaction_count FROM Visits v LEFT JOIN Transactions t on v.visit_date = t.transaction_date and v.user_id=t.user_id GROUP BY 1, 2), row_nums AS (SELECT ROW_NUMBER() OVER () as rn FROM Transactions UNION SELECT 0) SELECT row_nums.rn as transactions_count, count(t.transaction_count) as visits_count FROM t RIGHT JOIN row_nums ON transaction_count = rn WHERE rn <= (SELECT MAX(transaction_count) FROM t) GROUP BY rn ORDER BY 1
WITH t AS( SELECT Visits.user_id,visit_date, transaction_date,IFNULL(amount,0) amount, ROW_NUMBER() OVER() AS rn FROM Visits LEFT JOIN Transactions ON Visits.user_id = Transactions.user_id AND visit_date = transaction_date ), t1 AS ( SELECT user_id,COUNT(amount) ct FROM t WHERE amount > 0 GROUP BY user_id,visit_date ), t2 AS (SELECT DISTINCT ct AS transactions_count, COUNT(user_id) AS visits_count FROM t1 GROUP BY ct ), t3 AS (SELECT CASE WHEN rn NOT IN (SELECT transactions_count FROM t2) THEN rn END AS transactions_count, 0 AS visits_count FROM t ) SELECT * FROM( SELECT 0 AS transactions_count, COUNT(*) visits_count FROM t WHERE amount = 0 UNION SELECT DISTINCT ct AS transactions_count, COUNT(user_id) AS visits_count FROM t1 GROUP BY ct UNION SELECT * FROM t3 WHERE transactions_count IS NOT NULL AND transactions_count <= (SELECT MAX(ct) FROM t1) ) result ORDER BY transactions_count
WITH t1 AS ( SELECT ROW_NUMBER() OVER() AS rn FROM Transactions UNION SELECT 0 ), t2 AS ( SELECT COUNT(t.transaction_date) AS transactions_count FROM Visits v LEFT JOIN Transactions t ON v.user_id = t.user_id AND v.visit_date = t.transaction_date GROUP BY v.user_id, v.visit_date ) SELECT t1.rn AS transactions_count, COUNT(t2.transactions_count) AS visits_count FROM t1 LEFT JOIN t2 ON t1.rn = t2.transactions_count GROUP BY t1.rn HAVING t1.rn <= (SELECT MAX(t2.transactions_count) FROM t2) ORDER BY t1.rn
WITH t1 AS ( SELECT ROW_NUMBER() OVER() AS rn FROM Transactions UNION SELECT 0 ), t2 AS ( SELECT v.user_id, v.visit_date, IFNULL(COUNT(t.transaction_date), 0) AS transactions_count FROM Visits v LEFT JOIN Transactions t ON v.user_id = t.user_id AND v.visit_date = t.transaction_date GROUP BY v.user_id, v.visit_date ) SELECT t1.rn AS transactions_count, COUNT(t2.transactions_count) AS visits_count FROM t1 LEFT JOIN t2 ON t1.rn = t2.transactions_count GROUP BY t1.rn HAVING t1.rn <= (SELECT MAX(t2.transactions_count) FROM t2) ORDER BY t1.rn
WITH t1 AS ( SELECT ina.user_id, ina.visit_date, COUNT(amount) AS n FROM Visits AS ina LEFT JOIN Transactions AS inb ON ina.user_id=inb.user_id AND ina.visit_date=inb.transaction_date GROUP BY ina.user_id, ina.visit_date ), t2 AS ( SELECT n, COUNT(*) AS visits_count FROM t1 GROUP BY n ), t3 AS ( SELECT ROW_NUMBER() OVER() AS n FROM Transactions UNION SELECT 0 ) SELECT t3.n AS transactions_count, IFNULL(t2.visits_count, 0) AS visits_count FROM t3 LEFT JOIN t2 ON t3.n = t2.n WHERE t3.n <= (SELECT MAX(n) FROM t2) ORDER BY t3.n
WITH t1 AS ( SELECT ina.user_id, ina.visit_date, COUNT(amount) AS n FROM Visits AS ina LEFT JOIN Transactions AS inb ON ina.user_id=inb.user_id AND ina.visit_date=inb.transaction_date GROUP BY ina.user_id, ina.visit_date ), t2 AS ( SELECT n, COUNT(*) AS visits_count FROM t1 GROUP BY n ), t3 AS ( SELECT ROW_NUMBER() OVER() AS transactions_count FROM Transactions UNION SELECT 0 ) SELECT t3.transactions_count, IFNULL(t2.visits_count, 0) AS visits_count FROM t3 LEFT JOIN t2 ON t3.transactions_count = t2.n WHERE t3.transactions_count <= (SELECT MAX(n) FROM t2) ORDER BY t3.transactions_count
WITH t1 AS ( SELECT v.user_id, visit_date, IFNULL(COUNT(transaction_date), 0) transaction_count_per_day_n_user FROM Visits v LEFT JOIN Transactions t ON v.visit_date = t.transaction_date AND v.user_id = t.user_id GROUP BY user_id, visit_date ), t2 AS ( SELECT transaction_count_per_day_n_user, COUNT(*) visits_count FROM t1 GROUP BY transaction_count_per_day_n_user ), t3 AS ( SELECT MAX(transaction_count_per_day_n_user) max_transaction_count_per_day_n_user from t2 ), RangeOfTransactionsCount AS ( SELECT transactions_count FROM ( SELECT row_number() OVER(ORDER BY transaction_date) transactions_count FROM Transactions UNION SELECT 0 ) t5 WHERE transactions_count <= (SELECT max_transaction_count_per_day_n_user FROM t3) ) SELECT RangeOfTransactionsCount.transactions_count, IFNULL(t2.visits_count, 0) visits_count FROM RangeOfTransactionsCount LEFT JOIN t2 ON t2.transaction_count_per_day_n_user = RangeOfTransactionsCount.transactions_count ORDER BY RangeOfTransactionsCount.transactions_count
WITH tbl AS ( SELECT COUNT(t.user_id) AS transactions_count FROM Visits v LEFT JOIN Transactions t ON v.user_id = t.user_id AND v.visit_date = t.transaction_date GROUP BY v.user_id, v.visit_date ), seq AS ( SELECT transactions_count FROM ( SELECT 0 AS transactions_count UNION SELECT ROW_NUMBER() OVER() AS transactions_count FROM Transactions ) t WHERE transactions_count <= (SELECT MAX(transactions_count) FROM tbl) ) SELECT seq.transactions_count, COUNT(tbl.transactions_count) AS visits_count FROM seq LEFT JOIN tbl ON seq.transactions_count = tbl.transactions_count GROUP BY seq.transactions_count ORDER BY seq.transactions_count
WITH temp AS ( SELECT V.user_id, V.visit_date, COUNT(T.user_id) AS transactions_count FROM Visits V LEFT OUTER JOIN Transactions T ON V.user_id = T.user_id AND V.visit_date = T.transaction_date GROUP BY V.user_id, V.visit_date ), rownumbertable AS ( SELECT 0 as row_num UNION ALL SELECT ROW_NUMBER() OVER () AS row_num FROM Transactions ), transactionscount AS ( SELECT transactions_count, COUNT(user_id) AS visits_count FROM temp GROUP BY transactions_count ) SELECT row_num AS transactions_count, IFNULL(transactionscount.visits_count, 0) AS visits_count FROM rownumbertable LEFT OUTER JOIN transactionscount ON rownumbertable.row_num = transactionscount.transactions_count WHERE row_num <= (SELECT MAX(transactions_count) FROM transactionscount) ORDER BY row_num
WITH tran_index AS( SELECT ROW_NUMBER() OVER() row_num FROM Transactions UNION SELECT 0 ), tran_count AS ( SELECT COUNT(transactions.transaction_date) AS transaction_count FROM visits LEFT JOIN transactions ON visits.user_id = transactions.user_id AND visits.visit_date = transactions.transaction_date GROUP BY visits.user_id, visits.visit_date ) SELECT row_num AS transactions_count, COUNT(transaction_count) AS visits_count FROM tran_index LEFT JOIN tran_count ON row_num = transaction_count GROUP BY row_num HAVING row_num <= (SELECT MAX(transaction_count) FROM tran_count) ORDER BY row_num
WITH trans_cts AS ( SELECT v.user_id, visit_date, COUNT(amount) as transaction_count FROM Visits v LEFT JOIN Transactions t ON v.user_id=t.user_id AND v.visit_date=t.transaction_date GROUP BY 1,2), visit_cts AS ( SELECT transaction_count, COUNT(*) as visits_count FROM trans_cts GROUP BY 1), all_counts AS (WITH RECURSIVE CTE (ct) AS (SELECT 0 UNION ALL SELECT ct + 1 FROM CTE WHERE ct < (SELECT MAX(transaction_count) FROM trans_cts)) SELECT * FROM CTE) SELECT c.ct AS transactions_count, IFNULL(v.visits_count,0) as visits_count FROM all_counts c LEFT JOIN visit_cts v ON c.ct=v.transaction_count
WITH vt AS( SELECT v.user_id, visit_date, COUNT(t.transaction_date) AS transaction_count FROM Visits v LEFT JOIN Transactions t ON v.visit_date = t.transaction_date AND v.user_id = t.user_id GROUP BY v.user_id, visit_date), row_nums AS( SELECT ROW_NUMBER() OVER () AS rn FROM Transactions UNION SELECT 0) SELECT rn AS transactions_count, COUNT(vt.transaction_count) AS visits_count FROM vt RIGHT JOIN row_nums ON transaction_count = rn WHERE rn <= ( SELECT MAX(transaction_count) FROM vt) GROUP BY rn ORDER BY rn
WITH vts as ( SELECT v.user_id, COUNT(t.user_id) as t_count FROM Visits v LEFT JOIN Transactions t ON t.transaction_date = v.visit_date AND t.user_id = v.user_id GROUP BY v.visit_date, v.user_id ) SELECT num_transactions.num as transactions_count, COUNT(vts.user_id) as visits_count FROM vts RIGHT JOIN ( SELECT row_number() over () as num FROM transactions UNION select 0 ) as num_transactions ON num_transactions.num = vts.t_count WHERE num_transactions.num <= (SELECT MAX(t_count) from vts) GROUP BY num_transactions.num ORDER BY transactions_count ASC
With T1 As ((Select Row_Number() Over (Order By transaction_date) as transactions_count From Transactions) Union (Select 0 As transactions_count) ), T2 As (Select Ifnull(Max(txn_cnt),0) as max_txn_cnt From (Select Count(*) As txn_cnt From Transactions Group By user_id, transaction_date) as Transactions_1), T3 As (Select transactions_count, Count(*) as visits_count From (Select Visits.user_id, Visits.visit_date, Ifnull(Transactions_1.transactions_count,0) as transactions_count From Visits Left Join (Select user_id, transaction_date, Count(*) as transactions_count From Transactions Group By user_id, transaction_date ) As Transactions_1 On Visits.user_id = Transactions_1.user_id And Visits.visit_date = Transactions_1.transaction_date) as Visits_1 Group By transactions_count) Select T4.transactions_count, Ifnull(T3.visits_count, 0) as visits_count From (Select * From T1, T2 Where T1.transactions_count <= T2.max_txn_cnt) as T4 Left Join T3 On T4.transactions_count = T3.transactions_count Order By T4.transactions_count
With T1 As ((Select Row_Number() Over (Order By transaction_date) as transactions_count From Transactions) Union (Select 0 As transactions_count)), T2 As (Select Ifnull(Max(txn_cnt),0) as max_txn_cnt From (Select Count(*) As txn_cnt From Transactions Group By user_id, transaction_date ) As Transactions_1), T3 As (Select transactions_count, Count(*) as visits_count From (Select Visits.user_id, Visits.visit_date, Ifnull(Transactions_1.transactions_count,0) as transactions_count From Visits Left Join (Select user_id, transaction_date, Count(*) as transactions_count From Transactions Group By user_id, transaction_date ) As Transactions_1 On Visits.user_id = Transactions_1.user_id And Visits.visit_date = Transactions_1.transaction_date) as Visits_1 Group By transactions_count) Select T4.transactions_count, Ifnull(T3.visits_count, 0) as visits_count From (Select * From T1, T2 Where T1.transactions_count <= T2.max_txn_cnt) as T4 Left Join T3 On T4.transactions_count = T3.transactions_count Order By T4.transactions_count
With recursive CTE as (select 0 as transactions_count union all select transactions_count+1 as transactions_count from CTE where transactions_count< 100) , visit as ( select distinct a.*, ifnull(b.transaction_count,0) as transaction_count from Visits a left join ( select distinct user_id, transaction_date, count(*) as transaction_count from Transactions group by user_id, transaction_date) b on a.user_id=b.user_id and transaction_date=visit_date ) select a.transactions_count, ifnull(visits_count,0) as visits_count from CTE a left join (select transaction_count, count(*) visits_count from Visit group by transaction_count) b on a.transactions_count=b.transaction_count where a.transactions_count<=(select Max(transaction_count) from Visit) group by transactions_count order by 1
With recursive a as (select v.user_id, v.visit_date, count(t.transaction_date) as transactions_count from visits v left join transactions t on v.user_id = t.user_id and v.visit_date = t.transaction_date group by v.user_id, v.visit_date), b as (select 0 as transactions_count, max(transactions_count) as m from a union all select transactions_count +1, m from b where transactions_count < m) select b.transactions_count, ifnull(count(a.transactions_count), 0) as visits_count from b left join a on b.transactions_count = a.transactions_count group by b.transactions_count order by b.transactions_count
With recursive cte as (select v.user_id, SUM(CASE when visit_date=transaction_date then 1 else 0 end) transactions_count FROM Visits v LEFT JOIN Transactions t ON v.user_id=t.user_id and v.visit_date=t.transaction_date group by v.user_id, v.visit_date) , cte2 as (select 0 as cnt union all select cnt + 1 from cte2 where cnt < (select max(transactions_count) FROM cte) ) select cte2.cnt as transactions_count, COALESCE(COUNT(user_id),0) as visits_count from cte2 left join cte on cnt=transactions_count group by cnt
With recursive record as (Select 0 as num Union Select num+1 From record Where num < (Select count(*) From Transactions) ), visit_num_trans As (Select a.user_id, a.visit_date, Count(b.amount) as num_trans From Visits as a Left Join Transactions as b On a.user_id = b.user_id And a.visit_date = b.transaction_date Group By a.user_id, a.visit_date) Select m.num as transactions_count, COUNT(COALESCE(n.user_id, n.visit_date)) as visits_count From record as m Left Join visit_num_trans as n On m.num = n.num_trans Where m.num <= (Select max(num_trans) From visit_num_trans) GROUP BY m.num Order BY transactions_count
With t as ( Select d.counts as transactions_count, count(d.visit_date) as visits_count from (Select c.user_id,c.tran_id,c.visit_date, sum(case when c.tran_id is null then 0 else 1 end) as counts from (Select a.user_id,b.user_id as tran_id, a.visit_date, b.transaction_date from Visits a left join Transactions b on a.user_id=b.user_id and a.visit_date=b.transaction_date order by 1) c group by 1,2,3) d group by 1 order by 1 ) Select s.rownum as transactions_count,ifnull(z.visits_count,0) as visits_count from (Select ROW_NUMBER() Over () as rownum from Transactions union Select 0)s left join t z on s.rownum=z.transactions_count where s.rownum<=(select max(transactions_count) from t) order by 1
With total as( select v.user_id, v.visit_date,Sum(Case when t.amount is null then 0 else 1 end) n From Visits v Left join Transactions t On t.user_id = v.user_id and t.transaction_date = v.visit_date Group by 1, 2 ), counts as( with recursive num(n) as ( select 0 n Union all Select n+1 from num where n < (select Max(n) from total)) Select * from num ) Select c.n transactions_count, Sum(case when t.n is null then 0 else 1 end) visits_count From total t Right Join counts c Using(n) Group by 1
select * from (select cast(t4.id as SIGNED) transactions_count, case when t1.visits_count is null then 0 else t1.visits_count end as visits_count from (select t.transactions_count, count(1) as visits_count from ( select sum(case when transaction_date is null then 0 else 1 end) as transactions_count, count(1) as visits_count from Visits left join Transactions on Visits.user_id = Transactions.user_id and visit_date = transaction_date group by Visits.user_id, Visits.visit_date) as t group by t.transactions_count) as t1 right join (select (@cnt1 := @cnt1+1) as id from Transactions cross join (select @cnt1 := -1) as dummy union select 0 ) as t4 on t1.transactions_count = t4.id) as t5 where t5.transactions_count <= (select 0 as cnt union select count(1) as cnt from Transactions group by user_id, transaction_date order by cnt desc limit 1)
select a.transactions_count, count(b.user_id) as visits_count from (select distinct row_number () over (partition by user_id, transaction_date ) as transactions_count from transactions union all select 0 ) a left join (select v.user_id, v.visit_date, count(t.user_id) as transactions_count from visits v left join transactions t on v.user_id = t.user_id and v.visit_date = t.transaction_date group by 1, 2) b on a.transactions_count = b.transactions_count group by 1 order by 1
select id as 'transactions_count', (select count(*) from ( select sum(case when amount is null then 0 else 1 end) from visits v left join transactions t on v.user_id = t.user_id and v.visit_date = t.transaction_date group by visit_date, v.user_id having sum(case when amount is null then 0 else 1 end) = id) as temp) as 'visits_count' from( select 0 as id union select row_number() over() as id from transactions) as B where id <= ( select case when count(*) = 0 then 0 else max(num_t) end from ( select count(*) as num_t from transactions group by transaction_date, user_id) temp1)
with A as (Select v.user_id, v.visit_date, Count(t.amount) as transactions_count From Visits v Left Join Transactions t On v.user_id=t.user_id and v.visit_date=t.transaction_date Group by v.user_id,v.visit_date), B as (Select 0 as trans_count UNION Select ROW_NUMBER() OVER() as trans_count From Transactions), C as (Select A.user_id as user_id, B.trans_count, IFNULL(A.transactions_count, 0) as transactions_count From B Left Join A On B.trans_count=A.transactions_count where B.trans_count<=(Select Max(transactions_count) From A)) Select trans_count as transactions_count, (Case when user_id=null then 0 else Count(user_id) end) as visits_count From C Group by trans_count Order by trans_count
with A as (select v.user_id, v.visit_date, ifnull(transactions_count,0) 'transactions_count' from Visits v left join (select user_id, transaction_date,count(transaction_date) 'transactions_count' from Transactions group by user_id,transaction_date) as t on v.user_id=t.user_id and v.visit_date=t.transaction_date), B AS (select * from (SELECT ROW_NUMBER() OVER () as transactions_count FROM Transactions UNION SELECT 0) as c where transactions_count <=(SELECT MAX(A.transactions_count) FROM A)) select B.transactions_count, ifnull(count(user_id),0) as 'visits_count' from B left join A using (transactions_count) group by B.transactions_count order by B.transactions_count
with CTE as ( select num_tranc as transactions_count , count(*) as visits_count from ( select t1.user_id, t1.visit_date, count(t2.transaction_date) as num_tranc from Visits t1 left join transactions t2 on t1.user_id=t2.user_id and t1.visit_date=t2.transaction_date group by t1.user_id, t1.visit_date) temp group by num_tranc ), CTE2 as( select row_num from ( select row_number() over () as row_num from Transactions ) temp where row_num <= (select max(transactions_count) from CTE) union select 0 ) select row_num as transactions_count , ifnull(t2.visits_count,0) visits_count from CTE2 t1 left join CTE t2 on t1.row_num=t2.transactions_count order by row_num
with RECURSIVE cte AS ( SELECT 0 AS n UNION ALL SELECT n + 1 FROM cte WHERE n < (select max(a.transaction_count) from ( select user_id, transaction_date, count(*) as transaction_count from Transactions group by user_id, transaction_date ) a ) ) , transaction_counts as ( select user_id, transaction_date, count(*) as transaction_count from Transactions group by user_id, transaction_date ) ,zero_visit_counts as ( select v.user_id, v.visit_date as transaction_date, 0 as transaction_count from Visits v left join Transactions t on v.visit_date = t.transaction_date and v.user_id = t.user_id where t.transaction_date is null ) , max_transactions as ( select max(transaction_count) max_transaction_count from transaction_counts ) , altogether as ( select user_id, transaction_date, transaction_count from transaction_counts union select user_id, transaction_date, transaction_count from zero_visit_counts ) , second_altogether as ( select transaction_count, count(*) visits_count from altogether group by transaction_count union select n as transaction_count, 0 as visits_count from cte ) select transaction_count as transactions_count, max(visits_count) as visits_count from second_altogether group by transaction_count order by transaction_count
with RECURSIVE cte as ( select v.user_id,v.visit_date, sum(case when v.visit_date = t.transaction_date then 1 else 0 end) as transactions_cnt, coalesce(count(v.user_id),0)as visits_count from Visits v left join Transactions t on v.user_id = t.user_id group by 1,2 ), cte2 as ( select 0 as transactions_count union all select transactions_count + 1 as transactions_count from cte2 where transactions_count < (select max( transactions_cnt) from cte) ) select c1.transactions_count, coalesce(count(c2.visits_count),0) as visits_count from cte2 c1 left join cte c2 on c1.transactions_count = c2.transactions_cnt group by 1
with RECURSIVE cte as (select user_id,transaction_date, count(*) as num_trans from transactions group by user_id,transaction_date) ,cte1 as (select 0 as transactions_count union select transactions_count+1 as transactions_count from cte1 where transactions_count<(select max(num_trans) from cte)) select * from (select transactions_count,count(V.user_id) as visits_count from visits V left join cte C on V.user_id = C.user_id and V.visit_date=C.transaction_date right join cte1 C1 on coalesce(C.num_trans,0)= C1.transactions_count group by transactions_count)t1
with RECURSIVE seq AS (SELECT 0 AS value UNION ALL SELECT value + 1 FROM seq WHERE value <= 100), a as (select transaction_count,count(user_id) as visits_count from (select Visits.*, IFNULL(tran_count,0) as transaction_count from Visits left join (select user_id,transaction_date,count(amount) as 'tran_count' from Transactions group by user_id,transaction_date) as temp on Visits.user_id = temp.user_id and Visits.visit_date = temp.transaction_date) as temp2 group by transaction_count order by transaction_count ) select value as transactions_count,IFNULL(visits_count,0) as visits_count from seq left join a on a.transaction_count = seq.value where seq.value <= (select max(transaction_count) from a)
with RECURSIVE seq as (select 0 as n union all select n+1 from seq where n < (select max(t_cnt) from (select v.user_id, v.visit_date, ifnull(count(t.transaction_date),0) as t_cnt from visits v left join transactions t on v.user_id = t.user_id and v.visit_date = t.transaction_date group by 1,2) a)), t1 as (select v.user_id, v.visit_date, ifnull(count(t.transaction_date),0) as t_cnt from visits v left join transactions t on v.user_id = t.user_id and v.visit_date = t.transaction_date group by 1,2), t2 as (select t1.t_cnt, count(visit_date) as n_visits from t1 group by 1) select seq.n as transactions_count, ifnull(n_visits,0) as visits_count from seq left join t2 on seq.n = t2.t_cnt
with Recursive t as ( select 0 as transactions_count union all select transactions_count+1 from t where transactions_count<= 100), b as (select v.user_id, v.visit_date, count(t.amount) as transactions_count from Visits v left join Transactions t on v.user_id =t.user_id and v.visit_date = t.transaction_date group by v.user_id, v.visit_date), c as (select transactions_count, count(*) as visits_count from b group by transactions_count) select t.transactions_count, ifnull(visits_count,0) as visits_count from t left join c on t.transactions_count = c.transactions_count where t.transactions_count <= (select max(transactions_count) from c)
with T AS ( SELECT ROW_NUMBER() OVER() row_num FROM Transactions UNION SELECT 0 ), T1 as ( SELECT COUNT(transaction_date) transaction_count FROM Visits v LEFT JOIN Transactions t ON v.user_id = t.user_id AND v.visit_date = transaction_date GROUP BY v.user_id, v.visit_date ) SELECT row_num transactions_count, COUNT(transaction_count) visits_count FROM T LEFT JOIN T1 ON row_num = transaction_count GROUP BY row_num HAVING row_num <= (SELECT MAX(transaction_count) FROM T1) ORDER BY row_num
with X as (select user_id, transaction_date, count(amount) as "transactions_count" from Transactions group by user_id, transaction_date), Y as (select transactions_count, count(user_id) as "visits_count" from X group by transactions_count union select 0 as "transactions_count", (select count(*) as "visits_count" from Visits) - (select count(*) from (select distinct user_id, transaction_date from Transactions) t) as "visits_count"), N as (select 0 as "n" union select row_number()over() as "n" from Transactions) select n as "transactions_count", ifnull(visits_count,0) as "visits_count" from N left join Y on N.n = Y.transactions_count where N.n <= (select max(transactions_count) from Y)
with a as ( select v.user_id, v.visit_date, count(t.user_id) as transactions_count, (case when t.transaction_date is null then 0 else 1 end) as visits from visits v left join transactions t on v.user_id = t.user_id and v.visit_date = t.transaction_date group by v.user_id, v.visit_date ), b as ( select transactions_count, count(visits) as visits_count from a group by transactions_count ), c as ( select 0 as transactions_count union all select row_number() over () as transactions_count from transactions ) select c.transactions_count, ifnull(visits_count, 0) as visits_count from c left join b on c.transactions_count = b.transactions_count where c.transactions_count <= (select max(b.transactions_count) from b)
with a as ( select v1.user_id, v1.visit_date, t1.amount from Visits as v1 left join Transactions as t1 on v1.user_id = t1.user_id and v1.visit_date=t1.transaction_date ), b as ( select user_id, visit_date, sum(case when amount is null then 0 else 1 end) as `num` from a group by user_id, visit_date ), c as ( select num, count(*) as `cnt` from b group by num ), d as ( select 0 as `r` union all select row_number() over() as `r` from Transactions ) select d.r as `transactions_count`, coalesce(c.cnt, 0) as `visits_count` from d left join c on c.num = d.r where r <= (select max(num) from c)
with a as (select v.user_id, v.visit_date, ifnull(amount, 0) as am from Visits v left join Transactions t on t.user_id = v.user_id and t.transaction_date = v.visit_date) , b as (select ct as transactions_count, count(ct) as visits_count from (select user_id, visit_date, sum(case when am = 0 then 0 else 1 end) as ct from a group by user_id, visit_date) as t group by ct) , c as (select row_number() over()-1 as rn from (select user_id from Visits union all select user_id from Transactions) as t3) select rn as transactions_count, ifnull(visits_count, 0) as visits_count from (select rn from c where rn <= (select max(transactions_count) from b)) as t1 left join b on b.transactions_count = t1.rn
with a as (select v.user_id, visit_date, ifnull(count(amount),0) as transactions_count from visits v left join transactions t on v.user_id = t.user_id and v.visit_date = t.transaction_date group by v.user_id,v.visit_date) , b as ( select row_number() over() as transactions_count from transactions union select 0 ) select b.transactions_count, ifnull(count(user_id),0) as visits_count from b left join a on b.transactions_count = a.transactions_count group by b.transactions_count having b.transactions_count<=(select max(transactions_count) from a) order by b.transactions_count
with counts as (select transactions_count, count(*) as visits_count from (select v.user_id, v.visit_date, sum(case when t.transaction_date is not null then 1 else 0 end) as transactions_count from visits as v left join transactions as t on v.user_id=t.user_id and v.visit_date=t.transaction_date group by 1,2) as a group by 1), all_counts_tab as ( with recursive all_counts as (select 0 as transactions_count union select transactions_count + 1 from all_counts where transactions_count < (select max(transactions_count) from counts) ) select * from all_counts ) select a.transactions_count, coalesce(b.visits_count,0) as visits_count from all_counts_tab as a left join counts as b on a.transactions_count=b.transactions_count order by 1
with cte as ( select a.user_id, a.visit_date , sum(case when b.amount is not Null then 1 else 0 end) as cnt from Visits a left join Transactions b on a.user_id = b.user_id and a.visit_date = b.transaction_date group by a.user_id, a.visit_date ) , gaps AS ( WITH RECURSIVE cte_count (n) AS ( SELECT 0 UNION ALL SELECT n+1 FROM cte_count WHERE n < (SELECT MAX(cnt) FROM cte) ) SELECT n AS 'transactions_count' FROM cte_count ) select b.transactions_count, count(a.user_id) as visits_count from gaps b left join cte a on b.transactions_count = a.cnt group by b.transactions_count
with cte as ( select a.user_id, visit_date, sum(case when b.user_id is null or b.transaction_date is null then 0 else 1 end) as transactions_count from Visits as a left join Transactions as b on a.user_id=b.user_id and a.visit_date=b.transaction_date group by a.user_id, visit_date ), cte1 as (select 0 as row_num union all select row_number() over() as row_num from Transactions ) select a.row_num as transactions_count ,count(b.transactions_count) as visits_count from cte1 as a left join cte as b on a.row_num=b.transactions_count where a.row_num<=(select max(transactions_count) from cte) group by a.row_num
with cte as ( select v.user_id, v.visit_date, ifnull(count(t.transaction_date), 0) num from visits v left join transactions t on v.user_id = t.user_id and v.visit_date = t.transaction_date group by 1, 2), cte1 as ( select r from ( select row_number() over () r from transactions) f where r <= (select max(num) from cte) union select 0 ) select cte1.r transactions_count, ifnull(h.visits_count, 0) visits_count from cte1 left join ( select num, count(num) visits_count from cte group by 1) h on cte1.r = h.num order by 1
with cte as ( select v.user_id, visit_date, count(transaction_date) transactions_count from visits v left join transactions t on v.user_id = t.user_id and visit_date = transaction_date group by 1,2 ) , cte1 as ( Select 0 rownum union all Select row_number() over() as rownum from transactions ) Select rownum transactions_count, count(transactions_count) visits_count from cte right join cte1 on transactions_count = rownum where rownum <= (Select max(transactions_count) from cte) group by 1 order by 1
with cte as ( select v.user_id, visit_date, count(transaction_date) transactions_count from visits v left join transactions t on v.user_id = t.user_id and visit_date = transaction_date group by 1,2 ) , cte1 as ( Select 0 rownum union all Select row_number() over() as rownum from transactions ) select rownum as transactions_count , count(transactions_count) as visits_count from cte right join cte1 on transactions_count = rownum group by 1 having rownum <= (select max(transactions_count) from cte) order by transactions_count
with cte as ( select v.user_id,visit_date, coalesce(count(transaction_date),0) transactions_count from visits v left join transactions t on v.user_id = t.user_id and visit_date = transaction_date group by v.user_id,visit_date order by 1 ), cte1 as ( Select user_id, visit_date, sum(transactions_count) as cnt from cte group by 1,2 ) , cte2 as ( Select row_number() over() as rownum from transactions union Select 0 ) Select rownum transactions_count, count(cnt) visits_count from cte1 right join cte2 on cnt = rownum where rownum <= (Select max(cnt) from cte1) group by 1 order by 1
with cte as ( select v.user_id,visit_date, count(transaction_date) transactions_count from visits v left join transactions t on v.user_id = t.user_id and visit_date = transaction_date group by v.user_id,visit_date order by 1 ) , cte1 as ( Select 0 rownum union Select row_number() over() as rownum from transactions ) Select rownum transactions_count, count(transactions_count) visits_count from cte right join cte1 on transactions_count = rownum where rownum <= (Select max(transactions_count) from cte) group by 1 order by 1
with cte as ( select v.user_id,visit_date, count(transaction_date) transactions_count from visits v left join transactions t on v.user_id = t.user_id and visit_date = transaction_date group by v.user_id,visit_date order by 1 ), cte1 as ( Select user_id, visit_date, sum(transactions_count) as cnt from cte group by 1,2 ) , cte2 as ( Select row_number() over() as rownum from transactions union Select 0 ) Select rownum transactions_count, count(cnt) visits_count from cte1 right join cte2 on cnt = rownum where rownum <= (Select max(cnt) from cte1) group by 1 order by 1
with cte as (select Visits.user_id, visit_date, transaction_date from Visits left join Transactions on Visits.user_id = Transactions.user_id and Transactions.transaction_date = Visits.visit_date), cte1 as (select count(transaction_date) as transactions_count,visit_date from cte group by user_id, visit_date), cte2 as (select transactions_count, count(visit_date) as visits_count from cte1 group by transactions_count), cte3 AS (select row_number() over(order by user_id) as transactions_count from (select user_id from Visits union all select user_id from Transactions) t union select 0 as transactions_count) select cte3.transactions_count, ifnull(cte2.visits_count,0) as visits_count from cte3 left join cte2 on cte3.transactions_count = cte2.transactions_count where cte3.transactions_count <= (select max(transactions_count) from cte2) order by 1 asc
with cte as (select tot as transactions_count, count(tot) as visits_count from (select user_id, transaction_date, count(*) as tot from transactions group by user_id, transaction_date)a group by tot ), rwnum as (select row_number() over(order by transaction_date) as rw_count from transactions) select r.rw_count as 'transactions_count', ifnull(visits_count,0) as visits_count from cte right join rwnum r on cte.transactions_count = r.rw_count where rw_count <= (select max(transactions_count) from cte) union select 0 as 'transactions_count',count(user_id) as visits_count from visits where (user_id, visit_date) not in (select user_id, transaction_date from transactions) order by transactions_count
with cte as (select user_id, transaction_date, count(*) as transaction_num from transactions group by user_id, transaction_date), trans as (with recursive seq as (select 0 as transactions_count union all select transactions_count + 1 from seq where transactions_count < (select max(transaction_num) from cte)) select * from seq), t as (select 0 as transactions_count, count(*) as visits_count from (select v.user_id visitor_id, v.visit_date, t.user_id, t.transaction_date from visits v left join transactions t on v.user_id = t.user_id and v.visit_date = t.transaction_date) t where user_id is null union all select transaction_num transactions_count, count(transaction_num) as visits_count from cte group by transaction_num) select trans.transactions_count, ifnull(t.visits_count,0) visits_count from t right join trans on t.transactions_count = trans.transactions_count
with cte as (select v.user_id, v.visit_date, ifnull(count(t.transaction_date),0) as cnt from Visits v left join Transactions t on v.user_id = t.user_id and v.visit_date = t.transaction_date group by 1,2), cte2 as ( with recursive cte3 as ( select 0 as n union all select n+1 as n from cte3 where n < (select max(cnt) from cte ) ) select * from cte3) select n as transactions_count, ifnull(visits_count, 0) as visits_count from cte2 left join (select cnt, count(*) as visits_count from ( select visit_date, user_id, count(amount) as cnt from ( select a.user_id, a.visit_date, b.transaction_date, b.amount from Visits a left join Transactions b on a.user_id = b.user_id and a.visit_date = b.transaction_date) x group by 1,2) y group by 1 ) z on cte2.n = z.cnt
with cte as (select v.user_id, visit_date, count(transaction_date) as num from visits v left join transactions t on t.user_id = v.user_id AND v.visit_date = t.transaction_date group by user_id, visit_date) select distinct c.transactions_count, count(num) as visits_count from (select distinct row_number() over(partition by user_id,transaction_date order by transaction_date) as transactions_count from transactions union all select 0) c left join cte on cte.num = c.transactions_count GROUP BY c.transactions_count ORDER BY c.transactions_count
with cte as (select visits.user_id, visits.visit_date, transactions.transaction_date, count(transactions.amount) as ct from visits left join transactions on visits.user_id = transactions.user_id and visits.visit_date = transactions.transaction_date group by visits.user_id, visits.visit_date), cte3 as (select num as transactions_count from (select 0 as num UNION select row_number()over() as num from transactions) as cte2 where num <= (select max(ct) from cte)) select cte3.transactions_count, count(cte.user_id) as visits_count from cte3 left join cte on cte.ct = cte3.transactions_count group by transactions_count
with cte1 as ( select user_id, transaction_date, amount from transactions group by 1,2,3 ) , cte2 as ( select t_count transactions_count, count(*) v_count from ( select visit_date, v.user_id, sum(case when t.user_id is null then 0 else 1 end) t_count from visits v left outer join transactions t on t.user_id = v.user_id and t.transaction_date = v.visit_date group by visit_date, v.user_id ) a group by t_count ) ,possible_transactions as ( with recursive sub as ( select 0 as possible_transactions_per_user union all select possible_transactions_per_user + 1 as possible_transactions_per_user from sub where possible_transactions_per_user < (select max(transactions_count) from cte2) ) select * from sub ) select possible_transactions_per_user transactions_count, case when transactions_count is null then 0 else v_count end visits_count from possible_transactions p left outer join cte2 c on c.transactions_count = p.possible_transactions_per_user
with cte1 as ( select user_id, transaction_date, count(transaction_date) as num_trans from transactions group by 1,2), cte2 as( with recursive new as ( select 0 as transactions_count union all select transactions_count+1 from new where transactions_count<(select max(num_trans) from cte1)) select * from new), cte3 as(select v.user_id, v.visit_date, count(t.transaction_date) as num_trans from visits v left join transactions t on v.user_id=t.user_id and v.visit_date=t.transaction_date group by 1,2) select transactions_count, ifnull(count(user_id),0) as visits_count from cte2 c2 left join cte3 c3 on c2.transactions_count =c3.num_trans group by 1 order by 1 asc
with cte1 as (select a.*, b.amount as amt, case when b.amount is null then 0 else 1 end as trans_cnt from Visits a left join Transactions b on a.user_id = b.user_id and a.visit_date = b. transaction_date ), cte2 as (select visit_date, user_id, sum(trans_cnt) as transaction_count from cte1 group by 1, 2), base as (SELECT DISTINCT row_number() OVER (partition BY user_id, transaction_date ORDER BY transaction_date) AS counts FROM transactions UNION ALL SELECT 0) select a.counts as transactions_count, count(user_id) as visits_count from base a left join cte2 b on a.counts = b.transaction_count group by 1 order by 1
with cte1 as (select transactions_count, count(*) as total_count from (select v.user_id, visit_date,count(transaction_date) as transactions_count from visits v left join transactions t on v.user_id = t.user_id and v.visit_date = t.transaction_date group by 1,2) t group by 1), cte2 as (select row_num from (select row_number() over() as row_num from transactions) t where row_num <= (select max(transactions_count) from cte1) union select 0) select row_num as transactions_count, ifnull(total_count,0) as visits_count from cte2 left join cte1 on cte2.row_num = cte1.transactions_count order by 1
with cte1 as (select transactions_count, count(1) as visits_count from (select v1.user_id,t1.transaction_date, sum(case when t1.amount is null then 0 else 1 end) as transactions_count from Visits v1 left join Transactions t1 on v1.user_id = t1.user_id and v1.visit_date = t1.transaction_date group by v1.user_id, v1.visit_date) as temp group by transactions_count), cte3 as (select 0 as transactions_count union select (@cnt := @cnt + 1) as transactions_count from transactions join (select @cnt := -1) as temp where @cnt < (select max(transactions_count) from cte1)) select cte3.transactions_count, ifnull(cte1.visits_count,0) as visits_count from cte3 left join cte1 on cte3.transactions_count = cte1.transactions_count
with cte1 as (select v.user_id, v.visit_date, sum(case when amount is not null then 1 else 0 end) as transactions_count from visits as v left join transactions as t on v.user_id = t.user_id and v.visit_date = t.transaction_date group by v.user_id, v.visit_date) , cte2 as (select transactions_count, count(visit_date) as visits_count from cte1 group by transactions_count) , cte3 as (select 0 as transactions_count union select (@cnt := @cnt + 1) as transactions_count from transactions join (select @cnt := -1) as temp where @cnt < (select max(transactions_count) from cte2)) select cte3.transactions_count, ifnull(cte2.visits_count, 0) as visits_count from cte3 left join cte2 on cte3.transactions_count = cte2.transactions_count
with cte1 as (select v.user_id,visit_date,transaction_date from visits v left join transactions t on v.user_id = t.user_id and visit_date = transaction_date), cte2 as (select count(transaction_date) as transactions_count, count(visit_date) as visits_count from cte1 where transaction_date is null), cte3 as (select user_id,count(transaction_date) as visits_count from cte1 where transaction_date is not null group by user_id,visit_date), cte_recur as ( WITH RECURSIVE tmp AS ( SELECT 0 as transactions_count UNION ALL SELECT transactions_count + 1 AS transactions_count FROM tmp WHERE transactions_count < (SELECT MAX(visits_count) FROM cte3) ) SELECT * FROM tmp ) select cte_recur.transactions_count,ifnull(t.visits_count,0) as visits_count from cte_recur left join (select visits_count as transactions_count,count(*) as visits_count from cte3 group by visits_count union select * from cte2 order by transactions_count) t on cte_recur.transactions_count = t.transactions_count
with cte1 as( select v.user_id, v.visit_date, count(t.user_id) as ct_day from Visits v left join Transactions t on v.user_id = t.user_id and v.visit_date = t.transaction_date group by 1,2), cte2 as( with recursive seq as( select 0 as transactions_count union all select transactions_count +1 from seq where transactions_count < (select max(ct_day) from cte1)) select * from seq) select c2.transactions_count, count(user_id) as visits_count from cte2 c2 left join cte1 c1 on c2.transactions_count = c1.ct_day group by 1
with cte_1 as ( select V.user_id, visit_date, ifnull(count(transaction_date),0) 'counts' from Visits V left join Transactions T on V.visit_date = T.transaction_date and V.user_id = T.user_id group by V.user_id,visit_date union select V.user_id, visit_date, count(transaction_date) from Visits V right join Transactions T on V.visit_date = T.transaction_date and V.user_id = T.user_id group by V.user_id,visit_date ), cte_2 as ( select 0 'num' union all select row_number() over (order by transaction_date ) from Transactions ) select num 'transactions_count', count(counts) 'visits_count' from cte_1 A right join cte_2 B on A.counts = B.num where num <= (select max(counts) from cte_1) group by num
with cte_joined as ( select v.user_id, visit_date, ifnull(count(transaction_date),0) as Ntransactions from visits v left join transactions t on (v.user_id=t.user_id and v.visit_date=t.transaction_date) group by v.user_id, visit_date ), cte_spine as ( with recursive counter as ( select 0 as n union all select n+1 from counter where n < ( select max(Ntransactions) from cte_joined ) ) select * from counter ), cte_summary as( select Ntransactions, count(*) as Nvisits from cte_joined group by Ntransactions ) select n as transactions_count, ifnull(Nvisits,0) as visits_count from cte_spine left join cte_summary on (cte_spine.n = cte_summary.Ntransactions)
with cte_joined as ( select vsts.user_id, vsts.visit_date, coalesce(count(amount), 0) as transactions_count from Visits vsts left join Transactions txns on vsts.user_id = txns.user_id and vsts.visit_date = txns.transaction_date group by 1, 2 ), cte_spine as ( with recursive counter (n) as ( select 0 as n union all select n + 1 from counter where n < (select max(transactions_count) from cte_joined) ) select * from counter), cte_visit_counts as ( select transactions_count, count(*) as visits_count from cte_joined group by 1 ), cte_assemble as ( select cte_spine.n as transactions_count, coalesce(visits_count, 0) as visits_count from cte_spine left join cte_visit_counts on cte_spine.n = cte_visit_counts.transactions_count ) select * from cte_assemble order by transactions_count
with data as ( select a.user_id, a.visit_date, b.transaction_date, coalesce(b.amount,0) as amount from Visits a left join Transactions b on a.user_id=b.user_id and a.visit_date=b.transaction_date ) , data2 as ( select user_id, visit_date, count(transaction_date) as transactions from data group by 1,2 ), seq as ( select row_number()over() as rn from Transactions union select 0 ) select a.rn as transactions_count , coalesce(count(b.user_id),0) as visits_count from seq a left join ( select user_id, visit_date, count(transaction_date) as transactions from data group by 1,2 )b on a.rn=b.transactions where rn <=(select max(transactions) from data2) group by 1 order by 1
with num_trans as ( select a.user_id, a.visit_date, count(amount) num_trans from Visits a left join Transactions b on a.user_id = b.user_id and a.visit_date = b.transaction_date group by a.user_id, a.visit_date), nums as ( select num num_trans from ( select 0 num union select row_number() over() num from Transactions) a where num <= (select max(num_trans) from num_trans ) ) select a.num_trans transactions_count, count(b.user_id) visits_count from nums a left join num_trans b on a.num_trans = b.num_trans group by a.num_trans
with r as ( select v.user_id, visit_date, coalesce(count(amount),0) as transactions_count from Visits v left join Transactions t on v.user_id = t.user_id and v.visit_date = t.transaction_date group by 1,2 ), rk as ( select 0 as n union select row_number() over() as n from Transactions ) select rk.n as transactions_count, if(r.transactions_count is null,0, count(*)) as visits_count from rk left join r on rk.n = r.transactions_count where n <= (select max(transactions_count) from r) group by 1 order by 1
with r as ( select v.user_id, visit_date, count(amount) as transactions_count from Visits v left join Transactions t on v.user_id = t.user_id and v.visit_date = t.transaction_date group by 1,2 ), rk as ( with recursive temp as ( select 0 as cnt union all select cnt + 1 from temp where cnt < (select max(transactions_count) from r) ) select * from temp ) select cnt as transactions_count, count(r.transactions_count) as visits_count from rk left join r on rk.cnt = r.transactions_count group by 1 order by 1
with records as ( select Visits.user_id,Visits.visit_date,count(Transactions.amount) as transactions_count from Visits left outer join Transactions on Visits.user_id = Transactions.user_id and Visits.visit_date = Transactions.transaction_date group by user_id, visit_date ), cte as ( select 0 as rnb union all select row_number() over() as rnb from Transactions ) select rnb as transactions_count,count(visit_date) as visits_count from cte left join records on cte.rnb = records.transactions_count where rnb <= (select max(transactions_count) from records) group by rnb order by rnb
with recursive R as ( select 0 as 't_count' union all select t_count + 1 from R where t_count < (select count(*) from Transactions) ), T as ( select user_id, transaction_date, count(*) as 'transactions_count' from Transactions group by user_id, transaction_date ), V as ( select Visits.user_id from Visits left join T on Visits.user_id = T.user_id and visit_date = transaction_date where transactions_count is null ) select t_count as 'transactions_count', (case when t_count = 0 then (select count(*) from V) else (select count(case when transactions_count = t_count then 1 end) from T) end ) as 'visits_count' from R where t_count <= coalesce((select max(transactions_count) from T), 0)
with recursive a as ( select a.user_id, visit_date ,count(b.user_id) cnt from visits a left join transactions b on a.user_id = b.user_id and a.visit_date = b.transaction_date group by 1,2 ), r as (select 0 as transactions_count union select 1+ transactions_count from r where transactions_count < (select max(cnt) from a)) select r.transactions_count, count(cnt) visits_count from r left join a on r.transactions_count = a.cnt group by 1
with recursive a as ( select v.user_id, v.visit_date, count(amount) trans_counts from Visits v left join Transactions t on v.user_id = t.user_id and v.visit_date = t.transaction_date group by 1,2), b as ( select 0 as transactions_count union all select transactions_count + 1 from b where transactions_count < (select max(trans_counts) from a)) select transactions_count, count(a.trans_counts) visits_count from b left join a on b.transactions_count = a.trans_counts group by 1
with recursive a as ( select v.user_id, v.visit_date, count(amount) trans_counts from Visits v left join Transactions t on v.user_id = t.user_id and v.visit_date = t.transaction_date group by v.user_id, v.visit_date), b as ( select 0 as transactions_count union all select transactions_count + 1 from b where transactions_count < (select max(trans_counts) from a)) select transactions_count, count(a.trans_counts) visits_count from b left join a on b.transactions_count = a.trans_counts group by transactions_count
with recursive a as ( select v.user_id, v.visit_date, count(t.transaction_date) as transactions_count from visits v left join transactions t on v.user_id = t.user_id and v.visit_date = t.transaction_date group by 1,2), b as ( select transactions_count, count(transactions_count) as visit_count from a group by 1), c as ( select 0 as transactions_count, max(transactions_count) as m from b union all select transactions_count + 1 , m FROM c WHERE transactions_count < m) select c.transactions_count, ifnull(b.visit_count,0) as visits_count from c left join b on c.transactions_count = b.transactions_count
with recursive cnt_all as (select 0 as transactions_count union all select transactions_count + 1 from cnt_all where transactions_count < (select count(*) from transactions group by user_id, transaction_date order by count(*) desc limit 1) ), cnt as ( select v.user_id, v.visit_date, count(t.user_id) transactions_count from visits v left join transactions t on v.user_id = t.user_id and v.visit_date = t.transaction_date group by v.user_id, v.visit_date ) select t1.transactions_count, ifnull(t2.visits_count, 0) visits_count from cnt_all t1 left join (select transactions_count, count(*) visits_count from cnt group by transactions_count) t2 using(transactions_count)
with recursive cnttable as( select 0 as cnt union all select cnt+1 from cnttable where cnt< (select count(user_id) from transactions group by user_id, transaction_date order by count(user_id) desc limit 1) ), trantable as( select v.user_id, count(t.transaction_date) as transactions_count from visits as v left join transactions as t on v.visit_date=t.transaction_date and v.user_id=t.user_id group by v.user_id, v.visit_date ) select c.cnt as transactions_count, ifnull(count(v.transactions_count),0) as visits_count from cnttable as c left join trantable as v on c.cnt=v.transactions_count group by c.cnt
with recursive counts as ( select transactions, count(*) as visits_count from ( select user_id, visit_date, sum(if(transaction_date is null, 0, 1)) as transactions from ( select t1.user_id, t1.visit_date, t2.transaction_date from visits t1 left outer join transactions t2 on (t2.user_id = t1.user_id and t2.transaction_date = t1.visit_date) ) t group by user_id, visit_date ) t group by transactions ), all_counts as ( select 0 as transactions_count from counts union select transactions_count + 1 as transactions_count from all_counts where transactions_count < (select max(transactions) from counts) ) select t1.transactions_count, if(visits_count is null, 0, visits_count) as visits_count from all_counts t1 left outer join counts t2 on t2.transactions = t1.transactions_count
with recursive counts as ( select transactions_count, count(*) as visits_count from ( select t1.user_id, t1.visit_date, count(t2.transaction_date) as transactions_count from visits t1 left join transactions t2 on (t2.user_id = t1.user_id and t2.transaction_date = t1.visit_date) group by user_id, visit_date ) t group by transactions_count ), all_counts as ( select 0 as transactions_count union select transactions_count + 1 from all_counts where transactions_count < (select max(transactions_count) from counts) ) select t1.transactions_count, case when t2.visits_count is null then 0 else t2.visits_count end as visits_count from all_counts t1 left outer join counts t2 on t2.transactions_count = t1.transactions_count
with recursive counts as ( select transactions_count, count(*) as visits_count from ( select t1.user_id, t1.visit_date, count(t2.transaction_date) as transactions_count from visits t1 left outer join transactions t2 on (t2.user_id = t1.user_id and t2.transaction_date = t1.visit_date) group by t1.user_id, t1.visit_date ) t group by transactions_count ), all_counts as ( select 0 as transactions_count union select transactions_count + 1 from all_counts where transactions_count < (select max(transactions_count) from counts) ) select t1.transactions_count, case when t2.visits_count is null then 0 else t2.visits_count end as visits_count from all_counts t1 left outer join counts t2 on t2.transactions_count = t1.transactions_count order by t1.transactions_count asc
with recursive counts as ( select transactions_count, count(*) as visits_count from ( select user_id, visit_date, sum(if(transaction_date is null, 0, 1)) as transactions_count from ( select t1.user_id, t1.visit_date, t2.transaction_date from visits t1 left join transactions t2 on (t2.user_id = t1.user_id and t2.transaction_date = t1.visit_date) ) t group by user_id, visit_date ) t group by transactions_count ), all_counts as ( select 0 as transactions_count union select transactions_count + 1 from all_counts where transactions_count < (select max(transactions_count) from counts) ) select t1.transactions_count, case when t2.visits_count is null then 0 else t2.visits_count end as visits_count from all_counts t1 left outer join counts t2 on t2.transactions_count = t1.transactions_count
with recursive counts as ( select transactions_count, count(*) as visits_count from ( select user_id, visit_date, sum(if(transaction_date is null, 0, 1)) as transactions_count from ( select t1.user_id, t1.visit_date, t2.transaction_date from visits t1 left outer join transactions t2 on (t2.user_id = t1.user_id and t2.transaction_date = t1.visit_date) ) t group by user_id, visit_date ) t group by transactions_count ), all_counts as ( select 0 as transactions_count from counts union select transactions_count + 1 as transactions_count from all_counts where transactions_count < (select max(transactions_count) from counts) ) select t1.transactions_count, if(t2.visits_count is null, 0, t2.visits_count) as visits_count from all_counts t1 left outer join counts t2 on t2.transactions_count = t1.transactions_count order by t1.transactions_count asc
with recursive counts as ( select transactions_count, count(transactions_count) as visits_count from ( select t1.user_id, t1.visit_date, count(t2.transaction_date) as transactions_count from visits t1 left join transactions t2 on (t2.user_id = t1.user_id and t2.transaction_date = t1.visit_date) group by user_id, visit_date ) t group by transactions_count ), all_counts as ( select 0 as transactions_count union select transactions_count + 1 from all_counts where transactions_count < (select max(transactions_count) from counts) ) select t1.transactions_count, case when t2.visits_count is null then 0 else t2.visits_count end as visits_count from all_counts t1 left outer join counts t2 on t2.transactions_count = t1.transactions_count
with recursive counts as( select transactions_count, count(*) visits_count from ( select t1.user_id, t1.visit_date, count(t2.transaction_date) as transactions_count from Visits t1 left join Transactions t2 on (t1.user_id = t2.user_id and t1.visit_date = t2.transaction_date) group by 1,2) tmp group by 1 ), all_counts as( select 0 as transactions_count union select transactions_count + 1 from all_counts where transactions_count < (select max(transactions_count) from counts) ) select t1.transactions_count, case when t2.visits_count is null then 0 else t2.visits_count end as visits_count from all_counts t1 left outer join counts t2 on t1.transactions_count = t2.transactions_count
with recursive cte as ( SELECT count(transaction_date) as cnt FROM visits v left join Transactions t on v.user_id=t.user_id and v.visit_date=transaction_date group bY v.user_id, visit_date ), cte1 as ( select 0 as transactions_count union all select transactions_count+1 as transactions_count from cte1 where transactions_count<(select max(cnt) from cte)) select transactions_count, count(cnt) as visits_count from cte1 left join cte on cte1.transactions_count=cte.cnt group by 1
with recursive cte as ( select 0 as cnt union all select cnt + 1 from cte where cnt < (select count(*) from Transactions) ), temp as ( select v.user_id, visit_date, case when counts is NULL then 0 else counts end as counts from Visits as v left join (select user_id, transaction_date, count(*) as counts from Transactions group by user_id, transaction_date) as t on v.user_id = t.user_id and v.visit_date = t.transaction_date ) select cte.cnt as transactions_count, case when vcnt is NULL then 0 else vcnt end as visits_count from cte left join (select counts, count(*) as vcnt from temp group by counts) as t on cte.cnt = t.counts where cnt <= (select max(counts) from temp) order by transactions_count
with recursive cte as ( select 0 as cnt union all select cnt + 1 from cte where cnt < (select count(*) from Transactions) ), temp as ( select v.user_id, visit_date, sum(case when t.amount is NULL then 0 else 1 end) as trans from Visits as v left join Transactions as t on v.user_id = t.user_id and v.visit_date = t.transaction_date group by v.user_id, v.visit_date ) select cte.cnt as transactions_count, sum(case when temp.user_id is NULL then 0 else 1 end) as visits_count from cte left join temp on cte.cnt = temp.trans where cte.cnt <= (select max(trans) from temp) group by transactions_count order by transactions_count
with recursive cte as ( select 0 as cnts union all select cnts+1 from cte where cnts < ( select case when transaction_date is null then 0 else rnk end from ( select transaction_date, rnk from ( select a.user_id,visit_date,transaction_date,amount, row_number() over (partition by a.user_id,visit_date order by amount) as rnk from visits a left join transactions b on a.user_id=b.user_id and a.visit_date=b.transaction_date )c order by rnk desc,transaction_date desc limit 1 )d )), t0 as (select a.user_id,visit_date,transaction_date,amount, row_number() over (partition by a.user_id,visit_date order by amount) as rnk from visits a left join transactions b on a.user_id=b.user_id and a.visit_date=b.transaction_date), t1 as (select rnk as trans_cnts, count(*) as visit_cnts from (select user_id,visit_date,max(rnk) as rnk from t0 where transaction_date is not null group by 1,2)c group by 1 union all select 0,count(*) from (select user_id,visit_date,max(rnk) as rnk from t0 where transaction_date is null group by 1,2)c) select cnts as transactions_count,ifnull(visit_cnts,0) as visits_count from cte left join t1 on cte.cnts=t1.trans_cnts
with recursive cte as ( select 0 as transactions union all select transactions + 1 from cte where transactions < (select max(transaction_count) from (select v.user_id, v.visit_date, sum(case when t.transaction_date is null then 0 else 1 end) as transaction_count from visits v left join transactions t on v.user_id = t.user_id and v.visit_date = t.transaction_date group by 1,2)f) ) select cte.transactions as transactions_count, count(f.user_id) as visits_count from cte left join (select v.user_id, v.visit_date, sum(case when t.transaction_date is null then 0 else 1 end) as transaction_count from visits v left join transactions t on v.user_id = t.user_id and v.visit_date = t.transaction_date group by 1,2) f on cte.transactions = f.transaction_count group by 1
with recursive cte as ( select 0 as transactions_cnt union select 1+transactions_cnt from cte where transactions_cnt < (select max(transactions_count) from ( select v.user_id,v.visit_date,count(t.user_id) transactions_count from visits v left join transactions t on v.user_id = t.user_id and v.visit_date = t.transaction_date group by 1,2 order by 3)a) ) select cte.transactions_cnt transactions_count,coalesce(count(user_id),0) visits_count from cte left join ( select v.user_id,visit_date, sum(case when transaction_date is null then 0 else 1 end) transactions_cnt from visits v left join transactions t on v.user_id= t.user_id and v.visit_date=t.transaction_date group by 1,2 )a on cte.transactions_cnt=a.transactions_cnt group by 1 order by 1
with recursive cte as ( select 0 as transactions_count union all select transactions_count + 1 as transactions_count from cte where transactions_count < (select max(transactions) from (select user_id, transaction_date, count(transaction_date) as transactions from Transactions group by user_id,transaction_date )a) ) , base as ( select user_id,visit_date, ifnull(count(transaction_date),0) as countbase from ( select v.user_id, v.visit_date, t.transaction_date from visits v left join transactions t on v.user_id = t.user_id and v.visit_date = t.transaction_date )a group by user_id, visit_date ) select a.transactions_count, ifnull(count(b.countbase),0) as visits_count from base b right join cte a on a.transactions_count = b.countbase group by a.transactions_count
with recursive cte as ( select 0 as transactions_count union all select transactions_count + 1 as transactions_count from cte where transactions_count < (select max(transactions_count) from (select transaction_date, user_id, count(*) as transactions_count from Transactions group by transaction_date, user_id) t) ), visit as (select transactions_count, count(*) as visits_count from (select ifnull(transactions_count, 0) as transactions_count from Visits v left join (select transaction_date, user_id, count(*) as transactions_count from Transactions group by transaction_date, user_id) t on v.visit_date = t.transaction_date and v.user_id = t.user_id) t1 group by transactions_count) select cte.transactions_count, ifnull(visits_count, 0) as visits_count from cte left join visit v on cte.transactions_count = v.transactions_count order by cte.transactions_count
with recursive cte as ( select 0 as transactions_count union all select transactions_count + 1 from cte where transactions_count < (select count(*) from transactions) ), temp as ( select v.user_id, v.visit_date, case when t.amount is NULL then 0 else 1 end as amount from Visits as v left join Transactions as t on v.user_id = t.user_id and v.visit_date = t.transaction_date ), temp1 as (select transactions_count, count(*) as visits_count from (select user_id, visit_date, sum(amount) as transactions_count from temp group by user_id, visit_date) as t group by transactions_count) select cte.transactions_count, case when temp1.visits_count is NULL then 0 else temp1.visits_count end as visits_count from cte left join temp1 on cte.transactions_count = temp1.transactions_count where cte.transactions_count <= (select max(transactions_count) from temp1) order by transactions_count
with recursive cte as ( select 0 as transactions_count, 0 as visits_count union all select transactions_count + 1 as transactions_count, 0 as visits_count from cte where transactions_count < (select max(cnt) from (select user_id, transaction_date, count(amount) as cnt from Transactions group by user_id, transaction_date )t ) ), cte1 as ( select v.user_id, v.visit_date, IFNULL( tran_cnt, 0 ) as tran_cnt from Visits v left join ( select user_id, transaction_date as visit_date, count(amount) as tran_cnt from Transactions group by user_id, transaction_date )t on v.user_id = t.user_id and v.visit_date = t.visit_date ) select transactions_count, sum(visits_count) as visits_count from( select tran_cnt as transactions_count, count(user_id) as visits_count from cte1 group by tran_cnt union all select transactions_count, visits_count from cte )t group by transactions_count order by transactions_count
with recursive cte as ( select a.user_id ,visit_date ,count(transaction_date) transactions_count from visits a left join transactions b on a.user_id = b.user_id and a.visit_date = b.transaction_date group by 1,2 ) , cte2 as ( select 0 as transactions_count union all select transactions_count + 1 from cte2 where transactions_count < (select max(transactions_count) transactions_count from cte) ) select a.transactions_count ,coalesce(count(visit_date),0) visits_count from cte2 a left join cte b on a.transactions_count = b.transactions_count group by 1
with recursive cte as ( select cnt as transactions_count, count(*) as visits_count from (select v.user_id as user_id, count(t.user_id) as cnt from visits v left join Transactions t on v.user_id = t.user_id and v.visit_date = t.transaction_date group by v.user_id, v.visit_date) as tab group by transactions_count ), cte1 as ( select distinct 0 as transactions_count, 0 as visits_count from cte union all select transactions_count + 1, 0 as visits_count from cte1 where transactions_count < (select max(transactions_count) from cte) ) select c1.transactions_count as transactions_count, coalesce(c.visits_count, c1.visits_count) as visits_count from cte1 c1 left join cte c on c1.transactions_count = c.transactions_count order by c1.transactions_count
with recursive cte as ( select cnt as transactions_count, count(*) as visits_count from (select v.user_id,v.visit_date, case when t.transaction_date IS NOT NULL then COUNT(*) else 0 end as cnt from visits v left join transactions t on v.user_id = t.user_id and v.visit_date = t.transaction_date group by v.user_id,v.visit_date) temp group by cnt ), cte2 as (select 0 as transactions_count union all select transactions_count+1 from cte2 where transactions_count < (select max(transactions_count) from cte) ) select transactions_count, coalesce(visits_count,0) as visits_count from cte2 left join cte using (transactions_count)
with recursive cte as ( select v.user_id , v.visit_date , count(t.transaction_date) as transactions_count from Visits v left join Transactions t on v.user_id=t.user_id and v.visit_date=t.transaction_date group by 1,2 ), cte2 as ( select 0 as transactions_count union all select transactions_count +1 as transactions_count from cte2 where transactions_count+1<=(select max(transactions_count) from cte) ) select c2.transactions_count , count(c.visit_date) as visits_count from cte2 c2 left join cte c on c2.transactions_count=c.transactions_count group by 1
with recursive cte as ( select v.user_id, v.visit_date, count(tx.user_id) tx_count, count(distinct v.user_id) as visit_count from visits v left join transactions tx on tx.transaction_date = v.visit_date and tx.user_id = v.user_id group by 1,2 ), seq as ( select 0 as seq union all select seq+1 as seq from seq where seq<(select max(tx_count) from cte) ) select seq.seq as transactions_count, coalesce(sum(cte.visit_count), 0) as visits_count from seq left join cte on seq.seq = cte.tx_count where seq.seq <=(select max(tx_count) from cte) group by 1
with recursive cte as (select 0 as transactions_count union all select transactions_count +1 from cte where transactions_count < (select max(transactions_count) from (select user_id, count(transaction_date) as transactions_count from transactions group by user_id, transaction_date) as t) ) select transactions_count, ifnull(freq,0) as visits_count from cte left join ( select cnt, count(*) as freq from ( select v.visit_date,v.user_id,sum(case when t.user_id is null then 0 else 1 end ) as cnt from visits v left join transactions t on v.user_id=t.user_id and v.visit_date=t.transaction_date group by v.visit_date,v.user_id) as sub group by cnt) as sub_s on cte.transactions_count = sub_s.cnt
with recursive cte as (select 0 as transactions_count union select transactions_count+1 from cte where transactions_count < (select count(amount) from transactions group by user_id, transaction_date order by count(amount) desc limit 1)) select cte.transactions_count, ifnull(v_cnt,0) as visits_count from cte left join (select t_cnt, count(t_cnt) as v_cnt from ( select v.user_id, visit_date, ifnull(count(amount),0) as t_cnt from visits as v left join transactions as t on v.user_id = t.user_id and v.visit_date = t.transaction_date group by v.user_id, visit_date) as temp group by t_cnt) as temp2 on cte.transactions_count = temp2.t_cnt
with recursive cte as (select 0 as transactions_count union select transactions_count+1 from cte where transactions_count < (select count(amount) from transactions group by user_id, transaction_date order by count(amount) desc limit 1)), temp as ( select v.user_id, visit_date, ifnull(count(amount),0) as t_cnt from visits as v left join transactions as t on v.user_id = t.user_id and v.visit_date = t.transaction_date group by v.user_id, visit_date), temp2 as ( select t_cnt, count(t_cnt) as v_cnt from temp group by t_cnt) select cte.transactions_count, ifnull(v_cnt,0) as visits_count from cte left join temp2 on cte.transactions_count = temp2.t_cnt
with recursive cte as (select tot as transactions_count, count(tot) as visits_count from (select user_id, transaction_date, count(*) as tot from transactions group by user_id, transaction_date)a group by tot union select 0 as 'transactions_count',count(user_id) as visits_count from visits where (user_id, visit_date) not in (select user_id, transaction_date from transactions) ), number(n) as ( select 0 union all select n+1 from number where n < (select max(transactions_count) from cte) ) select number.n as transactions_count, ifnull(visits_count,0) as visits_count from number left join cte on number.n = cte.transactions_count order by transactions_count
with recursive cte as( select 0 as transactions_count union all select transactions_count+1 as transactions_count from cte where transactions_count< (select max(t_count) from( select count(*) as t_count from transactions group by transaction_date, user_id) as a)), zero_transac as ( select amount, count(*) as visits_count from( select v.user_id, v.visit_Date, ifnull(t.amount,0) as amount from visits v left join transactions t on v.user_id=t.user_id and v.visit_Date=t.transaction_Date) as b where amount=0), rest_trans as( select t_count, count(transaction_date) as visits_count from( select transaction_date, count(*) as t_count from transactions group by transaction_date, user_id) as c group by t_count), d as( select cte.transactions_count, ifnull(r.visits_count,0) as visits_count from cte left join rest_trans r on cte.transactions_count=r.t_count) select * from d where transactions_count>0 union all select * from zero_transac order by 1
with recursive cte as( select 0 cnt union all select cnt+1 from cte where cnt< ( select max(tcnt) from ( select v.user_id, v.visit_date, count(amount) tcnt from visits v left join transactions t on v.user_id = t.user_id and t.transaction_date = v.visit_date group by v.user_id, v.visit_date ) f ) ) select cnt transactions_count, count(tcnt) visits_count from ( select v.user_id, v.visit_date, count(amount) tcnt from visits v left join transactions t on v.user_id = t.user_id and t.transaction_date = v.visit_date group by v.user_id, v.visit_date) f1 right join cte on cte.cnt = f1.tcnt group by cnt order by cnt
with recursive cte as( select 0 cnt union all select cnt+1 from cte where cnt<(select max(tcnt) from ( select v.user_id, v.visit_date, count(amount) tcnt from visits v left join transactions t on v.user_id = t.user_id and t.transaction_date = v.visit_date group by v.user_id, v.visit_date) f)) select cnt transactions_count, count(tcnt) visits_count from ( select v.user_id, v.visit_date, count(amount) tcnt from visits v left join transactions t on v.user_id = t.user_id and t.transaction_date = v.visit_date group by v.user_id, v.visit_date) f1 right join cte on cte.cnt = f1.tcnt group by cnt order by cnt
with recursive cte as( select count(user_id) as cnt from Transactions group by user_id, transaction_date ), cte1 as( select 0 as 'transactions_count' union select transactions_count+1 from cte1 where transactions_count< (select max(cnt) from cte)), cte2 as( select 0 as transactions_count, count(visit_id) as visits_count from ( select v.user_id as visit_id, visit_date, T.user_id from Visits v left join Transactions T on v.user_id = T.user_id and v.visit_date = T.transaction_date) temp where user_id is null ), cte3 as( select transactions_count, visits_count from cte2 union select cnt as transactions_count, count(cnt) as visits_count from ( select cnt from cte ) temp group by cnt ) select cte1.transactions_count, ifnull(visits_count,0) as visits_count from cte1 left join cte3 on cte1.transactions_count = cte3.transactions_count
with recursive cte1 (n) as ( select 1 union all select n+1 from cte1 where n<200 ), cte2 as ( select distinct user_id, transaction_date, count(amount) over (partition by user_id, transaction_date) as n_transactions from Transactions ), cte3 as ( select n_transactions, count(user_id) as visits_counts from cte2 group by n_transactions), cte4 as ( select 0 as "transactions_count", count(*) as visits_count from ( select T.user_id from Visits V left join Transactions T on V.user_id=T.user_id and V.visit_date=T.transaction_date where T.user_id is null)z) select n as transactions_count, ifnull(visits_counts,0) as visits_count from cte1 left join cte3 on cte1.n=cte3.n_transactions where n<=(select max(n_transactions) as x from cte3) union all select * from cte4 order by transactions_count
with recursive cte1 as ( select v.user_id, v.visit_date, t.transaction_date from visits v left join transactions t on v.user_id = t.user_id and v.visit_date= t.transaction_date ) , cte2 as ( select user_id, visit_date, count(transaction_date) as cnt from cte1 group by user_id, visit_date ) , cte3 (transactions_count) as ( select 0 as transactions_count union all select transactions_count + 1 from cte3 where transactions_count < (select max(cnt) from cte2) ) , cte4 as ( select cnt as transactions_count, count(user_id) as visits_count from cte2 group by cnt order by transactions_count ) select cte3.transactions_count, ifnull(cte4.visits_count, 0) as visits_count from cte3 left join cte4 using(transactions_count)
with recursive cte2 as ( select 0 as transactions_count union all select transactions_count+1 from cte2 where transactions_count<(select max(num_trans) from (select user_id, transaction_date, count(transaction_date) as num_trans from transactions group by 1,2) as cte1)), cte3 as(select v.user_id, v.visit_date, count(t.transaction_date) as num_trans from visits v left join transactions t on v.user_id=t.user_id and v.visit_date=t.transaction_date group by 1,2) select transactions_count, ifnull(count(user_id),0) as visits_count from cte2 c2 left join cte3 c3 on c2.transactions_count =c3.num_trans group by 1 order by 1 asc
with recursive cte3 as ( select 0 as transactions_count union all select transactions_count+1 from cte3 where transactions_count+1 <= (select count(*) from transactions t group by user_id, transaction_date order by count(*) desc limit 1) ), cte1 as ( select v.user_id, v.visit_date, count(t.user_id) as 'n_transactions' from visits v left join transactions t on v.user_id = t.user_id and v.visit_date = t.transaction_date group by v.user_id, v.visit_date ) , cte2 as ( select n_transactions as 'transactions_count', count(user_id) as 'visits_count' from cte1 c1 group by n_transactions ) select c3.transactions_count, coalesce(c2.visits_count,0) as 'visits_count' from cte3 c3 left join cte2 c2 on c2.transactions_count=c3.transactions_count
with recursive cte_trans as ( select 0 as transaction_count union all select transaction_count+1 as transaction_count from cte_trans where transaction_count < (select max(cnt) from (select user_id,transaction_date,count(user_id) as cnt from transactions group by 1,2)x ) ) select ct.transaction_count as transactions_count, coalesce(count(user_id),0) as visits_count from cte_trans ct left join (select v.user_id,v.visit_date,coalesce(x.transaction_date,0),coalesce(cnt,0) as cnt from visits v left join (select user_id,transaction_date,count(user_id) as cnt from transactions group by 1,2)x on v.user_id = x.user_id and v.visit_date = x.transaction_date)y on ct.transaction_count = y.cnt group by transaction_count
with recursive dd as ( select 0 as transactions_count UNION ALL select transactions_count + 1 from dd where transactions_count < (select max(transactions_count) as transactions_count from (select count(visit_date) as visits_count, transactions_count from (select sum(CASE WHEN transaction_date is null then 0 else 1 end) as transactions_count, visit_date from Visits V LEFT JOIN Transactions T on T.user_id = V.user_id and visit_date = transaction_date group by V.user_id, visit_date) a group by transactions_count having count(visit_date) > 0) a) ), countD as (select count(visit_date) as visits_count, transactions_count from (select sum(CASE WHEN transaction_date is null then 0 else 1 end) as transactions_count, visit_date from Visits V LEFT JOIN Transactions T on T.user_id = V.user_id and visit_date = transaction_date group by V.user_id, visit_date) a group by transactions_count having count(visit_date) > 0) select d.transactions_count, IFNULL(visits_count, 0) as visits_count from countD c RIGHT JOIN dd d on c.transactions_count = d.transactions_count
with recursive dummy as ( select 0 as num UNION ALL select num+1 as num from dummy where num+1 <= (select max(temp) from (select count(*) as temp from Transactions group by user_id, transaction_date) A ) ), cte as (select no_of_t, count(*) as no_of_visits from (select Visits.visit_date, Visits.user_id, count(transaction_date) as no_of_t from Visits left join Transactions on Visits.user_id = Transactions.user_id AND Visits.visit_date = Transactions.transaction_date group by Visits.visit_date, Visits.user_id ) A group by no_of_t ) select dummy.num as transactions_count, ifnull(no_of_visits,0) as visits_count from dummy left join cte on dummy.num = cte.no_of_t order by 1
with recursive fte as (Select 0 as transactions_count union all Select transactions_count+1 as transactions_count from fte where transactions_count<(Select count(amount) from Transactions group by user_id,transaction_date order by count(amount) desc limit 1) ) ,cte as (Select e.*,case when e.amount=0 then 0 else 1 end as Count_val from (Select visits.user_id,visits.visit_date as day,ifnull(amount,0) as amount from Visits left join Transactions on Visits.user_id=Transactions.user_id and Visits.visit_date=Transactions.transaction_date order by day) e ), dte as (Select user_id,day,sum(Count_val) as Total from cte group by 1,2), ete as (Select Total as transactions_count ,count(*) as visits_count from dte group by total) select fte.transactions_count,ifnull(visits_count,0) as visits_count from fte left join ete on fte.transactions_count=ete.transactions_count order by transactions_count
with recursive l1 as ( select trans, count(visit_date) as vc from (select v.user_id, visit_date, count(amount) as trans from Visits v left join Transactions t on v.user_id=t.user_id and v.visit_date=t.transaction_date group by user_id, visit_date) tt group by trans), cte(n) as (select 0 union select n+1 from cte where n<(select max(trans) from l1)) select cte.n as transactions_count, ifnull(l1.vc, 0) as visits_count from l1 right join cte on l1.trans=cte.n
with recursive max_trans as ( select 0 as "transactions_count" union select 1 + transactions_count as "transactions_count" from max_trans where transactions_count < (select max(tc) from (select tc, count(*) "cnt" from (select v.user_id, v.visit_date, count(t.amount) "tc" from transactions t right join visits v on v.user_id = t.user_id and v.visit_date = t.transaction_date group by 1, 2) trans_counter group by 1 ) trans_counter2) ), total_visits as ( select v.user_id, v.visit_date, count(t.amount) "trans_count" from visits v left join transactions t on v.user_id = t.user_id and v.visit_date = t.transaction_date group by 1, 2 ) select m.transactions_count, count(t.visit_Date) "visits_count" from max_trans m left join total_visits t on m.transactions_count = t.trans_count group by 1
with recursive max_trans as ( select 0 as "transactions_count" union select 1 + transactions_count as "transactions_count" from max_trans where transactions_count < (select max(tc) from (select tc, count(*) "cnt" from (select v.user_id, v.visit_date, count(t.amount) "tc" from transactions t right join visits v on v.user_id = t.user_id and v.visit_date = t.transaction_date group by 1, 2) trans_counter group by 1 ) trans_counter2) ), total_visits as ( select v.user_id, v.visit_date, count(t.amount) "trans_count" from visits v left join transactions t on v.user_id = t.user_id and v.visit_date = t.transaction_date group by 1, 2 ) select m.transactions_count, ifnull(r.visits_count, 0) "visits_count" from max_trans m left join ( select trans_count, count(*) "visits_count" from total_visits group by 1 ) r on m.transactions_count = r.trans_count group by 1
with recursive max_trans as ( select 0 as "transactions_count" union select 1 + transactions_count as "transactions_count" from max_trans where transactions_count < (select max(tc) from (select v.user_id, v.visit_date, count(t.amount) "tc" from transactions t right join visits v on v.user_id = t.user_id and v.visit_date = t.transaction_date group by 1, 2) trans_counter) ), total_visits as ( select v.user_id, v.visit_date, count(t.amount) "trans_count" from visits v left join transactions t on v.user_id = t.user_id and v.visit_date = t.transaction_date group by 1, 2 ) select m.transactions_count, count(t.visit_Date) "visits_count" from max_trans m left join total_visits t on m.transactions_count = t.trans_count group by 1
with recursive max_trans as ( select 0 as "transactions_count" union select 1 + transactions_count as "transactions_count" from max_trans where transactions_count < (select max(tc) from (select v.user_id, v.visit_date, count(t.amount) "tc" from transactions t right join visits v on v.user_id = t.user_id and v.visit_date = t.transaction_date group by 1, 2) trans_counter) ), total_visits as ( select v.user_id, v.visit_date, count(t.amount) "trans_count" from visits v left join transactions t on v.user_id = t.user_id and v.visit_date = t.transaction_date group by 1, 2 ) select m.transactions_count, ifnull(r.visits_count, 0) "visits_count" from max_trans m left join ( select trans_count, count(*) "visits_count" from total_visits group by 1 ) r on m.transactions_count = r.trans_count group by 1
with recursive num_transactions as ( select 0 as transactions_count union select 1 + transactions_count from num_transactions where transactions_count < ( select max(transactions_count) from ( select user_id, transaction_date, count(*) as transactions_count from transactions group by 1, 2 ) t ) ), transactions_count as ( select v.user_id, v.visit_date, count(t.transaction_date) as transactions_count from visits v left join transactions t on v.user_id = t.user_id and v.visit_date = t.transaction_date group by 1, 2 ), visits_count as ( select transactions_count, count(*) as visits_count from transactions_count group by 1 ) select n.transactions_count, ifnull(visits_count, 0) as visits_count from num_transactions n left join visits_count t on n.transactions_count = t.transactions_count
with recursive recur as ( Select 0 as transactions_count Union Select transactions_count + 1 From recur Where transactions_count < (select max(t_cnt) from (Select t_cnt, count(visit_date) as v_cnt From( Select v.user_id, visit_date, sum(case when amount is not null then 1 else 0 end) t_cnt From Transactions t right join Visits v on t.user_id = v.user_id and t.transaction_date = v.visit_date Group by user_id, visit_date ) t2 Group by t_cnt) t1)) , tran_cnt as ( Select t_cnt, count(visit_date) as v_cnt From( Select v.user_id, visit_date, sum(case when amount is not null then 1 else 0 end) t_cnt From Transactions t right join Visits v on t.user_id = v.user_id and t.transaction_date = v.visit_date Group by user_id, visit_date ) t2 Group by t_cnt ) Select transactions_count, IFNULL(v_cnt, 0) as visits_count From recur left join tran_cnt on recur.transactions_count = tran_cnt.t_cnt Group by transactions_count
with recursive rfn as ( select 0 as rid union all select rid + 1 from rfn where rid+1 <= 100 ) , c as ( select v.user_id, v.visit_date, count(t.transaction_date) as tr_ct from Visits v left join Transactions t on v.user_id = t.user_id and v.visit_date = t.transaction_date group by v.user_id, v.visit_date ) ,c1 as ( select tr_ct, count(distinct user_id, visit_date) as vct from c group by tr_ct ) select rfn.rid as transactions_count , coalesce(c1.vct,0) as visits_count from rfn left join c1 on c1.tr_ct = rfn.rid where rfn.rid <= (select max(tr_ct) xtr_ct from c1 where vct > 0)
with recursive sub as( select v.user_id,visit_date,count(amount) as transactions_count from visits v left join transactions t on v.user_id=t.user_id and visit_date=transaction_date group by v.user_id,visit_date), sub1 as( select @num:=0 as transactions_count union select if(@num<(select max(transactions_count) from sub),@num:=@num+1,@num) as transactions_count from sub1) select transactions_count, count(distinct user_id,visit_date) as visits_count from sub1 left join sub using (transactions_count) group by transactions_count
with recursive summary as( select coalesce(transaction_count,0) as transaction_count, count(*) visits_count from ( select a. user_id, a.visit_date, b.transaction_count from visits a left join ( select user_id, transaction_date, count(*) as transaction_count from transactions a group by 1, 2 ) b on a.user_id = b.user_id and a.visit_date = b.transaction_date )c group by 1 ), cte as ( select 0 as cnt union all select cnt+1 from cte where cnt < (select max(transaction_count) from summary)) select cnt as transactions_count, coalesce(visits_count, 0) visits_count from cte a left join summary b on a.cnt = b.transaction_count
with recursive t1 as ( select max(cnt) as maxT from ( select transaction_date, user_id, count(*) as cnt from transactions group by transaction_date, user_id ) as tb1 ), tranCnt as ( select 0 as n union select n+1 from tranCnt where n < (select maxT from t1) ), t2 as ( select v.user_id, v.visit_date, count(t.transaction_date) as vCnt from visits as v left join transactions as t on v.user_id = t.user_id and v.visit_date = t.transaction_date group by v.user_id, v.visit_date ) select tranCnt.n as transactions_count, count(t2.user_id) as visits_count from tranCnt left join t2 on tranCnt.n = t2.vCnt group by tranCnt.n
with recursive t1 as (select 0 as transactions_count union select transactions_count + 1 from t1 where transactions_count < (select max(cnt) from (select count(*) as cnt from transactions group by user_id, transaction_date) a)), t2 as (select transactions_count, count(*) as visits_count from (select count(*) as transactions_count from transactions group by user_id, transaction_date) a group by 1 union all select 0 as transactions_count, count(*) as visits_count from visits where (user_id, visit_date) not in (select user_id, transaction_date from transactions)) select t1.transactions_count, ifnull(visits_count, 0) as visits_count from t1 left join t2 on t1.transactions_count = t2.transactions_count
with recursive t1 as (select v.user_id, visit_date, sum(case when transaction_date is null then 0 else 1 end) as t_cnt from Visits v left join Transactions t on v.user_id = t.user_id and v.visit_date = t.transaction_date group by 1, 2), t2 as (select 0 as cnt union all select cnt + 1 from t2 where cnt < (select max(t_cnt) from t1)) select t2.cnt as transactions_count, ifnull(count(t1.user_id), 0) as visits_count from t2 left join t1 on t1.t_cnt = t2.cnt group by 1 order by 1
with recursive t1 as (select v.user_id, visit_date, sum(case when transaction_date is null then 0 else 1 end) as t_cnt from visits v left join transactions t on v.user_id = t.user_id and v.visit_date = t.transaction_date group by 1,2), t2 as (select 0 as cnt union all select cnt + 1 from t2 where cnt < (select max(t_cnt) from t1)) select t2.cnt as transactions_count, ifnull(count(t1.user_id), 0) as visits_count from t2 left join t1 on t1.t_cnt = t2.cnt group by 1 order by 1
with recursive t2 as ( select v.user_id, v.visit_date, count(t.transaction_date) as vCnt from visits as v left join transactions as t on v.user_id = t.user_id and v.visit_date = t.transaction_date group by v.user_id, v.visit_date ), t1 as ( select max(vCnt) as maxT from t2 ), tranCnt as ( select 0 as n union select n+1 from tranCnt where n < (select maxT from t1) ) select tranCnt.n as transactions_count, count(t2.user_id) as visits_count from tranCnt left join t2 on tranCnt.n = t2.vCnt group by tranCnt.n
with recursive t_count as( select 0 as transactions_count union select transactions_count + 1 as transactions_count from t_count where transactions_count < (select count(amount) from Transactions group by user_id, transaction_date order by 1 desc limit 1) ), cnt as ( select v.user_id, v.visit_date, count(t.amount) as transactions_count, 1 as cnt from visits v left join transactions t on v.user_id = t.user_id and v.visit_date = t.transaction_date group by v.user_id, v.visit_date ) select t.transactions_count, count(c.user_id) as visits_count from t_count t left join cnt c on t.transactions_count = c.transactions_count group by 1 order by 1
with recursive tb3 as (select 0 as rk union all select rk+1 as rk from tb3 where rk< (select count( amount) from transactions group by user_id, transaction_date order by count(amount) desc limit 1 )) , cte as (select v.user_id, visit_date, amount from visits v left join transactions t on v.user_id=t.user_id and v.visit_date=t.transaction_date) , tb1 as ( select user_id, visit_date, count(amount) ct from cte group by user_id, visit_date) , tb2 as ( select ct, count(user_id) as visits_count from tb1 group by ct) select rk as transactions_count, ifnull(visits_count,0) as visits_count from tb3 left join tb2 on tb3.rk=tb2.ct order by transactions_count
with recursive tbl1 as ( select 0 as transaction_counts union all select transaction_counts + 1 from tbl1 where transaction_counts < (select max(t.c) from ( select count(*) c from Transactions group by Transactions.user_id, Transactions.transaction_date) t)), tbl2 as ( select ifnull(t.c,0) transaction_counts, count(*) visit_counts from Visits v left join ( select Transactions.user_id, Transactions.transaction_date, count(*) c from Transactions group by Transactions.user_id, Transactions.transaction_date) t on v.user_id = t.user_id and v.visit_date = t.transaction_date group by transaction_counts order by transaction_counts) select tbl1.transaction_counts transactions_count, ifnull(tbl2.visit_counts,0) as visits_count from tbl1 left join tbl2 using (transaction_counts) order by transaction_counts
with recursive tbl1 as ( select 0 as transaction_counts union all select transaction_counts + 1 from tbl1 where transaction_counts < (select max(t.c) from (select count(*) c from Transactions t1 group by t1.user_id,t1.transaction_date) t)), tbl2 as ( select ifnull(t.c,0) transaction_counts, count(*) visit_counts from Visits v left join ( select Transactions.user_id, Transactions.transaction_date, count(*) c from Transactions group by Transactions.user_id, Transactions.transaction_date) t on v.user_id = t.user_id and v.visit_date = t.transaction_date group by transaction_counts order by transaction_counts) select tbl1.transaction_counts transactions_count, ifnull(tbl2.visit_counts,0) as visits_count from tbl1 left join tbl2 using (transaction_counts) order by transaction_counts
with recursive tbl1 as ( select 0 as transactions_count union all select transactions_count+1 from tbl1 where transactions_count<(select max(cnt) from ( select count(*) as cnt from transactions group by user_id,transaction_date)a ) ), tbl3 as ( select cnt as transactions_count, count(user_id) as visits_count from ( select v.visit_date,v.user_id,sum(case when t.user_id is null then 0 else 1 end ) as cnt from visits v left join transactions t on v.user_id=t.user_id and v.visit_date=t.transaction_date group by v.visit_date,v.user_id )tbl2 group by 1 ) select tbl1.transactions_count,coalesce(tbl3.visits_count,0) as visits_count from tbl1 left join tbl3 on tbl1.transactions_count=tbl3.transactions_count
with recursive tc as ( select 0 as transactions_count union all select transactions_count+1 from tc where transactions_count < ( select max(n_amount) from ( select count(amount) as n_amount from Transactions group by user_id, transaction_date ) t1 ) ), ut_a as ( select count(amount) as n_amount from Transactions group by user_id, transaction_date ), res_p1 as ( select n_amount as transactions_count, count(*) as visits_count from ut_a group by n_amount ), res_p3 as ( select 0 as transactions_count, count(*) as visits_count from Visits where (user_id, visit_date) not in ( select distinct user_id, transaction_date from Transactions ) ), res_p2 as ( select * from res_p3 union all select * from res_p1 ) select tc.transactions_count, coalesce(res_p2.visits_count, 0) as visits_count from tc left join res_p2 on tc.transactions_count = res_p2.transactions_count
with recursive temp as (select v.user_id, v.visit_date, t.user_id as trans_id, t.transaction_date, case when t.user_id is null then 0 else 1 end as trans_ornot, sum(case when t.user_id is null then 0 else 1 end) over(partition by v.user_id,v.visit_date) as num_trans from visits as v left join transactions as t on v.user_id = t.user_id and v.visit_date = t.transaction_Date) , t2 as ( select 0 as transactions_count union all select transactions_count + 1 from t2 where transactions_count<(select max(num_trans) from temp) ) select transactions_count, ifnull(visits_count,0) as visits_count from t2 left join (select num_trans, count(distinct user_id, visit_date) as visits_count from temp group by num_trans) temp2 on t2.transactions_count = temp2.num_trans
with recursive timeline as(select v1.*,Count(t1.user_id) as transactionsAVisit from Visits v1 left join Transactions t1 on v1.user_id=t1.user_id and v1.visit_date=t1.transaction_date group by 1,2), cte as( select 0 as transactions_count union all select transactions_count+1 from cte where transactions_count<(select max(transactionsAVisit) as maxTransactions from timeline)) select c1.transactions_count,count(t1.transactionsAVisit) as visits_count from cte c1 left join timeline t1 on c1.transactions_count=t1.transactionsAVisit group by 1
with recursive tmp as (select 0 as transactions_count union all select transactions_count + 1 as transactions_count from tmp where transactions_count < (select max(cnt) from (select count(*) as cnt from transactions group by user_id, transaction_date) t) ), tmp2 as (select a.user_id, a.visit_date, count(case when transaction_date is not null then transaction_date else null end) as transactions_count from visits a left join transactions b on a.user_id=b.user_id and a.visit_date=b.transaction_date group by 1,2 ) select a.transactions_count, count(visit_date) as visits_count from tmp a left join tmp2 b using (transactions_count) group by 1 order by 1
with recursive tmp1 as ( select a.user_id, visit_date, count(transaction_date) as tran_cnt from visits a left join transactions b on a.user_id=b.user_id and a.visit_date=b.transaction_date group by 1,2), tmp2 as (select 0 as tran_cnt union all select tran_cnt + 1 as tran_cnt from tmp2 where tran_cnt < (select max(tran_cnt) from tmp1) ) select a.tran_cnt as transactions_count, count(visit_date) as visits_count from tmp2 a left join tmp1 b on a.tran_cnt=b.tran_cnt group by 1 order by 1
with recursive tmpcnt as ( select t1.user_id, t1.visit_date, ifnull(t2.cnt_trans,0) as cnt_trans from visits t1 left join ( select t.user_id, t.transaction_date, count(*) as cnt_trans from transactions t group by t.user_id, t.transaction_date ) t2 on t1.user_id=t2.user_id and t1.visit_date=t2.transaction_date ), tmpagg as ( select t.cnt_trans, count(*) as cnt_visit from tmpcnt t group by t.cnt_trans ), cte as ( select 0 as cnt union all select cnt+1 from cte where cnt<(select max(cnt_trans) from tmpagg) ) select t.cnt as transactions_count , ifnull(a.cnt_visit,0) as visits_count from cte t left join tmpagg a on t.cnt=a.cnt_trans order by 1
with recursive tran_series as ( select 0 as tran_num UNION select tran_num + 1 from tran_series where tran_num < (select count(user_id) from Transactions group by user_id, transaction_date order by count(user_id) desc limit 1) ) ,t as ( select v.user_id, v.visit_date, count(t.transaction_date) as transactions_count,1 as visits_count from Visits v LEFT JOIN Transactions t on v.visit_date = t.transaction_date and v.user_id = t.user_id group by v.user_id, v.visit_date ) select ts.tran_num as transactions_count, COALESCE(sum(t.visits_count),0) as visits_count from tran_series ts LEFT JOIN t on ts.tran_num = t.transactions_count group by ts.tran_num order by ts.tran_num
with recursive trans as (select 0 as transactions_count union all select transactions_count + 1 as transactions_count from trans where transactions_count < (select max(visit_count) from (select count(*) as visit_count from (select t.* from Visits v left join Transactions t on v.visit_date = t.transaction_date and v.user_id = t.user_id) merged_table group by transaction_date, user_id having transaction_date is not NULL) visit_count_no_null)), c as (select *, count(*) as visit_counted from (select v.user_id as user1, v.visit_date,t.* from Visits v left join Transactions t on v.visit_date = t.transaction_date and v.user_id = t.user_id) merged_table group by transaction_date, user_id), counted as (select 0 as transactions_count, visit_counted as visit_count from c where transaction_date is NULL union all select visit_counted as transactions_count, count(*) as visit_count from c where user_id is not NULL group by 1) select t.transactions_count, ifnull(c.visit_count,0) as visits_count from trans t left join counted c on t.transactions_count =c.transactions_count order by 1
with recursive trans_1_n (trans_n) as ( select 0 as trans_n union all select trans_n+ 1 as trans_n from trans_1_n where trans_n < (select max(transaction_count) from (select user_id, transaction_date, count(*) as transaction_count from transactions t group by 1,2) a) ) , group_trans as ( select user_id, transaction_date, count(*) as transaction_count from transactions t group by 1,2 ) , group_visit as ( select v.user_id, visit_date, count(*) as visit_count from visits v group by 1,2 ) , both_g as ( select coalesce(transaction_count,0) as transaction_count, count(gv.visit_count) as visits_count from group_visit gv left join group_trans gt on gt.user_id = gv.user_id and gv.visit_date = gt.transaction_date group by 1 ) select t.trans_n as transactions_count, coalesce(gv.visits_count,0) as visits_count from trans_1_n t left join both_g gv on t.trans_n = gv.transaction_count order by 1
with recursive trans_cnt as ( select a.user_id, a.visit_date, count(b.transaction_date) as transactions_count from visits as a left join transactions as b on a.user_id = b.user_id and a.visit_date = b.transaction_date group by 1,2), cte as ( select 0 as cnt union select cnt + 1 from cte where cnt <(select max(transactions_count) from trans_cnt)) select cte.cnt as transactions_count, ifnull(count(user_id),0) as visits_count from cte left join trans_cnt as a on cte.cnt = a.transactions_count group by 1 order by 1
with recursive trans_cnt as ( select v.user_id, v.visit_date, ifnull(count(t.transaction_date),0) as t_cnt from Visits v left join Transactions t on v.user_id = t.user_id and v.visit_date = t.transaction_date group by 1,2 ) , trans_cnt_list as ( select 0 as transactions_count union all select transactions_count + 1 as transactions_count from trans_cnt_list where transactions_count < (select max(t_cnt) from trans_cnt) ) select l.transactions_count, count(t.user_id) as visits_count from trans_cnt_list l left join trans_cnt t on l.transactions_count = t.t_cnt group by 1
with recursive trans_count as ( select 0 as transaction_count union all select transaction_count+1 as transaction_count from trans_count where transaction_count <( select max(transaction_count) from ( select count(1) as transaction_count from Transactions group by user_id,transaction_date ) A ) ) select tc.transaction_count as transactions_count ,case when B.visits_count is null then 0 else B.visits_count end as visits_count from trans_count tc left join( select transaction_count ,count(transaction_count) as visits_count from( select visit.user_id ,visit.visit_date ,count(tran.transaction_date) as transaction_count from Visits visit left join Transactions tran on visit.user_id = tran.user_id and visit.visit_date = tran.transaction_date group by user_id,visit_date ) A group by transaction_count ) B on tc.transaction_count = B.transaction_count
with recursive trans_count as (select user_id, transaction_date, count(*) as transactions_count from Transactions t group by transaction_date, user_id ), trans_count_1 as (select v.user_id, transaction_date, visit_date, case when transactions_count is null then 0 when transactions_count is not null then transactions_count END as transactions_count from Visits v left join trans_count t on v.user_id = t.user_id and v.visit_date = t.transaction_date), final as (select transactions_count, count(t1.user_id) as visits_count from trans_count_1 t1 group by transactions_count order by transactions_count ), sub as (select 0 as possible_transactions_per_user union all select possible_transactions_per_user + 1 as possible_transactions_per_user from sub where possible_transactions_per_user < (select max(transactions_count) from final)) select case when transactions_count is null then possible_transactions_per_user ELSE transactions_count END as transactions_count, case when visits_count is null then 0 ELSE visits_count END as visits_count from final right join (select * from sub) a on final.transactions_count = a.possible_transactions_per_user
with recursive trans_count as (select user_id, transaction_date, count(*) as transactions_count from Transactions t group by transaction_date, user_id ), trans_count_1 as (select v.user_id, transaction_date, visit_date, coalesce(transactions_count,0) transactions_count from Visits v left join trans_count t on v.user_id = t.user_id and v.visit_date = t.transaction_date), final as (select transactions_count, count(t1.user_id) as visits_count from trans_count_1 t1 group by transactions_count order by transactions_count ), sub as (select 0 as possible_transactions_per_user union all select possible_transactions_per_user + 1 as possible_transactions_per_user from sub where possible_transactions_per_user < (select max(transactions_count) from final)) select case when transactions_count is null then possible_transactions_per_user ELSE transactions_count END as transactions_count, coalesce(visits_count,0) visits_count from final right join (select * from sub) a on final.transactions_count = a.possible_transactions_per_user
with recursive transac_Per_Visit as ( select v.user_id, v.visit_date, coalesce(count(t.user_id),0) transacPerVisit from Visits v left outer join transactions t on v.user_id = t.user_id and v.visit_date=t.transaction_date group by v.user_id, v.visit_date ) ,his as ( select transacPerVisit , count(user_id) vc from transac_per_visit group by transacPerVisit ) , min_max as ( select 0 as num ,max(transacPerVisit) max from transac_per_visit tpv union select num+1, max from min_max where num<max ) select mm.num transactions_count , coalesce(his.vc,0) visits_count from min_max mm left outer join his on mm.num=his.transacPerVisit order by 1
with recursive transaction_count as ( select 0 as cnt union all select cnt+1 as cnt from transaction_count where cnt<(select max(count_tran) from ( select user_id, transaction_date, count(transaction_date) as count_tran from transactions group by 1,2) a ) ), user_transaction as ( select user_id, transaction_date, count(transaction_date) as count_tran from transactions group by 1,2), user_visit_tran as ( select coalesce(b.count_tran,0) as transaction_count1 ,count(a.user_id) as visits_count from visits a left join user_transaction b on a.visit_date=b.transaction_date and a.user_id=b.user_id group by 1 ) select a.cnt as transactions_count, coalesce(b.visits_count,0) as visits_count from transaction_count a left join user_visit_tran b on a.cnt=b.transaction_count1 order by 1
with recursive transaction_count as ( select 0 as cnt union all select cnt+1 as cnt from transaction_count where cnt<(select max(count_tran) from ( select user_id, transaction_date, count(transaction_date) as count_tran from transactions group by 1,2) a ) ), user_visit_tran as ( select coalesce(b.count_tran,0) as transaction_count1 ,count(a.user_id) as visits_count from visits a left join ( select user_id, transaction_date, count(transaction_date) as count_tran from transactions group by 1,2) b on a.visit_date=b.transaction_date and a.user_id=b.user_id group by 1 ) select a.cnt as transactions_count, coalesce(b.visits_count,0) as visits_count from transaction_count a left join user_visit_tran b on a.cnt=b.transaction_count1 order by 1
with recursive transcnt as( select 0 as cnt union all select cnt+1 as cnt from transcnt where cnt < ( select count(user_id) cnt from Transactions group by transaction_date,user_id order by cnt desc limit 1 ) ) select tcnt.cnt as transactions_count ,ifnull(count(user_id),0) as visits_count from transcnt tcnt left join( select visits.visit_date ,visits.user_id ,ifnull(count(trans.transaction_date),0) as trans_count from Visits visits left join Transactions trans on visits.visit_date = trans.transaction_date and visits.user_id = trans.user_id group by visits.visit_date,visits.user_id ) datetrans on tcnt.cnt = datetrans.trans_count group by tcnt.cnt
with recursive tvc as(select tm,count(*) as ct from(select V.user_id,V.visit_date,count(T.amount) as tm from visits V left join transactions T on V.user_id = T.user_id and V.visit_date = T.transaction_date group by V.user_id,V.visit_date order by tm)A group by tm), t2(id) as (select 0 union all select id+1 from t2 where id<(select max(tm) from tvc)) select t2.id as transactions_count,ifnull(B.ct,0) as visits_count from t2 left join (select tm,count(*) as ct from(select V.user_id,V.visit_date,count(T.amount) as tm from visits V left join transactions T on V.user_id = T.user_id and V.visit_date = T.transaction_date group by V.user_id,V.visit_date order by tm)A group by tm) B on t2.id=B.tm
with recursive txn_count as ( select transactions_count, count(*) visits_count from ( select v.user_id, v.visit_date, count(t.transaction_date) transactions_count from visits v left join transactions t on v.user_id = t.user_id and v.visit_date = t.transaction_date group by v.user_id, v.visit_date ) a group by transactions_count ), number(n) as ( select 0 union all select n + 1 from number where n < (select max(transactions_count) from txn_count) ) select number.n transactions_count, ifnull(visits_count, 0) visits_count from number left join txn_count t on number.n = t.transactions_count order by 1
with recursive valid_trans_counts as ( select 0 as transactions_count union all select transactions_count+1 as transactions_count from valid_trans_counts where (transactions_count+1) <= ( select max(transactions_count) from ( select transaction_date,user_id, count(1) as transactions_count from transactions group by 1,2 ) x ) ), trs as ( select transaction_date,user_id, count(1) as transactions_count from transactions group by 1,2 ), max_num_tr as ( select max(transactions_count) as max_num_tr from trs ), trs_per_visit as ( select v.visit_date,v.user_id, coalesce(t.transactions_count,0) as transactions_count from visits v left join trs t on t.transaction_date = v.visit_date and v.user_id = t.user_id ), t as ( select transactions_count, count(1) as visits_count from trs_per_visit group by 1 ) select vtc.transactions_count,coalesce(visits_count,0) as visits_count from valid_trans_counts vtc left join t on t.transactions_count=vtc.transactions_count
with recursive valid_trans_counts as ( select 0 as transactions_count union all select transactions_count+1 as transactions_count from valid_trans_counts where (transactions_count+1) <= ( select max(transactions_count) from ( select transaction_date,user_id, count(1) as transactions_count from transactions group by 1,2 ) x ) ), trs as ( select transaction_date,user_id, count(1) as transactions_count from transactions group by 1,2 ), trs_per_visit as ( select v.visit_date,v.user_id, coalesce(t.transactions_count,0) as transactions_count from visits v left join trs t on t.transaction_date = v.visit_date and v.user_id = t.user_id ) select vtc.transactions_count,coalesce(count(t.visit_date),0) as visits_count from valid_trans_counts vtc left join trs_per_visit t on t.transactions_count=vtc.transactions_count group by 1
with recursive valid_trans_counts as ( select 0 as transactions_count union all select transactions_count+1 as transactions_count from valid_trans_counts where (transactions_count+1) <= ( select max(transactions_count) from ( select transaction_date,user_id, count(1) as transactions_count from transactions group by 1,2 ) x ) ), trs as ( select transaction_date,user_id, count(1) as transactions_count from transactions group by 1,2 ), trs_per_visit as ( select v.visit_date,v.user_id, coalesce(t.transactions_count,0) as transactions_count from visits v left join trs t on t.transaction_date = v.visit_date and v.user_id = t.user_id ), t as ( select transactions_count, count(1) as visits_count from trs_per_visit group by 1 ) select vtc.transactions_count,coalesce(visits_count,0) as visits_count from valid_trans_counts vtc left join t on t.transactions_count=vtc.transactions_count
with recursive visit_transactions as (select v.user_id, v.visit_date, if(t.amount is null, 0, 1) as indicator from visits v left join transactions t on v.user_id = t.user_id and v.visit_date = t.transaction_date), transactions_per_visit as (select sum(indicator) as transactions_count from visit_transactions group by user_id, visit_date), transactions_histogram as (select transactions_count, count(1) as visits_count from transactions_per_visit group by transactions_count), no_gaps as ((select 0 as transactions_count) union all (select 1 + transactions_count from no_gaps where transactions_count < (select max(transactions_count) from transactions_histogram) ) ) select ng.transactions_count as transactions_count, ifnull(h.visits_count, 0) as visits_count from no_gaps ng left join transactions_histogram h on ng.transactions_count = h.transactions_count
with rn_cte as( select row_number() over() as rn from transactions union select 0 ), tx_cte as( select v.user_id, visit_date, count(transaction_date) as transaction_count from visits v left join transactions t on v.user_id = t.user_id and v.visit_date = t.transaction_date group by 1,2 ) select rn as transactions_count, count(transaction_count) as visits_count from rn_cte left join tx_cte on rn_cte.rn = tx_cte.transaction_count where rn <= (select max(transaction_count) from tx_cte) group by 1 order by 1
with seq as ( select 0 as seq union all select row_number() over(order by transaction_date) as seq from transactions ), cte as ( select v.user_id, v.visit_date, count(tx.user_id) tx_count, count(distinct v.user_id) as visit_count from visits v left join transactions tx on tx.transaction_date = v.visit_date and tx.user_id = v.user_id group by 1,2 ) select seq.seq as transactions_count, coalesce(sum(cte.visit_count), 0) as visits_count from seq left join cte on seq.seq = cte.tx_count where seq.seq <=(select max(tx_count) from cte) group by 1
with t as ( select count(t.transaction_date) as transaction_count from Visits as v left join Transactions as t on CONCAT(v.user_id, ':', v.visit_date) = CONCAT(t.user_id, ':', t.transaction_date) group by CONCAT(v.user_id, ':', v.visit_date) ), row_num_t as ( select ROW_NUMBER() OVER() row_num from Transactions union select 0 ) select row_num as transactions_count, count(t.transaction_count) as visits_count from t right join row_num_t on t.transaction_count = row_num_t.row_num group by row_num_t.row_num having row_num_t.row_num <= (select max(transaction_count) from t) order by row_num
with t as ( select ifnull(transactions_count, 0) as transactions_count, count(*) as visits_count from Visits v left join (select user_id, transaction_date, count(*) as transactions_count from Transactions group by 1,2) t on v.user_id = t.user_id and v.visit_date = t.transaction_date group by 1), row_nums AS (SELECT ROW_NUMBER() OVER () as rn FROM Transactions UNION SELECT 0) SELECT row_nums.rn as transactions_count, ifnull(visits_count, 0) as visits_count FROM t RIGHT JOIN row_nums ON t.transactions_count = row_nums.rn WHERE row_nums.rn <= (SELECT MAX(transactions_count) FROM t) ORDER BY 1
with t as (select if(t.transaction_date is null, 0, count(*)) cnt from visits v left join transactions t on v.user_id=t.user_id and v.visit_date=t.transaction_date group by v.user_id, v.visit_date), t1 as (select cnt, count(*) v_cnt from t group by cnt), t2 as (select row_number() over() rn from transactions union select 0 rn) select t2.rn transactions_count, ifnull(t1.v_cnt,0) visits_count from t2 left join t1 on t2.rn=t1.cnt where t2.rn <=(select max(cnt) from t1) order by t2.rn
with t as (select v.user_id as user_id, visit_date, count(transaction_date) as transactions_count from Visits v left join Transactions t on v.user_id=t.user_id and v.visit_date=t.transaction_date group by user_id, visit_date), row_num as (select row_number() over () as rn from transactions union select 0) select rn as transactions_count, count(t.transactions_count) as visits_count from row_num r left join t on transactions_count=rn where r.rn<=(select max(transactions_count) from t) group by rn order by rn
with t as (select v.user_id user_id, visit_date, IF(transaction_date is null, 0, count(*)) transaction_count from Visits v left join Transactions t on v.visit_date = t.transaction_date and v.user_id=t.user_id group by 1, 2), row_nums as (select row_number() over () as rn from Transactions union select 0) select rn transactions_count, IF(transaction_count is null, 0, count(*)) visits_count from row_nums left join t on transaction_count = rn where rn <= (select max(transaction_count) from t) group by 1 order by 1
with t as (select v.user_id user_id, visit_date, IF(transaction_date is null, 0, count(*)) transaction_count from Visits v left join Transactions t on v.visit_date = t.transaction_date and v.user_id=t.user_id group by 1, 2), row_nums as (select row_number() over () as rn from Transactions union select 0) select rn transactions_count, IF(transaction_count is null, 0, count(*)) visits_count from t right join row_nums on transaction_count = rn where rn <= (select max(transaction_count) from t) group by 1 order by 1
with t as (select v.user_id user_id, visit_date, if(transaction_date is null, 0, count(*)) cnt from Visits v left join Transactions t on v.user_id = t.user_id and v.visit_date = t.transaction_date group by 1, 2), row_n as (select row_number() over() rn from Transactions union select 0) select rn transactions_count, if(cnt is null, 0, count(*)) visits_count from row_n left join t on cnt = rn where rn <= (select max(cnt) from t) group by 1 order by 1
with t as (select v.user_id user_id, visit_date, if(transaction_date is null, 0, count(*)) cnt from Visits v left join Transactions t on v.visit_date = t.transaction_date and v.user_id=t.user_id group by 1, 2), row_nums as (select row_number() over () as rn from Transactions union select 0) select rn transactions_count, if(cnt is null, 0, count(*)) visits_count from row_nums left join t on cnt = rn where rn <= (select max(cnt) from t) group by 1 order by 1
with t as (select v.user_id, v.visit_date, count(t.user_id) as transaction_counts from visits v left join transactions t on v.user_id = t.user_id and v.visit_date = t.transaction_date group by 1,2), rowcounts as (select 0 as t_counts union select row_number() over(order by user_id) from transactions ), temp as (select transaction_counts, count(user_id) as visits_counts from t group by transaction_counts) select rc.t_counts as transactions_count, case when temp.visits_counts is not null then temp.visits_counts else 0 end as visits_count from rowcounts rc left join temp on rc.t_counts = temp.transaction_counts where rc.t_counts <= (select max(transaction_counts) from temp)
with t as (select v.user_id, visit_date, sum(case when amount is not null then 1 else 0 end) as trxn_count from Visits as v left join Transactions as t on v.user_id = t.user_id and v.visit_date = t.transaction_date group by 1, 2), row_nums as (select row_number() over () as rn from Transactions union select 0 ) select rn as transactions_count, sum(case when trxn_count is not null then 1 else 0 end) as visits_count from t right join row_nums as r on t.trxn_count = r.rn where r.rn <= (select max(trxn_count) from t) group by 1 order by 1
with t as( select v.*, ifnull(count(amount),0) as trans_cnt from Visits v left join Transactions t on v.visit_date = t.transaction_date and v.user_id = t.user_id group by v.user_id, v.visit_date), t1 as ( select trans_cnt, count(*) as visit_cnt from t group by trans_cnt), t3 as( with recursive t2 as( select 0 as transactions_count union all select transactions_count + 1 as transactions_count from t2 where transactions_count < (select max(trans_cnt) from t1)) select * from t2 ) select t3.*, ifnull(t1.visit_cnt ,0) as visits_count from t3 left join t1 on t3.transactions_count = t1.trans_cnt
with tab as( select v.visit_date, v.user_id, count(transaction_date) as transactions_count from visits v left join Transactions t on v.visit_date = t.transaction_date and v.user_id=t.user_id group by v.visit_date, v.user_id), cte_recur as ( WITH RECURSIVE tmp AS ( SELECT 0 as trans_cnt UNION ALL SELECT trans_cnt + 1 AS trans_cnt FROM tmp WHERE trans_cnt < (SELECT MAX(transactions_count) FROM tab) ) SELECT * FROM tmp ) select cte_recur.trans_cnt as transactions_count , count(visit_date) as visits_count from tab right join cte_recur on tab.transactions_count = cte_recur.trans_cnt group by cte_recur.trans_cnt order by cte_recur.trans_cnt
with tbl as (select v.*, (case when t.amount is null then 0 else 1 end ) trans, count(*) cnt from visits v left join transactions t on v.user_id = t.user_id and v.visit_date=t.transaction_date group by v.user_id, v.visit_date) , tbl2 as (select cnt*trans transactions_count , count(trans) visits_count from tbl group by cnt*trans), tbl3 as (SELECT row_number() over () as rn FROM transactions UNION select 0 rn) select tbl3.rn transactions_count, ifnull(tbl2.visits_count,0) visits_count from tbl3 left join tbl2 on tbl2.transactions_count= tbl3.rn where tbl3.rn<= (select max(tbl2.transactions_count) from tbl2) order by transactions_count
with tem as (select a.user_id, a.visit_date, count(b.user_id) as transactions_count from Visits a left join Transactions b on a.user_id=b.user_id and a.visit_date=b.transaction_date group by a.user_id,a.visit_date) select a.transactions_count, ifnull(b.visits_count,0) as visits_count from (select 0 transactions_count union select row_number() over() as transactions_count from Transactions) a left join (select transactions_count, count(user_id) as visits_count from tem group by transactions_count) b on a.transactions_count=b.transactions_count where a.transactions_count<= (select max(transactions_count) from tem)
with temp as ( select v.user_id, visit_date, ( select count(transaction_date) from transactions t where v.user_id = t.user_id and v.visit_date = t.transaction_date group by t.user_id, t.transaction_date ) transactions_count, rank() over (order by v.user_id, visit_date) id from visits v ), va as ( select ifnull(transactions_count,0) transactions_count, count(visit_date) visits_count from temp group by transactions_count ), idnum as ( select row_number() over() transactions_count, 0 from transactions union select 0,0 ) select * from va union select * from idnum where transactions_count not in (select transactions_count from va) and transactions_count <= (select max(transactions_count) from va) order by transactions_count
with temp as (select v.user_id, v.visit_date, sum(case when amount then 1 else 0 end) transactions_count from visits v left join transactions t on v.user_id=t.user_id and v.visit_date = t.transaction_date group by 1,2) select c.counts as transactions_count, ifnull(visits_count,0) as visits_count from (SELECT DISTINCT row_number() OVER (partition BY user_id, transaction_date ORDER BY transaction_date) AS counts FROM transactions UNION ALL SELECT 0) c left join (select transactions_count, count(*) visits_count from temp group by 1) a on c.counts = a.transactions_count order by 1
with tmp as ( select v.user_id, v.visit_date, count(amount) as ct from visits v left join transactions t on v.user_id = t.user_id and v.visit_date = t.transaction_date group by user_id, visit_date ), tmp2 as( with recursive seq as( select 0 as num union select num + 1 from seq where num < (select max(ct) from tmp) ) select * from seq ) select num as transactions_count, count(user_id) as visits_count from tmp2 left join tmp on num = ct group by num order by 1
with tmp as (select if(amount is null,0,count(*)) as visits from Transactions t right join Visits v on t.user_id = v.user_id and t.transaction_date = v.visit_date group by v.user_id, v.visit_date), t as (select row_number() over () as rown from Transactions union all select 0) select rown as transactions_count, ifnull(count(visits),0) as visits_count from tmp right join t on tmp.visits = t.rown where t.rown <= (select max(visits) from tmp) group by rown order by transactions_count
with tran as (select a.trans_count as transactions_count, count(a.visit_date) as visits_count from (select v1.visit_date, v1.user_id, sum(case when (t1.amount is null or t1.amount=0) then 0 else 1 end) trans_count from Visits v1 left join Transactions t1 on v1.user_id = t1.user_id and v1.visit_date = t1.transaction_date group by v1.visit_date, v1.user_id) a group by a.trans_count order by a.trans_count), num as (select 0 as num union all select row_number() over() as num from Transactions) select num.num as transactions_count, ifnull(tran.visits_count, 0) as visits_count from tran right join num on num.num = tran.transactions_count where num.num <= (select max(tran.transactions_count) from tran)
with trans as (select v.user_id, v.visit_date, count(t.transaction_date) as transactions_count from visits v left join transactions t on v.visit_date = t.transaction_date and v.user_id=t.user_id group by v.user_id,v.visit_date) select transactions_count, count(user_id) as visits_count from (with recursive trans_count as (select 0 as n union all select n+1 from trans_count where n < (select max(transactions_count) from trans)) select n as transactions_count from trans_count) as test left join trans using(transactions_count) group by transactions_count
with trans_count_by_user as(select t.user_id,count(*) as transactions_count from Transactions t group by t.user_id,t.transaction_date), result as(select tr.transactions_count,count(*) as visits_count from trans_count_by_user tr group by tr.transactions_count), cte_spine as ( with recursive counter (n) as ( select 0 as n union all select n+1 from counter where n+1<=(select max(tr.transactions_count) from trans_count_by_user tr)) select * from counter), zero as(select count(*) from(select v.user_id,t.transaction_date from Visits v left join Transactions t on v.user_id=t.user_id and v.visit_date = t.transaction_date ) a where a.transaction_date is null) select c.n as transactions_count , case when c.n=0 then (select * from(zero)) when c.n!=0 and c.n not in(select r.transactions_count from result r) then 0 else (select r.visits_count from result r where r.transactions_count=c.n) end as visits_count from cte_spine c
with transaction_number_reference as ( select row_number() over () as rn from transactions union select 0 ) , dataset as ( select v.user_id , v.visit_date , count(transaction_date) as transactions_count from visits v left join transactions t on t.user_id = v.user_id and t.transaction_date = v.visit_date group by user_id , visit_date ) , aggregate_data as ( select transactions_count, count(*) as visits_count from dataset group by transactions_count ) select rn as transactions_count , ifnull(visits_count,0) as visits_count from transaction_number_reference t left join aggregate_data ad on ad.transactions_count = t.rn group by rn having rn <= (select max(transactions_count) from aggregate_data ) order by 1
with transactions_table as ( select num_transactions as transactions_count, count(*) as visits_count from ( select user_id, visit_date, count(transaction_date) as num_transactions from ( select Visits.user_id, visit_date, transaction_date from Visits left join Transactions on Visits.user_id = Transactions.user_id and Visits.visit_date = Transactions.transaction_date ) t1 group by user_id, visit_date ) t2 group by transactions_count ), transaction_counts as ( select * from ( select row_number() over () as transactions_count from Transactions union all select 0 ) t3 where transactions_count <= (select max(transactions_count) from transactions_table) ) select transaction_counts.transactions_count, coalesce(transactions_table.visits_count, 0) as visits_count from transaction_counts left join transactions_table on transaction_counts.transactions_count = transactions_table.transactions_count order by transactions_count
with transactions_with_rank as ( select *, row_number() over (partition by user_id, transaction_date) as transactions_count from transactions ), unique_transactions_count as ( select distinct transactions_count from transactions_with_rank union all select 0 as transactions_count order by 1 ), visits_transactions as ( select v.user_id, v.visit_date, count(t.transaction_date) as transactions_count from visits v left join transactions t on v.user_id = t.user_id and v.visit_date = t.transaction_date group by 1, 2 ), visits_count as ( select transactions_count, count(*) as visits_count from visits_transactions group by 1 ) select u.transactions_count, ifnull(visits_count, 0) as visits_count from unique_transactions_count u left join visits_count v using (transactions_count)
with trx as ( (select v.visit_date, sum(case when t.transaction_date is null then 0 else 1 end) transactions_count from Visits v left join Transactions t on v.user_id = t.user_id and v.visit_date = t.transaction_date group by v.user_id, visit_date) ), tcounts as ( select row_number() over() transactions_count from Transactions union select 0 transactions_count ) select s.transactions_count, IF(x.visit_date is null, 0, count(*)) visits_count from tcounts s left join trx x on s.transactions_count = x.transactions_count where s.transactions_count <= (select max(transactions_count) from trx) group by transactions_count order by transactions_count
with u_d_t as( select v.user_id,v.visit_date ,count(t.transaction_date) as ctd from visits v left join transactions t on v.user_id = t.user_id and v.visit_date = t.transaction_date group by v.user_id,v.visit_date), t_d as ( select user_id,visit_date, sum(ctd) as ct from u_d_t group by user_id,visit_Date ), rn as ( select row_number () over () as ro from transactions union select 0 ) select rn.ro as transactions_count, count(t_d.ct) as visits_count from t_d right join rn on t_d.ct = rn.ro where rn.ro <= (SELECT MAX(ct) FROM t_d) group by 1 order by 1
with visit as ( select user_id, visit_date, 0 as txn from visits ) , trans as ( select user_id, transaction_date as t_date, 1 as txn from transactions ) , all_trx as ( select a.user_id, a.visit_date, sum(a.txn + ifnull(b.txn,0)) as txn from visit a left join trans b on a.user_id = b.user_id and a.visit_date = b.t_date group by 1,2 ), g_trx as ( select txn, count(user_id) as cnt from all_trx group by 1 ) select a.txn as transactions_count, ifnull(b.cnt,0) as visits_count from ( with recursive d_trx as ( select 0 as txn , 0 as cnt union all select txn + 1 as txn, 0 as cnt from d_trx where txn < (select max(txn) from g_trx) ) select * from d_trx ) a left join g_trx b on a.txn = b.txn order by 1
with visit_cnt as ( SELECT cnt as tran_cnt, count(visit_date) as visit_cnt FROM ( SELECT v.user_id, v.visit_date, count(transaction_date) as cnt from visits v LEFT JOIN transactions t on v.visit_date = t.transaction_date and v.user_id = t.user_id group by v.user_id, v.visit_date ) a group by cnt ) SELECT IFNULL(b.tran_cnt,a.cnt) as transactions_count , case when b.tran_cnt is null then 0 else visit_cnt end as visits_count from visit_cnt b RIGHT JOIN ( SELECT cnt FROM ( SELECT 0 as cnt UNION SELECT row_number() over(order by transaction_date asc) as cnt from transactions ) A where cnt <= (SELECT MAX(tran_cnt) from visit_cnt) ) a on a.cnt = b.tran_cnt
with visit_tran_count as ( select v.user_id, v.visit_date, ifnull(count(amount), 0) as num_tran from transactions t right join visits v on v.user_id=t.user_id and v.visit_date=t.transaction_date group by 1,2 ) , cons_tran as ( select 0 as num_tran union select rn from ( select row_number() over() as rn from transactions ) tmp where rn <= (select max(num_tran) from visit_tran_count) ) select cons_tran.num_tran as transactions_count, count(user_id) as visits_count from visit_tran_count vtc right join cons_tran on vtc.num_tran=cons_tran.num_tran group by 1 order by 1
with visits_cleaned as( select v.*, case when t.user_id is null then 0 else 1 end as cleaned_user_id_flag from visits v left join transactions t on v.user_id = t.user_id and v.visit_date = t.transaction_date), final_table as( select user_id, visit_date, sum(cleaned_user_id_flag) as num_visits from visits_cleaned group by user_id, visit_date), row_nums AS (SELECT ROW_NUMBER() OVER () as rn FROM Transactions UNION SELECT 0) select rn as transactions_count, count(num_visits) as visits_count from final_table right join row_nums b on b.rn = final_table.num_visits where rn <= (SELECT MAX(num_visits) FROM final_table) group by rn order by rn
with visits_cleaned as( select v.user_id, v.visit_date, count(t.transaction_date) as num_visits from visits v left join transactions t on v.user_id = t.user_id and v.visit_date = t.transaction_date group by v.user_id, v.visit_date ), row_nums AS (SELECT ROW_NUMBER() OVER () as rn FROM Transactions UNION SELECT 0) select rn as transactions_count, count(num_visits) as visits_count from visits_cleaned right join row_nums b on b.rn = visits_cleaned.num_visits where rn <= (SELECT MAX(num_visits) FROM visits_cleaned) group by rn order by rn
with x as ( select transactions_count, count(*) as visits_count from (select v.*, sum(case when t.transaction_date is null then 0 else 1 end) as transactions_count from visits v left join transactions t on v.user_id = t.user_id and v.visit_date = t.transaction_date group by v.user_id, v.visit_date) a group by transactions_count order by transactions_count), y as ( select * from (select 0 as transactions_count union all select row_number() over (order by user_id) as transactions_count from transactions) a where transactions_count <= (select max(transactions_count) from x) and transactions_count not in (select transactions_count from x)) select * from x union all select transactions_count, 0 as visits_count from y order by transactions_count
