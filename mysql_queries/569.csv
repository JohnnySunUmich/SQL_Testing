SELECT A.Id, A.Company, A.Salary FROM (SELECT Id, Company, Salary, ROW_NUMBER() OVER (PARTITION BY Company ORDER BY Salary) AS R FROM Employee) A WHERE (A.Company, A.R) IN (SELECT B.Company, B.flr FROM (SELECT Company, FLOOR((COUNT(*)+1)/2) flr FROM Employee GROUP BY Company) B) OR (A.Company, A.R) IN (SELECT B.Company, B.ceil FROM (SELECT Company, CEILING((COUNT(*)+1)/2) ceil FROM Employee GROUP BY Company) B)
SELECT DISTINCT MIN(ID) OVER(PARTITION BY Company, Salary) as Id, Company, Salary FROM (SELECT Id, Company, Salary, RANK() OVER (PARTITION BY COMPANY ORDER BY SALARY ASC) as up, RANK() OVER (PARTITION BY COMPANY ORDER BY SALARY DESC) as dwn FROM Employee) h WHERE ABS(CAST(up AS SIGNED)-CAST(dwn AS SIGNED))<=1 ORDER BY Company, Salary, Id
SELECT E.id, E.Company, E.Salary FROM (SELECT *, ROW_NUMBER() OVER(PARTITION BY Company ORDER BY Salary) AS row_num, COUNT(*) OVER(PARTITION BY Company) AS emp_cnt FROM Employee) E WHERE E.row_num >= emp_cnt/2 AND E.row_num <= (emp_cnt/2)+1
SELECT Id ,Company ,Salary FROM ( SELECT Id ,Company ,Salary ,ROW_NUMBER() OVER (PARTITION BY Company ORDER BY Salary ASC) AS row_id ,CASE WHEN MOD(COUNT(*) OVER(PARTITION BY Company),2) <> 0 THEN (COUNT(*) OVER(PARTITION BY Company) + 1)/2 ELSE COUNT(*) OVER(PARTITION BY Company)/2 END As odd_row , CASE WHEN MOD(COUNT(*) OVER(PARTITION BY Company),2) = 0 THEN COUNT(*) OVER(PARTITION BY Company)/2 + 1 END AS even_row FROM Employee ) AS med_wage WHERE row_id = odd_row OR row_id = even_row
SELECT Id ,Company ,Salary FROM ( SELECT Id ,Company ,Salary ,ROW_NUMBER() OVER(PARTITION BY Company ORDER BY Salary) AS row_numbers ,COUNT(Salary) OVER(PARTITION BY Company) AS counts FROM Employee ORDER BY Company, Salary ) t WHERE row_numbers BETWEEN counts*1.0/2 AND counts*1.0/2+1
SELECT Id ,Company ,Salary FROM ( SELECT Id ,Company ,Salary ,ROW_NUMBER() OVER(PARTITION BY Company ORDER BY Salary, Id) AS row_numbers ,COUNT(Salary) OVER(PARTITION BY Company) AS counts FROM Employee ORDER BY Company, Salary ) t WHERE row_numbers BETWEEN counts*1.0/2 AND counts*1.0/2+1
SELECT Id ,Company ,Salary FROM (SELECT * ,ROW_NUMBER() OVER (PARTITION BY Company ORDER BY Salary) AS rn ,COUNT(Id) OVER (PARTITION BY Company) AS ct FROM Employee) a WHERE rn BETWEEN ct/2 AND ct/2 + 1
SELECT Id, Company, Salary FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY Company ORDER BY Salary ASC, Id ASC) AS RN_ASC, ROW_NUMBER() OVER (PARTITION BY Company ORDER BY Salary DESC, Id DESC) AS RN_DESC FROM Employee ) AS Temp WHERE RN_ASC BETWEEN RN_DESC - 1 AND RN_DESC + 1
SELECT Id, Company, Salary FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY Company ORDER BY Salary) AS ranks, COUNT(*) OVER (PARTITION BY Company) AS counts FROM Employee ) AS t1 WHERE CASE WHEN counts % 2 = 0 THEN ranks = counts div 2 OR ranks = counts div 2 + 1 ELSE ranks = counts div 2 + 1 END
SELECT Id, Company, Salary FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY Company ORDER BY Salary) As 'row_num', COUNT(*) OVER (PARTITION BY Company) As 'count_com' FROM Employee) As t WHERE row_num BETWEEN count_com/2 AND count_com/2+1
SELECT Id, Company, Salary FROM ( SELECT *, ROW_NUMBER() OVER (PARTITION BY Company ORDER BY Salary, Id) as rk1, ROW_NUMBER() OVER (PARTITION BY Company ORDER BY Salary DESC, Id DESC) as rk2 FROM Employee ) temp WHERE rk1 BETWEEN rk2-1 AND rk2 + 1 ORDER BY Company, Salary
SELECT Id, Company, Salary FROM ( SELECT *, ROW_NUMBER() OVER(PARTITION BY COMPANY ORDER BY Salary ASC, Id ASC) AS RN_ASC, ROW_NUMBER() OVER(PARTITION BY COMPANY ORDER BY Salary DESC, Id DESC) AS RN_DESC FROM Employee) AS temp WHERE RN_ASC BETWEEN RN_DESC - 1 AND RN_DESC + 1 ORDER BY Company, Salary
SELECT Id, Company, Salary FROM ( SELECT *, ROW_NUMBER() OVER(PARTITION BY COMPANY ORDER BY Salary ASC, Id ASC) AS RN_UP, ROW_NUMBER() OVER(PARTITION BY COMPANY ORDER BY Salary DESC, Id DESC) AS RN_DOWN FROM Employee) AS temp WHERE ABS(CAST(RN_UP AS SIGNED) - CAST(RN_DOWN AS SIGNED)) <=1 ORDER BY Company, Salary
SELECT Id, Company, Salary FROM ( SELECT *, ROW_NUMBER() OVER(PARTITION BY COMPANY ORDER BY Salary, Id) AS RN_ASC, ROW_NUMBER() OVER(PARTITION BY COMPANY ORDER BY Salary DESC, Id DESC) AS RN_DESC FROM Employee) AS temp WHERE RN_ASC BETWEEN RN_DESC - 1 AND RN_DESC + 1 ORDER BY Company, Salary
SELECT Id, Company, Salary FROM ( SELECT *, ROW_NUMBER() OVER(PARTITION BY Company ORDER BY Salary ASC, Id ASC) rk_asc, ROW_NUMBER() OVER(PARTITION BY Company ORDER BY Salary DESC, Id DESC) rk_desc FROM Employee ) rslt WHERE rk_asc BETWEEN rk_desc-1 AND rk_desc+1
SELECT Id, Company, Salary FROM ( SELECT *, ROW_NUMBER() OVER(PARTITION BY Company ORDER BY Salary, Id) AS rnk_asc, ROW_NUMBER() OVER(PARTITION BY Company ORDER BY Salary DESC, Id DESC) AS rnk_desc FROM Employee ) t WHERE rnk_asc BETWEEN rnk_desc-1 AND rnk_desc+1 ORDER BY 2, 3
SELECT Id, Company, Salary FROM ( SELECT Id, Company, Salary, CASE WHEN MOD(COUNT(Id) over (partition by company),2)=0 AND ROUND(COUNT(Id) over (partition by company)/2,0)=ROW_NUMBER() over (partition by company order by salary) THEN 'es' WHEN MOD(COUNT(Id) over (partition by company),2)=0 AND ROUND(COUNT(Id) over (partition by company)/2,0)+1=ROW_NUMBER() over (partition by company order by salary) THEN 'ets' WHEN MOD(COUNT(Id) over (partition by company),2)!=0 AND ROUND(COUNT(Id) over (partition by company)/2,0)=ROW_NUMBER() over (partition by company order by salary) THEN 'exs' ELSE 'No' END as rating FROM Employee) A where rating IN ('es','ets','exs')
SELECT Id, Company, Salary FROM ( SELECT Id, Company, Salary, ROW_NUMBER() OVER(PARTITION BY Company ORDER BY Salary ASC, Id ASC) AS ranking1, ROW_NUMBER() OVER(PARTITION BY Company ORDER BY Salary DESC, Id DESC) AS ranking2 FROM Employee ) as sub WHERE 1.0*ranking1 - 1.0*ranking2 IN (0,1,-1)
SELECT Id, Company, Salary FROM ( SELECT Id, Company, Salary, ROW_NUMBER() over (partition by company order by salary) as ro, ROUND(COUNT(Id) over (partition by company)/2,0) as ha, MOD(COUNT(Id) over (partition by company),2) as ha1, CASE WHEN MOD(COUNT(Id) over (partition by company),2)=0 AND ROUND(COUNT(Id) over (partition by company)/2,0)=ROW_NUMBER() over (partition by company) THEN 'es' WHEN MOD(COUNT(Id) over (partition by company),2)=0 AND ROUND(COUNT(Id) over (partition by company)/2,0)+1=ROW_NUMBER() over (partition by company) THEN 'ets' WHEN MOD(COUNT(Id) over (partition by company),2)!=0 AND ROUND(COUNT(Id) over (partition by company)/2,0)=ROW_NUMBER() over (partition by company) THEN 'exs' ELSE 'No' END as rating FROM Employee) A where rating IN ('es','ets','exs')
SELECT Id, Company, Salary FROM ( SELECT Id, Company, Salary, row_number() over (PARTITION BY Company ORDER BY Salary ASC) AS sal_rank, count(*) over (PARTITION BY Company) as company_count FROM Employee ) m WHERE m.sal_rank BETWEEN company_count/2 AND company_count/2+1
SELECT Id, Company, Salary FROM ( SELECT Id, company, salary, count(ID) OVER(partition by company) as ct, row_number() OVER(partition by company order by salary ) as rn FROM Employee )base WHERE rn between ct/2 and ct/2+1 ORDER BY Company,Salary
SELECT Id, Company, Salary FROM ( SELECT e.Id, e.Company, e.Salary, ROW_NUMBER() OVER ( PARTITION BY Company ORDER BY Salary, Id) as rnk, t1.cnt FROM Employee e JOIN (SELECT Company, COUNT( 1) as cnt FROM Employee GROUP BY Company ) t1 ON e.Company = t1.Company ) t2 WHERE rnk = ( CASE WHEN cnt/2 = FLOOR(cnt/2 ) THEN cnt/2 ELSE FLOOR( cnt/2) + 1 END ) OR rnk = ( CASE WHEN cnt/2 = FLOOR(cnt/2 ) THEN cnt/2 +1 ELSE FLOOR( cnt/2) + 1 END )
SELECT Id, Company, Salary FROM (SELECT *, COUNT(*) OVER (PARTITION BY Company) AS counts, ROW_NUMBER() OVER(PARTITION BY Company ORDER BY Salary) AS row_num FROM Employee) as temp WHERE temp.row_num in (CEILING(temp.counts/2), (temp.counts/2)+1)
SELECT Id, Company, Salary FROM (SELECT *, COUNT(*) OVER(PARTITION BY Company) AS Cnt, ROW_NUMBER() OVER (PARTITION BY Company ORDER BY Salary) AS row_num FROM Employee) as t1 WHERE row_num BETWEEN Cnt/2 AND Cnt/2+1
SELECT Id, Company, Salary FROM (SELECT *, COUNT(Id) OVER (PARTITION BY Company) AS total, ROW_NUMBER() OVER (PARTITION BY Company ORDER BY Salary) as current_row FROM Employee ) t WHERE (MOD(total, 2) = 0 AND (current_row = FLOOR(total/2) OR current_row = FLOOR(total/2) + 1)) OR (MOD(total, 2) = 1 AND current_row = FLOOR(total/2) + 1) ORDER BY Id
SELECT Id, Company, Salary FROM (SELECT *, ROW_NUMBER() OVER (PARTITION BY Company ORDER BY Salary) AS rk, COUNT(Id) OVER (PARTITION BY Company) AS size FROM Employee) a WHERE rk = size/2 OR rk = (size+2)/2 OR rk = (size+1)/2
SELECT Id, Company, Salary FROM (SELECT *, ROW_NUMBER() OVER(PARTITION BY Company ORDER BY Salary ASC, Id ASC) as rn_asc, ROW_NUMBER() OVER(PARTITION BY Company ORDER BY Salary DESC, Id DESC) as rn_desc FROM Employee) as a WHERE rn_asc BETWEEN rn_desc-1 AND rn_desc+1
SELECT Id, Company, Salary FROM (SELECT *, ROW_NUMBER() OVER(PARTITION BY Company ORDER BY Salary) R, COUNT(*) OVER(PARTITION BY Company) T FROM Employee) Employee WHERE R BETWEEN T/2 AND T/2+1
SELECT Id, Company, Salary FROM (SELECT Id, Company, Salary, RANK() OVER (PARTITION BY Company ORDER BY Salary, Id) AS rnk_asc, RANK() OVER (PARTITION BY Company ORDER BY Salary DESC, Id DESC) AS rnk_desc FROM Employee) t1 WHERE ABS(CAST(rnk_asc AS SIGNED) - CAST(rnk_desc AS SIGNED)) BETWEEN 0 AND 1
SELECT Id, Company, Salary FROM (SELECT Id, Company, Salary, ROW_NUMBER()OVER(PARTITION BY Company ORDER BY Salary ) AS rank_no, COUNT(*)OVER(PARTITION BY Company) AS cnt FROM Employee) rank_table WHERE rank_no IN (CEIL(cnt/2),cnt/2+1)
SELECT Id, Company, Salary FROM (SELECT Id, Company, Salary, Row_number() OVER(PARTITION BY Company ORDER BY Salary asc) as rownumber, COUNT(*)OVER(PARTITION BY Company) as Cnt FROM Employee) e Where e.rownumber between (e.Cnt/2) and (e.Cnt/2) + 1
SELECT Id, Company, Salary FROM( SELECT *, ROW_NUMBER() OVER(PARTITION BY Company ORDER BY Salary ASC, Id ASC) as row_num_asc, ROW_NUMBER() OVER(PARTITION BY Company ORDER BY Salary DESC, Id DESC) as row_num_desc FROM Employee ORDER BY Company )temp1 WHERE row_num_asc BETWEEN row_num_desc -1 and row_num_desc + 1 ORDER BY Company, Salary
SELECT Id, Company, Salary FROM( SELECT *, ROW_NUMBER() OVER(PARTITION BY Company ORDER BY Salary) AS RN, COUNT(*) OVER(PARTITION BY Company) AS Ct FROM Employee) AS t WHERE RN BETWEEN (Ct/2) AND (Ct/2+1)
SELECT Id, Company, Salary FROM( SELECT *, ROW_NUMBER() OVER(PARTITION BY Company ORDER BY Salary) no_rank, COUNT(*) OVER(PARTITION BY Company) cnt FROM Employee)t WHERE no_rank IN (CEIL(cnt/2),cnt/2+1)
SELECT Id, Company, Salary FROM( SELECT *, ROW_NUMBER() OVER(PARTITION BY Company ORDER BY Salary, Id) AS rank_asc, ROW_NUMBER() OVER(PARTITION BY Company ORDER BY Salary DESC, Id DESC) AS rank_desc FROM Employee) tem WHERE rank_asc BETWEEN rank_desc - 1 AND rank_desc + 1 ORDER BY Company, Salary
SELECT M.ID, M.COMPANY, M.SALARY FROM ( SELECT ID, COMPANY, SALARY, ROW_NUMBER() OVER(PARTITION BY COMPANY ORDER BY SALARY) AS RNK, COUNT(SALARY) OVER(PARTITION BY COMPANY) AS CNT FROM EMPLOYEE ) M WHERE RNK >= CNT/2 AND RNK <= CNT/2 +1
SELECT MIN(A.Id) AS Id, A.Company, A.Salary FROM Employee A JOIN Employee B ON A.Company = B.Company GROUP BY A.Company, A.Salary HAVING sum(if(B.Salary >= A.Salary,1,0) ) >= COUNT(*)/2 AND sum(if(B.Salary <= A.Salary,1,0) ) >= COUNT(*)/2
SELECT MIN(A.Id) AS Id, A.Company, A.Salary FROM Employee A, Employee B WHERE A.Company = B.Company GROUP BY A.Company, A.Salary HAVING SUM(CASE WHEN B.Salary >= A.Salary then 1 ELSE 0 END) >= COUNT(*)/2 AND SUM(CASE WHEN B.Salary <= A.Salary then 1 ELSE 0 END) >= COUNT(*)/2
SELECT MIN(A.Id) AS Id, A.Company, A.Salary FROM Employee A, Employee B WHERE A.Company = B.Company GROUP BY A.Company, A.Salary HAVING SUM(IF(B.Salary>=A.Salary,1,0)) >= COUNT(*)/2 AND SUM(IF(B.Salary<=A.Salary,1,0)) >= COUNT(*)/2
SELECT MIN(E1.Id) as Id, E1.Company, E1.Salary FROM Employee as E1, Employee as E2 WHERE E1.Company = E2.Company GROUP BY E1.Company, E1.Salary HAVING SUM(CASE WHEN E2.Salary >= E1.Salary THEN 1 ELSE 0 END) >= COUNT(*) / 2 AND SUM(CASE WHEN E2.Salary <= E1.Salary THEN 1 ELSE 0 END) >= COUNT(*) / 2 ORDER BY E1.Company, E1.Salary
SELECT MIN(e1.Id) Id, e1.Company, e1.Salary FROM Employee e1, Employee e2 WHERE e1.Company = e2.Company GROUP BY e1.Company, e1.Salary HAVING SUM(CASE WHEN e1.Salary=e2.Salary THEN 1 ELSE 0 END) >= ABS(SUM(SIGN(e1.Salary-e2.Salary))) ORDER BY e1.Company, e1.Salary
SELECT a.Id,a.Company, a.Salary FROM ( ( SELECT a.Id, a.Company, a.Salary, a.rnk, a.rown, (a.con+1)/2 as fif1, (a.con+1)/2 as fif2 FROM ( SELECT Id, Company, Salary,RANK() OVER(PARTITION BY Company ORDER BY Salary DESC) as rnk, ROW_NUMBER() OVER(PARTITION BY Company ORDER BY Salary DESC, Id DESC) as rown, COUNT(*) OVER(PARTITION BY Company) as con FROM Employee ) a WHERE (a.con%2) <> 0 ) UNION ALL ( SELECT b.Id, b.Company, b.Salary, b.rnk, b.rown, (b.con)/2 as fif1, (b.con/2+1) as fif2 FROM ( SELECT Id, Company, Salary,RANK() OVER(PARTITION BY Company ORDER BY Salary DESC) as rnk, ROW_NUMBER() OVER(PARTITION BY Company ORDER BY Salary DESC, Id DESC) as rown, COUNT(*) OVER(PARTITION BY Company) as con FROM Employee ) b WHERE (b.con%2) = 0 ) ) a WHERE (a.rown = a.fif1 or a.rown = a.fif2) ORDER BY Company,Salary ASC
SELECT c1.Id ,c1.Company ,c1.Salary FROM ( SELECT Id ,Company ,Salary ,ROW_NUMBER() OVER(PARTITION BY Company ORDER BY Salary) AS row_numbers FROM Employee ORDER BY Company, Salary ) c1 INNER JOIN ( SELECT Company ,COUNT(Salary) AS counts FROM Employee GROUP BY Company ) t1 ON c1.Company = t1.Company WHERE c1.row_numbers BETWEEN counts*1.0/2 AND counts*1.0/2+1
SELECT id, company, salary FROM ( SELECT *, ROW_NUMBER() OVER(PARTITION BY company ORDER BY salary ASC, id ASC) AS RN_ASC, ROW_NUMBER() OVER(PARTITION BY company ORDER BY salary DESC, id DESC) AS RN_DESC FROM employee ) temp WHERE RN_ASC BETWEEN RN_DESC - 1 AND RN_DESC + 1 ORDER BY company, salary
SELECT id, company, salary FROM (SELECT id, company, salary, ROW_NUMBER() OVER(PARTITION BY company ORDER BY salary desc, Id desc) rnk_desc, ROW_NUMBER() OVER(PARTITION BY company ORDER BY salary, id) rnk_asc FROM Employee) t WHERE rnk_asc BETWEEN rnk_desc-1 AND rnk_desc+1
SELECT id, company, salary from( select id, company, salary, DENSE_RANK()OVER(PARTITION BY company order by salary, id) as ascrank, DENSE_RANK()OVER(PARTITION BY company order by salary desc, id desc) as dscrank from Employee )a where ascrank between dscrank-1 and dscrank+1
SELECT min(Employee.Id) as Id, Employee.Company, Employee.Salary FROM Employee, Employee alias WHERE Employee.Company = alias.Company GROUP BY Employee.Company , Employee.Salary HAVING SUM(CASE WHEN Employee.Salary = alias.Salary THEN 1 ELSE 0 END) >= ABS(SUM(SIGN(Employee.Salary - alias.Salary))) ORDER BY Employee.company
SELECT min(employee.Id) as id, Employee.Company, Employee.Salary FROM Employee, Employee alias WHERE Employee.Company = alias.Company GROUP BY Employee.Company , Employee.Salary HAVING SUM(CASE WHEN Employee.Salary = alias.Salary THEN 1 ELSE 0 END) >= ABS(SUM(SIGN(Employee.Salary - alias.Salary))) ORDER BY Employee.Id
SELECT t.Id, t.Company, t.Salary FROM ( SELECT *, row_number()OVER(partition by Company Order by Salary) as rnk FROM Employee)t JOIN ( SELECT company, count(*) as cnt FROM Employee GROUP BY 1)y using (company) WHERE (cnt%2 != 0 and rnk = (cnt+1)/2) or (cnt%2 = 0 and (rnk = cnt/2 or rnk = cnt/2+1))
SELECT t.Id, t.Company, t.Salary FROM ( SELECT *, row_number()OVER(partition by Company Order by Salary) as rnk FROM Employee)t JOIN ( SELECT company, count(*) as cnt FROM Employee GROUP BY 1)y using (company) WHERE cnt%2 != 0 and rnk = (cnt+1)/2 UNION SELECT t.Id, t.Company, t.Salary FROM ( SELECT *, dense_RANK()OVER(partition by Company Order by Salary desc) as rnk FROM Employee)t JOIN ( SELECT company, count(*) as cnt FROM Employee GROUP BY 1)y using (company) WHERE cnt%2 = 0 and rnk = cnt/2 or rnk = cnt/2+1 ORDER BY 2,3
WITH CET AS (SELECT *, ROW_NUMBER() OVER(PARTITION BY Company ORDER BY Salary) AS ROW_NUM, count(Id) over(partition by Company) as cnt FROM Employee) SELECT DISTINCT Id, Company, Salary FROM CET WHERE (Company, ROW_NUM) IN (SELECT Company, (CASE WHEN cnt%2 = 1 THEN (cnt+1)/2 ELSE cnt/2 END) FROM CET) OR (Company, ROW_NUM) IN (SELECT Company, (CASE WHEN cnt%2 = 1 THEN (cnt+1)/2 ELSE cnt/2+1 END) FROM CET)
WITH CTE AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY company ORDER BY company, SALARY) AS ROW_COUNT FROM EMPLOYEE ) , CTE_2 AS ( SELECT company, MAX(ROW_COUNT) AS IS_ODD_OR_EVEN FROM CTE GROUP BY company ), CTE_first AS( SELECT T1.ID, T1.COMPANY, T1.SALARY FROM CTE T1 LEFT JOIN CTE_2 T2 ON T1.company = T2.company WHERE IS_ODD_OR_EVEN % 2 = 0 AND ROW_COUNT= IS_ODD_OR_EVEN / 2 GROUP BY ID, COMPANY ), CTE_SECOND AS ( SELECT T1.ID, T1.COMPANY, T1.SALARY FROM CTE T1 LEFT JOIN CTE_2 T2 ON T1.company = T2.company WHERE IS_ODD_OR_EVEN % 2 = 0 AND ROW_COUNT= 1 + IS_ODD_OR_EVEN / 2 GROUP BY ID, COMPANY ), CTE_THIRD AS ( SELECT T1.ID, T1.COMPANY, T1.SALARY FROM CTE T1 LEFT JOIN CTE_2 T2 ON T1.company = T2.company WHERE IS_ODD_OR_EVEN % 2 != 0 AND ROW_COUNT= (1 + IS_ODD_OR_EVEN)/ 2 GROUP BY ID, COMPANY ) SELECT T1.ID AS Id, T1.COMPANY AS Company, T1.SALARY as Salary FROM CTE_FIRST T1 UNION SELECT T2.ID AS Id, T2.COMPANY AS Company, T2.SALARY as Salary FROM CTE_SECOND T2 UNION SELECT T3.ID AS Id, T3.COMPANY AS Company,T3.SALARY AS Salary FROM CTE_THIRD T3
WITH CTE AS ( SELECT Id, Company, Salary, ROW_NUMBER() OVER(PARTITION BY Company ORDER BY Salary) rn FROM Employee ), CTE1 AS ( SELECT MAX(rn)/2 m1, (MAX(rn)/2)+1 m2, Company FROM CTE GROUP BY Company ) SELECT E.Id, E.Company, E.Salary FROM CTE E INNER JOIN CTE1 C1 ON E.Company=C1.Company AND E.rn BETWEEN C1.m1 AND C1.m2
WITH CTE AS ( SELECT Id, Company, Salary, ROW_NUMBER() OVER(partition by Company ORDER BY Salary DESC, id DESC) AS r, COUNT(Id) OVER(partition by Company) AS ct FROM Employee ) SELECT Id, Company, Salary FROM CTE WHERE r BETWEEN ct/2 AND ct/2 +1
WITH CTE AS (SELECT *, ROW_NUMBER() OVER(PARTITION BY Company ORDER BY Salary) rk,COUNT(*) OVER(PARTITION BY Company) AS t FROM Employee) SELECT ID,Company,Salary FROM CTE WHERE rk in (t/2,t/2+0.5,t/2+1)
WITH CTE AS( SELECT *, ROW_NUMBER() OVER (PARTITION BY COMPANY ORDER BY SALARY) AS ROW_NUM, COUNT(ID) OVER (PARTITION BY COMPANY) AS TOTAL FROM EMPLOYEE) SELECT ID, COMPANY, SALARY FROM CTE WHERE ROW_NUM IN (FLOOR((TOTAL+1)/2), CEIL((TOTAL+1)/2))
WITH CTE AS( SELECT ID,COMPANY,SALARY,ROW_NUMBER() OVER(PARTITION BY COMPANY ORDER BY SALARY) AS RK FROM EMPLOYEE ) SELECT X.ID,X.COMPANY,X.SALARY FROM ( SELECT ID,COMPANY,SALARY,RK,MAX(RK) OVER(PARTITION BY COMPANY) MX_RK FROM CTE) X WHERE RK=IF(MX_RK%2=0,MX_RK/2+1,(MX_RK+1)/2) OR RK=IF(MX_RK%2=0,MX_RK/2,(MX_RK+1)/2)
WITH CTE AS( SELECT Id, Company, Salary, COUNT(Salary) OVER(PARTITION BY Company) AS total, ceil(COUNT(Salary) OVER(PARTITION BY Company)/2) mid, row_number() over(partition by company order by Salary)RN FROM Employee ) SELECT Id, Company, Salary FROM CTE WHERE (total%2=0 and RN IN (mid,mid+1)) OR (total%2=1 AND RN=mid)
WITH Ranked_Employee AS (SELECT id, company, salary, ROW_NUMBER() OVER(PARTITION BY Company ORDER BY Salary) as rank_no, COUNT(*) OVER(PARTITION BY company) cnt FROM Employee ) SELECT id, company, salary FROM Ranked_Employee WHERE rank_no IN (CEIL(cnt/2), cnt/2+1)
WITH Salary_Rank AS( SELECT Id, Company, Salary, ROW_NUMBER() OVER(PARTITION BY Company ORDER BY Salary) AS rk, COUNT(*) OVER(PARTITION BY Company) AS size FROM Employee ) SELECT Id, Company, Salary FROM Salary_Rank s WHERE rk IN (size/2, size/2 + 1, (size+1)/2)
WITH Salary_rank as (SELECT Id, Company , Salary , ROW_NUMBER() OVER (PARTITION BY Company ORDER BY Salary ASC) as rn, COUNT(Id) OVER(PARTITION BY Company) as count_comp FROM Employee as e ) SELECT ID, Company, Salary FROM Salary_rank WHERE rn between count_comp/2 and count_comp/2+1
WITH T1 AS (SELECT *, row_number() OVER (PARTITION BY company ORDER BY salary) as row_num, COUNT(*) OVER (PARTITION BY company) as company_count FROM employee) SELECT id, company, salary FROM T1 WHERE row_num BETWEEN company_count/2 AND company_count/2+1
WITH T1 AS (SELECT A.Company, COUNT(*) AS even_emp FROM Employee A GROUP BY 1 HAVING COUNT(*)%2=0 ), T2 AS ( SELECT A.Company, COUNT(*) as odd_emp FROM Employee A GROUP BY 1 HAVING COUNT(*)%2<>0 ), t3 as (SELECT A.Id, T1.Company, A.Salary, T1.even_emp, ROW_NUMBER() OVER (PARTITION BY A.Company ORDER BY A.Salary ASC) rownum1 FROM T1 INNER JOIN Employee A ON A.Company = T1.Company ), t4 as ( SELECT B.Id, T2.Company, B.Salary, T2.odd_emp, ROW_NUMBER() OVER (PARTITION BY B.Company ORDER BY B.Salary ASC) rownum2 FROM T2 INNER JOIN Employee B ON B.Company = T2.Company ) SELECT t3.Id, t3.Company, t3.Salary FROM t3 WHERE rownum1 = even_emp/2 or rownum1 = (even_emp/2)+1 union all SELECT t4.Id, t4.Company, t4.Salary FROM t4 WHERE rownum2 = ((odd_emp-1)/2)+1
WITH a AS ( SELECT ID, COMPANY, SALARY, (ROW_NUMBER() OVER (PARTITION BY COMPANY ORDER BY SALARY)) as r, (COUNT(ID) OVER (PARTITION BY COMPANY)) as total FROM EMPLOYEE), b AS ( SELECT id, COMPANY, salary FROM a WHERE (MOD(total, 2) = 0 AND total/2 = r) OR (MOD(total, 2) = 0 AND total/2+1 = r) OR (MOD(total, 2) = 1 AND (total+1)/2 = r) ) SELECT * FROM b ORDER BY Company
WITH cte AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY Company ORDER BY Salary, Id) AS ranking, COUNT(*) OVER (PARTITION BY Company) com_ttl FROM Employee ) SELECT Id, Company, Salary FROM cte WHERE ranking >= com_ttl / 2 AND ranking <= com_ttl / 2 + 1
WITH cte AS ( SELECT Id ,Company ,Salary ,ROW_NUMBER() OVER(PARTITION BY Company ORDER BY Salary) AS row_numbers FROM Employee ORDER BY Company, Salary ) SELECT c1.Id ,c1.Company ,c1.Salary FROM cte c1 INNER JOIN ( SELECT Company ,COUNT(Salary)/2 AS first_row_number ,COUNT(Salary)/2 + 1 AS second_row_number FROM Employee GROUP BY Company HAVING MOD(COUNT(Salary), 2) = 0 ) t1 ON c1.Company = t1.Company AND (c1.row_numbers = t1.first_row_number OR c1.row_numbers = t1.second_row_number) UNION ALL SELECT c2.Id ,c2.Company ,c2.Salary FROM cte c2 INNER JOIN ( SELECT Company ,(COUNT(Salary)+1)/2 AS median_row_number FROM Employee GROUP BY Company HAVING MOD(COUNT(Salary), 2) = 1 ) t2 ON c2.Company = t2.Company AND c2.row_numbers = t2.median_row_number ORDER BY Company, Salary
WITH cte AS ( SELECT Id, Company, Salary, ROW_NUMBER() OVER(PARTITION BY Company ORDER BY Salary) rno, COUNT(*) OVER(PARTITION BY Company) cnt FROM Employee ) SELECT Id, Company, Salary FROM cte WHERE rno IN (CEIL(cnt/2), cnt/2 + 1)
WITH cte AS ( SELECT company, id, salary, COUNT(*) OVER(PARTITION BY company) total, ROW_NUMBER() OVER(PARTITION BY company ORDER BY salary) num FROM employee ) SELECT id, company, salary FROM cte WHERE CASE WHEN total &amp; 1 = 1 THEN num = (total + 1)/2 ELSE num = total/2 OR num = total/2 + 1 END
WITH main as (SELECT Id, ROW_NUMBER() OVER (PARTITION BY Company ORDER BY Salary ASC) as num, Company, Salary FROM Employee), b2 as(SELECT COUNT(Salary) as counts, COUNT(Salary) DIV 2 as divNum, Company FROM Employee GROUP BY Company) SELECT main.Id, b2.Company, (CASE WHEN b2.counts%2=1 AND main.num = b2.divNum +1 THEN main.Salary WHEN (b2.counts%2=0) AND (main.num = b2.divNum+1 OR main.num = b2.divNum) THEN main.Salary END) as Salary FROM main LEFT JOIN b2 on main.Company = b2.Company HAVING Salary IS NOT NULL
WITH rk AS ( SELECT id, company, salary, ROW_NUMBER() OVER (PARTITION BY company ORDER BY salary ASC) AS rn FROM employee ), total AS ( SELECT company, MAX(rn) AS total_e FROM rk GROUP BY company ) SELECT DISTINCT r.id, r.company, r.salary FROM rk AS r JOIN total AS t ON r.company = t.company AND (r.rn = FLOOR((t.total_e + 1)/2) OR r.rn = CEIL((t.total_e + 1)/2) ) ORDER BY r.id
WITH salary_rank AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY Company ORDER BY Salary) as rowNum FROM Employee ), tot AS ( SELECT Company, COUNT(Id) as total FROM Employee GROUP BY Company ) SELECT Id, s.Company, Salary FROM salary_rank s INNER JOIN tot t on s.Company = t.Company WHERE rowNum BETWEEN t.total/2.0 AND t.total/2.0+1
WITH salary_ranked AS ( SELECT *, RANK() OVER (PARTITION BY company ORDER BY salary ASC) AS ra, RANK() OVER (PARTITION BY company ORDER BY salary DESC) AS rd, COUNT(*) OVER (PARTITION BY company) AS ct FROM employee ) SELECT DISTINCT FIRST_VALUE(id) OVER (PARTITION BY COMPANY, salary) AS id, company, salary FROM salary_ranked WHERE ra BETWEEN (rd - 1) AND (rd + 1) ORDER BY company, id
WITH t AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY Company ORDER BY Salary) AS number, COUNT(Salary) OVER (PARTITION BY Company) AS cnt FROM Employee ) SELECT Id, Company, Salary FROM t WHERE number BETWEEN cnt/2 AND cnt/2 + 1
WITH t AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY Company ORDER BY Salary) AS number, COUNT(Salary) OVER (PARTITION BY Company) AS cnt FROM Employee ) SELECT Id, Company, Salary FROM t WHERE number BETWEEN cnt/2.0 AND cnt/2.0 + 1
WITH t AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY Company ORDER BY Salary) AS rnk, COUNT(Id) OVER (PARTITION BY Company) AS cnt FROM Employee ) SELECT Id, Company, Salary FROM t WHERE rnk IN (CEIL(cnt / 2), cnt / 2 + 1)
WITH t AS ( SELECT Company, COUNT(*) AS cnt FROM Employee GROUP BY Company ) SELECT MIN(Id) AS Id, Company, Salary FROM Employee WHERE (Company, Salary) IN ( SELECT Company, Salary FROM ( SELECT e.Company, Salary, ROW_NUMBER() OVER(PARTITION BY Company ORDER BY Salary) AS r, cnt FROM Employee e INNER JOIN t ON e.Company = t.Company ) t WHERE (MOD(t.cnt, 2) = 0 AND (r = t.cnt / 2 OR r = t.cnt / 2 + 1)) OR (MOD(t.cnt, 2) = 1 AND (r = FLOOR(t.cnt / 2) + 1)) ) GROUP BY Company, Salary
WITH t AS ( SELECT Id, Company, Salary, ROW_NUMBER() OVER (PARTITION BY Company ORDER BY Salary) AS num FROM Employee ), t2 AS ( SELECT Id, Company, Salary, num, MAX(num) OVER (PARTITION BY Company) AS total FROM t ) SELECT Id, Company, Salary FROM t2 WHERE total%2=0 AND num IN (total/2, total/2+1) UNION ALL SELECT Id, Company, Salary FROM t2 WHERE total%2=1 AND num =(total+1)/2
WITH t AS (SELECT id, company, salary, ROW_NUMBER() OVER (PARTITION BY company ORDER BY salary) r FROM employee), u AS (SELECT id, company, salary, r, AVG(r) OVER (PARTITION BY company) mr FROM t) SELECT id, company, salary FROM u WHERE ABS(r-mr) <= 0.51
WITH t1 AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY Company ORDER BY Salary DESC, Id DESC) ranking, COUNT(*) OVER (PARTITION BY Company) com_ttl FROM Employee ) SELECT Id, Company, Salary FROM t1 WHERE ranking >= com_ttl/2 AND ranking <= com_ttl/2 + 1 ORDER BY 2,1
WITH t1 AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY Company ORDER BY Salary DESC, Id DESC) ranking, COUNT(*) OVER (PARTITION BY Company) com_ttl FROM Employee ) SELECT Id, Company, Salary FROM t1 WHERE ranking >= com_ttl/2 AND ranking <= com_ttl/2 + 1 ORDER BY company,id
WITH t1 as (SELECT *, rank() OVER(Partition By Company ORDER By Salary) rk, count(salary) OVER(Partition By Company) cn FROM Employee) SELECT Id, Company, max(Salary) Salary FROM t1 WHERE (CASE WHEN mod(cn,2) = 0 THEN rk = (cn/2 + 1) or rk = cn/2 WHEN mod(cn,2) =1 THEN rk = (cn+1)/2 END) GROUP BY Company, salary ORDER BY Company, id
WITH t1 as( SELECT *, ROW_NUMBER() over(PARTITION BY Company ORDER BY Salary) AS row_num, COUNT(Id) over(PARTITION BY Company) AS cnt FROM Employee ) SELECT Id, Company, Salary FROM t1 WHERE row_num between cnt/2.0 and cnt/2.0+1
WITH table1 AS (SELECT *, ROW_NUMBER() OVER (PARTITION BY Company ORDER BY Salary, Id) AS num, ROW_NUMBER() OVER (PARTITION BY Company ORDER BY Salary DESC, Id DESC) AS reverse_num FROM Employee) SELECT Id, Company, Salary FROM table1 WHERE reverse_num = num UNION ALL SELECT Id, Company, Salary FROM table1 WHERE reverse_num = num + 1 OR reverse_num = num - 1 ORDER BY Company, Id
WITH tbl AS( SELECT Company, count(*) as Numbers FROM Employee GROUP BY Company ) SELECT Id, Company, Salary FROM ( SELECT Id, Employee.Company as Company, Salary, row_number() OVER(PARTITION BY Company ORDER BY Salary) as Salary_rank, Numbers FROM Employee LEFT JOIN tbl ON Employee.Company = tbl.Company) BASE WHERE Salary_rank between Numbers/2 and Numbers/2+1
WITH temp AS ( SELECT *, COUNT(Id) OVER(PARTITION BY Company) AS cnt, RANK() OVER(PARTITION BY Company ORDER BY Salary ASC, Id ASC) AS rnk FROM Employee ) SELECT Id, Company, Salary FROM temp WHERE MOD(cnt, 2) = 1 AND rnk = (cnt DIV 2) + 1 UNION ALL SELECT Id, Company, Salary FROM temp WHERE MOD(cnt, 2) = 0 AND (rnk = (cnt DIV 2) OR rnk = (cnt DIV 2) + 1)
WITH temp as (SELECT Id, Company, Salary, count(*) over (partition by company) as cnt, row_number() over(partition by company order by salary) as rn FROM Employee) SELECT Id, Company, Salary FROM temp WHERE rn between cnt/2 and cnt/2+1 ORDER BY Id
With cte as( Select *, row_number() Over ( Partition by Company Order by Salary) 'Ranknum', Count(Id) Over ( Partition by Company ) cn From Employee) Select Id, Company, Salary From cte Where Ranknum Between (cn/2) and (cn/2 +1)
With cte2 as (With cte1 as (select e1.id, e1.Company, e1.Salary, row_number() over (partition by e1.company order by e1.Salary, e1.id) as rnk from Employee e1 group by e1.id, e1.Company, e1.Salary) Select *, count(rnk) over (partition by Company) as Total_emp from cte1) Select Id, Company, round(Avg(Salary),0) as Salary from cte2 where rnk in (Total_emp/2, (Total_emp/2)+ 0.5, (Total_emp/2) + 1) group by Id, Company
With temp As (Select count(*) as total_id From Employee), rank_proxy As (Select Id, Company, Salary, Salary*(Select total_id From temp)+Id as rank_proxy From Employee), median As (Select Company, (Case When Count(*)% 2 = 0 Then Count(*)/2 Else (Count(*)+1)/2 End) As start_point, (Case When Count(*)% 2 = 0 Then Count(*)/2+1 Else (Count(*)+1)/2 End) As end_point From Employee Group By Company), rownum As (Select a.Id, a.Company, a.Salary, Count(b.Id) as rownum From rank_proxy a, rank_proxy b Where a.Company = b.Company And a.rank_proxy >= b.rank_proxy Group By a.Id) Select Id, Company, Salary From rownum Where (Company, rownum) in ( Select Company, start_point From median) Or (Company, rownum) in ( Select Company, end_point From median)
select * from employee where id in( select e1.id from employee e1 join employee e2 on e1.company=e2.company group by e1.id having sum(case when e1.salary>=e2.salary then 1 else 0 end)>=count(*)/2 and sum(case when e1.salary<=e2.salary then 1 else 0 end)>=count(*)/2 ) group by company,salary order by company
select ID, Company, Salary from (select *, row_number()over(partition by Company order by Salary, ID) as asce, row_number()over(partition by Company order by Salary desc, ID desc) as desce from Employee)cte where asce between desce - 1 and desce + 1 order by 2, 3
select Id , Company , Salary from( select * , row_number() over (partition by company order by salary) as row_num , count(*) over (partition by company) employee_count from Employee ) employee_with_row_number where row_num = floor((employee_count + 1) / 2) or row_num = floor((employee_count + 2) / 2)
select Id, Company, Salary from ( SELECT *, ROW_NUMBER() OVER (PARTITION BY Company ORDER BY Salary, Id) AS order_company, count(ID) OVER (PARTITION BY Company) AS count_company FROM Employee ) a where order_company between floor((count_company+1)/2.0) and ceil((count_company+1)/2.0)
select Id, Company, Salary from ( select *, row_number() over (partition by Company order by Salary) as rowNum, count(*) over (partition by Company) as compCount from Employee ) as counted where rowNum between compCount/2 and compCount/2+1
select Id, Company, Salary from ( select *, row_number() over( partition by Company order by salary asc, Id asc) as rn_asc, row_number() over( partition by Company order by Salary desc, Id desc) as rn_desc from Employee) as temp where rn_asc between rn_desc - 1 and rn_desc + 1 order by Company, Salary
select Id, Company, Salary from ( select Id, Company, Salary, case when row_number() over (partition by Company order by Salary) = round((count(Id) over (partition by Company))/2) then 1 when (count(Id) over (partition by Company))%2 = 0 and row_number() over (partition by Company order by Salary) = round((count(Id) over (partition by Company))/2) + 1 then 1 else 0 end as flag from Employee )a where flag = 1 order by Company, Salary
select Id, Company, Salary from ( select Id, Company, Salary, row_number() over(partition by Company order by Salary) rn, (count(*) over(partition by Company)+1)*0.5 as half from Employee ) temp where rn in (floor(half), ceiling(half))
select Id, Company, Salary from ( select Id, Company, Salary,rnk,max(rnk) over (partition by Company) as max_rnk from ( select Id, Company, Salary, row_number() over(partition by Company order by Salary) as rnk from Employee )TBL)TBL2 where rnk = max_rnk/2 or rnk = max_rnk/2+1 or rnk = floor((max_rnk+1)/2)
select Id, Company, Salary from (select *, rank() over (partition by Company order by Salary) as 'Rank1', count(*) over (partition by Company) as 'Subtotal'from Employee) t1 where Rank1= floor((Subtotal+1)/2) or Rank1= floor ((Subtotal+2)/2) group by Company, Salary
select Id, Company, Salary from (select *, row_number() over (partition by Company order by Salary desc, Id desc) rn_desc, row_number() over (partition by Company order by Salary asc, Id asc) rn_asc from Employee ) temp where RN_ASC BETWEEN RN_DESC - 1 AND RN_DESC + 1
select Id, Company, Salary from (select *, row_number() over (partition by Company order by Salary) as rowNum, count(*) over (partition by Company) as compCount from Employee) as counted where rowNum between compCount/2 and compCount/2+1
select Id, Company, Salary from (select *, row_number() over (partition by Company order by Salary) as row_num, count(Salary) over (partition by Company) as total_row from Employee) t where row_num in (ceil(total_row / 2), floor(total_row / 2 + 1))
select Id, Company, Salary from (select *, row_number() over (partition by Company order by Salary,id) as rowNum, count(*) over (partition by Company) as compCount from Employee) as counted where rowNum between compCount/2 and compCount/2+1
select Id, Company, Salary from (select *, row_number() over(partition by Company order by Salary) as rk, count(*) over(partition by Company order by Salary rows between unbounded preceding and UNBOUNDED FOLLOWING) as ct from Employee order by Company, Salary) as t where rk <= (1+ct)/2 + 0.5 and rk >= (1+ct)/2 - 0.5
select Id, Company, Salary from (select *, row_number() over(partition by Company order by Salary) as sa_rank, count(1) over(partition by Company) as em_count from Employee) new_rank where sa_rank between em_count/2 and em_count/2+1
select Id, Company, Salary from (select *, row_number() over(partition by Company order by Salary) ss, count(*) over(partition by Company) numId from Employee)p1 where ss >= numId/2 and ss <= numId/2+1
select Id, Company, Salary from (select *, row_number() over(partition by Company order by Salary, Id) as rn_asc, row_number() over(partition by Company order by Salary desc, Id desc) as rn_desc from Employee) as temp where rn_asc between rn_desc - 1 and rn_desc + 1 order by Company, Salary
select Id, Company, Salary from (select *, row_number() over(partition by company order by salary asc, Id asc) as rn_asc, row_number() over(partition by company order by salary desc, Id desc) as rn_desc from Employee ) as temp where rn_asc between rn_desc-1 and rn_desc+1 order by Company, Salary
select Id, Company, Salary from (select Id, Company, Salary, row_number() over (partition by Company order by Salary) as salary_rank, count(Id) over (partition by Company) as total_number from Employee) as New where (case when total_number%2 != 0 then salary_rank = (total_number+1)/2 else salary_rank = total_number/2 or salary_rank = total_number/2+1 end)
select Id, Company, Salary from (select Id, Company, Salary, row_number() over (partition by Company order by Salary,id) as rk, count(Id) over (partition by Company) as cnt from Employee) as cnt where rk between cnt/2 and cnt/2+1
select Id, Company, Salary from (select Id, Company, Salary, row_number() over(partition by Company order by Salary asc) as rn, count(*) over(partition by Company)/2 as pos from Employee)s where rn - pos between 0 and 1 order by 2,3
select Id, Company, Salary from (select Id, Company, Salary, row_number() over(partition by Company order by Salary) as rnk, count(*) over(partition by Company) as Cnt from Employee) a where rnk between (Cnt/2) and Cnt/2+1
select Id, Company, Salary from (select Id, company, Salary, row_number() over(partition by Company order by Salary) as rk, count(*) over(partition by Company) as cnt from Employee )k where rk >= cnt/2 and rk <= (cnt/2)+1
select Id, Company, Salary from (select distinct *, row_number() OVER (Partition by Company Order by Salary) as row_index, count(Id) OVER (Partition by Company) as ct from Employee ) a where row_index between ct/2 and ct/2 + 1
select Id, Company, Salary from (select id, company, salary, row_number() over(partition by company order by salary) as salaryrank, count(*) over(partition by company) tte from employee) as foo where salaryrank >= tte/2 and salaryrank <= tte/2+1
select Id, Company, avg(Salary) as Salary from (select Id, Company, Salary, row_number() over (partition by Company order by Salary asc) as salary_rank, count(Id) over (partition by Company) as total from Employee) t1 where (t1.salary_rank * 2 -1 = t1.total and t1.total % 2 = 1) or (t1.salary_rank * 2 = t1.total and t1.total % 2 = 0) or (t1.salary_rank * 2 -2 = t1.total and t1.total % 2 = 0) group by Id, Company
select Id,Company,Salary from ( select *, row_number() over (partition by company order by salary) as ranking, count(company) over (partition by Company) as total_num from Employee order by company, Salary ) as temp where ( case when mod(total_num,2)=1 then ranking = (1+total_num)/2 else ranking in (total_num/2, total_num/2+1) end)
select Id,Company,Salary from ( select *, row_number() over(partition by Company order by Salary) as rnum, count(*) over(partition by Company) as Employee_Count_per_Company from Employee ) sq1 where rnum between Employee_Count_per_Company/2 and Employee_Count_per_Company/2+1
select Id,Company,Salary from (select Id,Company,Salary, rank() over(partition by Company order by Salary, Id) as rnk_asc, rank() over(partition by Company order by Salary desc, Id DESC) as rnk_desc from Employee) temp where abs(cast(rnk_asc as signed) - cast(rnk_desc as signed)) between 0 and 1
select Id,Company,Salary from (select Id,Company,Salary,row_number() over(partition by Company order by salary) as ordered, count(id) over (partition by Company) as ter from employee ) as T where ordered in (floor((ter+1)/2),ceil((ter+1)/2))
select Id,Company,Salary from( select Id,Company,Salary,row_number() over(partition by Company order by Salary) as n,count(*) over(partition by company) as total from Employee) as tmp where n between total/2 and total/2+1
select a.Id,a.company,a.Salary from (select Id,company,salary,row_number() over(partition by Company order by salary) as rn, count(id) over(partition by Company) as cnt from Employee) a where (a.rn=(case when mod(a.cnt,2)=1 then ceiling(a.cnt/2) else ceiling((a.cnt+1)/2) end)) or (a.rn=(case when mod(a.cnt,2)=0 then ((a.cnt)/2) end))
select a.id, a.company, a.salary from ( select Id, company, salary, DENSE_RANK() over (partition by company order by salary, id) as sorts, count(*) over (partition by company) as Counts from Employee ) a where sorts between counts/2 and (counts/2)+1
select a.id, a.company, a.salary from ( select id, company, salary, row_number() over (partition by company order by salary) as ranks, count(id) over (partition by company) as cnt from employee) a where ranks >= cnt/2 and ranks <= cnt/2+1
select a.id,a.company,a.salary from ( select id,company,salary, row_number() over(partition by company order by salary) rownum, count(*) over (partition by Company) as compCount from employee ) a where a.rownum between a.compCount/2 and a.compCount/2+1
select b.Id, b.Company, b.Salary from (select Company, round(count(Salary)/2) as poi from Employee group by Company ) as a join (select *, row_number() over(partition by Company order by Salary, Id) as salary_row, row_number() over(partition by Company order by Salary desc, Id desc) as salary_row_desc from Employee ) as b on a.Company = b.Company where (a.poi = b.salary_row) or (a.poi = b.salary_row_desc and b.salary_row_desc!=b.salary_row)
select computer.id,computer.company,computer.Salary from employee emp inner join ( select id,company, Salary,count(id) over (partition by company) as Cnt, row_number() over (partition by company order by Salary) as Rnk from Employee ) computer on emp.company=computer.company and ( (mod(Cnt,2)=0 and (computer.Rnk=floor(Cnt/2))) or(mod(Cnt,2)=0 and (computer.Rnk=ceil((Cnt+1)/2))) or(mod(Cnt,2)=1 and (computer.Rnk=ceil(Cnt/2))) ) and emp.id=computer.id
select distinct id, company, salary from (select a.*, (case when ct%2!=0 then round(ct/2) else round(ct/2)+1 end) as ctt, case when ct%2=0 then round(ct/2) end as cttt from (select id, company, salary, row_number() OVER (partition by company ORDER BY salary) as med, count(*) over (partition by company) as ct from employee) a )b where b.med=b.ctt or b.med=b.cttt
select e.Id,e.Company,e.Salary from Employee e inner join Employee e2 on e.Company=e2.Company group by e.Id having abs(sum(case when e.salary>e2.salary then 1 when e.salary<e2.salary then -1 when e.salary=e2.salary and e.Id>e2.Id then 1 when e.salary=e2.salary and e.Id<e2.Id then -1 else 0 end )) <=1
select id as 'Id', company as 'Company', salary as 'Salary' from ( select id, company, salary, row_number() over(partition by company order by salary, id) as 'rk1', row_number() over(partition by company order by salary desc, id desc) as 'rk2' from employee) as A where rk1 = rk2 or abs(cast(rk1 as decimal) - cast(rk2 as decimal)) = 1 order by company,salary
select id, Company, Salary from (select id, Company, Salary, row_number() over(partition by Company order by Salary) as rn, count(Company) over(partition by Company) as cnt from Employee ) a where rn between cnt/2 and cnt/2+1
select id, company, Salary from ( select id, company, Salary, row_number() over(partition by company order by Salary) as row_num, count(*) over(partition by company) as c from Employee ) temp where row_num in (floor(c / 2)+1, ceil(c / 2))
select id, company, salary from ( select id, company, salary, ranked, max(ranked) over(partition by company order by company) as max_rank from ( select id, company, salary, row_number() over(partition by company order by salary) as ranked from employee ) f ) f where if(mod(max_rank, 2) = 0, ranked = max_rank / 2 or ranked - 1 = max_rank / 2, ranked = ceiling(max_rank / 2))
select id, company, salary from ( select id, company, salary, ranked, max(ranked) over(partition by company order by company) as max_rank from ( select id, company, salary, row_number() over(partition by company order by salary) as ranked from employee ) f ) f where if(mod(max_rank, 2) = 0, ranked = max_rank / 2 or ranked = max_rank / 2 + 1, ranked = (max_rank+1) / 2)
select id, company, salary from ( select id, company, salary, row_number() over (partition by company order by salary asc, id asc) as salary_rank_asc, row_number() over (partition by company order by salary desc, id desc) as salary_rank_desc from employee order by company asc, salary asc ) t where salary_rank_asc between salary_rank_desc - 1 and salary_rank_desc + 1 order by company asc, salary asc
select id, company, salary from ( select id, company, salary, row_number() over (partition by company order by salary) as rnum, count(*) over (partition by company) as num from employee ) as tmp where rnum between num/2 and num/2+1
select id, company, salary from ( select id, company, salary, row_number() over(partition by company order by salary) as ranking, count(1) over(partition by company) as cnt from Employee) a where ranking in (ceil(cnt/2), cnt/2+1)
select id, company, salary from (select *, ROW_NUMBER() over(Partition by company order by salary, id) as rn_asc, ROW_NUMBER() over(Partition by company order by salary desc, id desc) as rn_desc from employee) t where rn_asc between (rn_desc-1) and (rn_desc+1) order by id, company
select id, company, salary from (select *, row_number() over(partition by company order by salary) as r, count(1) over(partition by company) n from employee) t where r between n/2 and (n/2+1)
select id, company, salary from (select id, company, salary, rank() over (partition by company order by salary, id) as increaserank, rank() over (partition by company order by salary desc, id desc) as decreaserank from employee) as temp where temp.increaserank = temp.decreaserank OR temp.increaserank +1 = temp.decreaserank OR temp.increaserank-1 = temp.decreaserank
select id, company, salary from (select id, company, salary, row_number() over(partition by company order by salary) as rnb, count(*) over(partition by company) as cnt from employee) a where rnb between cnt/2 and cnt/2+1
select id, company, salary from (select id, company, salary, row_number() over(partition by company order by salary, id) as rnk, count(id) over(partition by company) as cnt from Employee) as tab where rnk between cnt/2.0 and cnt/2.0 + 1
select id, company, salary from (select id, company, salary, row_number()over(partition by company order by salary, id) asc_rn , row_number()over(partition by company order by salary desc, id desc ) desc_rn from employee ) a where asc_rn = desc_rn or asc_rn=desc_rn-1 or asc_rn=desc_rn+1
select id, company, salary from Employee where id in ( select distinct id from ( select t1.id, abs(sum(case when t1.salary > t2.salary then 1 when t1.salary < t2.salary then -1 when t1.salary = t2.salary and t1.id > t2.id then 1 when t1.salary = t2.salary and t1.id < t2.id then -1 else 0 end)) as score from Employee t1 join Employee t2 on t1.company = t2.company group by t1.id having score <= 1 )t )
select id, company, salary from Employee where id in ( select t1.id from Employee t1 join Employee t2 on t1.company=t2.company group by t1.id having abs(sum(case when t1.salary > t2.salary then 1 when t1.salary < t2.salary then -1 when t1.salary = t2.salary and t1.id < t2.id then -1 when t1.salary = t2.salary and t1.id > t2.id then 1 else 0 end)) <= 1 )
select id, company, salary from( select id, company, salary, row_number() over (partition by company order by salary) as rk, count(id) over(partition by company) as cnt from employee )a where rk between cnt/2.0 and cnt/2.0 +1
select id,company, salary from (select id, company, salary,row_number() over(partition by company order by Salary asc) ranks, count(company) over(partition by company) num from employee) a where ranks in (ceil(num/2),num/2+1) order by company, salary
select min(e1.id) as id, e1.company, e1.Salary from employee e1, employee e2 where e1.company = e2.company group by e1.company, e1.salary having sum(e2.salary >= e1.salary) >= count(*)/2 and sum(e2.salary <= e1.salary) >= count(*)/2
select min(e1.id) as id, e1.company, e1.salary from employee e1 join employee e2 on e1.company = e2.company group by e1.company, e1.salary having sum(case when e1.salary <= e2.salary then 1 else 0 end) >= count(e2.id)/2 and sum(case when e1.salary >= e2.salary then 1 else 0 end) >= count(e2.id)/2
select min(t.id) as id, t.company,t.salary from (select distinct b.id, b.company, b.salary, count(*) as ranking from employee as a join employee as b on a.company = b.company and a.salary >= b.salary group by b.id, b.company, b.salary order by b.company, b.salary asc) as t join (select company, count(*) as group_n from employee group by company) as c on t.company = c.company where t.ranking between c.group_n/2 and c.group_n/2+1 group by t.company, t.salary
select t.id as id, t.company,t.salary from (select distinct b.id, b.company, b.salary, count(if(a.salary<b.salary or a.id<b.id, 1, NULL))+1 as ranking from employee as a join employee as b on a.company = b.company and (a.salary <= b.salary ) group by b.id, b.company, b.salary order by b.company, b.salary asc) as t join (select company, count(*) as group_n from employee group by company) as c on t.company = c.company where t.ranking between c.group_n/2 and c.group_n/2+1
select t.id as id, t.company,t.salary from (select distinct b.id, b.company, b.salary, sum(if(a.salary<b.salary or a.id<b.id, 1, 0))+1 as ranking from employee as a join employee as b on a.company = b.company and (a.salary <= b.salary ) group by b.id, b.company, b.salary order by b.company, b.salary asc) as t join (select company, count(*) as group_n from employee group by company) as c on t.company = c.company where t.ranking between c.group_n/2 and c.group_n/2+1
select t1.Id as Id, t1.Company, t1.Salary from Employee as t1 inner join Employee as t2 on t1.Company = t2.Company group by t1.Id having abs(sum(CASE when t2.Salary<t1.Salary then 1 when t2.Salary>t1.Salary then -1 when t2.Salary=t1.Salary and t2.Id<t1.Id then 1 when t2.Salary=t1.Salary and t2.Id>t1.Id then -1 else 0 end)) <= 1 order by t1.Company, t1.Salary, t1.Id
select t1.Id, t1.Company, t1.Salary from (select *, dense_rank() over (partition by Company order by Salary, Id) as Sort, count(1) over (partition by Company) / 2.0 as Counts from Employee ) t1 where Sort between Counts and Counts + 1
select t1.Id, t1.Company, t1.Salary from (select *, row_number() over (partition by Company order by Salary) as Sort, count(1) over (partition by Company) / 2.0 as Counts from Employee ) t1 where Sort between Counts and Counts + 1
select t1.Id, t1.Company, t1.Salary from (select Id, Company, Salary, dense_rank() over (partition by Company order by Salary, Id) as Sort, count(1) over (partition by Company) / 2.0 as Counts from Employee ) t1 where Sort between Counts and Counts + 1
select t1.Id, t1.Company, t1.Salary from (select e.Id, e.Company, e.Salary, if(@comp_name=e.Company, @rank:=@rank+1, @rank:=1) as sal_rank, @comp_name := e.Company as comp_name from (select @comp_name:='A', @rank:=0) as var, Employee as e order by Company, Salary) as t1 left join (select Company, count(Id) as empl_num from Employee group by Company) as t2 on t1.Company = t2.Company where t1.sal_rank in (t2.empl_num/2, t2.empl_num/2+0.5, t2.empl_num/2+1)
select u.Id, u.company, u.salary from ( select *,(case when t.ct%2=0 and (t.rk = t.ct/2 or t.rk= t.ct/2 +1 ) then 1 when t.ct%2=1 and t.rk = (t.ct+1)/2 then 1 else 0 end) as flag from ( select *, row_number() over( partition by company order by salary)as rk, count(id) over(partition by company)as ct from employee) t ) u where u.flag=1
with Employee_RN as ( select Id, Company, Salary, rank() over (partition by Company order by Salary asc) as R, count(Id) over (partition by Company) as N from Employee e ), meds as ( select Id, Company, Salary from Employee_RN where R <= (1.0*N+1)/2+0.5 and R >= (1.0*N+1)/2-0.5) select min(Id) as Id, Company, Salary from meds group by Company, Salary
with a as (select id, company, salary, rank() over(partition by company order by salary asc, id asc) as 'ranked', count(*) over(partition by company) as counted from employee) select id, company, salary from a where case when mod(counted,2) = 0 then ranked = floor((counted+1)/2) or ranked = ceil((counted+1)/2) when mod(counted,2)=1 then ranked= ceil((counted+1)/2) end
with a as (select id, company, salary, row_number() over(partition by company order by salary desc, id desc) as 'rank' from employee) , b as (select company, count(a.rank) as 'count' from a group by 1) , c as (select company, round(if(b.count%2=0, b.count/2, (b.count+1)/2),0) as 'count' from b group by 1 union select company, round(if(b.count%2=0, b.count/2+1, (b.count+1)/2),0) as 'count' from b group by 1 order by 1) select a.id, a.company, a.salary from a join c where a.company = c.company and a.rank = c.count order by 2, 3
with agg as (select id, Company, Salary, row_number() over(partition by Company order by Salary) as row_, (count(1) over(partition by Company))/2 as mid from Employee order by Salary) select id as Id, Company, Salary from agg where row_ between mid and mid+1
with agg as (select id, Company, Salary, row_number() over(partition by Company order by Salary) as row_, (count(1) over(partition by Company))/2 as mid from Employee order by Salary) select id as Id, Company, Salary from agg where row_ between mid and mid+1 UNION select id as Id, Company, Salary from agg where row_= mid
with base as ( select *, rank() over(partition by company order by salary asc) sortloc from employee ), max as( select *, max(sortloc) over(partition by company) max from base) select min(id) Id, Company, Salary from max where sortloc in (max-ceil(max/2 - 1), 1 + ceil(max/2 -1 )) group by company,salary
with base as ( select id, company, salary, row_number() over (partition by company order by Salary,id) as com_rnk, row_number() over (partition by company order by salary desc, id desc) as com_rnk_rev from Employee ) select id, company, salary from base where base.com_rnk_rev = base.com_rnk union all select id, company, salary from base where base.com_rnk_rev = base.com_rnk + 1 or base.com_rnk_rev = base.com_rnk - 1 order by company, id
with c as (select Id, Company, Salary, row_number() over(partition by company order by salary) rno, count(Id) over(partition by company) cnt from employee ) select Id, company, salary from c where rno = (cnt + 1)/2 or rno = cnt/2 or rno = cnt/2+1
with c as (select id, company, salary, row_number() over(partition by company order by salary) rno, count(*) over(partition by company) cnt from employee ) select c.id, c.company, c.salary from c where c.rno in (ceil(c.cnt/2), c.cnt/2+1)
with cnt as( select Company,count(Id) as c from Employee group by Company ), m as ( select Company, case when c%2 = 1 then 0 else -1 end as n, floor(c/2)+1 as md from cnt ) select Id,e.Company, salary from (select Id,company,salary, row_number()over(partition by company order by salary,Id) as rnk from employee) as e join m on e.Company = m.Company where rnk between md+n and md order by e.company,salary
with comp_count as (select distinct company, count(*) as cnt from employee group by company), rank_comp as ( select id, company, salary, rank() over (partition by company order by salary,id ) as drank from employee ) select r.id, r.company, r.salary from rank_comp r left join comp_count c on r.company = c.company where r.drank >= round(c.cnt/2,2) and r.drank <= round((c.cnt/2) +1,1)
with company_rnk as ( select Id, Company, Salary, row_number() over (partition by Company order by Salary) as rnk, count(* ) over (partition by Company) as cnt from Employee) select Id, Company, Salary from company_rnk where rnk in (ceil(cnt/2), cnt/2+1)
with cte as ( Select *, Row_Number() Over(Partition By Company Order By Salary) as r, Count(Id) Over(Partition By Company) as c From Employee ) Select Id, Company, Salary From cte Where r Between c/2 and c/2+1
with cte as ( select *, row_number() over (partition by Company order by Salary) as rk, count(Id) over (partition by Company) as num from Employee ) select Id, Company, Salary from cte where rk between num/2 and num/2 +1
with cte as ( select Id , Company , Salary , row_number() over (partition by Company order by Salary) as Salary_rk , count(*) over (partition by Company) as total_rk from Employee) select Id , Company , Salary from cte where total_rk%2=0 and (Salary_rk=total_rk/2 or Salary_rk=total_rk/2+1) or (total_rk%2=1 and Salary_rk=(total_rk+1)/2 ) order by 2,1
with cte as ( select Id, Company, row_number() over(partition by Company order by Salary asc) as rnk, Salary from Employee ), cte1 as ( select Company, max(rnk) as max_rnk from cte group by Company ), cte2 as ( select Company, ceil(max_rnk/2) as idx from cte1 union select Company, floor(max_rnk/2)+1 as idx from cte1 ) select Id, e.Company, Salary from cte e right join cte2 on e.Company = cte2.Company and e.rnk = cte2.idx order by Company asc, Salary asc
with cte as ( select Id,Company,Salary,row_number() over (partition by company order by salary,id) as rn1,row_number() over (partition by company order by salary desc,id desc) as rn2 from Employee ) select id,company,salary from cte where rn1+1 = rn2 or rn1-1 = rn2 union all select id,company,salary from cte where rn1 = rn2
with cte as ( select company, count(id) total from employee group by company ), dte as ( select id, company, salary, total from employee natural join cte ) select id, company, salary from (select id, company, row_number() over(partition by company order by salary) rk, salary,total from dte ) r1 where rk between total/2 and total/2+1
with cte as ( select id, Company ,Salary ,row_number() over (partition by Company order by Salary) as rn from Employee ) , cte2 as ( select Company, count(*) as totr from cte group by Company ) select cte.id, cte.Company, cte.Salary from cte inner join cte2 on cte.Company = cte2.Company where ( floor(totr/2)+1 = rn ) OR ( (totr%2 = 0) and ( floor(totr/2) = rn ) )
with cte as ( select id, company, salary, row_number() over(partition by company order by Salary asc) as rownum , count(id) over(partition by company) ct from employee) select Id, Company, Salary from cte where rownum between ct/2.0 and ct/2.0 + 1
with cte as ( select id,company,salary,count(salary) as freq from employee group by company,salary ) select a.id,a.company,a.salary from cte a where a.freq >= abs((select sum(freq) from cte where a.salary >= cte.salary and a.company = cte.company) - (select sum(freq) from cte where a.salary <= cte.salary and a.company = cte.company))
with cte as (SELECT *, dense_rank() OVER(PARTITION BY COMPANY ORDER BY Salary ASC, Id ASC) AS RN_ASC, dense_rank() OVER(PARTITION BY COMPANY ORDER BY Salary DESC, Id DESC) AS RN_DESC from Employee) SELECT Id, Company, Salary FROM cte where abs(CAST( RN_ASC AS SIGNED ) - CAST( RN_DESC AS SIGNED )) <=1 ORDER BY Company, Salary
with cte as (select *, rank() over (partition by Company order by Salary) as 'Rank1', count(*) over (partition by Company) as 'Subtotal' from Employee) select Id, Company, Salary from cte where Rank1= floor((Subtotal+1)/2) or Rank1= floor ((Subtotal+2)/2) group by Company, Salary
with cte as (select Id, Company, Salary, count(*) as freq from Employee group by 2, 3) select Id, Company, Salary from cte a where freq >= abs((select sum(freq) from cte where a.Salary >= cte.Salary and a.Company = cte.Company) - (select sum(freq) from cte where a.Salary <= cte.Salary and a.Company = cte.Company))
with cte as (select Id, Company, Salary, row_number() over(partition by Company order by Salary asc,id asc) Rasc, row_number() over(partition by Company order by Salary desc,id desc) Rdesc from Employee) select Id, Company,Salary from cte where Rasc between Rdesc-1 and Rdesc+1 order by Company,Salary
with cte as (select id,company,salary, row_number() over(partition by company order by salary )as row1 from employee), cte1 as ((select company, if(mod(max(row1),2)=0, max(row1)/2, (max(row1)+1)/2)as row1 from cte group by 1) union (select company, if(mod(max(row1),2)=0, max(row1)/2+1, (max(row1)+1)/2)as row1 from cte group by 1)) select id,cte.company,salary from cte join cte1 using (row1,company)
with cte as (select id,company,salary,row_number() over(partition by company order by salary) as row_num,count(*) over(partition by company) as cnt from employee) select id,company,salary from cte where row_num between cnt/2 and (cnt+2)/2
with cte as( select Id, Company, Salary, row_number()over(partition by Company order by Salary desc, Id desc) as rnk_desc, row_number()over(partition by Company order by Salary asc, Id asc) as rnk_asc From Employee ) select Id, Company,Salary From cte where rnk_asc between rnk_desc-1 and rnk_desc+1 group by Id, Company
with cte as( select Id, Company, salary, rank() over (partition by company order by salary asc, id asc) as ranked from Employee e ), med_rank as( select Company, (max(ranked)+min(ranked))/2 as med from cte group by Company ) select cte.Id, cte.Company, cte.Salary from cte left join med_rank on cte.Company = med_rank.Company where cte.ranked in (floor(med_rank.med), ceil(med_rank.med))
with cte as( select id, company, salary, rank() over (partition by company order by salary asc, id asc) as ranked, count(*) over(partition by company) as counted from employee ) select id, company, salary from cte where case when mod(counted,2)=0 then ranked = floor((counted+1)/2) or ranked = ceil((counted+1)/2) when mod(counted,2)=1 then ranked= ceil((counted+1)/2) end
with cte1 as (select id, company, salary, row_number() over (partition by company order by salary asc) as rn from employee order by company asc, salary asc), cte2 as (select id, company, salary, rn, min(rn) over (partition by company) as 'min_rn', max(rn) over (partition by company) as 'max_rn' from cte1) select id, company, salary from cte2 where rn = floor((min_rn + max_rn) / 2) or rn = ceil((min_rn + max_rn) / 2)
with cte1 as (select id, company, salary, row_number() over (partition by company order by salary asc) as rn from employee order by company asc, salary asc), cte2 as (select id, company, salary, rn, min(rn) over (partition by company) as 'min_rn', max(rn) over (partition by company) as 'max_rn' from cte1) select id, company, salary from cte2 where rn in (floor((min_rn + max_rn) / 2), ceil((min_rn + max_rn) / 2))
with cte_a as ( select Id, Company, Salary, row_number() over ( partition by Company Order by Salary ) sal_rank from employee ), cte_b as ( select ceil(round(count(Id)/2,1)) upper_median, floor(round(count(Id)/2,1)) lower_median, Company from employee Group By Company ) select a.id, a.Company, a.Salary from cte_a a, cte_b b where a.Company = b.Company and ((b.upper_median = b.lower_median) and a.sal_rank in (b.upper_median,b.upper_median+1) or (b.upper_median <> b.lower_median) and a.sal_rank = b.upper_median)
with cte_rnk as ( select *, ROW_NUMBER() over (partition by Company order by Salary, Id) as rnk from Employee ), cte_n as ( select Company, count(Id) as n from Employee group by Company ) select r.Id, r.Company, r.Salary from cte_rnk as r join cte_n as n on r.Company = n.Company where 2 * r.rnk = n.n or 2 * r.rnk - 1 = n.n or 2 * r.rnk - 2 = n.n
with cte_rnk as ( select e1.Id, min(e1.Salary) as Salary, min(e1.Company) as Company, count(e2.Id) as rnk from Employee as e1 join Employee as e2 on e1.Company = e2.Company and ( e1.Salary > e2.Salary or (e1.Salary = e2.Salary and e1.Id >= e2.Id) ) group by e1.Id ), cte_n as ( select Company, count(Id) as n from Employee group by Company ) select r.Id, r.Company, r.Salary from cte_rnk as r join cte_n as n on r.Company = n.Company where 2 * r.rnk = n.n or 2 * r.rnk - 1 = n.n or 2 * r.rnk - 2 = n.n
with emp as ( select * , row_number() over (partition by company order by Salary asc, id asc) as RN from employee ) select emp.Id, emp.Company, emp.Salary from emp join ( select Company , count(*) div 2 as middle , case when count(*) % 2 = 0 then 'Even' else 'Odd' end as EvenOdd from Employee group by Company ) e on emp.Company = e.company and ( ( e.EvenOdd = 'Even' and emp.RN in (e.middle, e.middle+1) ) or ( e.EvenOdd = 'Odd' and emp.RN = e.middle+1 ) ) order by emp.Id, emp.Company, emp.Salary
with employee_rn as (select Id, Company , Salary , row_number() over (partition by Company order by Salary) as rn , count(*) over (partition by Company) as count_emp from Employee ) select Id, Company , Salary from employee_rn where rn between count_emp/2 and count_emp/2 +1
with med as( select Id,Company,Salary,row_number() over(partition by company order by salary asc) rk, count(salary) over(partition by company) cnt from employee), med_f as( select Id,Company,Salary, case when cnt = (rk-1)*2 then 1 when cnt = rk*2 - 1 then 1 when cnt = (rk)*2 then 1 else 0 end med_lb from med) select Id,Company,Salary from med_f where med_lb =1
with num_ees as ( select company, count(*) "cnt" from employee group by 1 ), ordered_ees as ( select id, company, salary, rank() over (partition by company order by salary, id) "sal_rank" from employee group by 1, 2, 3 ) select distinct o.id, o.company, o.salary from ordered_ees o join num_ees n on n.company = o.company where o.sal_rank between (n.cnt/2) and (n.cnt/2) + 1
with ordered_salary as ( select Id, Company, Salary, count(id) over(partition by Company) as ct, row_number() over (partition by Company order by Salary) as row_id from employee ) select Id, Company, Salary from ordered_salary where row_id between ct/2 and ct/2+1
with ordered_salary as (select id,company,salary, count(id) over (partition by company) as ct, row_number() over (partition by company order by salary ) as rowid from employee) select id,company,salary from ordered_salary where rowid between ct/2 and ct/2+1
with orderemployee as ( select Id ,Company ,Salary from Employee order by Company, Salary ), rowemployee as( SELECT @row_number:=CASE WHEN @customer_no = Company THEN @row_number + 1 ELSE 1 END AS num, @customer_no:=Company Company ,Id ,Salary FROM orderemployee, (SELECT @customer_no:='',@row_number:=0) as t ), medianemployee as ( select Company ,case when count(Company)%2 = 0 then count(Company) div 2 else count(Company) div 2 + 1 end median_num from Employee group by Company union select Company ,case when count(Company)%2 = 0 then count(Company) div 2 + 1 end median_num from Employee group by Company ) select r.Id ,r.Company ,r.Salary from rowemployee r join medianemployee m on r.Company = m.Company and r.num = m.median_num
with rank_employee as (select *, row_number() over (partition by Company order by Salary asc) as raw_rank from Employee ), avg_row_number as (select Company, avg(raw_rank) as avg_row from rank_employee group by 1) select E1.id, E1.Company, E1.Salary from rank_employee E1 join avg_row_number E2 on E1.Company=E2.Company where abs(E1.raw_rank - E2.avg_row) < 1
with rank_info as (select id , company , salary , row_number() over(partition by company order by salary desc, id desc) as rnk_desc , row_number() over(partition by company order by salary , id) as rnk_aesc from employee) select id , company , salary from rank_info where rnk_desc between rnk_aesc-1 and rnk_aesc + 1 order by company , salary
with ranked_salary as (select *, row_number() over (partition by company order by salary) as row_num, count(*) over (partition by company) as cnt from Employee) select id, company, salary from ranked_salary where row_num in (ceil(cnt/2),cnt/2+1)
with rankeddata as ( select Id,Company,Salary,ROW_NUMBER() OVER(partition by Company order by Salary) as rnk, COUNT(Id) OVER(partition by Company) as totalcount from Employee E) select Id,Company,Salary from rankeddata where totalcount%2 = 1 and rnk = floor(totalcount/2) + 1 UNION ALL select Id,Company,Salary from rankeddata where totalcount%2 = 0 and (rnk = floor(totalcount/2) or rnk = floor(totalcount/2) + 1)
with ranking as ( select id, company, salary, row_number() over(partition by company order by salary) as rnk, count(id) over(partition by company)/2 as median from employee ) select id, company, salary from ranking where (rnk = median or rnk = median+1) or (rnk = median+0.5)
with rnum as ( select id, company, salary, row_number()over(partition by company order by salary, id) asc_rn , row_number()over(partition by company order by salary desc, id desc ) desc_rn from employee ) select id, company, salary from rnum where asc_rn=desc_rn union all select id, company, salary from rnum where asc_rn+1=desc_rn or asc_rn-1=desc_rn order by company, salary
with rowemployee as ( select case when @comp = Company then @row_num:=@row_num+1 else @row_num:=1 end as num ,Id ,@comp:=Company as Company ,Salary from ( select Id ,Company ,Salary from Employee order by Company,Salary ) orderemployee, (select @comp:='',@row_num:=0) as temp ), cntemployee as ( select Company ,count(Id) as cnt from Employee group by Company ) select Id ,rowemployee.Company ,Salary from rowemployee join cntemployee on rowemployee.Company = cntemployee.Company where (rowemployee.num = cntemployee.cnt div 2 + 1) or (cntemployee.cnt%2 = 0 and rowemployee.num = cntemployee.cnt div 2)
with salary_indeces as ( select id , company , salary , row_number() over (partition by company order by salary) as ordered_index from employee ) , company_info as ( select company , count(id) as company_total , case when count(id) % 2 = 0 then 'true' else 'false' end as is_even from employee group by 1 ) , median_indices AS ( select company , ceiling(company_total / 2) as lower_median_idx , case when is_even = 'true' then ceiling(company_total / 2) + 1 else NULL end as upper_median_idx from company_info group by 1 ) select s.id, s.company, s.salary from salary_indeces s join median_indices m using (company) where ordered_index = lower_median_idx or ordered_index = upper_median_idx and upper_median_idx is not null
with salary_ranks as ( select id, company, salary, row_number() over (partition by company order by salary asc, id asc) as salary_rank from employee order by company asc, salary asc ), salary_mid_ranks as ( select company, max(salary_rank) / 2 as mid_rank from salary_ranks group by company ) select t1.id, t1.company, t1.salary from salary_ranks t1 join salary_mid_ranks t2 on t2.company = t1.company where ( t1.salary_rank = t2.mid_rank or t1.salary_rank = t2.mid_rank + 1 or t1.salary_rank = t2.mid_rank + 0.5 ) order by t1.company asc, t1.salary asc
with salary_ranks as ( select id, company, salary, row_number() over (partition by company order by salary) as salary_rank from employee order by company asc, salary asc ), salary_mid_ranks as ( select company, max(salary_rank) / 2 as mid_rank from salary_ranks group by company ) select t1.id, t1.company, t1.salary from salary_ranks t1 join salary_mid_ranks t2 on t2.company = t1.company where ( t1.salary_rank = t2.mid_rank or t1.salary_rank = t2.mid_rank + 1 or t1.salary_rank = t2.mid_rank + 0.5 ) order by t1.company asc, t1.salary asc
with t as (select id, company, salary, row_number() over(partition by company order by salary) as rnum from employee) select id, t.company, salary from t, (select company, (case when mod(max(rnum),2)=0 then round(max(rnum)/2,0) else round(max(rnum)/2,0) end) as row1, (case when mod(max(rnum),2)=0 then round((max(rnum)/2)+1,0) end) as row2 from t group by company) r where t.company=r.company and (t.rnum=r.row1 or t.rnum=r.row2)
with t as( select Company, count(Id) over(partition by Company) as cnt, rank() over(partition by Company order by Salary asc, Id asc) as rnk, Salary, Id from Employee ) select Id, Company, Salary from t where cnt % 2 = 0 and rnk in (cnt/2, cnt/2+1) union all select Id, Company, Salary from t where cnt %2 =1 and rnk = ceil(cnt/2)
with t1 as ( Select Id,Company,Salary, ROW_NUMBER() OVER(PARTITION BY Company ORDER BY Salary) as rn, count(*) over(partition by company) as cnt from Employee ) Select ID,Company,Salary from t1 where rn=cnt/2 or rn=CEILING((cnt+1)/2)
with t1 as ( select *, row_number() over(partition by Company order by Salary) as rown, count(Id) over(partition by Company) as cnt from Employee ) select ID, Company, Salary from t1 where rown between cnt / 2 and cnt / 2 + 1
with t1 as (select *, row_number() over (partition by Company order by Salary) num_rank, count(*) over (partition by Company) company_count from Employee) select Id, Company, Salary from t1 where (company_count % 2 = 0 and (num_rank = company_count/2 or num_rank = company_count/2 +1)) or (company_count % 2 = 1 and num_rank = company_count/2 +.5)
with t1 as( select *, rank()over(partition by Company order by Salary,Id) rk from Employee), t2 as( select Company, avg(rk) as avg_rk from t1 group by Company ) select t1.Id, t1.Company, t1.Salary from t1 join t2 on t1.Company = t2.Company where abs(t1.rk - t2.avg_rk) < 1
with t1 as( select *, row_number() over(partition by Company order by Salary) as `row`, count(Id) over(partition by Company) as cnt from Employee ) select Id, Company, Salary from t1 where `row` between cnt/2.0 and cnt/2.0+1
with t1 as( select *, row_number() over(partition by Company order by Salary) as rw, count(Id) over(partition by Company) as cnt from Employee ) select Id, Company, Salary from t1 where rw between cnt/2.0 and cnt/2.0+1
with tb1 as ( select row_number() over (partition by company order by salary) as rowNum, count(*) over (partition by company) as cnt, Id, company, salary from employee ) select tb1.id, company, salary from tb1 where ((rowNum = cnt/2 or rowNum = cnt/2+1) or rowNum = (cnt+1)/2)
with tb1 as (select company, count(company) as ct from employee group by company) , tb2 as ( select company, case when ct%2=0 then ct/2 else ceiling(ct/2) end as ct from tb1 union all select company, ct/2+1 as ct from tb1 where ct%2=0) , tb3 as ( select id, company, salary, row_number()over(partition by company order by salary asc, id asc) as rk from employee ) select tb3.id, tb2.company, tb3.salary from tb2, tb3 where tb2.ct=rk and tb2.company=tb3.company
with temp as ( select Id, Company, Salary, row_number() over (partition by Company order by Salary) as rank_no, count(*) over (partition by Company) as cnt from Employee ) select Id, Company, Salary from temp where rank_no in (CEIL (cnt/2) , floor((cnt/2)+1))
with temp as ( select Id, Company, Salary, row_number() over(partition by company order by salary) as rnk, count(Id) over(partition by company) as c1 from employee ), temp2 as (select Id, Company, Salary from temp where mod(c1,2) != 0 and rnk = floor(c1/2)+1), temp3 as (select Id, Company, Salary from temp where mod(c1,2) = 0 and (rnk = c1/2 or rnk = (c1/2)+1)) select * from temp3 union select * from temp2 order by Company
with temp as ( select t.Id, t.Company, t.Salary, t.ranking, u.cnt from (select Id, company, salary, rank() over (partition by company order by Salary, Id) as ranking from Employee) as t left join (select company, count(*) as cnt from Employee group by company) as u on t.company = u.company ) select Id, Company, Salary from temp where (cnt % 2 = 0 and ranking = (cnt div 2)) or (ranking = (cnt div 2) + 1) order by Company, Salary
with temp as (select *, row_number() over (partition by company order by salary) as rownum, count(*) over (partition by company) as total from employee ) select id, company, salary from temp where rownum between total/2 and total/2+1
with temp as (select *, row_number() over(partition by Company order by Salary) roww, count(Id) over(partition by Company) cnt from Employee) select Id, Company, Salary from temp where roww between cnt/2.0 and cnt/2.0+1
with temp as (select Id,Company,Salary,row_number() over(partition by company order by salary) as num,count(*) over(partition by company) as tot from Employee) select id,company,salary from( select Id,Company,Salary,row_number() over(partition by company order by salary) as num,count(*) over(partition by company) as tot from Employee) as tmp where num between tot/2 and (tot)/2+1
with temp as (select id, company, salary, row_number() over(partition by company order by salary asc, id asc) as 'rnk_asc', row_number() over(partition by company order by salary desc, id desc) as 'rnk_desc' from employee) select id, company, salary from temp where rnk_asc = rnk_desc or rnk_asc = rnk_desc - 1 or rnk_asc = rnk_desc + 1 order by company, salary asc
with temp as(select *, row_number() over (partition by Company order by Salary) as row_nbr, count(Salary) over(partition by Company) as total_nbr, ceil(count(Salary) over(partition by Company)/2) as mid from Employee) select Id, Company, Salary from temp where (total_nbr%2 =0 and row_nbr in (mid, mid+1)) or (total_nbr%2 = 1 and row_nbr = mid)
with temp_table as (select *, count(id) over (partition by company) as cnt, dense_rank() over (partition by company order by salary asc, id asc) as rnk from employee) select Id, Company, Salary from temp_table where (cnt%2=0) and (rnk = (cnt/2) or rnk = (cnt/2)+1) union ALL select Id, Company,Salary from temp_table where cnt%2=1 and rnk = (cnt div 2)+1
with temp_table as (select *, count(id) over (partition by company) as cnt, rank() over (partition by company order by salary asc, id asc) as rnk from employee) select Id, Company, Salary from temp_table where (cnt%2=0) and (rnk = (cnt/2) or rnk = (cnt/2)+1) union ALL select Id, Company,Salary from temp_table where cnt%2=1 and rnk = (cnt div 2)+1
with tmp as (select *, rank() over(partition by company order by salary, id) as rnk_asc, rank() over(partition by company order by salary desc,id desc) as rnk_desc from employee ) select id, company, salary from tmp where rnk_asc between rnk_desc-1 and rnk_desc+1
with tmp as (select *, row_number() over (partition by company order by salary) as row_num, count(*) over (partition by company) as tot from employee order by company, row_num ) select id, company, salary from tmp where row_num in (tot/2 , floor(tot/2+1))
with tmp as (select *, row_number() over (partition by company order by salary,id) as row_num_asc, row_number() over (partition by company order by salary desc, id desc) as row_num_desc from employee ) select Id, Company, Salary from tmp where abs(cast(row_num_asc as decimal) - cast(row_num_desc as decimal)) in (0,1)
