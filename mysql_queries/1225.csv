SELECT "failed" AS period_state, MIN(task_date) AS start_date, MAX(task_date) AS end_date FROM ( SELECT fail_date AS task_date, ROW_NUMBER() OVER(ORDER BY fail_date) AS rn FROM failed WHERE fail_date >= "2019-01-01" AND fail_date <= "2019-12-31" ) t GROUP BY DATE_SUB(task_date, INTERVAL rn DAY) UNION SELECT "succeeded" AS period_state, MIN(task_date) AS start_date, MAX(task_date) AS end_date FROM ( SELECT success_date AS task_date, ROW_NUMBER() OVER(ORDER BY success_date) AS rn FROM succeeded WHERE success_date >= "2019-01-01" AND success_date <= "2019-12-31" ) t1 GROUP BY DATE_SUB(task_date, INTERVAL rn DAY) ORDER BY start_date
SELECT 'failed' AS period_state ,t1.start_date ,t2.end_date FROM ( SELECT f1.fail_date AS start_date ,ROW_NUMBER() OVER(ORDER BY f1.fail_date) AS row_numbers FROM ( SELECT * FROM Failed WHERE fail_date BETWEEN '2019-01-01' AND '2019-12-31') f1 LEFT JOIN ( SELECT * FROM Failed WHERE fail_date BETWEEN '2019-01-01' AND '2019-12-31') f3 ON DATEDIFF(f3.fail_date, f1.fail_date) = -1 WHERE f3.fail_date IS NULL ) t1 INNER JOIN ( SELECT f1.fail_date AS end_date ,ROW_NUMBER() OVER(ORDER BY f1.fail_date) AS row_numbers FROM ( SELECT * FROM Failed WHERE fail_date BETWEEN '2019-01-01' AND '2019-12-31') f1 LEFT JOIN ( SELECT * FROM Failed WHERE fail_date BETWEEN '2019-01-01' AND '2019-12-31') f2 ON DATEDIFF(f2.fail_date, f1.fail_date) = 1 WHERE f1.fail_date >= '2019-01-01' AND f1.fail_date <= '2019-12-31' AND f2.fail_date IS NULL ) t2 ON t1.row_numbers = t2.row_numbers UNION ALL SELECT 'succeeded' AS period_state ,m1.start_date ,m2.end_date FROM ( SELECT s1.success_date AS start_date ,ROW_NUMBER() OVER(ORDER BY s1.success_date) AS row_numbers FROM ( SELECT * FROM Succeeded WHERE success_date BETWEEN '2019-01-01' AND '2019-12-31') s1 LEFT JOIN ( SELECT * FROM Succeeded WHERE success_date BETWEEN '2019-01-01' AND '2019-12-31') s3 ON DATEDIFF(s3.success_date, s1.success_date) = -1 WHERE s1.success_date >= '2019-01-01' AND s1.success_date <= '2019-12-31' AND s3.success_date IS NULL ) m1 INNER JOIN ( SELECT s1.success_date AS end_date ,ROW_NUMBER() OVER(ORDER BY s1.success_date) AS row_numbers FROM ( SELECT * FROM Succeeded WHERE success_date BETWEEN '2019-01-01' AND '2019-12-31') s1 LEFT JOIN ( SELECT * FROM Succeeded WHERE success_date BETWEEN '2019-01-01' AND '2019-12-31') s2 ON DATEDIFF(s2.success_date, s1.success_date) = 1 WHERE s1.success_date >= '2019-01-01' AND s1.success_date <= '2019-12-31' AND s2.success_date IS NULL ) m2 ON m1.row_numbers = m2.row_numbers ORDER BY start_date
SELECT 'failed' AS period_state, start_date, end_date FROM (SELECT MIN(fail_date) AS start_date, MAX(fail_date) AS end_date, fail_date - INTERVAL diff DAY AS anchor FROM (SELECT fail_date, ROW_NUMBER() OVER (ORDER BY fail_date ASC) AS diff FROM Failed WHERE fail_date BETWEEN '2019-01-01' AND '2019-12-31') sub_failed GROUP BY anchor) AS formatted_failed UNION ALL SELECT 'succeeded' AS period_state, start_date, end_date FROM (SELECT MIN(success_date) AS start_date, MAX(success_date) AS end_date, success_date - INTERVAL diff DAY AS anchor FROM (SELECT success_date, ROW_NUMBER() OVER (ORDER BY success_date ASC) AS diff FROM Succeeded WHERE success_date BETWEEN '2019-01-01' AND '2019-12-31') sub_succeeded GROUP BY anchor) AS formatted_successes ORDER BY start_date ASC
SELECT 'succeeded' AS period_state, min(success_date) AS start_date, max(success_date) AS end_date FROM (SELECT *, ROW_NUMBER() OVER (ORDER BY success_date) AS ranking FROM Succeeded) A WHERE success_date >='2019-01-01' AND success_date <= '2019-12-31' GROUP BY DATE_SUB(success_date, interval ranking DAY) UNION ALL SELECT 'failed' AS period_state, min(fail_date) AS start_date, max(fail_date) AS end_date FROM (SELECT *, ROW_NUMBER() OVER (ORDER BY fail_date) AS ranking FROM Failed) C WHERE fail_date >='2019-01-01' AND fail_date <= '2019-12-31' GROUP BY DATE_SUB(fail_date, interval ranking DAY) ORDER BY start_date
SELECT 'succeeded' as period_state, min(id) as start_date, max(id) as end_date FROM ( SELECT date(success_date) as id, ROW_NUMBER() over (order by success_date) as row_num FROM succeeded WHERE YEAR(success_date) = '2019' ) as t1 GROUP BY date_sub(id, INTERVAL row_num day) UNION ALL SELECT 'failed' as period_state, min(id) as start_date, max(id) as end_date FROM ( SELECT date(fail_date) as id, ROW_NUMBER() over (order by fail_date) as row_num FROM failed WHERE YEAR(fail_date) = '2019' ) as t2 GROUP BY date_sub(id, INTERVAL row_num day) ORDER BY start_date
SELECT 'succeeded' as period_state, min(success_date) as start_date, max(success_date) as end_date FROM ( SELECT success_date, DATEDIFF(success_date,'2019-01-01') diff_day, row_number() OVER() - 1 as RANKING FROM Succeeded WHERE success_date BETWEEN '2019-01-01' AND '2019-12-31' ) as sub GROUP BY diff_day - ranking UNION ALL SELECT 'failed' as period_state, min(fail_date) as start_date, max(fail_date) as end_date FROM ( SELECT fail_date, DATEDIFF(fail_date,'2019-01-01') diff_day, row_number() OVER() - 1 as RANKING FROM Failed WHERE fail_date BETWEEN '2019-01-01' AND '2019-12-31' ) as sub GROUP BY diff_day - ranking ORDER BY start_date
SELECT * FROM ( SELECT "failed" AS period_state, start_date, end_date FROM ( SELECT t1.fail_date AS start_date, MIN(t2.fail_date) AS end_date FROM ( SELECT fail_date FROM Failed WHERE fail_date>='2019-01-01' AND fail_date <= '2019-12-31' AND DATE_SUB(fail_date, INTERVAL 1 DAY) NOT IN (SELECT fail_date FROM Failed WHERE fail_date>='2019-01-01' AND fail_date <= '2019-12-31') )t1, ( SELECT fail_date FROM Failed WHERE fail_date>='2019-01-01' AND fail_date <= '2019-12-31' AND DATE_ADD(fail_date, INTERVAL 1 DAY) NOT IN (SELECT fail_date FROM Failed WHERE fail_date>='2019-01-01' AND fail_date <= '2019-12-31') )t2 WHERE t1.fail_date <= t2.fail_date GROUP BY t1.fail_date )sub )sub1 UNION ALL SELECT * FROM ( SELECT 'succeeded' AS period_state, start_date, end_date FROM ( SELECT t1.success_date AS start_date, MIN(t2.success_date) AS end_date FROM ( SELECT success_date FROM Succeeded WHERE success_date >= '2019-01-01' AND success_date <= '2019-12-31' AND DATE_SUB(success_date, INTERVAL 1 DAY) NOT IN (SELECT success_date FROM Succeeded WHERE success_date >= '2019-01-01' AND success_date <= '2019-12-31') )t1, ( SELECT success_date FROM Succeeded WHERE success_date >= '2019-01-01' AND success_date <= '2019-12-31' AND DATE_ADD(success_date, INTERVAL 1 DAY) NOT IN (SELECT success_date FROM Succeeded WHERE success_date >= '2019-01-01' AND success_date <= '2019-12-31') )t2 WHERE t1.success_date <= t2.success_date GROUP BY t1.success_date )sub )sub2 ORDER BY start_date
SELECT DISTINCT state 'period_state', FIRST_VALUE(dateval) OVER (PARTITION BY IslandNumber ORDER BY dateval ASC) 'start_date' ,FIRST_VALUE(dateval) OVER(PARTITION BY IslandNumber ORDER BY dateval DESC) 'end_date' FROM (SELECT SUM(CASE WHEN laststate IS NULL OR laststate<>state THEN 1 ELSE 0 END) OVER( ORDER BY dateval)IslandNumber, dateval, state FROM (SELECT dateval ,state ,lag(state) OVER(ORDER BY dateval) 'laststate' FROM (SELECT fail_date as dateval,'failed' as state FROM Failed WHERE fail_date>='2019-01-01' AND fail_date<='2019-12-31' UNION ALL SELECT success_date as dateval,'succeeded' as state FROM Succeeded WHERE success_date>='2019-01-01' and success_date<='2019-12-31' )t )t1 )t2
SELECT b.period_state, b.start_date, b.end_date FROM ( SELECT 'failed' period_state, MIN(a.fail_date) start_date, MAX(a.fail_date) end_date FROM ( SELECT fail_date, (DATEDIFF(fail_date, '2019-01-01') + 1 - RANK() OVER(ORDER BY fail_date)) diff FROM Failed WHERE YEAR(fail_date) = 2019 ) a GROUP BY a.diff UNION ALL SELECT 'succeeded' period_state, MIN(a.success_date) start_date, MAX(a.success_date) end_date FROM ( SELECT d.success_date, (DATEDIFF(d.success_date, '2019-01-01') + 1 - RANK() OVER(ORDER BY d.success_date)) diff FROM ( SELECT success_date FROM Succeeded WHERE YEAR(success_date) = 2019 ) d ) a GROUP BY a.diff ) b ORDER BY b.start_date
SELECT b.period_state, b.start_date, b.end_date FROM ( SELECT 'failed' period_state, MIN(a.fail_date) start_date, MAX(a.fail_date) end_date FROM ( SELECT fail_date, (DATEDIFF(fail_date, '2019-01-01') + 1 - RANK() OVER(ORDER BY fail_date)) diff FROM Failed WHERE YEAR(fail_date) = 2019 ) a GROUP BY a.diff UNION ALL SELECT 'succeeded' period_state, MIN(a.success_date) start_date, MAX(a.success_date) end_date FROM ( SELECT success_date, (DATEDIFF(success_date, '2019-01-01') + 1 - RANK() OVER(ORDER BY success_date)) diff FROM Succeeded WHERE YEAR(success_date) = 2019 ) a GROUP BY a.diff ) b ORDER BY b.start_date
SELECT c.period_state, c.start_date, c.end_date FROM ( SELECT 'failed' AS period_state, MIN(fail_date) AS start_date, MAX(fail_date) AS end_date FROM ( SELECT fail_date, DAYOFYEAR(fail_date) AS day_of_yr, ROW_NUMBER() OVER (ORDER BY fail_date ASC) AS row_num FROM Failed WHERE fail_date BETWEEN '2019-01-01' AND '2019-12-31' ) a GROUP BY a.day_of_yr - a.row_num UNION SELECT 'succeeded' AS period_state, MIN(success_date) AS start_date, MAX(success_date) AS end_date FROM ( SELECT success_date, DAYOFYEAR(success_date) AS day_of_yr, ROW_NUMBER() OVER (ORDER BY success_date ASC) AS row_num FROM Succeeded WHERE success_date BETWEEN '2019-01-01' AND '2019-12-31' ) b GROUP BY b.day_of_yr - b.row_num ) c ORDER BY c.start_date
SELECT period_state ,MIN(date) AS start_date ,MAX(date) AS end_date FROM (SELECT * ,ROW_NUMBER() OVER (ORDER BY date) AS rn1 FROM (SELECT 'succeeded' AS period_state ,success_date AS date ,ROW_NUMBER() OVER (ORDER BY success_date) AS rn FROM Succeeded WHERE success_date BETWEEN '2019-01-01' AND '2019-12-31' UNION ALL SELECT 'failed' AS period_state ,fail_date AS date ,ROW_NUMBER() OVER (ORDER BY fail_date) AS rn FROM Failed WHERE fail_date BETWEEN '2019-01-01' AND '2019-12-31') a) b GROUP BY 1, rn1-rn ORDER BY 2
SELECT period_state, MIN(date) AS start_date, MAX(date) AS end_date FROM (SELECT 'failed' AS period_state, fail_date AS date, DATE_SUB(fail_date, INTERVAL ROW_NUMBER() OVER(ORDER BY fail_date) DAY) AS previous FROM Failed WHERE YEAR(fail_date) = 2019 UNION ALL SELECT 'succeeded' AS period_state, success_date AS date, DATE_SUB(success_date, INTERVAL ROW_NUMBER() OVER(ORDER BY success_date) DAY) AS previous FROM Succeeded WHERE YEAR(success_date) = 2019) AS l GROUP BY period_state, previous ORDER BY 2
SELECT period_state, MIN(day) AS start_date, MAX(day) AS end_date FROM ( SELECT day, period_state, (RANK() OVER (ORDER BY day) - rk) AS inv FROM ( SELECT fail_date AS day, 'failed' AS period_state, RANK() OVER (ORDER BY fail_date) AS rk FROM Failed WHERE fail_date BETWEEN '2019-01-01' AND '2019-12-31' UNION SELECT success_date AS day, 'succeeded' AS period_state, RANK() OVER (ORDER BY success_date) AS rk FROM Succeeded WHERE success_date BETWEEN '2019-01-01' AND '2019-12-31') t ) c GROUP BY inv, period_state ORDER BY start_date
SELECT period_state, MIN(days) start_date, MAX(days) end_date FROM (SELECT period_state, days, RANK() OVER(PARTITION BY period_state ORDER BY days) rk FROM (SELECT 'failed' period_state, fail_date days FROM failed UNION ALL SELECT 'succeeded' period_state, success_date days FROM succeeded) a WHERE YEAR(days) = '2019') b GROUP BY 1, date_add(days, INTERVAL -rk DAY) ORDER BY 2
SELECT period_state, MIN(fail_date) as start_date, MAX(fail_date) as end_date FROM (SELECT fail_date, DAYOFYEAR(fail_date) - ROW_NUMBER() OVER (ORDER BY fail_date ASC) as date_grouping, "failed" as period_state FROM Failed WHERE fail_date BETWEEN "2019-01-01" AND "2019-12-31" UNION SELECT success_date, DAYOFYEAR(success_date) - ROW_NUMBER() OVER (ORDER BY success_date ASC) + 1000 as date_grouping, "succeeded" as period_state FROM Succeeded WHERE success_date BETWEEN "2019-01-01" AND "2019-12-31") as t1 GROUP BY date_grouping ORDER BY start_date ASC
SELECT period_state, start_date, end_date FROM (SELECT period_state, inv, MIN(day) start_date, MAX(day) end_date FROM (SELECT period_state, day, RANK() OVER(ORDER By day) AS ovr_rnk, rk, (RANK() OVER(ORDER By day) - rk) AS inv FROM (SELECT 'succeeded' AS period_state, success_date as day, RANK() OVER(ORDER BY success_date) rk FROM Succeeded WHERE success_date BETWEEN '2019-01-01' AND '2019-12-31' UNION SELECT 'failed' AS period_state, fail_date, RANK() OVER(ORDER BY fail_date) rk FROM Failed WHERE fail_date BETWEEN '2019-01-01' AND '2019-12-31')tmp)rslt GROUP BY inv, 1)final ORDER BY 2
SELECT period_state, start_date, end_date FROM( SELECT status AS period_state, status_rank, MIN(sdate) AS start_date, MAX(sdate) AS end_date FROM( SELECT *, ROW_NUMBER() OVER (ORDER BY sdate) -ROW_NUMBER() OVER (PARTITION BY status ORDER BY sdate) AS status_rank FROM( SELECT fail_date AS sdate, 'failed' AS status FROM Failed WHERE YEAR(fail_date)=2019 UNION ALL SELECT success_date AS sdate, 'succeeded' AS status FROM Succeeded WHERE YEAR(success_date)=2019) sub ) sub2 GROUP BY 1, 2) sub3 ORDER BY start_date
SELECT period_state,min(day) AS start_date, max(day) AS end_date FROM (SELECT 'succeeded' period_state, success_date AS day, ROW_NUMBER() OVER (ORDER BY success_date) rn FROM Succeeded WHERE success_date BETWEEN "2019-01-01" AND "2019-12-31" UNION ALL SELECT 'failed' period_state, fail_date AS day, ROW_NUMBER() OVER (ORDER BY fail_date) rn FROM Failed WHERE fail_date BETWEEN "2019-01-01" AND "2019-12-31") b GROUP BY DATE_SUB(day, INTERVAL rn day), period_state ORDER BY start_date
SELECT result AS period_state,MIN(date) AS start_date, MAX(date) AS end_date FROM (SELECT "failed" AS result, fail_date AS date, RANK()OVER(ORDER BY fail_date)AS date_rank FROM Failed WHERE fail_date BETWEEN "2019-01-01" AND "2019-12-31" UNION SELECT "succeeded" AS result,success_date AS date, RANK()OVER(ORDER BY success_date)AS date_rank FROM Succeeded WHERE success_date BETWEEN "2019-01-01" AND "2019-12-31") AS temp GROUP BY period_state,DATE_ADD(date, INTERVAL -date_rank day) ORDER BY start_date
SELECT state AS period_state, MIN(day) AS start_date, MAX(day) AS end_date FROM ( SELECT day, RANK() OVER (ORDER BY day) AS overall_rank, state, day_rank, RANK() OVER (ORDER BY day) - day_rank AS interv FROM ( SELECT fail_date AS day, 'failed' AS state, RANK() OVER (ORDER BY fail_date) AS day_rank FROM Failed WHERE fail_date BETWEEN '2019-01-01' AND '2019-12-31' UNION SELECT success_date AS day, 'succeeded' AS state, RANK() OVER (ORDER BY success_date) AS day_rank FROM Succeeded WHERE success_date BETWEEN '2019-01-01' AND '2019-12-31') a) b GROUP BY interv, state ORDER BY start_date
SELECT state AS period_state, MIN(day) AS start_date, MAX(day) AS end_date FROM (SELECT day, state, (ROW_NUMBER() OVER(ORDER BY day) - RANK() OVER(PARTITION BY state ORDER BY day)) AS grp FROM (SELECT fail_date AS day, 'failed' AS state FROM Failed WHERE fail_date BETWEEN '2019-01-01' AND '2019-12-31' UNION ALL SELECT success_date AS day, 'succeeded' AS state FROM Succeeded WHERE success_date BETWEEN '2019-01-01' AND '2019-12-31') a) b GROUP BY grp, state ORDER BY start_date
SELECT state as period_state, MIN(dt) as start_date, MAX(dt) as end_date FROM (SELECT dt, rank() OVER(ORDER BY dt) - rnk as gid, state FROM (SELECT fail_date as dt, "failed" as state, rank() OVER(ORDER BY fail_date) as rnk FROM Failed WHERE fail_date BETWEEN '2019-01-01' AND '2019-12-31' UNION ALL SELECT success_date as dt, "succeeded" as state, rank() OVER(ORDER BY success_date) as rnk FROM Succeeded WHERE success_date BETWEEN '2019-01-01' AND '2019-12-31') a) b GROUP BY gid, state ORDER BY 2
SELECT stats AS period_state, MIN(day) AS start_date, MAX(day) AS end_date FROM ( SELECT day, RANK() OVER (ORDER BY day) AS overall_ranking, stats, rk, (RANK() OVER (ORDER BY day) - rk) AS inv FROM ( SELECT fail_date AS day, 'failed' AS stats, RANK() OVER (ORDER BY fail_date) AS rk FROM Failed WHERE fail_date BETWEEN '2019-01-01' AND '2019-12-31' UNION SELECT success_date AS day, 'succeeded' AS stats, RANK() OVER (ORDER BY success_date) AS rk FROM Succeeded WHERE success_date BETWEEN '2019-01-01' AND '2019-12-31') t ) c GROUP BY inv, stats ORDER BY start_date
SELECT stats AS period_state, MIN(day) AS start_date, MAX(day) AS end_date FROM ( SELECT day, dense_RANK() OVER (ORDER BY day) AS overall_ranking, stats, rk, (dense_RANK() OVER (ORDER BY day) - rk) AS inv FROM ( SELECT fail_date AS day, 'failed' AS stats, dense_RANK() OVER (ORDER BY fail_date) AS rk FROM Failed WHERE fail_date BETWEEN '2019-01-01' AND '2019-12-31' UNION SELECT success_date AS day, 'succeeded' AS stats, dense_RANK() OVER (ORDER BY success_date) AS rk FROM Succeeded WHERE success_date BETWEEN '2019-01-01' AND '2019-12-31') t ) c GROUP BY inv, stats ORDER BY start_date
SELECT stats AS period_state, MIN(day) AS start_date, MAX(day) AS end_date FROM ( SELECT day, stats, (RANK() OVER (ORDER BY day) - rk) AS inv FROM ( SELECT fail_date AS day, 'failed' AS stats, RANK() OVER (ORDER BY fail_date) AS rk FROM Failed WHERE fail_date BETWEEN '2019-01-01' AND '2019-12-31' UNION SELECT success_date AS day, 'succeeded' AS stats, RANK() OVER (ORDER BY success_date) AS rk FROM Succeeded WHERE success_date BETWEEN '2019-01-01' AND '2019-12-31') t ) c GROUP BY inv, stats ORDER BY start_date
SELECT stats AS period_state, MIN(day) AS start_date, MAX(day) AS end_date FROM ( SELECT day, stats, rk, RANK()OVER (ORDER BY day) AS overall_ranking, RANK()OVER (ORDER BY day) -rk AS inv FROM ( SELECT fail_date AS day, 'failed' AS stats, RANK() OVER(ORDER BY fail_date) AS rk FROM failed WHERE fail_date BETWEEN '2019-01-01' AND '2019-12-31' UNION ALL SELECT success_date AS day, 'succeeded' AS stats, RANK() OVER(ORDER BY success_date) AS rk FROM succeeded WHERE success_date BETWEEN '2019-01-01' AND '2019-12-31' ) AS t ) AS c GROUP BY stats,inv ORDER BY start_date
SELECT stats AS period_state, MIN(day) AS start_date, MAX(day) AS end_date FROM (SELECT day, RANK() OVER (ORDER BY day) AS overall_ranking, stats, rk, (RANK() OVER (ORDER BY day) - rk) AS inv FROM ( SELECT fail_date AS day, 'failed' AS stats, RANK() OVER (ORDER BY fail_date) AS rk FROM Failed WHERE fail_date BETWEEN '2019-01-01' AND '2019-12-31' UNION SELECT success_date AS day, 'succeeded' AS stats, RANK() OVER (ORDER BY success_date) AS rk FROM Succeeded WHERE success_date BETWEEN '2019-01-01' AND '2019-12-31' ) a )b GROUP BY inv, stats ORDER BY start_date
SELECT stats AS period_state, MIN(day) AS start_date, MAX(day) AS end_date FROM( SELECT day, RANK() OVER (ORDER BY day) AS overall_ranking, stats, (RANK() OVER (ORDER BY day) - rk) AS inv FROM( SELECT fail_date AS day, 'failed' AS stats, RANK() OVER (ORDER BY fail_date) AS rk FROM failed WHERE fail_date BETWEEN '2019-01-01' AND '2019-12-31' UNION SELECT success_date AS day, 'succeeded' AS stats, RANK() OVER (ORDER BY success_date) AS rk FROM succeeded WHERE success_date BETWEEN '2019-01-01' AND '2019-12-31' ) t ) c GROUP BY inv, stats ORDER BY start_date
SELECT status AS period_state, MIN(date) AS start_date, MAX(date) AS end_date FROM ( SELECT date, status, RANK() OVER(PARTITION BY status ORDER BY date) AS rk1, RANK() OVER(ORDER BY date) AS rk2 FROM ( SELECT fail_date AS date, 'failed' AS status FROM Failed WHERE fail_date BETWEEN '2019-01-01' AND '2019-12-31' UNION ALL SELECT success_date AS date, 'succeeded' AS status FROM Succeeded WHERE success_date BETWEEN '2019-01-01' AND '2019-12-31' ) AS s ORDER BY date) AS s GROUP BY rk2-rk1, status
SELECT status AS period_state, MIN(date) AS start_date, MAX(date) AS end_date FROM (SELECT date, status, RANK() OVER (ORDER BY date)-rk AS prd FROM (SELECT fail_date AS date, 'failed' AS status, RANK() OVER (ORDER BY fail_date) AS rk From Failed WHERE fail_date BETWEEN '2019-01-01' AND '2019-12-31' UNION SELECT success_date AS date, 'succeeded' AS status, RANK() OVER (ORDER BY success_date) AS rk From Succeeded WHERE success_date BETWEEN '2019-01-01' AND '2019-12-31') tb1) tb2 GROUP BY tb2.prd, tb2.status
SELECT status as period_state, MIN(dates) AS start_date, MAX(dates) AS end_date FROM (SELECT dates, status, DATE_ADD(dates, INTERVAL -(ROW_NUMBER() over (PARTITION BY status ORDER BY dates)) day) AS gp FROM ( (SELECT success_date as dates, 'succeeded' as status FROM Succeeded WHERE success_date BETWEEN '2019-01-01' AND '2019-12-31') UNION (SELECT fail_date as dates , 'failed' as status FROM Failed WHERE fail_date BETWEEN '2019-01-01' AND '2019-12-31') ) s ORDER BY dates ASC ) t GROUP BY gp, period_state
SELECT t.period_state, MIN(t.all_date) AS start_date, MAX(t.all_date) AS end_date FROM (SELECT temp.period_state, temp.all_date, DATE_SUB(temp.all_date, INTERVAL ROW_NUMBER() OVER (PARTITION BY temp.period_state ORDER BY temp.all_date) DAY) AS R FROM (SELECT 'failed' AS period_state, fail_date AS all_date FROM Failed WHERE YEAR(fail_date) = 2019 UNION ALL SELECT 'succeeded' AS period_state, success_date AS all_date FROM Succeeded WHERE YEAR(success_date) = 2019) AS temp) AS t GROUP BY t.period_state, t.R ORDER BY start_date
Select * From ( Select 'failed' as period_state, Min(fail_date) as start_date, Max(fail_date) as end_date From (Select fail_date, DateDiff(fail_date, '2019-01-01') as Day, Row_Number() Over (Order By fail_date) as Idx From Failed Where fail_date Between '2019-01-01' And '2019-12-31') as Failed_1 Group By Cast(Day As Signed) - Cast(Idx As Signed) Union Select 'succeeded' as period_state, Min(success_date) as start_date, Max(success_date) as end_date From (Select success_date, DateDiff(success_date, '2019-01-01') as Day, Row_Number() Over (Order By success_date) as Idx From Succeeded Where success_date Between '2019-01-01' And '2019-12-31') as Succeeded_1 Group By Cast(Day As Signed) - Cast(Idx As Signed) ) As All_1 Order By start_date
Select * From (Select 'failed' as period_state, MIN(fail_date) as start_date, MAX(fail_date) as end_date From (Select fail_date, RANK() OVER(ORDER BY fail_date) as ranking From failed where fail_date>='2019-01-01' and fail_date<='2019-12-31') A Group by DATE_SUB(fail_date,INTERVAL ranking DAY) UNION Select 'succeeded' as period_state, MIN(success_date) as start_date, MAX(success_date) as end_date From (Select success_date, RANK() OVER(ORDER BY success_date) as ranking From Succeeded where success_date>='2019-01-01' and success_date<='2019-12-31') A Group by DATE_SUB(success_date,INTERVAL ranking DAY)) C Order by start_date
Select stats as period_state, MIN(day) as start_date, max(day) as end_date From ( Select day, RANK() OVER (Order By day) as overall_rk,stats,rk,(RANK() OVER (Order by day) - rk) as inv FROM ( Select fail_date as day, 'failed' as stats, RANK() OVER (ORDER BY fail_date) as rk From Failed Where fail_date Between '2019-01-01' AND '2019-12-31' Union Select success_date as day, 'succeeded' as stats, RANK() OVER (ORDER BY success_date) as rk From Succeeded Where success_date Between '2019-01-01' AND '2019-12-31' ) t ) c GROUP BY inv,stats ORDER By start_date
Select status period_state, min(dates) 'start_date', max(dates) 'end_date' from ( Select dates, status, (row_number() over (order by dates) - row_number() over (partition by status order by dates)) rn2 from ( Select fail_date as dates,'failed' as status from failed union select success_date as dates, 'succeeded' as stutus from succeeded order by dates ) tmp order by dates ) tmp1 where dates between '2019-01-01' and '2019-12-31' group by rn2, status
WITH A AS( SELECT period_state, rank() over(ORDER BY d ASC)-R AS diff_rank, d FROM (SELECT 'failed' as period_state, rank() over(ORDER BY fail_date ASC) AS R, fail_date as d FROM Failed UNION ALL SELECT 'succeeded' as period_state, rank() over(ORDER BY success_date ASC) AS R, success_date as d FROM Succeeded) S), B AS ( SELECT period_state, diff_rank, min(d) as start_date, max(d) as end_date FROM A WHERE d BETWEEN '2019-01-01' AND '2019-12-31' GROUP BY 1,2) SELECT period_state, start_date, end_date FROM B
WITH AllData AS ( SELECT success_date AS t_date, 'succeeded' AS state, ROW_NUMBER() OVER(ORDER BY success_date) AS r_no FROM Succeeded WHERE YEAR(success_date) = 2019 UNION SELECT fail_date AS t_date, 'failed' AS state, ROW_NUMBER() OVER(ORDER BY fail_date) AS r_no FROM Failed WHERE YEAR(fail_date) = 2019 ) SELECT state AS period_state, MIN(t_date) AS start_date, MAX(t_date) AS end_date FROM ( SELECT t_date, state, ROW_NUMBER() OVER(ORDER BY t_date) - r_no AS row_diff FROM AllData ) AS Results GROUP BY state, row_diff ORDER BY 2
WITH C AS( SELECT ("failed") AS period_state, fail_date AS dt, DAYOFYEAR(fail_date)-DENSE_RANK() OVER( ORDER BY fail_date ) AS rk FROM Failed WHERE fail_date BETWEEN "2019-01-01" AND "2019-12-31" UNION SELECT ("succeeded") AS period_state, success_date AS dt, DAYOFYEAR(success_date)-DENSE_RANK()OVER( ORDER BY success_date ) AS rk FROM Succeeded WHERE success_date BETWEEN "2019-01-01" AND "2019-12-31" ) SELECT period_state, MIN(dt) AS start_date, MAX(dt) AS end_date FROM C GROUP BY rk, period_state ORDER BY start_date
WITH CTE (day, state, rk) AS ( SELECT fail_date as day, 'failed' as state, rank() over(order by fail_date) as rk FROM Failed WHERE fail_date between '2019-01-01' AND '2019-12-31' UNION ALL SELECT success_date as day, 'succeeded' as state, rank() over(order by success_date) as rk FROM Succeeded WHERE success_date between '2019-01-01' AND '2019-12-31' ) SELECT state as period_state, min(day) as start_date, max(day) as end_date FROM ( SELECT day, rank() over(order by day) as overall_rk, state, rk, (rank() over(order by day) - rk) as inv FROM CTE ) A GROUP BY inv, state ORDER BY start_date
WITH CTE AS ( (SELECT fail_date dt FROM Failed WHERE fail_date BETWEEN '2019-01-01' AND '2019-12-31' union SELECT success_date as dt FROM Succeeded WHERE success_date BETWEEN '2019-01-01' AND '2019-12-31' ) ORDER BY dt ), CTE1 AS ( SELECT dt, CASE WHEN dt IN (SELECT * FROM Failed) THEN 'failed' ELSE 'succeeded' END status1 FROM CTE ), CTE2 AS ( SELECT dt, status1, ROW_NUMBER() OVER(ORDER BY dt) rn, DENSE_RANK() OVER(PARTITION BY status1 ORDER BY dt)dr FROM CTE1 ) SELECT status1 period_state, MIN(dt) as start_date, MAX(dt) as end_date FROM CTE2 GROUP BY status1, rn-dr ORDER BY MIN(dt)
WITH CTE AS ( SELECT fail_date AS event_date, 'failed' AS period_state FROM Failed WHERE YEAR(fail_date) = 2019 UNION ALL SELECT success_date AS event_date, 'succeeded' AS period_state FROM Succeeded WHERE YEAR(success_date) = 2019 ) SELECT period_state, MIN(event_date) AS start_date, MAX(event_date) AS end_date FROM ( SELECT period_state, event_date, DATE_ADD(event_date, INTERVAL -ROW_NUMBER() OVER(PARTITION BY period_state ORDER BY event_date) day) AS RK FROM CTE ) T GROUP BY period_state, RK ORDER BY 2 ASC
WITH CTE AS ( SELECT fail_date AS event_date, 'failed' AS period_state FROM Failed WHERE YEAR(fail_date) = 2019 UNION ALL SELECT success_date AS event_date, 'succeeded' AS period_state FROM Succeeded WHERE YEAR(success_date) = 2019 ) SELECT period_state, MIN(event_date) AS start_date, MAX(event_date) AS end_date FROM ( SELECT period_state, event_date, DATE_ADD(event_date,interval (-ROW_NUMBER() OVER(PARTITION BY period_state ORDER BY event_date)) day) AS RK FROM CTE ) T GROUP BY period_state, RK ORDER BY 2 ASC
WITH CTE AS ( SELECT success_date as date_num, 1 as status_num, DAYOFYEAR( success_date) - ROW_NUMBER() OVER(order by success_date) AS idx FROM Succeeded WHERE year(success_date) = 2019 UNION ALL SELECT fail_date as date_num, 0 as status_num, DAYOFYEAR(fail_date) - ROW_NUMBER() OVER(order by fail_date) AS idx FROM Failed WHERE year(fail_date) = 2019 ) SELECT CASE WHEN status_num = 1 THEN 'succeeded' ELSE 'failed' END AS period_state, MIN(date_num) AS start_date, MAX(date_num) AS end_date FROM CTE GROUP BY status_num, idx ORDER BY start_date
WITH CTE AS (SELECT *, (RANK() OVER (ORDER BY day) - rk) AS inv from (SELECT fail_date AS day, 'failed' AS period_state, RANK() OVER (ORDER BY fail_date) AS rk FROM Failed WHERE fail_date BETWEEN '2019-01-01' AND '2019-12-31' UNION SELECT success_date AS day, 'succeeded' AS period_state, RANK() OVER (ORDER BY success_date) AS rk FROM Succeeded WHERE success_date BETWEEN '2019-01-01' AND '2019-12-31')tb) SELECT period_state, min(day) as start_date, max(day) as end_date FROM CTE group by inv,period_state order by 2
WITH CTE AS (SELECT date, period_state, ((ROW_NUMBER() over(Order by date)) - (ROW_NUMBER() over(Partition By period_state Order by date))) as group1 FROM (SELECT fail_date as date, 'failed' as period_state FROM Failed where fail_date between '2019-01-01' AND '2019-12-31' UNION ALL SELECT success_date as date, 'succeeded' as period_state FROM Succeeded where success_date between '2019-01-01' AND '2019-12-31' ) tmp) select period_state, min(date) as start_date, max(date) as end_date from cte Group by period_state, group1 order by start_date
WITH CTE AS (SELECT date, period_state, ((ROW_NUMBER() over(Order by date)) - rnk) as group1 FROM (SELECT fail_date as date, 'failed' as period_state, ROW_NUMBER() over(Order by fail_date) as rnk FROM Failed where fail_date between '2019-01-01' AND '2019-12-31' UNION ALL SELECT success_date as date, 'succeeded' as period_state, ROW_NUMBER() over(Order by success_date) as rnk FROM Succeeded where success_date between '2019-01-01' AND '2019-12-31' ) tmp) select period_state, min(date) as start_date, max(date) as end_date from cte Group by period_state, group1 order by start_date
WITH CTE AS (SELECT fail_date AS day, 'failed' AS period_state, RANK() OVER (ORDER BY fail_date) AS rk FROM Failed WHERE fail_date BETWEEN '2019-01-01' AND '2019-12-31' UNION SELECT success_date AS day, 'succeeded' AS period_state, RANK() OVER (ORDER BY success_date) AS rk FROM Succeeded WHERE success_date BETWEEN '2019-01-01' AND '2019-12-31'), CTE2 AS (SELECT *, (RANK() OVER (ORDER BY day) - rk) AS inv from CTE) SELECT period_state, min(day) as start_date, max(day) as end_date FROM CTE2 group by inv,period_state order by 2
WITH CTE AS (SELECT fail_date AS day, 'failed' AS state, RANK()OVER(ORDER BY fail_date) AS rk FROM Failed WHERE fail_date BETWEEN '2019-01-01' AND '2019-12-31' UNION SELECT success_date AS day, 'succeeded' AS state, RANK()OVER(ORDER BY success_date) AS rk FROM Succeeded WHERE success_date BETWEEN '2019-01-01' AND '2019-12-31' ), C AS (SELECT day, RANK()OVER(ORDER BY day) AS rank_all, state,rk, (RANK()OVER(ORDER BY day)-rk) AS inv FROM CTE ) SELECT state AS period_state, MIN(day) AS start_date, MAX(day) AS end_date FROM C GROUP BY inv, state ORDER BY start_date
WITH CTE1 AS ( SELECT FAIL_DATE AS PERIOD, 'failed' AS PERIOD_STATE FROM FAILED WHERE FAIL_DATE BETWEEN '2019-01-01' AND '2019-12-31' UNION ALL SELECT SUCCESS_DATE AS PERIOD, 'succeeded' AS PERIOD_STATE FROM SUCCEEDED WHERE SUCCESS_DATE BETWEEN '2019-01-01' AND '2019-12-31' ORDER BY PERIOD ) , CTE2 AS ( SELECT *, ROW_NUMBER() OVER(PARTITION BY PERIOD_STATE ORDER BY PERIOD) RNO FROM CTE1 ORDER BY PERIOD ) , CTE3 AS ( SELECT PERIOD_STATE, PERIOD AS START_DATE, COUNT(*) AS CNT FROM CTE2 GROUP BY PERIOD_STATE, SUBDATE(PERIOD, RNO) ) SELECT PERIOD_STATE, START_DATE, ADDDATE(START_DATE, CNT-1) AS END_DATE FROM CTE3
WITH CTE1 AS ( SELECT FAIL_DATE AS PERIOD, 'failed' AS PERIOD_STATE FROM FAILED WHERE FAIL_DATE BETWEEN '2019-01-01' AND '2019-12-31' UNION ALL SELECT SUCCESS_DATE AS PERIOD, 'succeeded' AS PERIOD_STATE FROM SUCCEEDED WHERE SUCCESS_DATE BETWEEN '2019-01-01' AND '2019-12-31' ORDER BY PERIOD ) , CTE2 AS ( SELECT *, ROW_NUMBER() OVER(PARTITION BY PERIOD_STATE ORDER BY PERIOD) RNO FROM CTE1 ORDER BY PERIOD ) SELECT PERIOD_STATE, MIN(PERIOD) AS START_DATE, MAX(PERIOD) AS END_DATE FROM CTE2 GROUP BY PERIOD_STATE, SUBDATE(PERIOD, RNO)
WITH CTE_STATES AS ( Select fail_date as RDate, "failed" as state, rank() over(order by fail_date) as rnk from Failed UNION Select success_date as RDate, "succeeded" as state, row_number() over(order by success_date) as rnk from succeeded ) Select state as period_state, MIN(rdate) as start_date,max(rdate) as end_date FROM CTE_STATES where year(RDate) = '2019' Group by state,to_days(rdate) - rnk order by 2
WITH CTE_STATUS AS ( SELECT fail_date AS task_date, 'failed' as period_state FROM Failed union all SELECT success_date AS task_date, 'succeeded' as period_state FROM Succeeded ), grp_data as ( select cs.task_date, cs.period_state, @grp:=if(@prev!=cs.period_state,@grp+1,@grp) as grp_num, @prev:=cs.period_state as previous from CTE_STATUS cs,(select @grp:=0,@prev:=NULL) a WHERE task_date between '2019-01-01' and '2019-12-31' ORDER BY task_date ) select max(period_state) as period_state, min(task_date) as start_date, max(task_date) as end_date from grp_data group by grp_num order by 2
WITH F1 AS ( SELECT fail_date, DATEDIFF(fail_date, '2019-01-01') - CAST(RANK() OVER (ORDER BY fail_date) AS SIGNED) AS rks FROM Failed WHERE fail_date >= '2019-01-01' AND fail_date<='2019-12-31'), F2 AS ( SELECT DISTINCT MIN(fail_date) OVER (PARTITION BY rks ORDER BY fail_date) AS st_date, MAX(fail_date) OVER (PARTITION BY rks ORDER BY fail_date DESC) AS ed_date FROM F1), S1 AS ( SELECT success_date, DATEDIFF(success_date, '2019-01-01') - CAST(RANK() OVER (ORDER BY success_date) AS SIGNED) AS rks FROM Succeeded WHERE success_date >= '2019-01-01' AND success_date<='2019-12-31'), S2 AS ( SELECT DISTINCT MIN(success_date) OVER (PARTITION BY rks ORDER BY success_date) AS st_date, MAX(success_date) OVER (PARTITION BY rks ORDER BY success_date DESC) AS ed_date FROM S1 ) SELECT 'failed' AS period_state, st_date AS start_date, ed_date AS end_date FROM F2 UNION ALL SELECT 'succeeded', st_date, ed_date FROM S2 ORDER BY start_date
WITH T AS ( SELECT *, ROW_NUMBER() OVER(ORDER BY date) - ROW_NUMBER() OVER(PARTITION BY period_state ORDER BY date) AS groupping FROM ( SELECT fail_date AS date, 'failed' AS period_state FROM Failed UNION SELECT success_date AS date, 'succeeded' AS period_state FROM succeeded ) a WHERE date BETWEEN '2019-01-01' AND '2019-12-31' ORDER BY date ), S AS ( SELECT period_state, groupping, MIN(date) AS start_date FROM T GROUP BY period_state,groupping ), E AS ( SELECT period_state, groupping, MAX(date) AS end_date FROM T GROUP BY period_state,groupping ) SELECT a.period_state, a.start_date, b.end_date FROM S a LEFT JOIN E b ON a.groupping = b.groupping AND a.period_state = b.period_state ORDER BY a.start_date
WITH TEMP AS ( SELECT fail_date as date, "failed" as state FROM failed WHERE year( fail_date)=2019 UNION ALL SELECT success_date as date, "succeeded" as state FROM succeeded WHERE year(success_date)=2019), TEMP2 AS ( SELECT state, date, dense_rank() OVER(PARTITION BY state ORDER BY date) as 'RANK', date_sub(date,INTERVAL dense_rank() OVER(PARTITION BY state ORDER BY date) DAY) AS 'diff' FROM TEMP) SELECT state AS period_state, MIN(date) AS start_date, MAX(date) AS end_date FROM TEMP2 GROUP BY 1, TEMP2.diff ORDER BY 2
WITH VT AS (SELECT fail_date AS DAT, 'failed' AS FLAG FROM FAILED UNION ALL SELECT SUCCESS_DATE, 'succeeded' FROM SUCCEEDED), FLAGS AS ( SELECT FLAG AS PERIOD_STATE,DAT, DENSE_RANK()OVER(ORDER BY DAT) - DENSE_RANK()OVER(PARTITION BY FLAG ORDER BY DAT) AS RNK FROM VT WHERE DAT>='2019-01-01' AND DAT<='2019-12-31') SELECT PERIOD_STATE as period_state, MIN(DAT) AS start_date, MAX(DAT) AS end_date FROM FLAGS GROUP BY PERIOD_STATE, RNK ORDER BY MIN(DAT)
WITH a AS ( SELECT fail_date AS log_date, 'failed' as job_status FROM Failed WHERE fail_date >= '2019-01-01' AND fail_date <= '2019-12-31' UNION ALL SELECT success_date AS log_date, 'succeeded' AS job_status FROM Succeeded WHERE success_date >= '2019-01-01' AND success_date <= '2019-12-31' ), b AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY job_status ORDER BY log_date) AS row1, ROW_NUMBER() OVER (ORDER BY log_date) AS row2 FROM a ), c AS ( SELECT log_date, job_status, row1, row2, row2-row1 AS rowdiff FROM b ), d AS ( SELECT job_status AS period_state, MIN(log_date) AS start_date, MAX(log_date) AS end_date FROM c GROUP BY job_status, rowdiff ) SELECT * FROM d
WITH a AS ( SELECT fail_date, DATEDIFF(fail_date, (SELECT MIN(fail_date) FROM Failed))-CAST(RANK() OVER (ORDER BY fail_date) AS SIGNED) as intervals FROM Failed WHERE YEAR(fail_date) = 2019), b AS ( SELECT fail_date, intervals, RANK() OVER (PARTITION BY intervals ORDER BY fail_date) AS st_rk, RANK() OVER (PARTITION BY intervals ORDER BY fail_date DESC) AS ed_rk FROM a), c AS ( SELECT fail_date as start_date, intervals FROM b WHERE st_rk = 1), d AS ( SELECT fail_date AS end_date, intervals FROM b WHERE ed_rk = 1), fail AS ( SELECT start_date, end_date FROM c JOIN d ON c.intervals = d.intervals), a1 AS ( SELECT success_date, DATEDIFF(success_date, (SELECT MIN(success_date) FROM Succeeded))-CAST(RANK() OVER (ORDER BY success_date) AS SIGNED) as intervals FROM Succeeded WHERE YEAR(success_date) = 2019), b1 AS ( SELECT success_date, intervals, RANK() OVER (PARTITION BY intervals ORDER BY success_date) AS st_rk, RANK() OVER (PARTITION BY intervals ORDER BY success_date DESC) AS ed_rk FROM a1), c1 AS ( SELECT success_date as start_date, intervals FROM b1 WHERE st_rk = 1), d1 AS ( SELECT success_date AS end_date, intervals FROM b1 WHERE ed_rk = 1), success AS ( SELECT start_date, end_date FROM c1 JOIN d1 ON c1.intervals = d1.intervals) SELECT 'failed' AS period_state, start_date, end_date FROM fail UNION ALL SELECT 'succeeded', start_date, end_date FROM success ORDER BY start_date
WITH all_records as ( SELECT success_date as event_date , 'succeeded' event_status FROM Succeeded WHERE success_date between '2019-01-01' AND '2019-12-31' UNION ALL SELECT fail_date as event_date , 'failed' event_status FROM Failed WHERE fail_date between '2019-01-01' AND '2019-12-31'), event_grp_ranks AS ( SELECT event_date, event_status , (DENSE_RANK() OVER (ORDER BY event_date ASC)-DENSE_RANK() OVER (PARTITION BY event_status ORDER BY event_date ASC)) as grp_num FROM all_records as ar ORDER BY event_date ) SELECT event_status as period_state , min(event_date) start_date , max(event_date)end_date FROM event_grp_ranks GROUP BY event_status,grp_num ORDER BY start_date ASC
WITH all_records as ( SELECT success_date as event_date , 'succeeded' event_status FROM Succeeded WHERE success_date between '2019-01-01' AND '2019-12-31' UNION ALL SELECT fail_date as event_date , 'failed' event_status FROM Failed WHERE fail_date between '2019-01-01' AND '2019-12-31'), ordered_records as ( SELECT event_date ,event_status FROM all_records ORDER BY event_date ), grp_records AS (SELECT event_date , @grp_num:=(CASE WHEN @prev_status!=event_status THEN @grp_num+1 ELSE @grp_num END )as grp, @prev_status:=event_status as eve_status FROM ordered_records as ord , (SELECT @grp_num:=0 , @prev_status:=NULL) as var_list ) SELECT eve_status as period_state , min(event_date) start_date , max(event_date)end_date FROM grp_records GROUP BY grp ORDER BY grp ASC
WITH combined AS ( SELECT 'failed' AS period_state, fail_date as `date`, RANK() OVER (ORDER BY fail_date) as rank_1 FROM failed WHERE fail_date BETWEEN '2019-01-01' AND '2019-12-31' UNION ALL SELECT 'succeeded' AS period_state, success_date as `date`, RANK() OVER (ORDER BY success_date) as rank_1 FROM succeeded WHERE success_date BETWEEN '2019-01-01' AND '2019-12-31' ), ranked AS ( SELECT period_state, `date`, rank_1, RANK() OVER (ORDER BY `date`) as rank_2 FROM combined ) SELECT period_state, MIN(`date`) AS start_date, MAX(`date`) AS end_date FROM ranked GROUP BY period_state, rank_2 - rank_1
WITH combined AS ( SELECT 'succeeded' AS state, success_date AS dt FROM Succeeded WHERE success_date BETWEEN '2019-01-01' AND '2019-12-31' UNION ALL SELECT 'failed' AS state, fail_date AS dt FROM Failed WHERE fail_date BETWEEN '2019-01-01' AND '2019-12-31' ), results AS ( SELECT state, dt, LAG(state,1) OVER( ORDER BY dt) AS prev_state FROM combined ), results_new AS ( SELECT state, dt, SUM( CASE WHEN state != prev_state THEN 1 ELSE 0 END ) OVER ( ORDER BY dt) AS rn FROM results ), state_check AS ( SELECT rn, MIN(state) AS period_state FROM results_new GROUP BY 1 ), build_dates AS ( SELECT rn, MIN(dt) AS start_date, MAX(dt) AS end_date FROM results_new GROUP BY 1 ) SELECT sc.period_state, bd.start_date, bd.end_date FROM state_check sc JOIN build_dates bd ON sc.rn = bd.rn
WITH combined as ( SELECT fail_date as dt, 'failed' as period_state, DAYOFYEAR(fail_date) - rank() over(ORDER BY fail_date) as period_group FROM Failed WHERE fail_date BETWEEN '2019-01-01' AND '2019-12-31' UNION ALL SELECT success_date as dt, 'succeeded' as period_state, DAYOFYEAR(success_date) - rank() over(ORDER BY success_date) as period_group FROM Succeeded WHERE success_date BETWEEN '2019-01-01' AND '2019-12-31' ) SELECT period_state, min(dt) as start_date, max(dt) as end_date FROM combined GROUP BY period_state,period_group ORDER BY start_date
WITH combined as ( SELECT fail_date as dt, 'failed' as period_state, DAYOFYEAR(fail_date) - row_number() over(ORDER BY fail_date) as period_group FROM Failed WHERE fail_date BETWEEN '2019-01-01' AND '2019-12-31' UNION ALL SELECT success_date as dt, 'succeeded' as period_state, DAYOFYEAR(success_date) - row_number() over(ORDER BY success_date) as period_group FROM Succeeded WHERE success_date BETWEEN '2019-01-01' AND '2019-12-31' ) SELECT period_state, min(dt) as start_date, max(dt) as end_date FROM combined GROUP BY period_state,period_group ORDER BY start_date
WITH cte AS ( SELECT success_date AS adate ,'succeeded' AS period_state , DAYOFYEAR(success_date) - row_number() over(ORDER BY success_date) as period_group FROM Succeeded WHERE LEFT(success_date,4) = '2019' UNION SELECT fail_date AS adate ,'failed' AS period_state , DAYOFYEAR(fail_date) - row_number() over(ORDER BY fail_date) as period_group FROM Failed WHERE LEFT(fail_date,4) = '2019') SELECT period_state ,MIN(adate) AS start_date ,MAX(adate) AS end_date FROM cte GROUP BY period_state,period_group ORDER BY adate
WITH cte AS (SELECT fail_date AS date, 'failed' AS state FROM Failed UNION SELECT success_date AS date, 'succeeded' AS state FROM Succeeded) SELECT period_state, start_date, DATE_ADD(start_date, INTERVAL days - 1 DAY) AS end_date FROM (SELECT state AS period_state, MIN(date) AS start_date, COUNT(*) AS days FROM (SELECT *, ROW_NUMBER() OVER(ORDER BY date) - ROW_NUMBER() OVER(PARTITION BY state ORDER BY date) AS row_diff FROM cte WHERE date BETWEEN '2019-01-01' AND '2019-12-31') AS t GROUP BY state, row_diff) AS a ORDER BY start_date
WITH cte AS (SELECT fail_date AS date, 'failed' AS state FROM Failed UNION SELECT success_date AS date, 'succeeded' AS state FROM Succeeded) SELECT state AS period_state, MIN(date) AS start_date, DATE_ADD(MIN(date), INTERVAL COUNT(*) - 1 DAY) AS end_date FROM (SELECT *, ROW_NUMBER() OVER(ORDER BY date) - ROW_NUMBER() OVER(PARTITION BY state ORDER BY date) AS row_diff FROM cte WHERE date BETWEEN '2019-01-01' AND '2019-12-31') AS t GROUP BY state, row_diff ORDER BY start_date
WITH cte AS (SELECT fail_date AS date, 'failed' AS state FROM Failed UNION SELECT success_date AS date, 'succeeded' AS state FROM Succeeded) SELECT state AS period_state, MIN(date) AS start_date, MAX(date) AS end_date FROM (SELECT *, ROW_NUMBER() OVER(ORDER BY date) - ROW_NUMBER() OVER(PARTITION BY state ORDER BY date) AS row_diff FROM cte WHERE date BETWEEN '2019-01-01' AND '2019-12-31') AS t GROUP BY state, row_diff ORDER BY start_date
WITH cte_Succeded_Failed AS ( SELECT "failed" as period_state , Fail_date as `Day`, dense_rank() over( order by fail_date) as ranking From Failed WHERE YEAR(Fail_date) ="2019" UNION ALL SELECT "succeeded" as period_state , success_date as `Day`, dense_rank() over( order by success_date) as ranking From Succeeded WHERE YEAR(success_date) ="2019" ) Select period_state , Min(`Day`) AS start_date , Max(`Day`) AS end_date From cte_Succeded_Failed Group by period_state, SUBDATE(`Day`,interval ranking Day) ORDER BY 2
WITH cte_Succeded_Failed AS ( SELECT "failed" as period_state , Fail_date as `Day`, dense_rank() over( order by fail_date) as ranking From Failed WHERE YEAR(Fail_date) ="2019" UNION ALL SELECT "succeeded" as period_state , success_date as `Day`, dense_rank() over( order by success_date) as ranking From Succeeded WHERE YEAR(success_date) ="2019" ) Select period_state , Min(`Day`) AS start_date , Max(`Day`) AS end_date From cte_Succeded_Failed Group by period_state,SUBDATE(`Day`,interval ranking Day) ORDER BY 2
WITH cte_date AS ( SELECT fail_date AS dt, 'failed' AS period_state FROM Failed WHERE fail_date BETWEEN '2019-01-01' AND '2019-12-31' UNION ALL SELECT success_date AS dt, 'succeeded' AS period_state FROM Succeeded WHERE success_date BETWEEN '2019-01-01' AND '2019-12-31' ), cte_group AS ( SELECT dt, period_state, RANK() OVER (ORDER BY dt) AS rnk_date, RANK() OVER (PARTITION BY period_state ORDER BY dt) AS rnk_date_state FROM cte_date ) SELECT DISTINCT period_state, FIRST_VALUE(dt) OVER (PARTITION BY period_state, (rnk_date - rnk_date_state) ORDER BY dt ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS start_date, LAST_VALUE(dt) OVER (PARTITION BY period_state, (rnk_date - rnk_date_state) ORDER BY dt ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS end_date FROM cte_group ORDER BY 2
WITH cte_union AS ( SELECT fail_date dt, "failed" st FROM failed UNION ALL SELECT success_date dt, "succeeded" st FROM succeeded ) SELECT st period_state, min(dt) start_date, max(dt) end_date FROM (SELECT dt, (rn-rn_st) diff, st FROM (SELECT dt, ROW_NUMBER() OVER(ORDER BY dt ) rn, ROW_NUMBER() OVER(PARTITION BY st ORDER BY dt) rn_st, st FROM cte_union WHERE 1=1 AND substring(dt,1,4)=2019 ) a) b GROUP BY st,diff ORDER BY 2
WITH dates AS( SELECT fail_date AS date, "failed" AS period_state FROM failed UNION ALL SELECT success_date AS date, "succeeded" AS period_state FROM succeeded ), period AS( SELECT date, period_state, row_number() OVER (ORDER BY period_state, date ASC) AS index_num FROM dates WHERE date BETWEEN "2019-01-01" AND "2019-12-31" ) select period_state, MIN(date) AS start_date, MAX(date) AS end_date FROM period GROUP BY DATE_ADD(date, INTERVAL -index_num day), period_state ORDER BY start_date ASC
WITH f AS ( SELECT "failed" as period_state, min(fail_date) AS start_date, max(fail_date) AS end_date FROM ( SELECT fail_date, DATE_ADD(fail_date, INTERVAL -r_id DAY) AS grp FROM ( SELECT fail_date, ROW_NUMBER () OVER () AS r_id FROM Failed WHERE fail_date >= "2019-01-01" AND fail_date <= "2019-12-31" ) AS ina ) AS inb GROUP BY grp ), s AS ( SELECT "succeeded" as period_state, min(success_date) AS start_date, max(success_date) AS end_date FROM ( SELECT success_date, DATE_ADD(success_date, INTERVAL -r_id DAY) AS grp FROM ( SELECT success_date, ROW_NUMBER () OVER () AS r_id FROM Succeeded WHERE success_date >= "2019-01-01" AND success_date <= "2019-12-31" ) AS ina ) AS inb GROUP BY grp ) SELECT * FROM f UNION SELECT * FROM s ORDER BY start_date
WITH f AS ( SELECT 'failed' AS period_state, MIN(fail_date) AS start_date, MAX(fail_date) AS end_date FROM ( SELECT fail_date, ROW_NUMBER() OVER(ORDER BY fail_date) AS r FROM (SELECT fail_date FROM Failed WHERE fail_date BETWEEN '2019-01-01' AND '2019-12-31') t1 ) t GROUP BY DATE_SUB(fail_date, INTERVAL r DAY) ), s AS ( SELECT 'succeeded' AS period_state, MIN(success_date) AS start_date, MAX(success_date) AS end_date FROM ( SELECT success_date, ROW_NUMBER() OVER(ORDER BY success_date) AS r FROM (SELECT success_date FROM Succeeded WHERE success_date BETWEEN '2019-01-01' AND '2019-12-31') t1 ) t GROUP BY DATE_SUB(success_date, INTERVAL r DAY) ) SELECT period_state, start_date, end_date FROM f UNION ALL SELECT period_state, start_date, end_date FROM s ORDER BY start_date
WITH f AS ( SELECT fail_date AS dt, 'failed' AS period_state, RANK() OVER(ORDER BY fail_date) AS ingroup_ranking FROM Failed WHERE fail_date >= "2019-01-01" AND fail_date < "2020-01-01" ), s AS ( SELECT success_date AS dt, 'succeeded' AS period_state, RANK() OVER(ORDER BY success_date) AS ingroup_ranking FROM Succeeded WHERE success_date >= "2019-01-01" AND success_date < "2020-01-01" ), fs AS ( SELECT * , RANK() OVER(ORDER BY dt) AS over_all_ranking FROM ( SELECT * FROM s UNION ALL SELECT * FROM f ) tmp ORDER BY dt ), ffs AS ( SELECT *, (over_all_ranking - ingroup_ranking) AS diff_group FROM fs ) SELECT period_state, MIN(dt) AS start_date, MAX(dt) AS end_date FROM ffs GROUP BY diff_group, period_state ORDER BY start_date
WITH main AS (SELECT 'failed' AS period_state, fail_date AS date1 FROM Failed WHERE fail_date BETWEEN '2019-01-01' AND '2019-12-31' UNION ALL SELECT 'succeeded' AS period_state, success_date AS date1 FROM Succeeded WHERE success_date BETWEEN '2019-01-01' AND '2019-12-31') , mappings AS (SELECT *, DENSE_RANK() OVER (ORDER BY date1) - DENSE_RANK() OVER (PARTITION BY period_state ORDER BY date1) AS mappings FROM main) SELECT period_state, MIN(date1) AS start_date, MAX(date1) AS end_date FROM mappings GROUP BY period_state, mappings ORDER BY start_date
WITH result as ( SELECT fail_date as dates, 'failed' as state, row_number() over(order by fail_date) rnk FROM failed where fail_date between '2019-01-01' and '2019-12-31' UNION SELECT success_date as dates, 'succeeded' as state, row_number() over(order by success_date) rnk FROM succeeded where success_date between '2019-01-01' and '2019-12-31' ) SELECT state as period_state, min(dates) as start_date, max(dates) as end_date FROM result group by date_sub(dates,interval rnk day),state order by start_date
WITH sf_dates as ( SELECT 'succeeded' as period_state, success_date as dt FROM succeeded WHERE success_date between '2019-01-01' and '2019-12-31' UNION SELECT 'failed' as period_state, fail_date as dt FROM failed WHERE fail_date between '2019-01-01' and '2019-12-31' ), dt_bkt as ( SELECT *, RANK() OVER (ORDER BY dt) as rnk1, RANK() OVER (PARTITION BY period_state ORDER BY dt) as rnk2 FROM sf_dates ORDER BY dt ) SELECT period_state, min(dt) as start_date, max(dt) as end_date FROM dt_bkt group by rnk1-rnk2, period_state order by start_date
WITH states AS ( SELECT fail_date as period_date, 'failed' as period_state FROM failed WHERE fail_date BETWEEN '2019-01-01' AND '2019-12-31' UNION ALL SELECT success_date as period_date, 'succeeded' as period_state FROM succeeded WHERE success_date BETWEEN '2019-01-01' AND '2019-12-31'), intervals AS ( SELECT period_date, period_state, RANK() OVER (PARTITION BY period_state ORDER BY period_date) as rownum, RANK() OVER (ORDER BY period_date) as grp FROM states) SELECT period_state, MIN(period_date) as start_date, MAX(period_date) as end_date FROM intervals GROUP BY (grp-rownum), period_state ORDER BY start_date
WITH states AS ((SELECT fail_date AS date, "failed" AS period_state FROM Failed) UNION ALL (SELECT success_date AS date, "succeeded" AS period_state FROM Succeeded)), all_states AS (SELECT date, period_state, ROW_NUMBER() OVER(ORDER BY period_state, date ASC) AS rn FROM states WHERE date BETWEEN "2019-01-01" AND "2019-12-31") SELECT period_state, MIN(date) AS start_date, MAX(date) AS end_date FROM all_states GROUP BY DATE_SUB(date, INTERVAL rn DAY), period_state ORDER BY start_date ASC
WITH stg AS ( SELECT 'failed' AS period_state, fail_date AS dts, fail_date - INTERVAL (ROW_NUMBER() OVER(ORDER BY fail_date)) DAY AS grp FROM Failed WHERE DATE_FORMAT(fail_date, '%Y') = '2019' UNION ALL SELECT 'succeeded' AS period_state, success_date AS dts, success_date - INTERVAL (ROW_NUMBER() OVER(ORDER BY success_date)) DAY AS grp FROM Succeeded WHERE DATE_FORMAT(success_date, '%Y') = '2019' ) SELECT period_state, MIN(dts) AS start_date, MAX(dts) AS end_date FROM stg GROUP BY period_state, grp ORDER BY start_date
WITH t AS ( SELECT fail_date AS day, 'failed' AS period_state, ROW_NUMBER() OVER (ORDER BY fail_date) AS row_num FROM Failed WHERE fail_date BETWEEN '2019-01-01' AND '2019-12-31' UNION ALL SELECT success_date AS day, 'succeeded' AS period_state, ROW_NUMBER() OVER (ORDER BY success_date) AS row_num FROM Succeeded WHERE success_date BETWEEN '2019-01-01' AND '2019-12-31' ) SELECT period_state, MIN(day) AS start_date, MAX(day) AS end_date FROM t GROUP BY DATE_ADD(day, INTERVAL -row_num DAY), period_state ORDER BY start_date
WITH t(dateval,state) AS ( SELECT fail_date,'failed' FROM Failed UNION ALL SELECT success_date, 'succeeded' FROM Succeeded ) SELECT DISTINCT state as 'period_state', FIRST_VALUE(dateval) OVER(PARTITION BY IslandNumber ORDER BY dateval ASC) 'start_date', FIRST_VALUE(dateval)OVER(PARTITION BY IslandNumber ORDER BY dateval DESC) 'end_date' FROM (SELECT SUM(CASE WHEN Prevstate IS NULL OR prevstate!=state THEN 1 ELSE 0 END) OVER(ORDER BY dateval)'IslandNumber', dateval,state FROM (SELECT dateval,state,lag(state) OVER(ORDER BY dateval) prevstate FROM t WHERE dateval BETWEEN '2019-01-01' AND '2019-12-31' )t1 )t2
WITH t1 AS (SELECT 'succeeded' AS period_state, success_date, RANK() OVER (ORDER BY success_date) sdrank FROM succeeded WHERE success_date LIKE '2019%'), t2 AS (SELECT period_state, MIN(success_date) start_date, MAX(success_date) end_date FROM t1 GROUP BY DATE_SUB(success_date, INTERVAL sdrank DAY)), t3 AS (SELECT 'failed' AS period_state, fail_date, RANK() OVER (ORDER BY fail_date) fdrank FROM failed WHERE fail_date LIKE '2019%'), t4 AS (SELECT period_state, MIN(fail_date) start_date, MAX(fail_date) end_date FROM t3 GROUP BY DATE_SUB(fail_date, INTERVAL fdrank DAY)) SELECT period_state, start_date, end_date FROM t2 UNION SELECT period_state, start_date, end_date FROM t4 ORDER BY start_date
WITH t1 AS (SELECT fail_date AS day, 'failed' AS stats, RANK() OVER(ORDER BY fail_date) AS rnk FROM Failed WHERE fail_date BETWEEN '2019-01-01' AND '2019-12-31' UNION ALL SELECT success_date AS day, 'succeeded' AS stats, RANK() OVER (ORDER BY success_date) AS rnk FROM Succeeded WHERE success_date BETWEEN '2019-01-01' AND '2019-12-31'), t2 AS (SELECT day, RANK() OVER (ORDER BY day) AS overall_ranking, stats, rnk, RANK() OVER(ORDER BY day) - rnk AS inv FROM t1) SELECT stats AS period_state, MIN(day) AS start_date, MAX(day) AS end_date FROM t2 GROUP BY inv, stats ORDER BY start_date
WITH t1 AS( SELECT 'failed' AS period_state, fail_date AS date FROM Failed WHERE fail_date BETWEEN '2019-01-01'AND '2019-12-31' UNION ALL SELECT 'succeeded' AS period_state, success_date AS date FROM Succeeded WHERE success_date BETWEEN '2019-01-01'AND '2019-12-31' ORDER BY 2 ), t2 as( SELECT * ,lag(period_state) OVER (ORDER BY date) AS _last ,lead(period_state) OVER (ORDER BY date) AS _prev FROM t1 ), t3 as( SELECT period_state, date, CASE WHEN _last IS NULL THEN 'start' WHEN period_state <> _last THEN 'start' END AS _star, CASE WHEN _prev IS NULL THEN 'end' WHEN period_state <> _prev THEN 'end' END AS _end FROM t2 ), t4 as( SELECT * ,ROW_NUMBER() OVER (ORDER BY date) AS _loop FROM t3 WHERE _star IS NOT NULL ), t5 AS ( SELECT * ,ROW_NUMBER() OVER (ORDER BY date) AS _loop FROM t3 WHERE _end IS NOT NULL ) SELECT t4.period_state, t4.date AS start_date, t5.date AS end_date FROM t4 JOIN t5 ON t4._loop = t5._loop
WITH tasks AS ( SELECT 'failed' as period_state, fail_date period_date FROM failed WHERE fail_date BETWEEN '2019-01-01' AND '2019-12-31' UNION ALL SELECT 'succeeded' as period_state,success_date period_date FROM Succeeded WHERE success_date BETWEEN '2019-01-01' AND '2019-12-31' ), group_calc as ( SELECT period_state, period_date, (RANK() OVER(ORDER BY period_date ASC) - seq) group_num FROM ( SELECT *, RANK() OVER(PARTITION BY period_state ORDER BY period_date ASC) as seq FROM tasks) tab ) SELECT period_state, MIN(period_date) as start_date, MAX(period_date) as end_date FROM group_calc GROUP BY period_state, group_num
WITH tb1 AS ( SELECT fail_date AS date, 'failed' AS s FROM Failed UNION SELECT success_date AS date, 'succeeded' AS s FROM Succeeded ), tb2 AS ( SELECT *, ROW_NUMBER() OVER (PARTITION BY s ORDER BY date) AS r, ROW_NUMBER() OVER (ORDER BY date) AS r2 FROM tb1 WHERE Year(date) = 2019 ) SELECT s AS period_state, MIN(date) AS start_date, MAX(date) AS end_date FROM tb2 GROUP BY r2-r, s ORDER BY start_date
WITH tb1 AS(SELECT fail_date AS day, 'failed' AS stats, RANK() OVER (ORDER BY fail_date) AS rk FROM Failed WHERE fail_date BETWEEN '2019-01-01' AND '2019-12-31' UNION SELECT success_date AS day, 'succeeded' AS stats, RANK() OVER (ORDER BY success_date) AS rk FROM Succeeded WHERE success_date BETWEEN '2019-01-01' AND '2019-12-31'), tb2 AS(SELECT day, RANK() OVER (ORDER BY day) AS overall_ranking, stats, rk, RANK() OVER (ORDER BY day) - rk AS inv FROM tb1 ) SELECT stats AS period_state, MIN(day) AS start_date, MAX(day) AS end_date FROM tb2 GROUP BY inv, stats ORDER BY start_date
WITH temp AS ( SELECT fail_date AS dates, 0 AS status_flag FROM Failed WHERE fail_date >= '2019-01-01' AND fail_date <= '2019-12-31' UNION SELECT success_date AS dates, 1 AS status_flag FROM Succeeded WHERE success_date >= '2019-01-01' AND success_date <= '2019-12-31' ORDER BY dates) SELECT CASE WHEN status_flag=1 THEN 'succeeded'ELSE 'failed' END AS period_state, dates AS start_date, COALESCE(LEAD(DATE_ADD(dates, INTERVAL -1 day)) OVER(ORDER BY dates), (SELECT MAX(dates) FROM temp)) AS end_date FROM( SELECT *, LAG(dates) OVER(PARTITION BY status_flag ORDER BY dates) AS lag_dates FROM temp) AS sub1 WHERE lag_dates IS NULL OR lag_dates!=DATE_ADD(dates, INTERVAL -1 day)
WITH temp AS ( Select fail_date as day, 'failed' as stats, DENSE_RANK() OVER(Order by fail_date) as rk from failed WHERE fail_date between '2019-01-01' and '2019-12-31' UNION Select success_date as day,'succeeded' as stats, DENSE_RANK() OVER(Order by success_date) as rk from succeeded WHERE success_date between '2019-01-01' and '2019-12-31' ) Select stats as period_state, MIN(day) as start_date, MAX(day) as end_date from ( Select day, DENSE_RANK() OVER(Order by day) as rko, stats,rk, (DENSE_RANK() OVER(order by day)-rk) as inv from temp order by day )temp group by inv, stats order by start_date
WITH temp AS (SELECT MIN(fail_date) AS start_date, MAX(fail_date) AS end_date, "failed" AS period_state FROM ( SELECT fail_date, ROW_NUMBER() OVER (ORDER BY fail_date) AS rowNum FROM Failed WHERE fail_date BETWEEN '2019-01-01' AND '2019-12-31') t1 GROUP BY DATE_SUB(fail_date, INTERVAL rowNum DAY) UNION ALL SELECT MIN(success_date) AS start_date, MAX(success_date) AS end_date, "succeeded" AS period_state FROM ( SELECT success_date, ROW_NUMBER() OVER (ORDER BY success_date) AS rowNum FROM Succeeded WHERE success_date BETWEEN '2019-01-01' AND '2019-12-31') t2 GROUP BY DATE_SUB(success_date, INTERVAL rowNum DAY)) SELECT period_state, start_date, end_date FROM temp ORDER BY start_date ASC
WITH tmp1 AS ( SELECT "failed" AS period_state, MIN(fail_date) AS start_date, MAX(fail_date) AS end_date FROM ( SELECT fail_date, DATE_ADD(fail_date, INTERVAL - ROW_NUMBER() OVER (ORDER BY fail_date) DAY) AS grp FROM Failed WHERE fail_date BETWEEN "2019-01-01" AND "2019-12-31" ORDER BY fail_date ) AS ina GROUP BY grp ), tmp2 AS ( SELECT "succeeded" AS period_state, MIN(success_date) AS start_date, MAX(success_date) AS end_date FROM ( SELECT success_date, DATE_ADD(success_date, INTERVAL - ROW_NUMBER() OVER (ORDER BY success_date) DAY) AS grp FROM Succeeded WHERE success_date BETWEEN "2019-01-01" AND "2019-12-31" ORDER BY success_date ) AS ina GROUP BY grp ) SELECT * FROM tmp1 UNION SELECT * FROM tmp2 ORDER BY start_date
WITH total AS ( SELECT fail_date AS date, 'failed' AS status FROM Failed UNION SELECT success_date AS date, 'succeeded' AS status FROM Succeeded ORDER BY date ), ranking AS ( SELECT date, status, RANK() OVER(ORDER BY date) AS overall_ranking, RANK() OVER(PARTITION BY status ORDER BY date) AS status_ranking FROM total ), period AS ( SELECT date, status, (overall_ranking-status_ranking) AS period FROM ranking ) SELECT status AS period_state, MIN(date) AS start_date, MAX(date) AS end_date FROM period WHERE date >= '2019-01-01' AND date <= '2019-12-31' GROUP BY status, period ORDER BY start_date
WITH u AS ( SELECT 'succeeded' state, success_date 'date' FROM succeeded WHERE success_date BETWEEN '2019-01-01' AND '2019-12-31' UNION SELECT 'failed' state, fail_date 'date' FROM failed WHERE fail_date BETWEEN '2019-01-01' AND '2019-12-31' ), t AS ( SELECT state, date, LAG(state) OVER(ORDER BY date) pre_state, LEAD(state) OVER(ORDER BY date) seq_state FROM u ), start_t AS ( SELECT state, date, ROW_NUMBER() OVER(ORDER BY date) row_num FROM t WHERE pre_state<>state OR ISNULL(pre_state) ), end_t AS ( SELECT state, date, ROW_NUMBER() OVER(ORDER BY date) row_num FROM t WHERE seq_state<>state OR ISNULL(seq_state) ) SELECT s.state period_state, s.date start_date, e.date end_date FROM start_t s JOIN end_t e ON s.row_num=e.row_num ORDER BY start_date
WITH u AS ( SELECT 'succeeded' state, success_date 'date' FROM succeeded WHERE success_date BETWEEN '2019-01-01' AND '2019-12-31' UNION SELECT 'failed' state, fail_date 'date' FROM failed WHERE fail_date BETWEEN '2019-01-01' AND '2019-12-31' ), t AS ( SELECT state, date, RANK() OVER(ORDER BY date) rk, RANK() OVER(PARTITION BY state ORDER BY date) s_rk FROM u ) SELECT state period_state, MIN(date) start_date, MAX(date) end_date FROM t GROUP BY state, rk-s_rk ORDER BY start_date
WITH unioned_table AS ( SELECT fail_date as record_date, 'failed' as state, RANK() OVER (ORDER BY fail_date) as rk FROM Failed WHERE fail_date BETWEEN '2019-01-01' AND '2019-12-31' UNION SELECT success_date as record_date, 'succeeded' as state, RANK() OVER (ORDER BY success_date) as rk FROM Succeeded WHERE success_date BETWEEN '2019-01-01' AND '2019-12-31' ), ranked_unioned_table AS ( SELECT *, RANK() OVER (ORDER BY record_date) as all_rk, (RANK() OVER (ORDER BY record_date) - rk) as rank_diff FROM unioned_table ) SELECT state as period_state, min(record_date) as start_date, max(record_date) as end_date FROM ranked_unioned_table GROUP BY rank_diff, state ORDER BY start_date
WITH wa as (select 'failed' as period_state, fail_date as dt from Failed UNION ALL select 'succeeded' as period_state, success_date from Succeeded ) ,wb as (select x.* ,concat(x.period_state ,(row_number() over(order by x.dt) - row_number() over(partition by x.period_state order by x.dt) ) ) as xtag from wa x ) select x.period_state ,min(x.dt) as start_date ,max(x.dt) as end_date from wb x where x.dt between str_to_date('01-01-2019','%m-%d-%Y') and str_to_date('12-31-2019','%m-%d-%Y') group by x.xtag,x.period_state order by 2
WITH x AS ( SELECT 'failed' AS period_state, fail_date AS date_x, ROW_NUMBER() OVER(ORDER BY fail_date) AS r FROM Failed UNION SELECT 'succeeded' AS period_state, success_date AS date_x, ROW_NUMBER() OVER(ORDER BY success_date) AS r FROM Succeeded ) SELECT period_state, MIN(date_x) AS start_date, MAX(date_x) AS end_date FROM x WHERE date_x LIKE '2019%' GROUP BY 1, DATE_ADD(date_x, INTERVAL -r DAY) ORDER BY 2
WITH x AS ( SELECT 'failed' AS period_state, fail_date AS date_x, ROW_NUMBER() OVER(ORDER BY fail_date) AS rownum FROM Failed UNION SELECT 'succeeded' AS period_state, success_date AS date_x, ROW_NUMBER() OVER(ORDER BY success_date) AS rownum FROM Succeeded ) SELECT period_state, MIN(date_x) AS start_date, MAX(date_x) AS end_date FROM x WHERE date_x LIKE '2019%' GROUP BY 1, DATE_SUB(date_x, INTERVAL rownum DAY) ORDER BY 2
With CTE AS (SELECT * FROM (SELECT fail_date AS dates, 'failed' AS state FROM Failed UNION SELECT success_date AS dates, 'succeeded' AS state FROM Succeeded ORDER BY dates ASC) sub0 WHERE dates BETWEEN '2019-01-01' AND '2019-12-31') SELECT state AS period_state, dates AS start_date, CASE WHEN RANK() OVER(ORDER BY dates DESC) = 1 THEN (SELECT MAX(dates) from CTE) ELSE DATE_SUB(lead(dates,1) OVER (ORDER BY dates ASC), interval 1 day) END AS end_date FROM (SELECT dates, state, CASE WHEN LAG(state,1) OVER(ORDER BY dates ASC) = state THEN 0 ELSE 1 END AS flag FROM CTE) sub1 WHERE flag = 1
With Logs as ( SELECT fail_date as log_date, 'failed' as state FROM Failed UNION SELECT success_date as log_date, 'succeeded' as state FROM Succeeded ), GroupDiff as ( SELECT log_date, state, row_number() over (order by log_date) as RowNums, row_number() over (partition by state order by log_date) as gRowNum, row_number() over (order by log_date) - row_number() over (partition by state order by log_date) as gDiff FROM Logs WHERE log_date between '2019-01-01' and '2019-12-31' ORDER BY log_date ) SELECT state as period_state, min(log_date) as start_date, max(log_date) as end_date FROM GroupDiff GROUP BY state, gDiff
With cte as (Select fail_date as the_date, 'failed' as period_state from Failed Where Left(fail_date,4)='2019' Union all Select success_date as the_date, 'succeeded' as period_state from Succeeded Where Left(success_date,4)='2019') Select period_state, min(the_date) as start_date, max(THE_date) as end_date From ( Select period_state, the_date, rank() over (partition by period_state order by the_date) as ranking, rank() over (order by the_date) as id From cte) as T Group by T.period_state, (T.id-T.ranking) Order by 2
With dat As ((Select fail_date as dat, "failed" as state From Failed Where fail_date Between '2019-01-01' AND '2019-12-31') Union (Select success_date as dat, "succeeded" as state From Succeeded Where success_date Between '2019-01-01' AND '2019-12-31')), temp as (Select subdate(dat,interval 1 day) as dat, (CASE WHEN state = "Failed" Then "Succeeded" ELSE "Failed" END) as state From dat Where dat = (Select min(dat) FROM dat) UNION Select * FROM dat UNION Select adddate(dat,interval 1 day) as dat, (CASE WHEN state = "Failed" Then "Succeeded" ELSE "Failed" END) as state From dat Where dat = (Select max(dat) FROM dat)) Select period_state, min(start_date) as start_date, end_date From (Select a.state as period_state, a.dat as start_date, subdate(min(b.dat),interval 1 day) as end_date FROM temp a, temp b Where a.dat < b.dat And a.state <> b.state Group By a.dat) as a Where start_date <> (Select subdate(min(dat), interval 1 day) FROM dat) Group By end_date Order by start_date
With succeeded_ranges (period_state, start_date, end_date) as (Select "succeeded", Min(success_date), Max(success_date) From (Select *, Sum(`match`) Over(Order By success_date) as block From (Select *, coalesce(Datediff(success_date, Lag(success_date) Over(Order By success_date)) != 1, 0) as `match` From Succeeded Where Year(success_date) = 2019) tmp) tmp2 Group By block), failed_ranges (period_state, start_date, end_date) as (Select "failed", Min(fail_date), Max(fail_date) From (Select *, Sum(`match`) Over(Order By fail_date) as block From (Select *, coalesce(Datediff(fail_date, Lag(fail_date) Over(Order By fail_date)) != 1, 0) as `match` From Failed Where Year(fail_date) = 2019) tmp) tmp2 Group By block) Select * From (Select * From succeeded_ranges Union All Select * From failed_ranges) tmp Order By start_date
With tmp as ( SELECT success_date as day, 'succeeded' as state, rank() over(order by success_date) rk FROM Succeeded WHERE success_date BETWEEN '2019-1-1' AND '2019-12-31' UNION ALL SELECT fail_date as day, 'failed' as state, rank() over(order by fail_date) rk FROM Failed WHERE fail_date BETWEEN '2019-1-1' AND '2019-12-31' ) SELECT state as period_state, MIN(day) as start_date, MAX(day) as end_date FROM (SELECT day, state, rank() over(order by day) g_rk, rank() over(order by day) - rk inv FROM tmp) a GROUP BY state, inv ORDER BY 2
period_state, start_date , end_date FROM ( SELECT 'succeeded' as period_state, min(success_date) as start_date ,max(success_date) as end_date FROM ( SELECT success_date , datediff(success_date, LAG(success_date, 1) over(order by success_date asc)) as date_diff , row_number() over(order by success_date asc) as rnk , date_sub(success_date, interval (row_number() over(order by success_date asc)) day) as date_sub FROM succeeded WHERE Year(success_date) = 2019 ) a group by date_sub UNION SELECT 'failed' as period_state, min(fail_date) as start_date ,max(fail_date) as end_date FROM ( SELECT fail_date , datediff(fail_date, LAG(fail_date, 1) over(order by fail_date asc)) as date_diff , row_number() over(order by fail_date asc) as rnk , date_sub(fail_date, interval (row_number() over(order by fail_date asc)) day) as date_sub FROM failed WHERE Year(fail_date) = 2019 ) a group by date_sub ) A order by start_date asc, end_date asc
select "failed" as period_state, min(fail_date) as start_date, max(fail_date) as end_date from( select fail_date, DAYOFYEAR(fail_date) as days, rank()over(order by fail_date) as rnk from Failed where fail_date between "2019-01-01" and "2019-12-31") f group by days - rnk union select "succeeded" as period_state, min(success_date) as start_date, max(success_date) as end_date from (select success_date, DAYOFYEAR(success_date) as days, rank()over(order by success_date) as rnk from Succeeded where success_date between "2019-01-01" and "2019-12-31") s group by days-rnk order by start_date
select "failed" as period_state,min(fail_date) start_date,max(fail_date) end_date from ( select fail_date , date_sub(fail_date,interval row_number() over (order by fail_date) day) grp from failed where year(fail_date) = '2019' ) fail group by grp union all select "succeeded" as period_state,min(success_date) start_date,max(success_date) end_date from (select success_date, date_sub(success_date,interval row_number() over (order by success_date ) day ) grp from succeeded where year(success_date) = '2019') success group by grp order by start_date
select "succeeded" period_state, min(success_date) start_date, max(success_date) end_date from ( select success_date, datediff(success_date,"2019-01-01") diff,cast(row_number() over() as CHAR) rk from Succeeded where success_date between "2019-01-01" and "2019-12-31" ) as sub group by diff - rk union select "failed" period_state, min(fail_date) start_date, max(fail_date) end_date from ( select fail_date, datediff(fail_date,"2019-01-01") diff,cast(row_number() over() as CHAR) rk from Failed where fail_date between "2019-01-01" and "2019-12-31" ) as sub group by diff - rk order by start_date
select 'failed' as period_state, min(fail_date) as start_date, max(fail_date) as end_date from ( select fail_date, DAYOFYEAR(fail_date) as days, row_number() over(order by fail_date) as rn from Failed where YEAR(fail_date) = 2019) t1 group by days-rn union select 'succeeded' as period_state, min(success_date) as start_date, max(success_date) as end_date from ( select success_date, DAYOFYEAR(success_date) as days, row_number() over(order by success_date) as rn from Succeeded where YEAR(success_date) = 2019) t2 group by days-rn order by start_date
select 'succeeded' as period_state , min(success_date) as start_date, max(success_date) as end_date from (select row_number() over (order by success_date) as rownum, dayofyear(success_date) as doy, success_date from Succeeded where year(success_date) = 2019)a group by doy - cast(rownum as signed) union all select 'failed' as period_state , min(fail_date) as start_date, max(fail_date) as end_date from (select row_number() over (order by fail_date) as rownum, dayofyear(fail_date) as doy, fail_date from failed where year(fail_date) = 2019)a group by doy - cast(rownum as signed) order by 2
select 'succeeded' period_state,min(success_date) start_date,max(success_date) end_date from (select success_date,row_number() over(order by success_date) rownum from succeeded where success_date between '2019-01-01' and '2019-12-31')a group by DAYOFYEAR(success_date) - rownum union select 'failed' period_state,min(fail_date) start_date,max(fail_date) end_date from (select fail_date,row_number() over(order by fail_date) rownum from Failed where fail_date between '2019-01-01' and '2019-12-31')a group by DAYOFYEAR(fail_date) - rownum order by 2
select * from ( select 'failed' as 'period_state',min(fail_date) as 'start_date', max(fail_date) as 'end_date' from ( select fail_date, row_number() over() as 'id' from failed where fail_date between '2019-01-01' and '2019-12-31') as A group by dayofyear(fail_date) - id union all select 'succeeded' as 'period_state',min(success_date) as 'start_date', max(success_date) as 'end_date' from ( select success_date, row_number() over() as 'id' from Succeeded where success_date between '2019-01-01' and '2019-12-31') as A group by dayofyear(success_date) - id ) as A order by start_date
select * from ( select 'failed' as period_state, min(fail_date) as start_date, max(fail_date) as end_date from ( select fail_date, @rank := case when @placehold = fail_date - interval 1 day then @rank else @rank + 1 end as r, @placehold:= fail_date from ( select * from Failed where fail_date between '2019-01-01' and '2019-12-31' order by fail_date ) temp, (select @rank:= 0, @placehold:= '') intr ) temp2 group by r union select 'succeeded' as period_state, min(success_date) as start_date, max(success_date) as end_date from ( select success_date, @rank2 := case when @placehold2 = success_date - interval 1 day then @rank2 else @rank2 + 1 end as r2, @placehold2:= success_date from ( select * from Succeeded where success_date between '2019-01-01' and '2019-12-31' order by success_date ) temp, (select @rank2:= 0, @placehold2:= '') intr ) temp2 group by r2 ) main order by start_date
select * from ( select 'succeeded' as period_state, min(success_date) as start_date, max(success_date) as end_date from (select success_date, rank() over(order by success_date desc) as rnk from Succeeded where year(success_date)='2019')t1 group by Date_add(success_date,interval rnk day) union select 'failed' as period_state, min(fail_date) as start_date, max(fail_date) as end_date from (select fail_date, rank() over(order by fail_date desc) as rnk from Failed where year(fail_date)='2019')t1 group by Date_add(fail_date,interval rnk day) ) t3 order by start_date
select * from ( select period_state, min(day) as start_date, max(day) as end_date from (select period_state, day, (case when period_state = 'failed' then row_number() over (order by day) - rf else row_number() over (order by day) - rs end) as dd from (select fail_date as day, 'failed' as period_state, row_number() over (order by fail_date) as rf, null as rs from Failed where fail_date >= '2019-01-01' and fail_date <= '2019-12-31' union select success_date as day, 'succeeded' as period_state, null as rf, row_number() over (order by success_date) as rs from Succeeded where success_date >= '2019-01-01' and success_date <= '2019-12-31' ) a ) b group by period_state, dd ) c order by start_date
select * from ((select 'succeeded' as period_state, min(success_date) as start_date, max(success_date) as end_date from (select success_date, DAYOFYEAR(success_date) - row_number() over(order by success_date asc) as gap from Succeeded where success_date between '2019-01-01' and '2019-12-31')s group by gap) union (select 'failed' as period_state, min(fail_date) as start_date, max(fail_date) as end_date from (select fail_date, DAYOFYEAR(fail_date) - row_number() over(order by fail_date asc) as gap from Failed where fail_date between '2019-01-01' and '2019-12-31')s group by gap))a order by start_date
select * from ((select 'succeeded' period_state, min(success_date)start_date, max(success_date)end_date from (select success_date, if(datediff(success_date, @prev)=1, @count, @count:=@count+1) num, @prev:=success_date from Succeeded, (select @prev:=null, @count:=0)i where year(success_date)='2019') t group by t.num) union all (select 'failed' period_state, min(fail_date)start_date, max(fail_date)end_date from (select fail_date, if(datediff(fail_date, @prev)=1, @count, @count:=@count+1) num, @prev:=fail_date from Failed, (select @prev:=null, @count:=0)i where year(fail_date)='2019') t group by t.num)) t order by start_date
select * from (select 'succeeded' as period_state, min(success_date) as start_date, max(success_date) as end_date from (select success_date, row_number() over (order by success_date) as ranking from Succeeded where success_date >= '2019-01-01' and success_date <= '2019-12-31') as t group by (to_days(success_date) - ranking) union select 'failed' as period_state, min(fail_date) as start_date, max(fail_date) as end_date from ( select fail_date, row_number() over (order by fail_date) as ranking from Failed where fail_date >= '2019-01-01' and fail_date <= '2019-12-31' ) as u group by (to_days(fail_date) - ranking)) as v order by start_date
select * from (select period_state, min(fail_date) as start_date, max(fail_date) as end_date from (select fail_date, 'failed' as period_state, datediff(fail_date, '2018-12-31') - row_number() over (order by fail_date) as dd from Failed where fail_date >= '2019-01-01' and fail_date <= '2019-12-31' ) a group by dd union select period_state, min(success_date) as start_date, max(success_date) as end_date from (select success_date, 'succeeded' as period_state, datediff(success_date, '2018-12-31') - row_number() over (order by success_date) as dd from Succeeded where success_date >= '2019-01-01' and success_date <= '2019-12-31' ) a group by dd) b order by start_date
select a.period_state, min(a.dt) as start_date, max(a.dt) as end_date from (select fail_date as dt, 'failed' as period_state, dayofyear(fail_date) - row_number() over (order by fail_date) as period_group from Failed where fail_date between '2019-01-01' and '2019-12-31' union all select success_date as dt, 'succeeded' as period_state, dayofyear(success_date) - row_number() over (order by success_date) as period_group from Succeeded where success_date between '2019-01-01' and '2019-12-31') a group by a.period_state, a.period_group order by start_date
select b.period_state, min(b.start_date) as start_date, max(b.start_date) as end_date from ( select * from ( select "failed" as period_state, fail_date as start_date, Dense_rank() over(order by fail_date) as i from Failed union select "succeeded" as period_state, success_date as start_date, Dense_rank() over(order by success_date) as i from Succeeded ) a where a.start_date between "2019-01-01" and "2019-12-31" order by a.start_date ) b group by b.period_state, date_add(b.start_date, interval -b.i day) order by min(b.start_date)
select b.period_state, min(b.start_date) as start_date, max(b.start_date) as end_date from ( select * from ( select "failed" as period_state, fail_date as start_date, Dense_rank() over(order by fail_date) as i from Failed where fail_date between "2019-01-01" and "2019-12-31" union select "succeeded" as period_state, success_date as start_date, Dense_rank() over(order by success_date) as i from Succeeded where success_date between "2019-01-01" and "2019-12-31" ) a order by a.start_date ) b group by b.period_state, date_add(b.start_date, interval -b.i day) order by min(b.start_date)
select case when checker = 1 then 'succeeded' else 'failed' end period_state, min(date) start_date, max(date) end_date from (select date, checker, to_days(date) - checker*365 - rank() over (partition by checker order by date) tracker from (select fail_date date, 0 checker from failed union select success_date date, 1 checker from succeeded order by date) temp where date >= '2019-01-01' and date <= '2019-12-31' order by date) d group by tracker
select case when max(tbl) = 's' then 'succeeded' else 'failed' end as period_state, min(dt) as start_date, max(dt) as end_date from ( select dt,tbl, id - row_number() over (partition by tbl order by dt) grp from ( select *, row_number() over (order by dt asc) id from ( select success_date as dt , 's' tbl from Succeeded union select fail_date as dt , 'f' tbl from Failed ) a where dt between '2019-01-01' and '2019-12-31' ) b ) c group by tbl,grp order by 2,3
select checker period_state, min(date) start_date, max(date) end_date from ( select date, checker, rank() over (order by date) - inrank tracker from ( select fail_date date, 'failed' checker, rank() over (order by fail_date) inrank from failed where fail_date >= '2019-01-01' and fail_date <= '2019-12-31' union select success_date date, 'succeeded' checker, rank() over (order by success_date) inrank from succeeded where success_date >= '2019-01-01' and success_date <= '2019-12-31' ) temp order by date)d group by checker, tracker
select period_state , start_date , end_date from ( select 'failed' period_state , min(fail_date) start_date , max(fail_date) end_date from ( select fail_date , rank() over( order by fail_date ) rnk from Failed where fail_date >= '2019-01-01' and fail_date<= '2019-12-31' ) a group by DATE_ADD( fail_date,interval -rnk day ) union all select 'succeeded' period_state , min(success_date) start_date , max(success_date) end_date from ( select success_date , rank() over( order by success_date ) rnk from Succeeded where success_date >= '2019-01-01' and success_date<= '2019-12-31' ) a group by DATE_ADD( success_date,interval -rnk day ) ) b order by start_date
select period_state , start_date, end_date from ((select min(fail_date) as start_date, max(fail_date) as end_date, 'failed' as period_state from (select *, datediff(fail_date, con_date) as date_diff from (select *, date_add('2018-12-31', interval rn day) as con_date from (select *, row_number() over() as rn from (select * from Failed where fail_date between '2019-01-01' and '2019-12-31' order by fail_date) as a) as b) as c) as d group by date_diff) union all (select min(success_date) as start_date, max(success_date) as end_date, 'succeeded' as period_state from (select *, datediff(success_date, con_date) as date_diff from (select *, date_add('2018-12-31', interval rn day) as con_date from (select *, row_number() over() as rn from (select * from Succeeded where success_date between '2019-01-01' and '2019-12-31' order by success_date) as a) as b) as c) as d group by date_diff)) as C order by start_date
select period_state, min(date) as start_date, max(date) as end_date from ( select date, period_state, row_number() over (order by date) as overall_rk, ((row_number() over (order by date))-rk) as inte from ( select 'succeeded' as period_state, success_date as date, row_number() over (order by success_date) as rk from succeeded union (select 'failed' as period_state, fail_date as date, row_number() over (order by fail_date) as rk from failed))a )c where date between '2019-01-01' and '2019-12-31' group by period_state, inte order by start_date asc, period_state
select period_state, min(date) as start_date, max(date) as end_date from (select *, date_sub(date, interval row_number() over (partition by period_state order by date) day) as dgroup from (select fail_date as date, "failed" as period_state from Failed where fail_date between "2019-01-01" and "2019-12-31" union select success_date as date, "succeeded" as period_state from Succeeded where success_date between "2019-01-01" and "2019-12-31" order by 1) t0) t1 group by dgroup, period_state order by 2
select period_state, min(date) as start_date, max(date) as end_date from( ( select 'succeeded' as period_state, success_date as date, dayofyear(success_date) - row_number()over(order by success_date) as grp from Succeeded where year(success_date)=2019 ) union all ( select 'failed' as period_state, fail_date as date, dayofyear(fail_date) - row_number()over(order by fail_date) as grp from failed where year(fail_date)=2019 ) )a group by period_state, grp order by start_date
select period_state, min(date1) as start_date, max(date1) as end_date FROM ( select fail_date as date1, 'failed' as period_state, Dense_rank() over(order by fail_date) as myrank FROM Failed UNION ALL select success_date as date1, 'succeeded' as period_state, Dense_rank() over(order by success_date) as myrank FROM Succeeded ) t where date1 between '2019-01-01' and '2019-12-31' group by period_state, date_add(date1, INTERVAL - myrank DAY) order by start_date
select period_state, min(date1)start_date, max(date1) end_date from ( select period_state, date1, row_number() over(order by date1) rnk, row_number() over(partition by period_state order by date1) rank_state from( select fail_date date1, 'failed' period_state from failed where fail_date between '2019-01-01' and '2019-12-31' union select success_date date1, 'succeeded' period_state from Succeeded where success_date between '2019-01-01' and '2019-12-31' ) x ) y group by period_state, rnk-rank_state order by date1
select period_state, min(day) as "start_date", max(day) as "end_date" from (select "succeeded" as period_state, success_date as "day", row_number() over(order by success_date) as "rnk" from Succeeded where year(success_date) = 2019 union all select "failed" as period_state, fail_date as "day", row_number() over(order by fail_date) as "rnk" from Failed where year(fail_date) = 2019 ) temp group by date_sub(day,interval rnk day), period_state order by min(day)
select period_state, min(day) as "start_date", max(day) as "end_date" from (select "succeeded" as period_state, success_date as "day", row_number() over(order by success_date) as "rnk" from Succeeded where year(success_date) = 2019 union all select "failed" as period_state, fail_date as "day", row_number() over(order by fail_date) as "rnk" from Failed where year(fail_date) = 2019 ) temp group by date_sub(day,interval rnk day), period_state order by start_date
select period_state, min(day) as start_date, max(day) as end_date from ( select 'succeeded' period_state, success_date as day, row_number() over(order by success_date) rnk from succeeded where success_date between '2019-01-01' and '2019-12-31' union all select 'failed' period_state, fail_date as day, row_number() over(order by fail_date) rnk from failed where fail_date between '2019-01-01' and '2019-12-31' )stg group by date_sub(day,interval rnk day), period_state order by start_date
select period_state, min(day) as start_date, max(day) as end_date from ( select 'succeeded' period_state, success_date as day, row_number() over(order by success_date) rnk from succeeded where success_date between '2019-01-01' and '2019-12-31' union all select 'failed' period_state, fail_date as day, row_number() over(order by fail_date) rnk from failed where fail_date between '2019-01-01' and '2019-12-31' )stg group by date_sub(day,interval rnk day),period_state order by start_date
select period_state, min(day) as start_date, max(day) as end_date from ( select day, period_state, rnk, dense_rank() over (order by day)-rnk as itv from ( select fail_date as day, 'failed' as period_state, dense_rank() over (order by fail_date) as rnk from Failed where fail_date between '2019-01-01' and '2019-12-31' union all select success_date as day, 'succeeded' as period_state, dense_rank() over (order by success_date) as rnk from Succeeded where success_date between '2019-01-01' and '2019-12-31' ) t ) t2 group by itv, period_state
select period_state, min(day) as start_date, max(day) as end_date from ( select period_state, day, (RANK() OVER(ORDER BY day) - rk) as inv from ( select success_date as day, 'succeeded' as period_state, RANK() OVER(ORDER BY success_date) rk from Succeeded where success_date BETWEEN '2019-01-01' AND '2019-12-31' union select fail_date as day, 'failed' as period_state, RANK() OVER(ORDER BY fail_date) rk from Failed where fail_date BETWEEN '2019-01-01' AND '2019-12-31' ) c ) t group by period_state, inv order by start_date
select period_state, min(day) as start_date, max(day) as end_date from (select 'failed' as period_state, fail_date as day, row_number() over(order by fail_date) as rnk from failed where year(fail_date) in ('2019') union all select 'succeeded' as period_state, success_date, row_number() over(order by success_date) from succeeded where year(success_date) in ('2019') )sub group by date_sub(day,interval rnk day),period_state order by start_date
select period_state, min(day) as start_date, max(day) as end_date from (select day, rnk, period_state, rank()over(order by day) as overall_rnk, (rank()over(order by day) - rnk) as dif from (select fail_date as day, 'failed' as period_state, rank()over(order by fail_date) as rnk from Failed where fail_date between '2019-01-01' and '2019-12-31' union select success_date as day,'succeeded'as period_state, rank()over(order by success_date) as rnk from Succeeded where success_date between '2019-01-01' and '2019-12-31') a ) b group by dif, period_state order by min(day)
select period_state, min(day) start_date, max(day) end_date from ( select 'succeeded' period_state, success_date day, row_number() over(order by success_date) rnk from succeeded where success_date between '2019-01-01' and '2019-12-31' union all select 'failed' period_state, fail_date day, row_number() over(order by fail_date) rnk from failed where fail_date between '2019-01-01' and '2019-12-31' )tmp group by period_state, date_sub(day, interval rnk day) order by start_date
select period_state, min(day) start_date, max(day) end_date from ( select period_state, day, rank() over(order by day) - rk as diff from ( select 'failed' as period_state, fail_date as day, rank() over(order by fail_date) as rk from failed where fail_date between '2019-01-01' and '2019-12-31' union select 'succeeded' as period_state, success_date as day, rank() over(order by success_date) as rk from succeeded where success_date between '2019-01-01' and '2019-12-31' ) c ) t group by period_state, diff order by start_date
select period_state, min(dt) start_date, max(dt) end_date from ( select 'failed' period_state, fail_date as dt, rank() over (order by fail_date) rnk from failed union select 'succeeded' period_state, success_date as dt, rank() over (order by success_date) rnk from succeeded ) tb where dt between '2019-01-01' and '2019-12-31' group by period_state, date_add(tb.dt, INTERVAL - rnk DAY) order by start_date
select period_state, min(period_date) as start_date, max(period_date) as end_date from (select *, row_number() over(order by period_date) as ovl, row_number() over(order by period_date) - rk as inv from (select "succeeded" as period_state, success_date as period_date, row_number() over (order by success_date) as rk from succeeded where success_date between '2019-01-01' and '2019-12-31' union (select "failed" as period_state, fail_date as period_date, row_number() over (order by fail_date) as rk from failed where fail_date between '2019-01-01' and '2019-12-31')) a) b group by period_state, inv order by 2
select period_state, min(sdate) start_date, max(sdate) end_date from ( select period_state, sdate, rank() over(order by sdate) - rnk as inv from ( select 'succeeded' period_state, success_date sdate, rank() over(order by success_date) rnk from Succeeded where success_date between '2019-01-01' and '2019-12-31' union select 'failed' period_state, fail_date sdate, rank() over(order by fail_date) rnk from Failed where fail_date between '2019-01-01' and '2019-12-31' ) a ) t group by inv, period_state
select period_state, min(start_date) as start_date, max(end_date) as end_date from( select *, case when prior_state is null then @group_id := 0 when prior_state=period_state then @group_id else @group_id := @group_id + 1 end as grouped_id from( select *, lag(period_state) over() as prior_state from( select case when status=1 then "succeeded" else "failed" end as period_state, date as start_date, date as end_date from( select fail_date as date, 0 as status from Failed where fail_date between '2019-01-01' and '2019-12-31' union select success_date as date, 1 as status from Succeeded where success_date between '2019-01-01' and '2019-12-31' ) as tab_1 order by start_date ) as tab_2 ) as tab_3 ) as tab_4 group by grouped_id
select period_state, min(start_date) as start_date, max(end_date) as end_date from( select *, case when tab_3.prior_state is null then @counter:=0 when tab_3.prior_state=tab_3.period_state then @counter else @counter:=@counter+1 end as grouped from( select *, lag(tab_2.period_state) over() as prior_state from(select case when status=0 then 'failed' else 'succeeded' end as period_state, date as start_date, date as end_date from( select fail_date as date, 0 as status from Failed where fail_date between '2019-01-01' and '2019-12-31' union select success_date as date, 1 as status from Succeeded where success_date between '2019-01-01' and '2019-12-31' ) tab_1 order by start_date ) tab_2 ) tab_3 ) tab_4 group by grouped
select period_state, min(temp_date) as start_date, max(temp_date) as end_date from ( select fail_date as temp_date, row_number() over () as row_num,"failed" as period_state from Failed union all select success_date as temp_date, row_number() over () as row_num,"succeeded" as period_state from Succeeded ) a where temp_date between '2019-01-01' and '2019-12-31' group by to_days(temp_date)-row_num, period_state order by start_date
select period_state, start_date, end_date from ( select min(fail_date) as start_date, max(fail_date) as end_date, 'failed' as period_state from ( select fail_date, date_sub(fail_date, interval rnkFailDate day) as uniqueValueF from( select fail_date, row_number() over(order by fail_date) as rnkFailDate from Failed where fail_date between '2019-01-01' and '2019-12-31') rnkFailDateTable) finalTable group by uniqueValueF union all select min(success_date) as start_date, max(success_date) as end_date, 'succeeded' as period_state from( select success_date, date_sub(success_date , interval rnkSuccessDate day) as uniqueValueS from( select success_date, row_number() over(order by success_date) as rnkSuccessDate from Succeeded where success_date between '2019-01-01' and ' 2019-12-31') rnkSucsseedDateTable) finalTable group by uniqueValueS ) unionTable order by start_date, end_date
select period_state, start_date, end_date from (select period_state, overall_rank_num - rank_num as rank_group, min(start_date) as start_date, max(start_date) as end_date from ( select period_state, start_date, rank_num, row_number() over(order by start_date) as overall_rank_num from ( select 'succeeded' as period_state, success_date as start_date, row_number() over(order by success_date) as rank_num from Succeeded where success_date between '2019-01-01' and '2019-12-31' union all select 'failed' as period_state, fail_date as start_date, row_number() over(order by fail_date) as rank_num from Failed where fail_date between '2019-01-01' and '2019-12-31' ) t ) tt group by period_state, overall_rank_num - rank_num) ttt order by start_date
select period_state, start_date, end_date from( select min(fail_date) as start_date, max(fail_date) as end_date, 'failed' as period_state from( select fail_date, date_sub(fail_date, interval rnkFailDate day) as uniqueValueF from( select fail_date, row_number() over(order by fail_date) as rnkFailDate from Failed where fail_date between '2019-01-01' and '2019-12-31') rnkFailDateTable ) finalTable group by uniqueValueF union all select min(success_date ) as start_date, max(success_date ) as end_date, 'succeeded' as period_state from( select success_date , date_sub(success_date , interval rnkSuccessDate day) as uniqueValueS from( select success_date , row_number() over(order by success_date ) as rnkSuccessDate from Succeeded where success_date between '2019-01-01' and '2019-12-31') rnkSucsseedDateTable ) finalTable group by uniqueValueS ) unionTable order by start_date, end_date
select period_state, start_date, end_date from( select min(fail_date) as start_date, max(fail_date) as end_date, (case when min(fail_date ) then 'failed' else 'failed' end) as period_state from( select fail_date, date_sub(fail_date, interval rnkFailDate day) as uniqueValueF from( select fail_date, row_number() over(order by fail_date) as rnkFailDate from Failed where fail_date between '2019-01-01' and '2019-12-31') rnkFailDateTable ) finalTable group by uniqueValueF union all select min(success_date ) as start_date, max(success_date ) as end_date, (case when min(success_date ) then 'succeeded' else 'succeeded' end) as period_state from( select success_date , date_sub(success_date , interval rnkSuccessDate day) as uniqueValueS from( select success_date , row_number() over(order by success_date ) as rnkSuccessDate from Succeeded where success_date between '2019-01-01' and '2019-12-31') rnkSucsseedDateTable ) finalTable group by uniqueValueS ) unionTable order by start_date, end_date
select period_state,min(date)as start_date ,max(date) as end_date from (select period_state,date, rid-row_number() over(partition by period_state order by date) as num from ( select period_state,date, row_number() over ( order by date asc) as rid from ( select fail_date as date ,'failed' as period_state from failed union all select success_date as date,'succeeded' as period_state from Succeeded )A where date between '2019-01-01' and '2019-12-31' ) B )C group by period_state,num order by min(date)
select stat as period_state, min(dates) as start_date, max(dates) as end_date from (select *, (rank() over(order by dates) - rk) as ranks from ( select fail_date as dates, "failed" as stat, rank() over(order by fail_date) as rk from Failed where fail_date between "2019-01-01" and "2019-12-31" union select success_date as dates, "succeeded" as stat, rank() over(order by success_date) as rk from Succeeded where success_date between "2019-01-01" and "2019-12-31" ) b ) c group by stat, ranks order by start_date
select state as period_state, min(date) as start_date, max(date) as end_date from ( select date, state, row_number()over(partition by state order by date asc) as rnk, date - interval row_number()over(partition by state order by date asc) day as groupin from ( select fail_date as date , 'failed' as state from Failed where year(fail_date)='2019' union all select success_date as date, 'succeeded' as state from Succeeded where year(success_date)='2019' )a )a group by state,groupin order by 2
select state as period_state, min(date1) as start_date, max(date1) as end_date FROM (select fail_date as date1, 'failed' as state, Dense_rank() over(order by fail_date) as myrank FROM Failed UNION ALL select success_date as date1, 'succeeded' as state, Dense_rank() over(order by success_date) as myrank FROM Succeeded)t where date1 between '2019-01-01' and '2019-12-31' group by state, date_add(date1,interval -myrank day) order by start_date
select state as period_state, min(date1) as start_date, max(date1) as end_date from (select fail_date as date1, 'failed' as state, dense_rank() over (order by fail_date) as myrank from Failed union all select success_date as date1, 'succeeded' as state, dense_rank() over (order by success_date) as myrank from Succeeded) t where date1 between '2019-01-01' and '2019-12-31' group by state, date_add(date1, interval - myrank day) order by start_date
select state as period_state, min(day) as start_date, max(day) as end_date from ( select day, state, gr, rank() over(order by day)-gr as rd from ( select fail_date as day, 'failed' as state, rank() over(order by fail_date) as gr from Failed where fail_date between '2019-01-01' and '2019-12-31' union all select success_date as day, 'succeeded' as state, rank() over(order by success_date) as gr from Succeeded where success_date between '2019-01-01' and '2019-12-31' ) c order by day ) temp group by state, rd order by start_date
select state as period_state, min(day) as start_date, max(day) as end_date from (select day, rank() over (order by day) as overall_rk, state, rk, rank() over (order by day) - rk as diff from (select fail_date as day, 'failed' as state, rank() over (order by fail_date) as rk from failed where year(fail_date)=2019 union select success_date as day, 'succeeded' as state, rank() over (order by success_date) as rk from succeeded where year(success_date)=2019) as t1) as t2 group by diff, state order by start_date
select state as period_state, min(event_date) as start_date, max(event_date) as end_date from (select event_date, state, rnk, rank() over(order by event_date) - rnk as rem from (select fail_date as event_date, 'failed' as state, rank() over(order by fail_date) as rnk from failed where fail_date between '2019-01-01' and '2019-12-31' union all select success_date as event_date, 'succeeded' as state, rank() over(order by success_date) as rnk from succeeded where success_date between '2019-01-01' and '2019-12-31') a) b group by state, rem
select state period_state, date start_date, if(next_state is null or (state <> pre_state and state <> next_state) or (pre_state is null and state <> next_state), date, next_date) end_date from (select state, date, lag(state, 1) over (order by date) pre_state, lead(state, 1) over (order by date) next_state, lag(date, 1) over (order by date) pre_date, lead(date, 1) over (order by date) next_date from (select state, date from (select state, date, lag(state, 1) over (order by date) pre_state, lead(state, 1) over (order by date) next_state from (select * from (select 'succeeded' state, success_date date from succeeded union select 'failed' state, fail_date date from failed) as combined1 where date between '2019-01-01' and '2019-12-31' order by date) as combined2) as combined3 where state <> pre_state or state <> next_state or pre_state is null or next_state is null) as combined4) as combined5 where (pre_state is null and state <> next_state) or (next_state is null and state <> pre_state) or state = next_state or (state <> pre_state and state <> next_state)
select state period_state, min(date) start_date, max(date) end_date from ( select temp.*, rank() over (order by date) all_rk from ( select fail_date date, 'failed' state, rank()over(order by fail_date) rk from failed union select success_date date, 'succeeded' state, rank()over(order by success_date) rk from succeeded order by date ) temp where date >= '2019-01-01' and date <= '2019-12-31' ) r group by state, cast(all_rk as signed)-cast(rk as signed)
select state period_state, min(day) start_date, max(day) end_date from (select state, day, rank() over(order by day) overal_rnk, rank() over(order by day)-rnk inv from (select 'failed' state, fail_date day, rank() over(order by fail_date) rnk from Failed where fail_date between '2019-01-01' and '2019-12-31' union select 'succeeded' state, success_date day, rank() over(order by success_date) rnk from Succeeded where success_date between '2019-01-01' and '2019-12-31') inner_temp) outer_temp group by inv, 1 order by 2
select stats as period_state, min(day) as start_date, max(day) as end_date from ( select day,stats,rk, row_number() over(order by day) as overall, (row_number() over(order by day))-rk as inv from ( select fail_date as day,'failed' as stats, row_number() over(order by fail_date) as rk from Failed where fail_date between '2019-01-01' and '2019-12-31' union select success_date as day, 'succeeded' as stats, row_number() over(order by success_date) as rk from Succeeded where success_date between '2019-01-01' and '2019-12-31') t ) c group by inv,stats ORDER by start_date
select status as period_state, min(date) as start_date, max(date) as end_date from( select date, status, date_sub(date, interval (rank() over(partition by status order by date)) day) as diff_d from ( select fail_date as date, "failed" as status from Failed union select success_date as date, "succeeded" as status from Succeeded ) as tb1) as tb2 where year(date)=2019 group by status, diff_d order by start_date
select status as period_state, min(task_dt) as start_date, max(task_dt) as end_date from( select *, row_number() over (order by task_dt) as rn from( select fail_date as task_dt, 'failed' as status from FAILED) tb1 where task_dt >= '2019-01-01' and task_dt <= '2019-12-31') tb2 group by ADDDATE(task_dt, -rn) union ( select status as period_state, min(task_dt) as start_date, max(task_dt) as end_date from( select *, row_number() over (order by task_dt) as rn from( select success_date as task_dt, 'succeeded' as status from Succeeded) tb3 where task_dt >= '2019-01-01' and task_dt <= '2019-12-31') tb4 group by ADDDATE(task_dt, -rn)) order by start_date
select status period_state, min(dt) start_date, max(dt) end_date from ( select status, dt, DATE_ADD(dt, INTERVAL -rn DAY) gp from ( select fail_date as dt, 'failed' as status, row_number() over(order by fail_date) rn from Failed where fail_date between '2019-01-01' and '2019-12-31' UNION select success_date as dt, 'succeeded' as status, row_number() over(order by success_date) rn from Succeeded where success_date between '2019-01-01' and '2019-12-31' ) T ) T1 group by status, gp order by start_date
select type as period_state, min(day) as start_date, max(day) as end_date from ( (select 'failed' as type, fail_date as day, row_number() over(order by fail_date) as rnk from failed where fail_date >='2019-01-01' and fail_date <='2019-12-31' ) union (select 'succeeded' as type, success_date as day, row_number() over(order by success_date) as rnk from Succeeded where success_date >='2019-01-01' and success_date <='2019-12-31' ) ) as w group by type, date_sub(day, interval rnk day) order by start_date
with CTE as ( Select fail_date as start_date , 'failed' as Period_state from Failed UNION Select success_date as start_date , 'succeeded' as Period_state from Succeeded ), CTE2 as ( select *, row_number() over (order by start_date) as id from CTE where start_date between '2019-01-01' and '2019-12-31' ), CTE3 as ( select *, row_number() over (partition by Period_state order by start_date) as row_num from CTE2 ), CTE4 as ( select id,start_date, period_state ,(id-row_num) as groupings from cTE3 ) select period_state , min(start_date) as start_date , max(start_date) as end_date from CTE4 group by groupings,period_state order by start_date , end_date
with CTE as ((SELECT success_date AS day, 'succeeded' AS stats, RANK() OVER (ORDER BY success_date) AS rk FROM Succeeded WHERE success_date BETWEEN '2019-01-01' AND '2019-12-31') union (SELECT fail_date AS day, 'failed' AS stats, RANK() OVER (ORDER BY fail_date) AS rk FROM failed WHERE fail_date BETWEEN '2019-01-01' AND '2019-12-31')) SELECT stats AS period_state, MIN(day) AS start_date, MAX(day) AS end_date FROM (SELECT day, RANK() OVER (ORDER BY day) AS overall_ranking, stats, rk, (RANK() OVER (ORDER BY day) - rk) AS inv from CTE ) a group by inv, stats order by start_date
with CTE as( select fail_date, 'failed' as p_state, row_number() over(order by fail_date) as r_num from failed where fail_date between '2019-01-01' and '2019-12-31' union all select success_date, 'succeeded' as p_state, row_number() over(order by success_date) as r_num from succeeded where success_date between '2019-01-01' and '2019-12-31' ) select p_state as period_state, min(fail_date) as start_date, max(fail_date) as end_date from cte group by (to_days(fail_date)-r_num),period_state order by fail_date
with a as ( (select fail_date as date, 'failed' as period_state from failed) union all (select success_date as date, 'succeeded' as period_state from succeeded) ), b as ( select date, period_state, row_number() over (order by period_state, date asc) as seq from a where date between '2019-01-01' and '2019-12-31' ), c as ( select date, period_state,seq, date_add(date, interval -seq day) as seqStart from b ) select period_state, min(date) as start_date, max(date) as end_date from c group by seqStart,period_state order by start_date asc
with a as ( (select fail_date as day, 'failed' as period_state, row_number() over(order by fail_date) as rnk from failed where fail_date between '2019-01-01' and '2019-12-31') union all (select success_date as day, 'succeeded' as period_state, row_number() over(order by success_date) as rnk from succeeded where success_date between '2019-01-01' and '2019-12-31') ), b as (select day, row_number() over(order by day) as overall_rnk, period_state, rnk, (row_number() over(order by day) - rnk) as grp from a order by day) select period_state, min(day) as start_date, max(day) as end_date from b group by grp, period_state order by start_date asc
with a as ( Select fail_date dt, 'failed' flag from Failed where fail_date between '2019-01-01' and '2019-12-31' Union Select success_date dt, 'succeeded' flag from Succeeded where success_date between '2019-01-01' and '2019-12-31'), b as ( Select dt, flag, date_sub(dt, interval row_number() Over (partition by flag order by dt) day) dtgrp From a ) Select flag period_state, min(dt) start_date, max(dt) end_date From b Group by dtgrp, flag Order by 2
with a as ( Select fail_date dt, 'failed' flag from Failed where fail_date between '2019-01-01' and '2019-12-31' Union Select success_date dt, 'succeeded' flag from Succeeded where success_date between '2019-01-01' and '2019-12-31'), b as ( Select dt, flag, date_sub(dt, interval row_number() Over (partition by flag order by dt) day) dtgrp From a ) Select flag period_state, min(dt) start_date, max(dt) end_date From b Group by dtgrp, flag Order by dt
with a as ( select 'failed' as period_state, fail_date as date from failed where fail_date between '2019-01-01' and '2019-12-31' union all select 'succeeded' as period_state, success_date as date from succeeded where success_date between '2019-01-01' and '2019-12-31'), b as ( select date, period_state, lag(period_state) over(order by date) as prev_state, lead(period_state) over(order by date) as next_state from a), c as ( select date as start_date, period_state, row_number() over(order by date) as row_num from b where period_state <> prev_state or prev_state is null), d as ( select date as end_date, period_state, row_number() over(order by date) as row_num from b where period_state <> next_state or next_state is null) select c.period_state, c.start_date, d.end_date from c join d on c.row_num = d.row_num
with a as ((select success_date as date ,'succeeded' as period_state from Succeeded) union all (select fail_date as date ,'failed' as period_state from Failed)), b as (select date,period_state,row_number()over(order by period_state,date) as seq from a where date between '2019-01-01' and '2019-12-31'), c as ( select date, period_state,seq, date_add( date, interval -seq day) as seqstart from b ) select period_state, min(date) as start_date, max(date) as end_date from c group by seqStart,period_state order by start_date asc
with a as (select fail_date as date, 'failed' as period_state from failed where year(fail_date) = '2019' union all select success_date as date, 'succeeded' as period_state from succeeded where year(success_date) = '2019'), b as (select date, period_state, row_number() over (order by period_state, date asc) as seq from a ) select period_state, min(date) as start_date, max(date) as end_date from b group by date_sub(date,interval seq day), period_state order by start_date asc
with a as (select fail_date as day , 'failed' as status , rank() over (order by fail_date) as inter from Failed WHERE fail_date BETWEEN '2019-01-01' AND '2019-12-31' Union all select success_date as day , 'succeeded' as status , rank() over (order by success_date) as inter from Succeeded WHERE success_date BETWEEN '2019-01-01' AND '2019-12-31' order by day ) select status as period_state, min(day) as start_date , max(day) as end_date from (select day , status, rank() over (order by day) as external ,inter, (rank() over (order by day)- inter) as diff from a ) t group by diff , status order by start_date
with all_dates as ( Select success_date as dt, 'succeeded' as state from Succeeded s union all Select fail_date as dt, 'failed' as state from Failed f ) Select period_state, min(start_date) as start_date, max(end_date) as end_date from ( select *,lag(end_date,1) over (order by start_date) as lag_dt from ( select state as period_state, dt as start_date, case when state = lead_state and datediff(lead_dt,dt)=1 then lead_dt else dt end as end_date , datediff(lead_dt,dt) as df, if(datediff(lead_dt,dt)=1 and state = lead_state ,@r,@r:=@r+1) as r from ( Select dt, state, coalesce(lead(dt,1) over (order by dt),dt) as lead_dt, coalesce(lead(state,1) over (order by dt), state) as lead_state from all_dates where dt between '2019-01-01' and '2019-12-31' order by 1 ) temp, (select @p:=0,@r:=1) t ) yo ) yo1 where lag_dt != end_date or lag_dt is null group by period_state, r
with all_periods as ( select success_date as period_date , 'succeeded' period_state from Succeeded union select fail_date as period_date , 'failed' period_state from failed ), ranked_periods as ( select period_date ,period_state ,row_number() over(order by period_date) period_rank ,rank() over(partition by period_state order by period_date) state_rnk from all_periods where period_date between '2019-01-01' and '2019-12-31' ) select period_state ,min(period_date) start_date ,max(period_date) end_date from ranked_periods group by 1,date_add(period_date, INTERVAL -state_rnk DAY) order by 2
with all_rows as ( select success_date as period_d, "succeeded" as state from succeeded union all select fail_date as period_d, "failed" as state from failed ), ranks as ( select state as period_state, period_d, dense_rank() over(partition by state order by period_d) as partition_rank, dense_rank() over(order by period_d) as overall_rank from all_rows where period_d>='2019-01-01' and period_d<='2019-12-31' ) select period_state, min(period_d) as start_date, max(period_d) as end_date from ranks group by period_state, overall_rank - partition_rank
with alll as( select success_date date, 'succeeded' mode, datediff(success_date,(lag(success_date ,1) over(order by success_date))) daydiff from Succeeded where year(success_date)=2019 union select fail_date date, 'failed' mode, datediff(fail_date,(lag(fail_date ,1) over(order by fail_date))) daydiff from Failed where year(fail_date)=2019 ) select mode period_state, date start_date, ifnull(date_sub(lead(date ,1) over(order by date),interval 1 day),(select max(date) from alll)) end_date from alll where ifnull(daydiff,0)!=1 order by date asc
with base as ( select 'failed' as state, fail_date as date_key, rank() over(order by fail_date) as base_rank from failed where fail_date between '2019-01-01' and '2019-12-31' union all select 'succeeded' as state, success_date as date_key, rank() over(order by success_date) as base_rank from succeeded where success_date between '2019-01-01' and '2019-12-31' ), base_plus as ( select state, date_key, base_rank, rank() over(order by date_key) as overall_rank, rank() over(order by date_key) - base_rank as rank_diff from base ) select state as period_state, min(date_key) as start_date, max(date_key) as end_date from base_plus group by state,rank_diff order by 2
with base as (select * from (select fail_date as dt, "failed" as status from Failed where fail_date between "2019-01-01" and "2019-12-31" union all select success_date as dt,"succeeded" as status from Succeeded where success_date between "2019-01-01" and "2019-12-31" ) a order by dt ), base3 as ( select dt, status as period_state, rank() over (order by dt) - dense_rank() over (partition by status order by dt) as rk from base) select period_state, min(dt) as start_date, max(dt) as end_date from base3 group by period_state, rk
with base as (select fail_date as date, 'failed' as flag, row_number() over (order by fail_date) as rk from failed where year(fail_date) = 2019 union select success_date as date, 'succeeded' as flag, row_number() over (order by success_date) as rk from succeeded where year(success_date) = 2019) select flag as period_state, start_date, end_date from (select flag, diff, min(date) as start_date, max(date) as end_date from (select date, rk, flag, row_number() over (order by date) as new_rk, row_number() over (order by date)-rk as diff from base)aa group by flag,diff)ab
with comb as ( select fail_Date as dates, 'failed' as state from failed where fail_date between '2019-01-01' and '2019-12-31' union all select success_date as dates, 'succeeded' as state from succeeded where success_date between '2019-01-01' and '2019-12-31' ), temp as ( select dates, state,row_num, rank() over(partition by state order by dates) as sub_rank_num from ( select dates, state, rank() over(order by dates) as row_num from comb ) cte ) select period_state, min(dates) as start_date, max(dates) as end_date from ( select state as period_state, dates, format(sub_rank_num,'float') - format(row_num,'float') as grps from temp) cte group by grps, period_state order by 2,3
with combined as ( select date, status, date_sub(date, INTERVAL rn DAY) as diff from ( select date, status, row_number() over (partition by status order by date) as rn from ( select fail_date as date, 'failed' as status from Failed UNION ALL select success_date as date, 'succeeded' as status from Succeeded )z)y ) select status as period_state, min(date) as start_date, max(date) as end_date from combined where date between '2019-01-01' AND '2019-12-31' group by status, diff order by start_date
with cte as ( select "failed" as flag, fail_date as date1 from Failed where fail_date between "2019-01-01" and "2019-12-31" union all select "succeeded" as flag, success_date as date1 from Succeeded where success_date between "2019-01-01" and "2019-12-31"), mappings as( select *, dense_rank() over (order by date1) - dense_rank() over (partition by flag order by date1) as mappings from cte) select flag as period_state ,min(date1) as start_date,max(date1) as end_date from mappings group by flag,mappings order by start_date
with cte as ( select "failed" as period_state, fail_date as dt, row_number() over() as row_id from failed where fail_date between "2019-01-01" and "2019-12-31" union select 'succeeded'as period_state, success_date as dt, row_number() over() as row_id from succeeded where success_date between "2019-01-01" and "2019-12-31" ) select period_state, min(dt) as start_date, max(dt) as end_date from cte group by 1,date_add(dt,interval -row_id day) order by 2
with cte as ( select 'failed' as period_state, fail_date as start_date from Failed where extract(year from fail_date) = 2019 union all select 'succeeded' as period_state, success_date as start_date from Succeeded where extract(year from success_date) = 2019 ) ,cte2 as ( select period_state, start_date, rank()over(partition by period_state order by start_date) as rank1, rank()over(order by start_date) as rank2 from cte ) select period_state, min(start_date) as start_date, max(start_date) as end_date from cte2 group by 1, (rank2 - rank1)
with cte as ( select 'succeeded' period_state ,success_date ,row_number() over(order by success_date) rnk from succeeded where success_date between '2019-01-01' and '2019-12-31' ) , cte2 as ( select 'failed' period_state ,fail_date ,row_number() over(order by fail_date) rnk from failed where fail_date between '2019-01-01' and '2019-12-31' ) select period_state ,min(success_date) start_date ,max(success_date) end_date from cte group by period_state, DAYOFYEAR(success_date) - rnk union all select period_state ,min(fail_date) start_date ,max(fail_date) end_date from cte2 group by period_state, DAYOFYEAR(fail_date) - rnk order by 2
with cte as ( select distinct fail_date as date, 'failed' as st from Failed where year(fail_date)=2019 union all select distinct success_date as date, 'succeeded' as st from Succeeded where year(success_date) =2019), periods as ( select date, if(st=previous,@project,@project:=@project+1) as prj, previous, st from( select *, lag(st,1,1) over (order by date asc) as previous from cte) as pre cross join( select @project:=1) as t order by date asc) select st as period_state, min(date) as start_date, max(date) as end_date from periods group by period_state,prj
with cte as ( select fail_date as day, 'failed' as period_state from Failed union all select success_date as day, 'succeeded' as period_state from succeeded ), cte1 as ( select day, period_state, row_number() over(partition by period_state order by day asc) as rnk from cte ), cte2 as ( select day, period_state, date_add(day, interval -rnk day ) as start_dt from cte1 ) select period_state, min(day) as start_date, max(day) as end_date from cte2 where day between '2019-01-01' and '2019-12-31' group by period_state, start_dt order by start_date
with cte as ( select fail_date as day, 'failed' as success, rank() over (order by fail_date asc) as rnk from Failed where fail_date between '2019-01-01' and '2019-12-31'), cte2 as ( select success_date as day, 'succeeded' as success, rank() over (order by success_date asc) as rnk from Succeeded where success_date between '2019-01-01' and '2019-12-31') select success as period_state, min(day) as start_date, max(day) as end_date from (select day, success, rank() over(order by day asc) - rnk as delta from (select * from cte union all select * from cte2) a ) b group by delta, success order by start_date
with cte as ( select fail_date ddate, 'failed' as state from failed where year(fail_date) = 2019 union select success_date ddate, 'succeeded' as state from succeeded where year(success_date) = 2019 ) select state period_state, min(ddate) start_date, max(ddate) end_date from ( select ddate, state, date_sub(ddate, interval rank() over (partition by state order by ddate) day) ggroup from cte ) f group by state, ggroup order by 3
with cte as ( select fail_date,dayofyear(fail_date) as doy, row_number() over(order by fail_date) as rn from failed where fail_date between '2019-01-01' and '2019-12-31' ), cte1 as ( select success_date,dayofyear(success_date) as doy, row_number() over(order by success_date) as rn from succeeded where success_date between '2019-01-01' and '2019-12-31' ), fail as (select fail_date,doy-rn as diff from cte ), succ as (select success_date,doy-rn as diff from cte1 ) select 'failed' as period_state, min(fail_date) as start_date, max(fail_date) as end_date from fail group by diff union select 'succeeded' as period_state, min(success_date) as start_date, max(success_date) as end_date from succ group by diff order by start_date
with cte as ( select success_date, date_sub(success_date, interval row_number() over(order by success_date) DAY) as nxt from succeeded where success_date between '2019-01-01' and '2019-12-31' ), cte2 as ( select fail_date, date_sub(fail_date, interval row_number() over(order by fail_date) DAY) as nxt from failed where fail_date between '2019-01-01' and '2019-12-31' ), cte3 as ( select 'succeeded' as period_state, min(success_date) as start_date, max(success_date) as end_date from cte group by nxt union all select 'failed' as period_state, min(fail_date) as start_date, max(fail_date) as end_date from cte2 group by nxt) select * from cte3 order by start_date
with cte as ( select success_date, row_number() over (order by success_date) as rnk from succeeded where success_date between '2019-01-01' and '2019-12-31' ), cte1 as ( select success_date, date_add(success_date, interval -rnk day) as group_date from cte ), cte2 as ( select fail_date, row_number() over (order by fail_date) as rnk from failed where fail_date between '2019-01-01' and '2019-12-31' ), cte3 as ( select fail_date, date_add(fail_date, interval -rnk day) as group_date from cte2 ), cte4 as ( select 'succeeded' as period_state, min(success_date) as start_date, max(success_date) as end_date from cte1 group by group_date union all select 'failed' as period_state, min(fail_date) as start_date, max(fail_date) as end_date from cte3 group by group_date ) select * from cte4 order by 2
with cte as ( select task_date , task_status, row_number() over(order by task_date) as 'row_id' from ( select fail_date as 'task_date', 'failed' as 'task_status' from failed where fail_date between '2019-01-01' and '2019-12-31' union all select success_date as 'task_date', 'succeeded' as 'task_status' from succeeded where success_date between '2019-01-01' and '2019-12-31' )A ) select task_status as 'period_state', min(task_date) as 'start_date', max(task_date) as 'end_date' from ( select task_date, task_status, row_id - sequence as 'grp' from ( select task_date, task_status, row_id, rank() over(partition by task_status order by row_id) as 'sequence' from cte )A )B group by task_status, grp order by min(task_date)
with cte as (SELECT 'succeeded' as period_state,success_date as date from Succeeded where success_date between '2019-01-01' AND '2019-12-31' union all SELECT 'failed' as period_state,fail_date as date from Failed where fail_date between '2019-01-01' AND '2019-12-31' order by date asc), cte2 as (select *,row_number()over(partition by period_state order by date asc)rnk1, row_number()over(order by date asc)rnk2 from cte) select period_state,min(date)as start_date,max(date)as end_date from cte2 group by period_state, rnk2-rnk1
with cte as (Select row_number() over (order by success_date asc) as Rnk,success_date,dayofyear(success_date) as Day from Succeeded where year(success_date)=2019), dte as (Select row_number() over (order by fail_date asc) as Rnk,fail_date,dayofyear(fail_date) as Day from Failed where year(fail_date)=2019) Select * from (Select 'succeeded' as period_state,min(success_date) as start_date,max(success_date) as end_date from cte group by Day-rnk union all Select 'failed' as period_state,min(fail_date) as start_date,max(fail_date) as end_date from dte group by Day-rnk) e order by e.start_date
with cte as (select * from( select fail_date as date, 'failed' as period_state from failed union select success_date as date, 'succeeded' as period_state from succeeded order by date ) temp where date between '2019-01-01' and '2019-12-31' ) select period_state, min(date) as start_date, max(date) as end_date from( select period_state, date, row_number() over(order by date) as row_num, dense_rank() over(partition by period_state order by date) as rnk from cte ) temp group by period_state, row_num - rnk order by start_date
with cte as (select date, period_state, num_1-num_2 as diff from (select date, period_state, row_number()over(order by date) as num_1, row_number()over(partition by period_state order by date) as num_2 from (select fail_date as date, "failed" as period_state from failed where year(fail_date)=2019 union all select success_date as date, "succeeded" as period_state from succeeded where year(success_date)=2019) a)b) select period_state, min(date) as start_date, max(date) as end_date from cte group by period_state, diff order by min(date)
with cte as (select fail_date as cal_date, 'failed' as state from Failed union all select success_date as cal_date, 'succeeded' as state from Succeeded) select state as period_state, min(cal_date) as start_date, max(cal_date) as end_date from (select state, cal_date, rank() over (partition by state order by cal_date) as ranking, rank() over (order by cal_date) as id from cte where cal_date between '2019-01-01' and '2019-12-31') t group by state, (id - ranking) order by 2
with cte as (select fail_date as date, 'failed' as state from Failed where fail_date between "2019-01-01" and "2019-12-31" union all select success_date as date, 'succeeded' as state from Succeeded where success_date between "2019-01-01" and "2019-12-31" order by date), cte2 as (select *, rank() over (order by date)- rank() over (partition by state order by date) as 'grp' from cte) select state as period_state, min(date) as start_date, max(date) as end_date from cte2 group by state, grp order by date
with cte as (select success_date as date1, 'succeeded' as state from Succeeded where year(success_date) = 2019 union all select fail_date as date1, 'failed' as state from Failed where year(fail_date) = 2019 order by date1) , cte2 as (select * ,rank() over (order by date1) as rk ,rank() over (partition by state order by date1) as prk from cte ) select state as period_state, min(date1) as start_date, max(date1) as end_date from cte2 group by state, rk-prk order by start_date
with cte as( select * from ((select fail_date as date,"failed" as status from Failed) union (select success_date as date ,"succeeded" as status from Succeeded)) a where left(date,4)='2019' order by date) select cte2.status as period_state, min(cte2.date) as start_date, max(cte2.date)as end_date from (select status, date, rank()over(partition by status order by date) as ranking, rank()over(order by date) as overall_ranking, (rank()over(order by date) - rank()over(partition by status order by date)) as inv from cte) cte2 group by cte2.status, cte2.inv
with cte as( select fail_date as date1,"failed" as status1,rank() over(order by fail_date) as rk from failed union select success_date as date1,"succeeded" as status1,rank() over(order by success_date ) as rk from succeeded ), cte2 as( select date1, status1 as period_state, rank()over(order by date1) as overall_rank,rk,(rank()over(order by date1)-rk) as rv from cte ) select period_state,min(date1)as start_date,max(date1) as end_date from cte2 where date1 between "2019-01-01" and "2019-12-31" group by period_state,rv order by start_date
with cte as( select period_state,task_date, dense_rank() over(order by task_date) as overall_ranking, dense_rank() over (partition by period_state order by task_date) as state_ranking from ( select "succeeded" as period_state, success_date as task_date from succeeded where success_date between '2019-01-01' and '2019-12-31' union all select "failed" as period_state, fail_date as task_date from Failed where fail_date between '2019-01-01' and '2019-12-31') a ) select period_state,min(task_date)as start_date,max(task_Date) as end_date from cte group by period_state,(overall_ranking-state_ranking) order by min(task_date)
with cte1 as ( select "failed" as state, fail_date as date from failed where fail_date between '2019-01-01' and '2019-12-31' union all select "succeeded" as state, success_date as date from succeeded where success_date between '2019-01-01' and '2019-12-31' ), cte2 as (select *, rank() over(order by date) as rn1, rank() over(partition by state order by date) as rn2 from cte1) select state as period_state, min(date) as start_date, max(date) as end_date from cte2 group by state, rn1 - rn2 order by start_date asc
with cte1 as ( select 'failed' as period_state, fail_date as date from failed where fail_date between '2019-01-01' and '2019-12-31' union all select 'succeeded' as period_state, success_date as date from succeeded where success_date between '2019-01-01' and '2019-12-31'), cte2 as ( select period_state, date, rank() over(partition by period_state order by date asc) as rnk1, rank() over(order by date asc) as rnk2 from cte1) select period_state, min(date) as start_date, max(date) as end_date from cte2 group by (rnk2-rnk1),1
with cte1 as ( select fail_date as day, 'failed' as period_state from failed union all select success_date as day, 'succeeded' as period_state from succeeded), cte2 as ( select day, period_state, row_number() over (order by period_state, day asc) as ranking from cte1 where day between '2019-01-01' and '2019-12-31') select period_state, min(day) as start_date, max(day) as end_date from cte2 group by DATE_SUB(day, INTERVAL ranking DAY),period_state order by start_date
with cte1 as ( select fail_date as day, 'failed' as period_state from failed union select success_date as day, 'succeeded' as period_state from succeeded), cte2 as ( select day, period_state, row_number() over (order by period_state, day asc) as ranking from cte1 where day between '2019-01-01' and '2019-12-31') select period_state, min(day) as start_date, max(day) as end_date from cte2 group by DATE_SUB(day, INTERVAL ranking DAY),period_state order by start_date
with cte1 as (select 'failed' as status, fail_date as date from failed where fail_date between '2019-01-01' and '2019-12-31' union select 'succeeded' as status, success_date as date from succeeded where success_date between '2019-01-01' and '2019-12-31' order by date asc), cte2 as (select *, rank() over (order by date asc) as rn1, rank() over (partition by status order by date asc) as rn2 from cte1 order by date asc) select status as period_state, min(date) as start_date, max(date) as end_date from cte2 group by status, rn1 - rn2 order by start_date asc
with cte1 as (select * from (select fail_date as date1 , 'failed' as status1 from Failed where fail_date between '2019-01-01' and '2019-12-31' union all select success_date as date1, 'succeeded' as status1 from Succeeded where success_date between '2019-01-01' and '2019-12-31') as a ), cte2 as (select *, rank() over(order by date1) as rn1, rank() over(partition by status1 order by date1) as rn2 from cte1) select status1 as period_state, min(date1) as start_date, max(date1) as end_date from cte2 group by status1, rn1-rn2 order by 2
with cte1 as (select fail_date as date, 'failed' as status from failed union select success_date as date, 'succeeded' as status from succeeded), cte2 as (select * from cte1 where date between '2019-01-01' and '2019-12-31' order by date asc), cte3 as (select date, row_number() over (order by date asc) as rn, lag(status, 1) over (order by date asc) as prev_status, status, lead(status, 1) over (order by date asc) as next_status from cte2), cte4 as (select count(*) as max_rn from cte3), cte5 as (select status as period_state, case when status <> prev_status or rn = 1 then date end as start_date, case when status <> next_status or rn = max_rn then date end as end_date from cte3 join cte4), cte6 as (select row_number() over (order by start_date asc) as rn, period_state from cte5 where start_date is not null), cte7 as (select row_number() over (order by start_date asc) as rn, start_date from cte5 where start_date is not null), cte8 as (select row_number() over (order by end_date asc) as rn, end_date from cte5 where end_date is not null) select period_state, start_date, end_date from cte6 join cte7 on cte6.rn = cte7.rn join cte8 on cte7.rn = cte8.rn
with cte1 as (select fail_date as date, 'failed' as status from failed where fail_date between '2019-01-01' and '2019-12-31' union select success_date as date, 'succeeded' as status from succeeded where success_date between '2019-01-01' and '2019-12-31' order by date asc), cte2 as (select date, row_number() over (order by date asc) as rn, lag(status, 1) over (order by date asc) as prev_status, status, lead(status, 1) over (order by date asc) as next_status from cte1), cte3 as (select status as period_state, case when status <> prev_status or rn = 1 then date end as start_date, case when status <> next_status or rn = (select count(*) as max_rn from cte2) then date end as end_date from cte2), cte4 as (select row_number() over (order by start_date asc) as rn, period_state from cte3 where start_date is not null), cte5 as (select row_number() over (order by start_date asc) as rn, start_date from cte3 where start_date is not null), cte6 as (select row_number() over (order by end_date asc) as rn, end_date from cte3 where end_date is not null) select period_state, start_date, end_date from cte4 join cte5 on cte4.rn = cte5.rn join cte6 on cte5.rn = cte6.rn
with cte1 as (select fail_date as date1, 'failed' as period_state from failed where year(fail_date) = 2019 union all select success_date as date1, 'succeeded' as period_state from succeeded where year(success_date) = 2019), cte2 as (select date1, period_state, row_number() over(order by date1) as overall_rnk, row_number() over(partition by period_state order by date1) as period_rnk from cte1) select period_state, min(date1) as start_date, max(date1) as end_date from cte2 group by 1, overall_rnk - period_rnk order by 2
with cte1 as (select fail_date as date1, 'failed' as period_state from failed where year(fail_date) = 2019 union all select success_date as date1, 'succeeded' as period_state from succeeded where year(success_date) = 2019), cte2 as (select date1, period_state, row_number() over(order by date1) as overall_rnk, row_number() over(partition by period_state order by date1) as period_rnk from cte1), cte3 as( select *, overall_rnk - period_rnk as diff from cte2 ) select period_state, min(date1) as start_date, max(date1) as end_date from cte3 group by 1, diff order by 2
with cte1 as (select fail_date as dates, 'failed' as stats, rank() over(order by fail_date) as rk from Failed union select success_date as dates, 'succeeded' as stats, rank() over(order by success_date) as rk from Succeeded), cte2 as ( select dates, stats as period_state, rank() over(order by dates) as overall_rk, rk, (rank() over(order by dates) - rk) as inv from cte1) select period_state, min(dates) as start_date, max(dates) as end_date from cte2 where dates between '2019-01-01' and '2019-12-31' group by period_state, inv order by 2
with cte1 as (select fail_date as dates, 'failed' as stats, rank() over(order by fail_date) as rk from failed union select success_date as dates, 'succeeded' as stats, rank() over(order by success_date) as rk from succeeded), cte2 as ( select dates, stats as period_state, rank() over(order by dates) as overall_rk, rk, (rank() over(order by dates) - rk) as inv from cte1) select period_state, min(dates) as start_date, max(dates) as end_date from cte2 where dates between '2019-01-01' and '2019-12-31' group by period_state, inv order by 2
with cte1 as (select fail_date as day,'failed' as status from failed where fail_date between '2019-01-01' and '2019-12-31' union select success_date as day,'succeeded' as status from Succeeded where success_date between '2019-01-01' and '2019-12-31' order by day asc ), cte2 as (select *, rank() over (order by day asc) as rn1, rank() over (partition by status order by day asc)as rn2 from cte1 order by day asc) select status as period_state,min(day) as start_date,max(day)end_date from cte2 group by status,rn1-rn2 order by day asc
with cte1 as (select success_date, datediff(success_date,'2018-01-01') num, row_number() over() as rowsnum from succeeded where success_date between '2019-01-01' and '2019-12-31'), cte2 as (select fail_date, datediff(fail_date,'2018-01-01') num, row_number() over() as rowsnum from failed where fail_date between '2019-01-01' and '2019-12-31') select 'succeeded' period_state, min(success_date) start_date, max(success_date) end_date from cte1 group by num-rowsnum union all select 'failed' period_state, min(fail_date) start_date, max(fail_date) end_date from cte2 group by num-rowsnum order by 2
with cte1 as( select b.period_state, min(b.start_date) as start_date, max(b.start_date) as end_date from ( select * from ( select "failed" as period_state, fail_date as start_date, Dense_rank() over(order by fail_date) as i from Failed union select "succeeded" as period_state, success_date as start_date, Dense_rank() over(order by success_date) as i from Succeeded ) a where a.start_date between "2019-01-01" and "2019-12-31" order by a.start_date ) b group by b.period_state, date_add(b.start_date, interval -b.i day) order by min(b.start_date) ), cte2 as( select period_state from cte1 limit 1 ) select * from cte1
with cte1 as( select fail_date , subdate(fail_date, row_number() over(order by fail_date)) as agg_date from failed where fail_date between '2019-01-01' and '2019-12-31'), cte2 as( select success_date, subdate(success_date, row_number() over(order by success_date asc)) as agg_date from succeeded where success_date between '2019-01-01' and '2019-12-31') select * from( select 'succeeded' as period_state, min(success_date) as start_date, max(success_date) as end_date from cte2 group by agg_date union all select 'failed' as period_state, min(fail_date) as start_date, max(fail_date) as end_date from cte1 group by agg_date) as a order by start_date
with cte1 as( select fail_date as day, 'failed' as stats, rank() over(order by fail_date) as ranking from failed where fail_date between '2019-01-01' and '2019-12-31' union select success_date as day, 'succeeded' as stats, rank() over(order by success_date) as ranking from succeeded where success_date between '2019-01-01' and '2019-12-31'), cte2 as ( select day, rank() over(order by day) as overall_ranking, stats, (rank() over(order by day) - ranking) as ranking_diff from cte1) select stats as period_state, min(day) as start_date, max(day) as end_date from cte2 group by ranking_diff, stats order by start_date
with cte1 as( select fail_date dt, 'failed' state FROM Failed), cte2 as( select success_date dt, 'succeeded' state FROM Succeeded), cte3 as( select * from cte1 union select * from cte2), cte4 as( select * From cte3 where dt >= Date("2019-01-01") AND dt <= Date("2019-12-31") order by dt), cte5 as( select *, lag(state) over() next_state From cte4 ), cte6 as( select *, CASE WHEN state = next_state THEN 0 ELSE 1 END AS Ind FROM cte5 ), cte7 as( SELECT *, sum(ind) over(order by dt ROWS UNBOUNDED PRECEDING) cat from cte6 ) select max(state) period_state, min(dt) start_date, max(dt) end_date from cte7 group by cat
with cte_data AS ( select fail_date dt, 'failed' flg from Failed where fail_date between '2019-01-01' and '2019-12-31' union all select success_date dt, 'succeeded' flg from Succeeded where success_date between '2019-01-01' and '2019-12-31' ), ordered_data as ( select dt, flg, date_sub(dt, interval row_number() over(partition by flg order by dt) day) dt_grp from cte_data ) select flg as period_state, min(dt) as start_date, max(dt) as end_date from ordered_data group by dt_grp, period_state order by 2
with cte_log as ( select fail_date as calendar_date, 'failed' as state from Failed union all select success_date as calendar_date, 'succeeded' as state from Succeeded ), cte_joined as ( select calendar_date, state, row_number() over ( order by calendar_date ) as day_idx, row_number() over ( partition by state order by calendar_date ) as partition_day_idx from cte_log where calendar_date between '2019-01-01' and '2019-12-31' ), cte_final as ( select state as period_state, min(calendar_date) as start_date, max(calendar_date) as end_date from cte_joined group by 1, day_idx - partition_day_idx order by 2 ) select * from cte_final
with cte_log as ( select fail_date as calendar_date, 'failed' as state from Failed union all select success_date as calendar_date, 'succeeded' as state from Succeeded ), cte_label as ( select calendar_date, state, row_number() over ( order by calendar_date ) as day_idx, row_number() over ( partition by state order by calendar_date ) as partition_day_idx from cte_log where calendar_date between '2019-01-01' and '2019-12-31' ), cte_final as ( select state as period_state, min(calendar_date) as start_date, max(calendar_date) as end_date from cte_label group by 1, day_idx - partition_day_idx order by 2 ) select * from cte_final
with date_status as (select 'failed' as stat, fail_date as all_date from failed union select 'succeeded' as stat, success_date as all_date from succeeded order by all_date) select stat as period_state, min(all_date) as start_date, max(all_date) as end_date from (select stat, all_date, row_number() over(order by all_date) as row_num, dense_rank() over(partition by stat order by all_date) as rnk from date_status) a where all_date between "2019-01-01" and "2019-12-31" group by stat, row_num - rnk order by all_date
with date_status as( select * from( select *, 'succeeded' as period from succeeded union all select *, 'failed' as period from failed) as a order by 1 ) select period as period_state, min(success_date) as start_date, max(success_date) as end_date from( select *, row_number() over (order by success_date) as row_num, rank() over(partition by period order by success_date) as rnk from date_status where success_date between "2019-01-01" and "2019-12-31") as a group by period, row_num-rnk order by start_date
with date_tbl as (select * from failed union select * from succeeded order by fail_date) , date_status as (select fail_date as all_date, case when fail_date in (select * from failed) then "failed" else "succeeded" end stat from date_tbl) select stat as period_state, min(all_date) as start_date, max(all_date) as end_date from (select stat, all_date, row_number() over(order by all_date) as row_num, dense_rank() over(partition by stat order by all_date) as rnk from date_status) a where all_date between "2019-01-01" and "2019-12-31" group by stat, row_num - rnk order by all_date
with dates as ( select fail_date as state_date , dayofyear(fail_date) as state_doy , row_number() over(order by dayofyear(fail_date)) as rn , 'failed' as state from failed where fail_date >= '2019-01-01' and fail_date <= '2019-12-31' union all select success_date as state_date , dayofyear(success_date) as state_doy , row_number() over(order by dayofyear(success_date)) as rn , 'succeeded' as state from succeeded where success_date >= '2019-01-01' and success_date <= '2019-12-31' ) , diffs as ( select state , state_date , state_doy - rn as diff from dates ) select state as period_state , min(state_date) as start_date , max(state_date) as end_date from diffs group by state, diff order by start_date
with day_status as (select * from (select fail_date as 'day', 'failed' as 'period_state' from failed where fail_date between '2019-01-01' and '2019-12-31' union all select success_date as 'day', 'succeeded' as 'period_state' from succeeded where success_date between '2019-01-01' and '2019-12-31') t order by day), t as ( select day, period_state, rank()over(partition by period_state order by day) as 'rnk', rank()over(order by day) as 'id' from day_status) select period_state, min(day) as 'start_date', max(day) as 'end_date' from t group by 1, (id - rnk) order by 2
with events as ( select success_date as dt,'succeeded' as state from succeeded where year(success_date) = 2019 union all select fail_date as dt,'failed' as state from failed where year(fail_date) = 2019 ), t0 as ( select dt,state, lag(dt) over(order by dt) as prev_dt, lag(state) over(order by dt) as prev_state from events ), t1 as ( select dt as sess_sd, lead(dt) over(order by dt) as next_sess_sd, state from t0 where prev_dt is null or datediff(dt,prev_dt) > 1 or prev_state <> state ), t2 as ( select sess_sd,max(dt) as sess_ed,s.state from t1 s join events e on e.dt >= sess_sd and ( e.dt < next_sess_sd or next_sess_sd is null ) group by sess_sd ) select state as period_state, sess_sd as start_date, coalesce(sess_ed,sess_sd) as end_date from t2
with events_tall as ((select fail_date as event_date, "failed" as period_state from Failed) union (select success_date as event_date, "succeeded" as period_state from Succeeded)), events_filtered as ( select period_state, event_date from events_tall where (event_date >= '2019-01-01') and (event_date <= '2019-12-31') ), event_runs as (select period_state, event_date, row_number() over (order by event_date) as rk1, row_number() over (partition by period_state order by event_date) as rk2 from events_filtered order by event_date) select period_state, min(event_date) as start_date, max(event_date) as end_date from event_runs group by rk1 - rk2, period_state
with f as ( select fail_date, rank() over(order by fail_date) as ranking, dayofyear(fail_date) as days from failed where year(fail_date) = '2019'), s as ( select success_date, rank() over(order by success_date) as ranking, dayofyear(success_date) as days from succeeded where year(success_Date) = 2019 ) select 'failed' as period_state, min(fail_date) as start_date, max(fail_date) as end_date from f group by days- ranking union all select 'succeeded', min(success_date), max(success_date) from s group by days- ranking order by 2
with f as (select * from failed where fail_date between '2019-01-01' and '2019-12-31'), s as (select * from Succeeded where success_date between '2019-01-01' and '2019-12-31'), conse_f as (select *, row_number()over(order by fail_date) as ranking from f), conse_s as (select *, row_number()over(order by success_date) as ranking from s), final_s as (select 'succeeded' as period_state, min(success_date) as start_date, max(success_date) as end_date from conse_s group by date_sub(success_date, interval ranking day)), final_f as (select 'failed' as period_state, min(fail_date) as start_date, max(fail_date) as end_date from conse_f group by date_sub(fail_date, interval ranking day)) select tab.* from (select * from final_f union all select * from final_s) as tab order by tab.start_date
with f as( select fail_date,rank() over(order by fail_date) as rnk from Failed where fail_date between '2019-01-01' and '2019-12-31'), s as( select success_date,rank() over(order by success_date) as rnk from Succeeded where success_date between '2019-01-01' and '2019-12-31') select 'failed' as period_state,min(fail_date) as start_date,max(fail_date) as end_date from f group by date_sub(fail_date,interval rnk day) union all select 'succeeded' as period_state,min(success_date) as start_date,max(success_date) as end_date from s group by date_sub(success_date,interval rnk day) order by start_date
with fa_start as (select 'failed' as ps,fail_date as fs from failed where DATE_ADD(fail_date, INTERVAL -1 DAY) not in (select fail_date from failed where fail_date between '2019-01-01' and '2019-12-31') and fail_date between '2019-01-01' and '2019-12-31'), fa_end as (select 'failed' as ps,fail_date as fe from failed where DATE_ADD(fail_date, INTERVAL 1 DAY) not in (select fail_date from failed where fail_date between '2019-01-01' and '2019-12-31') and fail_date between '2019-01-01' and '2019-12-31'), su_start as (select 'succeeded' as ps,success_date as ss from succeeded where DATE_ADD(success_date, INTERVAL -1 DAY) not in (select success_date from succeeded where success_date between '2019-01-01' and '2019-12-31') and success_date between '2019-01-01' and '2019-12-31'), su_end as (select 'succeeded' as ps,success_date as se from succeeded where DATE_ADD(success_date, INTERVAL 1 DAY) not in (select success_date from succeeded where success_date between '2019-01-01' and '2019-12-31') and success_date between '2019-01-01' and '2019-12-31') select ss.ps as period_state, ss.ss as start_date, min(se.se) as end_date from su_start ss, su_end se where ss.ss <= se.se group by ss.ss union select fs.ps as period_state, fs.fs as start_date, min(fe.fe) as end_date from fa_start fs, fa_end fe where fs.fs <= fe.fe group by fs.fs order by start_date
with fail as ( select date_sub(fail_date, interval rn day), 'failed' period_state, min(fail_date) start_date, max(fail_date) end_date from ( select row_number() over(order by fail_date) rn, fail_date from Failed where fail_date between STR_TO_DATE('2019-01-01', '%Y-%m-%d') and STR_TO_DATE('2019-12-31', '%Y-%m-%d') ) t group by 1, 2 ), success as ( select date_sub(success_date, interval rn day), 'succeeded' period_state, min(success_date) start_date, max(success_date) end_date from ( select row_number() over(order by success_date) rn, success_date from Succeeded where success_date between STR_TO_DATE('2019-01-01', '%Y-%m-%d') and STR_TO_DATE('2019-12-31', '%Y-%m-%d') ) t group by 1, 2 ) select period_state, start_date, end_date from fail union all select period_state, start_date, end_date from success order by 2
with fail_dates as ( select fail_date, lag(fail_date,1) over (order by fail_date asc) as prev_fail_date from Failed where fail_date >= '2019-01-01' and fail_date <= '2019-12-31' ) , success_dates as ( select success_date, lag(success_date,1) over (order by success_date asc) as prev_success_date from Succeeded where success_date >= '2019-01-01' and success_date <= '2019-12-31' ) , fail_dates_is_new_cycle as ( select fail_date, prev_fail_date, case when date_add(prev_fail_date, interval 1 day) != fail_date then 1 else 0 end as is_new_cycle from fail_dates ) , success_dates_is_new_cycle as ( select success_date, prev_success_date, case when date_add(prev_success_date, interval 1 day) != success_date then 1 else 0 end as is_new_cycle from success_dates ) , fail_dates_cycles as ( select 'failed' as type, fail_date as event_date, sum(is_new_cycle) over (order by fail_date asc) as cycle from fail_dates_is_new_cycle ) , success_dates_cycles as ( select 'succeeded' as type, success_date as event_date, sum(is_new_cycle) over (order by success_date asc) as cycle from success_dates_is_new_cycle ) , merged as ( select type, event_date, cycle from fail_dates_cycles union select type, event_date, cycle from success_dates_cycles ) , results_pre_sorting as ( select type as period_state, min(event_date) as start_date, max(event_date) as end_date from merged group by type, cycle ) select * from results_pre_sorting order by start_date
with failed as ( select period_state, min(fail_date) as start_date, max(fail_date) as end_date from ( select "failed" as period_state, fail_date, row_number()over(order by fail_date desc) as rnum from Failed where fail_date between '2019-01-01' and '2019-12-31')temp group by DATE_ADD(fail_date, INTERVAL rnum day)), suceed as ( select period_state,min(success_date) as start_date, max(success_date) as end_date from ( select "succeeded" as period_state, success_date, row_number() over (order by success_date desc) as rnum from Succeeded where success_date between '2019-01-01' and '2019-12-31')temp2 group by DATE_ADD(success_date, INTERVAL rnum day)) select * from failed union all select * from suceed order by start_date
with failed_grp as (select fail_date as task_date, 'failed' as outcome, DATE_ADD(fail_date, INTERVAL -row_number()over(order by fail_date) DAY) as grp from Failed where fail_date between '2019-01-01' and '2019-12-31'), succ_grp as (select success_date as task_date, 'succeeded' as outcome, DATE_ADD(success_date, INTERVAL -row_number()over(order by success_date) DAY) as grp from Succeeded where success_date between '2019-01-01' and '2019-12-31') select outcome as period_state , min(task_date) as start_date, max(task_date) as end_date from failed_grp group by outcome, grp union all select outcome as period_state , min(task_date) as start_date, max(task_date) as end_date from succ_grp group by outcome, grp order by start_date
with failed_rnk as ( select fail_date, datediff(fail_date, '2018-12-31') - row_number() over (order by fail_date) as 'fr' from Failed where year(fail_date) = 2019 ), NeoFailed as ( select 'failed' as period_state, min(fail_date) as 'start_date', max(fail_date) as 'end_date' from failed_rnk group by fr ), succeed_rnk as ( select success_date, datediff(success_date, '2018-12-31') - row_number() over (order by success_date) as 'sr' from Succeeded where year(success_date) = 2019 ), NeoSucceeded as ( select 'succeeded' as 'period state', min(success_date) as 'start_date', max(success_date) as 'end_date' from succeed_rnk group by sr ) select * from NeoFailed union select * from NeoSucceeded order by start_date
with failed_states as ( select distinct period_state, min(fail_date) over (partition by session_id) as start_date, max(fail_date) over (partition by session_id) as end_date from ( select period_state, fail_date, sum(session_id0) over (order by fail_date) as session_id from ( select "failed" as period_state, fail_date, case when datediff(fail_date, lag(fail_date) over (order by fail_date)) > 1 then 1 else 0 end as session_id0 from (select * from Failed where fail_date >= '2019-01-01' and fail_date <= '2019-12-31') t1 ) t11 ) t2 ), success_states as ( select distinct period_state, min(success_date) over (partition by session_id) as start_date, max(success_date) over (partition by session_id) as end_date from ( select period_state, success_date, sum(session_id0) over (order by success_date) as session_id from ( select "succeeded" as period_state, success_date, case when datediff(success_date, lag(success_date) over (order by success_date)) > 1 then 1 else 0 end as session_id0 from ( select * from Succeeded where success_date >= '2019-01-01' and success_date <= '2019-12-31' ) t1 ) t11 ) t2 ) select * from ( select * from success_states union select * from failed_states ) t0 order by start_date
with fails as ( select fail_date, date_sub(fail_date, interval rank() over (order by fail_date) day) as fail_group from Failed where left(fail_date,4) = '2019' ), fail_agg as ( select 'failed' as period_state, min(fail_date) as start_date, max(fail_date) as end_date from fails group by fail_group ), successes as ( select success_date, date_sub(success_date, interval rank() over (order by success_date) day) as success_group from Succeeded where left(success_date,4) = '2019' ), success_agg as ( select 'succeeded' as period_state, min(success_date) as start_date, max(success_date) as end_date from successes group by success_group ) select * from fail_agg union select * from success_agg order by 2
with filter as ( select fail_date as day,'failed' as status from failed where fail_date between '2019-01-01' and '2019-12-31' UNION select success_date as day,'succeeded' as status from succeeded where success_date between '2019-01-01' and '2019-12-31' order by day ), ranking as ( select *,rank() over ( order by day )key_rank, rank() over ( partition by status order by day )status_rank from filter order by day ) select status as period_state ,min(day) as start_date,max(day) as end_date from ranking group by status,key_rank - status_rank order by day
with fs as ( select 'failed' as period_state, fail_date as dt from failed where year(fail_date) = 2019 union all select 'succeeded' as period_state, success_date as dt from succeeded where year(success_date) = 2019), ss as (select *, date_sub(dt, interval dense_rank() over(partition by period_state order by dt)day)grp from fs) select period_state, min(dt) as start_date, max(dt) as end_date from ss group by period_state, grp order by min(dt)
with fs as ( select 'failed' as period_state, fail_date as dt from failed where year(fail_date) = 2019 union all select 'succeeded' as period_state, success_date as dt from succeeded where year(success_date) = 2019), ss as (select *, dense_rank() over(partition by period_state order by dt) as rn, date_sub(dt, interval dense_rank() over(partition by period_state order by dt)day)grp from fs) select period_state, min(dt) as start_date, max(dt) as end_date from ss group by period_state, grp order by min(dt)
with main as ( select 'failed' as flag,fail_date as date1 from failed where fail_date between '2019-01-01' and '2019-12-31' union all select 'succeeded' as flag,success_date as date1 from succeeded where success_date between '2019-01-01' and '2019-12-31'), mappings as( select *, dense_rank() over (order by date1) - dense_rank() over (partition by flag order by date1) as mappings from main) select flag as period_state ,min(date1) as start_date,max(date1) as end_date from mappings group by flag,mappings order by start_date
with main as ( select 'failed' as period_state,fail_date as date from failed where fail_date between '2019-01-01' and '2019-12-31' union all select 'succeeded' as period_state,success_date as date from succeeded where success_date between '2019-01-01' and '2019-12-31'), ranking as( select *, dense_rank() over (order by date) as globalRnk, dense_rank() over (partition by period_state order by date) as localRnk from main) select period_state, min(date) as start_date, max(date) as end_date from ranking group by period_state, globalRnk-localRnk order by start_date,globalRnk
with neoFailed as ( select fail_date, datediff(fail_date, '2018-12-31') - rank() over (order by fail_date) as 'fn' from Failed where year(fail_date) = 2019 ), nF as ( select 'failed' as 'period_state', min(fail_date) as 'start_date', max(fail_date) as 'end_date' from neoFailed group by fn ), neoSucceeded as ( select success_date, datediff(success_date, '2018-12-31') - rank() over (order by success_date) as 'snc' from Succeeded where year(success_date) = 2019 ), nS as ( select 'succeeded' as 'period_state', min(success_date) as 'start_date', max(success_date) as 'end_date' from neoSucceeded group by snc ) select * from nF union select * from nS order by start_date
with progress as ( (select fail_date as day, 'failed' as status, row_number() over (order by fail_date) as rn from failed where fail_date between str_to_date('2019-01-01','%Y-%m-%d') and str_to_date('2019-12-31','%Y-%m-%d') order by fail_date) union all (select success_date as day,'succeeded' as status, row_number() over (order by success_date) as rn from Succeeded where success_date between str_to_date('2019-01-01','%Y-%m-%d') and str_to_date('2019-12-31','%Y-%m-%d') order by success_date) ) select status as period_state, min(day) as start_date, max(day) as end_date from progress group by date_sub(day, interval rn day), status order by day
with recursive cte_spine as ( select '2019-01-01' as calendar_date union all select date_add(calendar_date, interval 1 day) as calendar_date from cte_spine where calendar_date < '2019-12-31' ), cte_log as ( select fail_date as calendar_date, 'failed' as state from Failed union all select success_date as calendar_date, 'succeeded' as state from Succeeded ), cte_joined as ( select s.calendar_date, state, row_number() over ( order by s.calendar_date ) as day_idx, row_number() over ( partition by state order by s.calendar_date ) as partition_day_idx from cte_spine as s left join cte_log as l on s.calendar_date = l.calendar_date ), cte_final as ( select state as period_state, min(calendar_date) as start_date, max(calendar_date) as end_date from cte_joined where state is not null group by 1, day_idx - partition_day_idx order by 2 ) select * from cte_final
with recursive cte_spine as ( select '2019-01-01' as calendar_date union all select date_add(calendar_date, interval 1 day) as calendar_date from cte_spine where calendar_date < '2019-12-31' ), cte_log as ( select fail_date as calendar_date, 'failed' as state from Failed union all select success_date as calendar_date, 'succeeded' as state from Succeeded ), cte_joined as ( select s.calendar_date, state, row_number() over ( order by s.calendar_date ) as day_idx, row_number() over ( partition by state order by s.calendar_date ) as partition_day_idx from cte_spine as s left join cte_log as l on s.calendar_date = l.calendar_date where state is not null ), cte_final as ( select state as period_state, min(calendar_date) as start_date, max(calendar_date) as end_date from cte_joined group by 1, day_idx - partition_day_idx order by 2 ) select * from cte_final
with recursive success as ( select success_date as start_date, success_date as end_date from succeeded where year (success_date) = 2019), failed1 as (select fail_date as start_date, fail_date as end_date from failed where year (fail_date) = 2019), success_range as (select start_date, end_date, 1 as cnt from success union all select a.start_date, b.end_date, cnt+1 as cnt from success_range a inner join success b on a.end_date = b.start_date - interval '1' day), failed_range as (select start_date, end_date, 1 as cnt from failed1 union all select a.start_date, b.end_date, cnt+1 as cnt from failed_range a inner join failed1 b on a.end_date = b.start_date - interval '1' day) select * from (select 'succeeded' as period_state, start_date, max(end_date)end_date from (select end_date, min(start_date) start_date from success_range where (end_date, cnt) in (select end_date, max(cnt) from success_range group by 1) group by 1)a group by 2)b union all select * from (select 'failed' as period_state, start_date, max(end_date)end_date from (select end_date, min(start_date) start_date from failed_range where (end_date, cnt) in (select end_date, max(cnt) from failed_range group by 1) group by 1)a group by 2)c order by 2
with recursive t as (select str_to_date('2019-01-01','%Y-%m-%d') as dd, 1 as r union all select ADDDATE(dd, interval 1 day), r+1 from t where dd<'2019-12-31') , s as (select success_date, row_number() over() as r from Succeeded where year(success_date)=2019) , f as (select fail_date, row_number() over() as r from Failed where year(fail_date)=2019) select period_state, min(d) as start_date, max(d) as end_date from(select s.success_date as d, DATEDIFF(success_date, dd) as g, 'succeeded' as period_state from s inner join t on s.r=t.r union select fail_date as d, DATEDIFF(fail_date, dd) as g, 'failed' as period_state from f inner join t on f.r=t.r ) x group by period_state, g order by 2
with s as (select 'succeeded' as period_state, success_date, date_add((select min(success_date) from succeeded where success_date between cast('2019-01-01' as date) and cast('2019-12-31' as date)), interval row_number() over(order by success_date) -1 day) as seq_date from succeeded where success_date between cast('2019-01-01' as date) and cast('2019-12-31' as date) order by 1,2 ), f as (select 'failed' as period_state, fail_date, date_add((select min(fail_date) from failed where fail_date between cast('2019-01-01' as date) and cast('2019-12-31' as date)), interval row_number() over(order by fail_date) -1 day) as seq_date from Failed where fail_date between cast('2019-01-01' as date) and cast('2019-12-31' as date) order by 1,2 ) select period_state, min(success_date) as start_date, max(success_date) as end_date from s group by datediff(success_date,seq_date) union select period_state, min(fail_date) as start_date, max(fail_date) as end_date from f group by datediff(fail_date,seq_date) order by 2
with s as (select *, row_number() over (order by id) as r from (select 'succeeded' as period_state, success_date, datediff(success_date, (select min(success_date) from Succeeded where year(success_date) = '2019'))+1 as id from Succeeded where year(success_date) = '2019') a), f as (select *, row_number() over (order by id) as r from (select 'failed' as period_state, fail_date, datediff(fail_date, (select min(fail_date) from Failed where year(fail_date) = '2019'))+1 as id from Failed where year(fail_date) = '2019') a) select * from (select period_state, min(success_date) start_date, max(success_date) end_date from s group by id - r union select period_state, min(fail_date) start_date, max(fail_date) end_date from f group by id - r) a order by start_date
with stattable AS( SELECT fail_date as event_date, "failed" as period_state FROM Failed UNION ALL SELECT success_date as event_date, "succeeded" as period_state FROM succeeded ) SELECT period_state, MIN(event_date) as start_date, MAX(event_date) AS end_date FROM( SELECT period_state,event_date, DAYOFYEAR(event_date)-DENSE_RANK()OVER(PARTITION BY period_state ORDER BY event_date) as indgrp FROM stattable WHERE year(event_date)=2019 )a GROUP BY period_state, indgrp ORDER BY start_date
with status_change as ( select status, DATE_SUB(dt,INTERVAL num DAY), min(dt) as start_date, max(dt) as end_date from (select 'failed' as status, fail_date dt, row_number() over(order by fail_date ASC) as num from Failed a where fail_date between STR_TO_DATE('2019-01-01','%Y-%m-%d') and STR_TO_DATE('2019-12-31','%Y-%m-%d') ) a group by 1,2 UNION select status, DATE_SUB(dt,INTERVAL num DAY) , min(dt) as start_date, max(dt) as end_date from (select 'succeeded' as status, success_Date dt, row_number() over(order by success_Date ASC) as num from Succeeded a where success_Date between STR_TO_DATE('2019-01-01','%Y-%m-%d') and STR_TO_DATE('2019-12-31','%Y-%m-%d') ) a group by 1,2 ) select status period_state, start_date, end_date from status_change order by start_Date
with su as ( select period_state, min(success_date) start_date, max(success_date) end_date from ( select 'succeeded' period_state, success_date, dense_rank() over(order by success_date asc) rk, date_sub(success_date, interval dense_rank() over(order by success_date asc) day) from Succeeded where success_date between "2019-01-01" and "2019-12-31" ) x group by date_sub(success_date, interval rk day) ) , fa as ( select period_state, min(fail_date), max(fail_date) from ( select 'failed' period_state, fail_date, dense_rank() over(order by fail_date asc) rk, date_sub(fail_date, interval dense_rank() over(order by fail_date asc) day) from failed where fail_date between "2019-01-01" and "2019-12-31" ) x group by date_sub(fail_date, interval rk day) ) select * from su union all select * from fa order by start_date
with success as ( select 'succeeded' as state, success_date as dt, date_add(success_date, interval -rank() over(order by success_date) day) as rn from succeeded where year(success_date) = 2019), fail as( select 'failed' as state, fail_date as dt, date_add(fail_date, interval -rank() over (order by fail_date) day) as rn from failed where year(fail_date) = 2019 ) select state as period_state, min(dt) as start_date, max(dt) as end_date from success group by rn union all select state as period_state, min(dt) as start_date, max(dt) as end_date from fail group by rn order by start_date
with success as ( select success_date as ds from succeeded where success_date between '2019-01-01' and '2019-12-31' ), fail as ( select fail_date as ds from failed where fail_date between '2019-01-01' and '2019-12-31' ), success_agg as ( select s1.ds, case when s2.ds is null then 1 else 0 end as ds_begin, case when s3.ds is null then 1 else 0 end as ds_end from success s1 left join success s2 on date_add(s1.ds,interval -1 day) = s2.ds left join success s3 on date_add(s1.ds,interval 1 day) = s3.ds ), success_result as ( select 'succeeded' as period_state, s1.ds as start_date, coalesce(min(s2.ds),'2019-12-31') as end_date from success_agg s1 left join ( select ds from success_agg where ds_end = 1 )s2 on s1.ds <= s2.ds where ds_begin = 1 group by 1,2 ), fail_agg as ( select f1.ds, case when f2.ds is null then 1 else 0 end as ds_begin, case when f3.ds is null then 1 else 0 end as ds_end from fail f1 left join fail f2 on date_add(f1.ds,interval -1 day) = f2.ds left join fail f3 on date_add(f1.ds,interval 1 day) = f3.ds ), fail_result as ( select 'failed' as period_state, f1.ds as start_date, coalesce(min(f2.ds),'2019-12-31') as end_date from fail_agg f1 left join ( select ds from fail_agg where ds_end = 1 )f2 on f1.ds <= f2.ds where ds_begin = 1 group by 1,2 ) select period_state, start_date, end_date from ( select * from success_result )t1 union all( select * from fail_result ) order by 2
with success as ( select success_date, min(fail_date) as minf, max(fail_date) as maxf from succeeded s left outer join failed f on s.success_date < f.fail_date where s.success_date between date('2019-01-01') and date('2019-12-31') group by success_date order by s.success_date, f.fail_date ), fail as ( select f.fail_date, min(success_date) as mins, max(success_date) as maxs from failed f left outer join succeeded s on f.fail_date < s.success_date where f.fail_date between date('2019-01-01') and date('2019-12-31') group by fail_date order by s.success_date, f.fail_date ), success_agg as ( select min(success_date) as mins, max(success_date) as maxs, minf, maxf from success group by minf, maxf), fail_agg as ( select min(fail_date) as minf, max(fail_date) as maxf, mins, maxs from fail group by mins, maxs ), combined as ( select 'succeeded' as period_state, mins as start_date, maxs as end_date from success_agg union all select 'failed' as period_state, minf as start_date, maxf as end_date from fail_agg) select * from combined order by start_date
with t as ( SELECT * FROM ( SELECT fail_date As 'dates', 'failed' As period_state FROM Failed UNION SELECT success_date As 'dates', 'succeeded' As period_state FROM Succeeded) As t0 WHERE dates BETWEEN '2019-01-01' AND '2019-12-31' ORDER BY dates ) SELECT * FROM ( SELECT period_state, start_date, IF(end_date IS NULL, LEAD(end_date) OVER(ORDER BY dates), end_date) As 'end_date' FROM ( SELECT period_state, dates, IF(period_state <> IFNULL(LAG(period_state) OVER(ORDER BY dates),''), dates, NULL) As 'start_date', IF(period_state <> IFNULL(LEAD(period_state) OVER(ORDER BY dates),''), dates, NULL) As 'end_date' FROM t ORDER BY dates) t1 WHERE start_date IS NOT NULL OR end_date IS NOT NULL ) t2 WHERE start_date IS NOT NULL
with t as ( SELECT * FROM ( SELECT fail_date As 'dates', 'failed' As period_state FROM Failed UNION SELECT success_date As 'dates', 'succeeded' As period_state FROM Succeeded) As t0 WHERE dates BETWEEN '2019-01-01' AND '2019-12-31' ORDER BY dates ) SELECT * FROM ( SELECT period_state, start_date, IF(end_date IS NULL, LEAD(end_date) OVER(ORDER BY dates), end_date) As 'end_date' FROM ( SELECT period_state, dates, IF(start_date = 1, dates, NULL) As 'start_date', IF(end_date = 1, dates, NULL) As 'end_date' FROM ( SELECT period_state, dates, IF(period_state <> IFNULL(LAG(period_state) OVER(ORDER BY dates),''), 1, 0) As 'start_date', IF(period_state <> IFNULL(LEAD(period_state) OVER(ORDER BY dates),''), 1, 0) As 'end_date' FROM t ) t1 WHERE start_date = 1 OR end_date = 1 ORDER BY dates) t2 ) t3 WHERE start_date IS NOT NULL
with t as ( select date_, status_, row_number() over (order by date_) as id from( select fail_date as date_, 'F' as status_ from Failed where fail_date between '2019-01-01' and '2019-12-31' union select success_date as date_, 'S' as status_ from Succeeded where success_date between '2019-01-01' and '2019-12-31') as a ) select "succeeded" as period_state, min(date_) as start_date, max(date_) as end_date from( select date_, id - row_number() over (order by id) as grp from t where status_ = 'S' ) as s_part group by grp union select "failed" as period_state, min(date_) as start_date, max(date_) as end_date from( select date_, id - row_number() over (order by id) as grp from t where status_ = 'F' ) as f_part group by grp order by start_date
with t as (select 'failed' as period_state, fail_date d from failed where year(fail_date)=2019 union select 'succeeded' as period_state, success_date d from succeeded where year(success_date)=2019) , tt as (select *, dense_rank() over(partition by period_state order by d) rnk, date_sub(d, interval dense_rank() over(partition by period_state order by d) day) grp from t) select period_state, min(d) start_date, max(d) end_date from tt group by 1, grp order by 2
with t as (select 'failed' as period_state, fail_date dt, dayofyear(fail_date) - row_number() over(order by fail_date) grp from failed where year(fail_date)=2019 union select 'succeeded' as period_state, success_date dt, dayofyear(success_date) - row_number() over(order by success_date) grp from succeeded where year(success_date)=2019) select period_state, min(dt) start_date, max(dt) end_date from t group by 1, grp order by 2
with t as (select fail_date as date, 'failed' as period_state from failed where fail_date between '2019-01-01' and '2019-12-31' union select success_date as date, 'succeeded' as period_state from succeeded where success_date between '2019-01-01' and '2019-12-31'), cte2 as ( select period_state, date, rank() over(partition by period_state order by date asc) as rnk1, rank() over(order by date asc) as rnk2 from t) select period_state, min(date) as start_date, max(date) as end_date from cte2 group by (rnk2-rnk1), 1
with t1 as ( select fail_date as day, 'failed' as stats, rank()over(order by fail_date) as rk from failed where fail_date between '2019-01-01'and '2019-12-31' union select success_date as day, 'succeeded' as stats, rank()over(order by success_date) as rk from succeeded where success_date between '2019-01-01'and '2019-12-31'), t2 as ( select day, rank()over(order by day) as overall_ranking, stats, rk, rank()over(order by day)-rk as inv from t1) select stats as period_state, min(day) as start_date, max(day) as end_date from t2 group by inv,stats order by 2
with t1 as ( select fail_date,dayofyear(fail_date)-row_number()over(order by fail_date) as p1 from Failed where fail_date between '2019-01-01' and '2019-12-31'), t2 as (select success_date,dayofyear(success_date)-row_number()over(order by success_date) as p2 from Succeeded where success_date between '2019-01-01' and '2019-12-31') select 'failed' as period_state, min(fail_date)as start_date, max(fail_date)as end_date from t1 group by p1 union select 'succeeded' as period_state, min(success_date) as start_date, max(success_date) as end_date from t2 group by p2 order by start_date
with t1 as (select fail_date as date, 'failed' as status from failed where year(fail_date) = '2019' union all select success_date as date, 'succeeded' as status from succeeded where year(success_date) = '2019'), t2 as (select date, status, lead(status, 1) over (order by date) as next_status, lag(status, 1) over (order by date) as previous_status from t1), t3 as (select date as start_date, status, row_number() over (order by date) as rnk from t2 where status != previous_status or previous_status is null), t4 as (select date as end_date, status, row_number() over (order by date) as rnk from t2 where status != next_status or next_status is null) select t3.status as period_state, start_date, end_date from t3 join t4 on t3.rnk = t4.rnk
with t1 as (select fail_date as day, 'failed' as period_state from failed where year(fail_date) = '2019' union all select success_date as day, 'succeeded' as period_state from succeeded where year(success_date) = '2019'), t2 as (select day, period_state, lag(period_state, 1) over (order by day) as lag_state, lead(period_state, 1) over (order by day) as lead_state from t1), t3 as (select day as start_date, period_state, row_number() over (order by day) as index1 from t2 where period_state <> lag_state or lag_state is null), t4 as (select day as end_date, period_state, row_number() over (order by day) as index2 from t2 where period_state <> lead_state or lead_state is null) select t3.period_state, start_date, end_date from t3 join t4 on index1 = index2
with t1 as (select period_state, min(success_date) as start_date, max(success_date) as end_date from (select "succeeded" as period_state, success_date, rank() over (order by success_date) as rnk from Succeeded where success_date between "2019-01-01" and "2019-12-31") tmp1 group by date_sub(success_date, interval rnk day) ), t2 as (select period_state, min(fail_date) as start_date, max(fail_date) as end_date from (select "failed" as period_state, fail_date, rank() over (order by fail_date) as rnk from Failed where fail_date between "2019-01-01" and "2019-12-31") tmp2 group by date_sub(fail_date, interval rnk day) ) select * from t1 union select * from t2 order by start_date
with t1 as( select period_state, min(success_date) as start_date, max(success_date) as end_date from ( select 'succeeded' as period_state, success_date, rank() over (order by success_date) as rnk from succeeded where success_date between '2019-01-01' and '2019-12-31') tmp1 group by date_sub(success_date, interval rnk day) ), t2 as( select period_state, min(fail_date) as start_date, max(fail_date) as end_date from ( select 'failed' as period_state, fail_date, rank() over (order by fail_date) as rnk from failed where fail_date between '2019-01-01' and '2019-12-31') tmp2 group by date_sub(fail_date, interval rnk day) ) select * from t1 union select * from t2 order by start_date
with tab_fail_date as ( select fail_date, row_number() over (order by fail_date) as rn, date_sub(fail_date, interval row_number() over (order by fail_date) day) as ref_date from failed where fail_date between '2019-01-01' and '2019-12-31'), tab_suc_date as ( select success_date, row_number() over (order by success_date) as rn, date_sub(success_date, interval row_number() over (order by success_date) day) as ref_date from succeeded where success_date between '2019-01-01' and '2019-12-31'), tab_fail_pivot as ( select 'failed' as period_state, min(fail_date) as start_date, max(fail_date) as end_date from tab_fail_date group by ref_date ), tab_suc_pivot as ( select 'succeeded' as period_state, min(success_date) as start_date, max(success_date) as end_date from tab_suc_date group by ref_date ) select * from ( select * from tab_fail_pivot union select * from tab_suc_pivot) as a order by a.start_date
with tasks_state as ( select task_date,state, dense_rank() over(partition by state order by task_date asc) as rank_in_state from ( select fail_date as task_date, "failed" as state from Failed union all select success_date as task_data, "succeeded" as state from Succeeded ) U where task_date between date('2019-01-01') and date('2019-12-31') ) select t.state as period_state, min(t.task_date) as start_date, max(t.task_date) as end_date from ( select task_date, state, date_add(task_date, interval -rank_in_state day) as grouping_set from tasks_state ) t group by state, grouping_set order by start_date
with tasks_state as ( select task_date,state, dense_rank() over(partition by state order by task_date asc) as rank_in_state from ( select fail_date as task_date, "failed" as state from Failed where fail_date between date('2019-01-01') and date('2019-12-31') union all select success_date as task_data, "succeeded" as state from Succeeded where success_date between date('2019-01-01') and date('2019-12-31') ) U ) select t.state as period_state, min(t.task_date) as start_date, max(t.task_date) as end_date from ( select task_date, state, date_add(task_date, interval -rank_in_state day) as grouping_set from tasks_state ) t group by state, grouping_set order by start_date
with temp as ( select 'failed' as period_state, fail_date as t_date from failed union select 'succeeded' as period_state, success_date as t_date from Succeeded ), temp1 as ( select period_state, t_date, rank()over(partition by period_state order by t_date) as rk from temp where t_date between '2019-01-01' and '2019-12-31' ), temp2 as ( select period_state, t_date, date_add(t_date, interval -rk day) as grp from temp1 ) select period_state, min(t_date) as start_date, max(t_date) as end_date from temp2 group by grp, period_state order by 2
with temp as ( select 'failed' as period_state,fail_date,dayofyear(fail_date) as day,row_number() over(order by fail_date) as r from Failed where fail_date between '2019-01-01' and '2019-12-31' union all select 'succeeded' as period_state,success_date,dayofyear(success_date) as day,row_number() over(order by success_date) as r from Succeeded where success_date between '2019-01-01' and '2019-12-31' ) select period_state,min(fail_date) as start_date,max(fail_date) as end_date from temp group by period_state,day-r order by 2
with temp as ( select fail_date, rank() over (order by fail_date) as ranking from Failed where fail_date between '2019-01-01' and '2019-12-31' ), temp1 as ( select success_date, rank() over (order by success_date) as ranking from Succeeded where success_date between '2019-01-01' and '2019-12-31' ) select 'failed' as period_state, min(fail_date) as start_date, max(fail_date) as end_date from temp group by to_days(fail_date) - ranking union all select 'succeeded' as period_state, min(success_date) as start_date, max(success_date) as end_date from temp1 group by to_days(success_date) - ranking order by start_date
with temp as( select fail_date as day, "failed" as stats, rank() over(order by fail_date) as rnk from failed where fail_date between '2019-01-01' AND '2019-12-31' union all select success_date as day, "succeeded" as stats, rank() over(order by success_date) as rnk from Succeeded where success_date between '2019-01-01' AND '2019-12-31' ), temp1 as( select day, rank() over(order by day) as overall_rnk, stats, rnk, (rank() over(order by day) - rnk) as intervals from temp) select stats as period_state, min(day) as start_date, max(day) as end_date from temp1 group by intervals, stats order by start_date
with temp1 as ( select fail_date, row_number() over (order by fail_date) as ranking from Failed where fail_date between '2019-01-01' and '2019-12-31' ), temp2 as ( select success_date, row_number() over (order by success_date) as ranking from Succeeded where success_date between '2019-01-01' and '2019-12-31' ) select 'failed' as period_state, min(fail_date) as start_date, max(fail_date) as end_date from temp1 group by (to_days(fail_date) - ranking) union all select 'succeeded' as period_state, min(success_date) as start_date, max(success_date) as end_date from temp2 group by (to_days(success_date) - ranking) order by start_date
with temp1 as ( select fail_date, row_number() over (order by fail_date) as ranking from Failed where fail_date between '2019-01-01' and '2019-12-31' ), temp2 as ( select success_date, row_number() over (order by success_date) as ranking from Succeeded where success_date between '2019-01-01' and '2019-12-31' ) select 'failed' as period_state, min(fail_date) as start_date, max(fail_date) as end_date from temp1 group by to_days(fail_date) - ranking union all select 'succeeded' as period_state, min(success_date) as start_date, max(success_date) as end_date from temp2 group by to_days(success_date) - ranking order by start_date
with temp1 as ( select lag(fail_date) over() as 'pre_date', fail_date, lead(fail_date) over() as 'post_date' from failed where fail_date between '2019-01-01' and '2019-12-31' ), temp2 as ( select lag(success_date) over() as 'pre_date', success_date, lead(success_date) over() as 'post_date' from Succeeded where success_date between '2019-01-01' and '2019-12-31' ) select * from ( select AA.period_state,start_date,end_date from ( select row_number() over() as 'id', period_state,start_date from ( select 'failed' as 'period_state', case when pre_date is null or datediff(fail_date, pre_date) > 1 then fail_date else 0 end as 'start_date' from temp1) A where start_date <> 0 ) AA left join ( select row_number() over() as 'id', period_state,end_date from ( select 'failed' as 'period_state', case when post_date is null or datediff(post_date, fail_date) > 1 then fail_date else 0 end as 'end_date' from temp1) B where end_date <> 0 ) BB on AA.id = BB.id UNION all select AA.period_state,start_date,end_date from ( select row_number() over() as 'id', period_state,start_date from ( select 'succeeded' as 'period_state', case when pre_date is null or datediff(success_date, pre_date) > 1 then success_date else 0 end as 'start_date' from temp2) A where start_date <> 0 ) AA left join ( select row_number() over() as 'id', period_state,end_date from ( select 'succeeded' as 'period_state', case when post_date is null or datediff(post_date, success_date) > 1 then success_date else 0 end as 'end_date' from temp2) B where end_date <> 0 ) BB on AA.id = BB.id ) result order by start_date
with temp_failed as ( select fail_date, dense_rank() over (order by fail_date) as rn from failed), failed_cleaned as( select fail_date as dt, date_add(fail_date, interval - rn day) as fill_gaps, 'failed' as period_state from temp_failed ), temp_succeded as ( select success_date, dense_rank() over (order by success_date) as rn from Succeeded), succeded_cleaned as( select success_date as dt, date_add(success_date, interval - rn day) as fill_gaps, 'succeeded' as period_state from temp_succeded ), merged_table as( select * from failed_cleaned where dt between '2019-01-01' and '2019-12-31' union select * from succeded_cleaned where dt between '2019-01-01' and '2019-12-31' ) select period_state, min(dt) as start_date, max(dt) as end_date from merged_table group by period_state, fill_gaps order by start_date
with temp_table as ( SELECT 'failed' status, fail_date ex_date FROM Failed WHERE fail_date BETWEEN '2019-01-01' and '2019-12-31' union SELECT 'succeeded' status, success_date ex_date FROM Succeeded WHERE success_date BETWEEN '2019-01-01' and '2019-12-31' ) SELECT current_status period_state, start_date, CASE WHEN end_date IS NULL THEN max_date ELSE DATE_ADD(end_date, INTERVAL -1 DAY) END end_date FROM ( SELECT current_status, ex_date start_date, LEAD(ex_date, 1) OVER ( ORDER BY ex_date ) end_date FROM ( SELECT ex_date, status current_status, LAG(status, 1) OVER ( ORDER BY ex_date ) prev_status FROM temp_table WHERE ex_date BETWEEN '2019-01-01' and '2019-12-31' ) t2 WHERE current_status <> prev_status OR prev_status IS NULL ) t3 cross join ( select max(ex_date) max_date from temp_table ) t4
with tmp as ( select 'failed' as period_state, fail_date as dateid from Failed where fail_date between '2019-01-01' and '2019-12-31' union all select 'succeeded' as period_state, success_date as dateid from Succeeded where success_date between '2019-01-01' and '2019-12-31' ) ,tmp2 as ( select period_state, dateid, row_number() over (partition by period_state order by dateid) as row1, row_number() over (order by dateid) as row2 from tmp) select period_state, min(dateid) as start_date, max(dateid) as end_date from tmp2 group by period_state, row2-row1
with tmp as (select 'failed' as period_state, fail_date as dt from failed union all select 'succeeded' as period_state, success_date as dt from succeeded), tmp1 as (select period_state, dt, rank() over (order by dt) as rk from tmp order by dt), tmp2 as (select a.period_state, a.dt, rank() over (order by a.dt) as rk from tmp1 a left join tmp1 b on a.rk = b.rk + 1 where b.period_state is null or b.period_state != a.period_state), tmp3 as (select a.period_state, a.dt as start_date, if(b.dt is null, mx, date_add(b.dt, interval -1 day)) as end_date from tmp2 a left join tmp2 b on a.rk + 1 = b.rk left join (select max(dt) as mx from tmp) c on a.rk > 0) select period_state, if(start_date < date('2019-01-01'), date('2019-01-01'), start_date) as start_date, if(end_date > date('2019-12-31'), date('2019-12-31'), end_date) as end_date from tmp3 where start_date <= date("2019-12-31") and end_date >= date('2019-01-01')
with tmp as (select 'succeeded' as period_state, success_date as dt from succeeded union select 'failed' as period_state, fail_date as dt from failed order by 2 ) select period_state, min(dt) as start_date, max(dt) as end_date from( select *, date_sub(dt, interval row_number() over(partition by period_state order by dt) day) as diff from tmp where year(dt)=2019) t group by period_state, diff order by 2
with together as ( select 'succeeded' as period_state , success_date as day , date_sub(success_date, interval row_number() over(order by success_date) day) as grp from succeeded where success_date between '2019-01-01' and '2019-12-31' union select 'failed', fail_date , date_sub(fail_date, interval row_number() over(order by fail_date) day) as grp from failed where fail_date between '2019-01-01' and '2019-12-31' ) select period_state , min(day) as start_date , max(day) as end_date from together group by period_state, grp order by 2
with total as( select fail_date days, 'failed' state, rank()over(order by fail_date) rnk from Failed where fail_date between '2019-01-01' and '2019-12-31' union all select success_date days, 'succeeded' state, rank()over(order by success_date) rnk from Succeeded where success_date between '2019-01-01' and '2019-12-31' order by days ), X AS( select days, state, rank()over(order by days)-rnk num from total) select state period_state, min(days) start_date, max(days) end_date from X group by state,num
with un as ( select 'failed' as period_state,fail_date as date1 from Failed union select 'succeeded' as period_state,success_date as date1 from Succeeded ), flags as ( select period_state, date1, dense_rank() over (order by date1) - dense_rank() over (partition by period_state order by date1) as flag from un where date1 between '2019-01-01' and '2019-12-31') select period_state, min(date1) as start_date, max(date1) as end_date from flags group by period_state, flag order by min(date1)
with un as ( select 'failed' as period_state,fail_date as date1 from Failed union select 'succeeded' as period_state,success_date as date1 from Succeeded), flags as ( select period_state,date1,dense_rank() over (order by date1) - dense_rank() over (partition by period_state order by date1) as flag from un where date1 between '2019-01-01' and '2019-12-31') select period_state,min(date1) as start_date,max(date1) as end_date from flags group by period_state,flag order by min(date1)
with united as ( select 'failed' as status , fail_date as event_date , rank() over(order by fail_date) as event_rnk from failed where fail_date between '2019-01-01' and '2019-12-31' union select 'succeeded' as status , success_date , rank() over(order by success_date) from succeeded where success_date between '2019-01-01' and '2019-12-31' ) select status as period_state , min(event_date) as start_date , max(event_date) as end_date from ( select status , event_date , rank() over(order by event_date) as consecutive_rnk , event_rnk from united ) tmp group by tmp.consecutive_rnk-event_rnk, status order by start_date
