SELECT t.task_id, s.subtask_id FROM Tasks t JOIN ( SELECT 1 AS subtask_id UNION SELECT 2 AS subtask_id UNION SELECT 3 AS subtask_id UNION SELECT 4 AS subtask_id UNION SELECT 5 AS subtask_id UNION SELECT 6 AS subtask_id UNION SELECT 7 AS subtask_id UNION SELECT 8 AS subtask_id UNION SELECT 9 AS subtask_id UNION SELECT 10 AS subtask_id UNION SELECT 11 AS subtask_id UNION SELECT 12 AS subtask_id UNION SELECT 13 AS subtask_id UNION SELECT 14 AS subtask_id UNION SELECT 15 AS subtask_id UNION SELECT 16 AS subtask_id UNION SELECT 17 AS subtask_id UNION SELECT 18 AS subtask_id UNION SELECT 19 AS subtask_id UNION SELECT 20 AS subtask_id ) s WHERE s.subtask_id <= t.subtasks_count AND (t.task_id, s.subtask_id) NOT IN ( SELECT task_id, subtask_id FROM Executed )
SELECT t.task_id, v.n AS subtask_id FROM ( SELECT x * 10 + y + 1 AS n FROM ( SELECT 0 AS x UNION SELECT 1 ) v1, ( SELECT 0 AS y UNION SELECT 1 UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9 ) v2 ) v JOIN Tasks t ON t.subtasks_count >= v.n LEFT OUTER JOIN Executed e ON e.task_id = t.task_id AND e.subtask_id = v.n WHERE e.task_id IS NULL
WITH CTE AS (select 1 as 'task' union select 2 as 'task' union select 3 as 'task' union select 4 as 'task' union select 5 as 'task' union select 6 as 'task' union select 7 as 'task' union select 8 as 'task' union select 9 as 'task' union select 10 as 'task' union select 11 as 'task' union select 12 as 'task' union select 13 as 'task' union select 14 as 'task' union select 15 as 'task' union select 16 as 'task' union select 17 as 'task' union select 18 as 'task' union select 19 as 'task' union select 20 as 'task'), CTE2 AS ( select t.task_id, t.subtasks_count, cte.task, case when cte.task <= t.subtasks_count then cte.task else NULL end as 'executedtask' from Tasks t join CTE order by t.task_id, t.subtasks_count, cte.task ) select cte2.task_id, cte2.executedtask as 'subtask_id' from cte2 left join Executed e on cte2.task_id = e.task_id and cte2.executedtask = e.subtask_id where cte2.executedtask IS NOT NULL and e.subtask_id IS NULL
WITH RECURSIVE A AS( SELECT task_id, 1 AS subtask_id FROM Tasks UNION ALL SELECT A.task_id, subtask_id+1 FROM A WHERE subtask_id < (SELECT subtasks_count FROM Tasks t WHERE A.task_id = t.task_id) ) SELECT * FROM A WHERE (task_id, subtask_id) NOT IN (SELECT * FROM Executed)
WITH RECURSIVE A AS( SELECT task_id, subtasks_count, 1 AS subtask_id FROM Tasks UNION ALL SELECT A.task_id, subtasks_count, subtask_id+1 FROM A WHERE subtask_id < subtasks_count ) SELECT A.task_id, A.subtask_id FROM A LEFT JOIN Executed e ON A.task_id = e.task_id and A.subtask_id = e.subtask_id WHERE e.subtask_id IS NULL
WITH RECURSIVE A AS( SELECT task_id, subtasks_count, 1 AS subtask_id FROM Tasks UNION ALL SELECT A.task_id, subtasks_count, subtask_id+1 FROM A WHERE subtask_id < subtasks_count ) select a.task_id, a.subtask_id from a left join executed e on a.task_id = e.task_id and a.subtask_id = e.subtask_id where e.subtask_id is null
WITH RECURSIVE A AS( SELECT task_id, subtasks_count, 1 AS subtask_id FROM Tasks UNION ALL SELECT A.task_id, subtasks_count, subtask_id+1 FROM A WHERE subtask_id < subtasks_count ) select task_id, subtask_id from a where (task_id, subtask_id) not in (select task_id, subtask_id from executed)
WITH RECURSIVE A AS( SELECT task_id, subtasks_count, 1 AS subtask_id FROM Tasks UNION ALL SELECT task_id, subtasks_count, subtask_id+1 FROM A WHERE subtask_id < subtasks_count ) SELECT A.task_id, A.subtask_id FROM A LEFT JOIN Executed e ON A.task_id = e.task_id and A.subtask_id = e.subtask_id WHERE e.subtask_id IS NULL
WITH RECURSIVE A AS( SELECT task_id, subtasks_count, 1 AS subtask_id FROM Tasks UNION ALL SELECT task_id, subtasks_count, subtask_id+1 FROM A WHERE subtask_id < subtasks_count ) SELECT A.task_id, A.subtask_id FROM A LEFT JOIN Executed e ON A.task_id = e.task_id and A.subtask_id = e.subtask_id WHERE e.subtask_id IS NULL order by 1, 2
WITH RECURSIVE A as ( SELECT task_id, 1 AS subtask_id FROM Tasks UNION ALL SELECT A.task_id, A.subtask_id + 1 FROM A WHERE A.subtask_id < (SELECT subtasks_count FROM Tasks WHERE A.task_id = Tasks.task_id) ) SELECT * FROM A WHERE (task_id,subtask_id) NOT IN (SELECT * FROM Executed)
WITH RECURSIVE AllSubTasks AS ( SELECT 1 AS subtask_id UNION ALL SELECT subtask_id+1 AS subtask_id FROM AllSubTasks WHERE subtask_id < (SELECT MAX(subtasks_count) FROM Tasks) ), TasksWithAllPossibleSubTasks AS ( SELECT T.task_id, A.subtask_id FROM Tasks T JOIN AllSubTasks A ), TasksWithCorrectSubTasks AS ( SELECT A.task_id, A.subtask_id FROM TasksWithAllPossibleSubTasks A INNER JOIN Tasks T ON A.task_id = T.task_id AND A.subtask_id <= T.subtasks_count ), MissingSubtasks AS ( SELECT T.task_id, T.subtask_id FROM TasksWithCorrectSubTasks T LEFT OUTER JOIN Executed E ON T.task_id = E.task_id AND T.subtask_id = E.subtask_id WHERE E.task_id is null ) SELECT * FROM MissingSubtasks
WITH RECURSIVE AllTasks AS (SELECT task_id ,subtasks_count AS subtask_id FROM Tasks UNION ALL SELECT task_id ,subtask_id - 1 AS subtask_id FROM AllTasks WHERE subtask_id > 1) SELECT task_id ,subtask_id FROM AllTasks WHERE CONCAT(task_id,"-",subtask_id) NOT IN (SELECT CONCAT(task_id,"-",subtask_id) FROM Executed) ORDER BY 1 ASC, 2 ASC
WITH RECURSIVE AllTasks AS (SELECT task_id ,subtasks_count AS subtask_id FROM Tasks UNION ALL SELECT task_id ,subtask_id - 1 AS subtask_id FROM AllTasks WHERE subtask_id > 1) SELECT task_id ,subtask_id FROM AllTasks WHERE CONCAT(task_id,"-",subtask_id) NOT IN (SELECT CONCAT(task_id,"-",subtask_id) FROM Executed) ORDER BY 1,2
WITH RECURSIVE AllTasks AS (SELECT task_id ,subtasks_count AS subtask_id FROM Tasks UNION ALL SELECT task_id ,subtask_id - 1 FROM AllTasks WHERE subtask_id > 1) SELECT * FROM AllTasks WHERE CONCAT(task_id,'-',subtask_id) NOT IN (SELECT CONCAT(task_id,'-',subtask_id) FROM Executed)
WITH RECURSIVE All_Tasks AS (SELECT task_id, subtasks_count AS subtask_id FROM Tasks UNION ALL SELECT task_id, subtask_id - 1 AS subtask_id FROM All_Tasks WHERE subtask_id > 1) SELECT * FROM All_Tasks WHERE (task_id, subtask_id) NOT IN (SELECT * FROM Executed)
WITH RECURSIVE Alltasks AS (SELECT task_id, subtasks_count FROM Tasks UNION ALL SELECT task_id, subtasks_count - 1 FROM Alltasks WHERE subtasks_count > 1) SELECT task_id, subtasks_count AS subtask_id FROM Alltasks WHERE CONCAT(task_id,"-",subtasks_count) NOT IN (SELECT CONCAT(task_id,"-",subtask_id) FROM Executed)
WITH RECURSIVE CTE (n) AS( SELECT 1 as subtasks_id UNION ALL SELECT n+1 as subtasks_id FROM CTE c WHERE n+1<= (SELECT MAX(subtasks_count) FROM Tasks) ) , Tasks2 AS ( SELECT t.*, c.n FROM CTE c LEFT JOIN Tasks t ON c.n<= t.subtasks_count ORDER BY t.task_id, c.n ) select t.task_id, t.n AS subtask_id From Tasks2 t LEFT JOIN Executed e ON t.task_id = e.task_id AND t.n = e.subtask_id WHERE e.subtask_id IS NULL
WITH RECURSIVE CTE AS ( SELECT * FROM Tasks UNION ALL SELECT task_id, subtasks_count -1 FROM CTE WHERE subtasks_count > 1 ) SELECT task_id, subtasks_count AS subtask_id FROM CTE WHERE (task_id, subtasks_count) NOT IN ( SELECT * FROM Executed ) ORDER BY task_id, subtask_id
WITH RECURSIVE CTE AS ( SELECT 1 AS subtask_id UNION ALL SELECT 1 + subtask_id FROM CTE WHERE subtask_id < 20 ), CTE2 AS ( SELECT * FROM Tasks CROSS JOIN CTE WHERE subtask_id <= subtasks_count ) SELECT d1.task_id, d1.subtask_id FROM CTE2 as d1 LEFT JOIN Executed as d2 ON d1.task_id = d2.task_id AND d1.subtask_id = d2.subtask_id WHERE d2.subtask_id IS NULL
WITH RECURSIVE CTE AS ( SELECT 1 as subtask_id UNION SELECT 1 + subtask_id FROM CTE WHERE subtask_id <= 19 ), CTE2 AS ( SELECT d1.task_id, d2.subtask_id FROM Tasks as d1 CROSS JOIN CTE as d2 WHERE d1.subtasks_count >= d2.subtask_id ORDER BY 1,2 ) SELECT d1.* FROM CTE2 as d1 LEFT JOIN Executed as d2 ON d1.task_id = d2.task_id AND d1.subtask_id = d2.subtask_id WHERE d2.subtask_id IS NULL
WITH RECURSIVE CTE AS ( SELECT task_id, 1 AS ct, subtasks_count FROM Tasks UNION ALL SELECT task_id, ct+1, subtasks_count FROM CTE WHERE ct<subtasks_count ), CTE2 AS ( SELECT CTE.task_id, CTE.ct, Executed.subtask_id AS sub_id FROM CTE LEFT JOIN Executed ON CTE.task_id = Executed.task_id AND CTE.ct = Executed.subtask_id) SELECT task_id, ct AS subtask_id FROM CTE2 WHERE sub_id IS NULL
WITH RECURSIVE CTE AS ( SELECT task_id, 1 AS subtask_id FROM Tasks UNION ALL SELECT task_id, subtask_id + 1 FROM CTE WHERE subtask_id < (SELECT MAX(subtasks_count) FROM Tasks) ) SELECT t2.task_id, t2.subtask_id FROM Tasks t1 JOIN CTE t2 ON t1.task_id = t2.task_id WHERE t2.subtask_id <= t1.subtasks_count AND (t2.task_id, t2.subtask_id) NOT IN (SELECT * FROM Executed)
WITH RECURSIVE CTE AS ( SELECT task_id, subtasks_count AS subtask_id FROM Tasks UNION ALL SELECT task_id, subtask_id - 1 FROM CTE WHERE subtask_id > 1 ) SELECT CTE.* FROM CTE LEFT JOIN Executed ON CTE.task_id = Executed.task_id AND CTE.subtask_id = Executed.subtask_id WHERE Executed.task_id IS NULL
WITH RECURSIVE CTE AS ( SELECT task_id, subtasks_count AS subtask_id FROM Tasks UNION ALL SELECT task_id, subtask_id - 1 FROM CTE WHERE subtask_id > 1 ) SELECT CTE.* FROM CTE WHERE ( SELECT task_id FROM Executed WHERE Executed.task_id = CTE.task_id AND Executed.subtask_id = CTE.subtask_id ) IS NULL
WITH RECURSIVE CTE AS ( SELECT task_id, subtasks_count FROM TASKS UNION ALL SELECT task_id, subtasks_count - 1 FROM CTE WHERE subtasks_count > 1 ) SELECT task_id, subtasks_count AS subtask_id FROM CTE WHERE (task_id, subtasks_count) NOT IN (SELECT * FROM Executed)
WITH RECURSIVE CTE AS ( SELECT task_id, subtasks_count FROM Tasks UNION ALL SELECT task_id, subtasks_count - 1 FROM CTE WHERE subtasks_count > 1 ) SELECT CTE.task_id, CTE.subtasks_count AS subtask_id FROM CTE LEFT JOIN executed AS e ON CTE.task_id=e.task_id AND CTE.subtasks_count=e.subtask_id WHERE subtask_id IS NULL
WITH RECURSIVE CTE AS ( SELECT task_id, subtasks_count FROM Tasks UNION ALL SELECT task_id, subtasks_count - 1 FROM CTE WHERE subtasks_count > 1 ) SELECT CTE.task_id, subtasks_count as subtask_id FROM CTE LEFT JOIN Executed e ON CTE.task_id = e.task_id AND CTE.subtasks_count = e.subtask_id WHERE e.subtask_id is null
WITH RECURSIVE CTE AS ( SELECT task_id, subtasks_count FROM Tasks UNION ALL SELECT task_id, subtasks_count - 1 FROM CTE WHERE subtasks_count > 1 ) SELECT task_id, subtasks_count AS subtask_id FROM CTE WHERE (task_id, subtasks_count) NOT IN (SELECT * FROM Executed)
WITH RECURSIVE CTE AS ( SELECT task_id, subtasks_count FROM Tasks UNION ALL SELECT task_id, subtasks_count - 1 FROM CTE WHERE subtasks_count > 1 ) select CTE.task_id, CTE.subtasks_count as subtask_id from CTE left join executed as e on CTE.task_id=e.task_id and CTE.subtasks_count =e.subtask_id where subtask_id is null
WITH RECURSIVE CTE AS ( SELECT task_id, subtasks_count FROM Tasks UNION ALL SELECT task_id, subtasks_count - 1 FROM CTE WHERE subtasks_count > 1 ) select CTE.task_id, CTE.subtasks_count as subtask_id from CTE left join executed as e on CTE.task_id=e.task_id and CTE.subtasks_count=e.subtask_id where subtask_id is null
WITH RECURSIVE CTE AS ( SELECT task_id, subtasks_count FROM Tasks UNION ALL SELECT task_id, subtasks_count - 1 FROM CTE WHERE subtasks_count > 1 ) select a.task_id, a.subtasks_count as subtask_id from cte a left join executed b on a.task_id = b.task_id and a.subtasks_count = b.subtask_id where b.task_id is NULL and b.subtask_id is NULL
WITH RECURSIVE CTE AS ( SELECT task_id, subtasks_count FROM Tasks UNION ALL SELECT task_id, subtasks_count - 1 FROM CTE WHERE subtasks_count > 1 ) select task_id, subtasks_count as subtask_id from CTE where (task_id, subtasks_count) not in ( select * from Executed)
WITH RECURSIVE CTE AS ( SELECT task_id, subtasks_count, 1 AS subtask_id FROM Tasks UNION ALL SELECT task_id, subtasks_count, subtask_id+1 FROM CTE WHERE subtask_id<subtasks_count ) SELECT task_id, subtask_id FROM CTE WHERE (task_id, subtask_id) NOT IN (SELECT task_id,subtask_id FROM Executed)
WITH RECURSIVE CTE AS (SELECT 1 AS n UNION ALL select n+1 FROM CTE WHERE n<(SELECT MAX(subtasks_count) FROM Tasks)), tcount AS (SELECT task_id, subtasks_count, n FROM Tasks LEFT JOIN CTE ON n<=subtasks_count) SELECT l.task_id, l.n AS subtask_id FROM tcount l LEFT JOIN Executed r ON l.task_id=r.task_id AND l.n=r.subtask_id WHERE r.subtask_id IS NULL
WITH RECURSIVE CTE AS (SELECT 1 AS subtask_id UNION SELECT 1+subtask_id AS subtask_id FROM CTE WHERE subtask_id<(SELECT MAX(subtasks_count) FROM Tasks)) SELECT t.task_id,c.subtask_id FROM Tasks t CROSS JOIN CTE c WHERE c.subtask_id <= t.subtasks_count AND (t.task_id,c.subtask_id) NOT IN (SELECT task_id,subtask_id FROM Executed)
WITH RECURSIVE CTE AS (SELECT task_id, 1 AS val FROM Tasks UNION SELECT task_id, val + 1 AS val FROM CTE WHERE val < (SELECT subtasks_count FROM Tasks T WHERE CTE.task_id = T.task_id)) SELECT task_id, val AS subtask_id FROM CTE WHERE NOT EXISTS (SELECT 1 FROM Executed E WHERE E.task_id = CTE.task_id AND E.subtask_id = CTE.val)
WITH RECURSIVE CTE AS (SELECT task_id, subtasks_count, 1 AS subtask_id FROM tasks UNION ALL SELECT task_id, subtasks_count, subtask_id + 1 FROM CTE WHERE subtask_id < (SELECT MAX(subtasks_count) FROM Tasks)) SELECT c.task_id , c.subtask_id FROM CTE c LEFT JOIN executed e ON c.task_id = e.task_id AND c.subtask_id = e.subtask_id WHERE e.subtask_id IS NULL AND c.subtask_id <= c.subtasks_count
WITH RECURSIVE CTE AS( SELECT task_id, subtasks_count FROM Tasks UNION ALL SELECT task_id, subtasks_count-1 FROM CTE WHERE subtasks_count > 1) SELECT task_id, subtasks_count as subtask_id FROM CTE WHERE (task_id, subtasks_count) NOT IN (SELECT * FROM Executed)
WITH RECURSIVE CTE AS(SELECT task_id, subtasks_count FROM tasks UNION ALL SELECT task_id, subtasks_count-1 FROM CTE WHERE subtasks_count > 1) SELECT task_id, subtasks_count AS subtask_id FROM CTE WHERE (task_id, subtasks_count) NOT IN(SELECT task_id, subtask_id FROM Executed)
WITH RECURSIVE CTE1 AS ( SELECT TASK_ID, 1 AS SUBTASK_ID FROM TASKS UNION ALL SELECT TASK_ID, SUBTASK_ID + 1 FROM CTE1 WHERE SUBTASK_ID < (SELECT SUBTASKS_COUNT FROM TASKS WHERE TASK_ID = CTE1.TASK_ID) ) SELECT * FROM CTE1 WHERE (TASK_ID, SUBTASK_ID) NOT IN (SELECT * FROM EXECUTED)
WITH RECURSIVE MasterData AS ( SELECT task_id, subtasks_count, 1 AS subtask_id FROM Tasks UNION SELECT task_id, subtasks_count, subtask_id+1 AS subtask_id FROM MasterData WHERE subtask_id < subtasks_count ) SELECT MasterData.task_id, MasterData.subtask_id FROM MasterData LEFT JOIN Executed ON Executed.task_id = MasterData.task_id AND Executed.subtask_id = MasterData.subtask_id WHERE Executed.task_id IS NULL
WITH RECURSIVE NewTasks AS ( SELECT task_id, subtasks_count FROM Tasks UNION SELECT task_id, subtasks_count - 1 FROM NewTasks WHERE subtasks_count > 1 ) SELECT NewTasks.task_id, NewTasks.subtasks_count AS subtask_id FROM NewTasks LEFT JOIN Executed ON (Executed.task_id = NewTasks.task_id) AND (Executed.subtask_id = NewTasks.subtasks_count) WHERE Executed.subtask_id IS NULL
WITH RECURSIVE Numbers AS ( SELECT task_id, 1 AS Number, subtasks_count from Tasks UNION ALL SELECT task_id, Number + 1, subtasks_count FROM Numbers WHERE Number < subtasks_count) SELECT N.task_id, N.Number AS subtask_id FROM Numbers AS N WHERE N.Number NOT IN (SELECT T.subtask_id FROM Executed AS T WHERE T.task_id = N.task_id) ORDER BY N.task_id
WITH RECURSIVE SUB_TASKS AS ( SELECT 1 AS SUB UNION ALL SELECT SUB+1 FROM SUB_TASKS WHERE SUB < 20), CTE2 AS ( SELECT T.TASK_ID, S.SUB AS SUBTASK_ID FROM TASKS T CROSS JOIN SUB_TASKS S WHERE S.SUB <= T.SUBTASKS_COUNT ORDER BY 1 ) SELECT C.TASK_ID, C.SUBTASK_ID FROM CTE2 AS C LEFT OUTER JOIN EXECUTED E ON (C.TASK_ID = E.task_id AND C.SUBTASK_ID = E.subtask_id ) WHERE E.TASK_ID IS NULL ORDER BY 1
WITH RECURSIVE SubTaskIds AS ( SELECT 1 AS subtask_id UNION SELECT subtask_id + 1 FROM SubTaskIds WHERE subtask_id <= 20 ) SELECT T.task_id, S.subtask_id FROM Tasks AS T INNER JOIN SubTaskIds AS S ON S.subtask_id <= T.subtasks_count LEFT JOIN Executed AS E ON T.task_id = E.task_id AND S.subtask_id = E.subtask_id WHERE E.subtask_id IS NULL
WITH RECURSIVE SubTaskIds AS ( SELECT 1 AS subtask_id UNION SELECT subtask_id + 1 FROM SubTaskIds WHERE subtask_id <= 20 ), AllSubTasks AS ( SELECT T.task_id, S.subtask_id FROM Tasks AS T INNER JOIN SubTaskIds AS S ON S.subtask_id <= T.subtasks_count ) SELECT task_id, subtask_id FROM AllSubTasks WHERE (task_id, subtask_id) NOT IN ( SELECT task_id, subtask_id FROM Executed )
WITH RECURSIVE Subtasks AS( SELECT task_id, subtasks_count, 1 AS subtask_id FROM Tasks UNION ALL SELECT task_id, subtasks_count, subtask_id + 1 AS subtask_id FROM Subtasks WHERE subtask_id + 1 <= subtasks_count ) SELECT sub.task_id, sub.subtask_id FROM Subtasks sub LEFT JOIN Executed exe ON sub.task_id = exe.task_id AND sub.subtask_id = exe.subtask_id WHERE exe.subtask_id is NULL
WITH RECURSIVE T AS ( SELECT task_id, subtasks_count, 1 AS subtask_id FROM Tasks UNION ALL SELECT task_id, subtasks_count, subtask_id + 1 FROM T WHERE subtask_id < subtasks_count ) SELECT task_id, subtask_id FROM T WHERE (task_id, subtask_id) NOT IN (SELECT * FROM Executed)
WITH RECURSIVE T1 AS (SELECT * FROM Tasks UNION ALL SELECT task_id, subtasks_count - 1 AS subtasks_count FROM T1 WHERE subtasks_count > 1), T2 AS (SELECT task_id, subtasks_count AS subtask_id FROM T1) SELECT A.* FROM T2 A LEFT JOIN Executed B ON A.task_id = B.task_id AND A.subtask_id = B.subtask_id WHERE B.subtask_id IS NULL
WITH RECURSIVE a AS ( SELECT task_id, subtasks_count as sub_id FROM Tasks UNION ALL SELECT task_id, sub_id - 1 as sub_id FROM a WHERE sub_id > 1 ) select task_id, sub_id as subtask_id from a where (task_id, sub_id) not in (select * from executed)
WITH RECURSIVE all_tasks AS ( SELECT task_id, subtasks_count as subtask_id FROM Tasks UNION ALL SELECT task_id, subtask_id - 1 FROM all_tasks WHERE subtask_id > 1 ) SELECT t1.task_id, t1.subtask_id FROM (SELECT * FROM all_tasks) t1 LEFT JOIN Executed ON t1.task_id = Executed.task_id AND t1.subtask_id = Executed.subtask_id WHERE Executed.task_id IS NULL
WITH RECURSIVE c1 AS (SELECT task_id, subtasks_count, 1 AS subtask_id FROM Tasks UNION ALL SELECT task_id, subtasks_count, subtask_id+1 FROM c1 WHERE subtask_id < subtasks_count) SELECT c1.task_id, c1.subtask_id FROM c1 LEFT JOIN Executed e ON c1.task_id=e.task_id AND c1.subtask_id=e.subtask_id WHERE e.subtask_id IS NULL
WITH RECURSIVE counter AS ( SELECT 1 as n,'dummy' as dummy UNION ALL SELECT n + 1,'dummy' as dummy FROM counter WHERE n <= 19 ) SELECT t.task_id as task_id ,c.n as subtask_id FROM counter c JOIN (SELECT *, 'dummy' as dummy FROM Tasks) t ON c.dummy=t.dummy WHERE c.n<=t.subtasks_count AND (t.task_id,c.n) NOT IN (SELECT * FROM Executed) ORDER BY 1,2 ASC
WITH RECURSIVE countseq AS (SELECT 1 subtasks_count UNION ALL SELECT subtasks_count+1 FROM countseq WHERE subtasks_count < (SELECT MAX(subtasks_count) FROM Tasks)) SELECT task_id, subtask_id FROM (SELECT task_id, C1.subtasks_count subtask_id FROM countseq C1 JOIN Tasks T1 ON C1.subtasks_count <= T1.subtasks_count) T1 WHERE (task_id, subtask_id) NOT IN (SELECT * FROM Executed)
WITH RECURSIVE cte (n) AS ( SELECT 0 UNION SELECT n+1 FROM cte WHERE n<(select MAX(subtasks_count) from Tasks) ) select X.task_id,X.n as subtask_id from ( select A.task_id,n from Tasks A,cte B where A.subtasks_count>=B.n and n!=0 order by 1,2 ) X left join Executed as Y on X.n=Y.subtask_id and X.task_id=Y.task_id where Y.subtask_id is null
WITH RECURSIVE cte (n) AS ( SELECT 1 UNION ALL SELECT n + 1 FROM cte WHERE n < 21 ), cte2 AS ( SELECT DISTINCT task_id, n as subtask_id FROM Tasks, cte WHERE subtasks_count >= n ORDER BY task_id ) SELECT cte2.task_id, cte2.subtask_id FROM cte2 LEFT JOIN Executed ex ON cte2.task_id = ex.task_id AND cte2.subtask_id = ex.subtask_id WHERE ex.subtask_id IS NULL
WITH RECURSIVE cte (n) AS ( SELECT 1 UNION ALL SELECT n + 1 FROM cte WHERE n < 21 ), cte2 AS ( SELECT DISTINCT task_id, n as subtask_id FROM Tasks, cte WHERE subtasks_count >= n ORDER BY task_id ) SELECT task_id, subtask_id FROM (SELECT * FROM cte2 UNION ALL SELECT * FROM Executed ) tmp GROUP BY task_id, subtask_id HAVING(COUNT(*) = 1) ORDER BY task_id, subtask_id
WITH RECURSIVE cte (n) AS ( SELECT 1 UNION ALL SELECT n + 1 FROM cte WHERE n < 21 ), cte2 AS ( SELECT DISTINCT task_id, n as subtask_id FROM Tasks, cte WHERE subtasks_count >= n ORDER BY task_id ) SELECT task_id, subtask_id FROM (SELECT * FROM cte2 UNION ALL SELECT * FROM Executed ) tmp GROUP BY task_id, subtask_id HAVING(COUNT(subtask_id) = 1) ORDER BY task_id, subtask_id
WITH RECURSIVE cte (n) AS ( SELECT 1 UNION ALL SELECT n + 1 FROM cte WHERE n < 21 ), cte2 AS ( SELECT task_id, n as subtask_id FROM Tasks, cte WHERE subtasks_count >= n ORDER BY task_id ) SELECT cte2.task_id, cte2.subtask_id FROM cte2 LEFT JOIN Executed ex ON cte2.task_id = ex.task_id AND cte2.subtask_id = ex.subtask_id WHERE ex.subtask_id IS NULL
WITH RECURSIVE cte AS ( SELECT t.task_id, 1 AS id FROM tasks t UNION SELECT t.task_id, id + 1 FROM cte, tasks t WHERE id < t.subtasks_count ) SELECT task_id, id AS subtask_id FROM cte WHERE (task_id, id) NOT IN ( SELECT task_id, subtask_id FROM executed )
WITH RECURSIVE cte AS ( SELECT task_id, 1 AS subtask_id FROM Tasks t UNION ALL SELECT task_id, subtask_id+1 FROM cte c WHERE subtask_id < (SELECT subtasks_count FROM Tasks t1 WHERE c.task_id = t1.task_id) ) SELECT c1.task_id ,c1.subtask_id FROM cte c1 LEFT JOIN Executed e ON c1.task_id = e.task_id AND c1.subtask_id = e.subtask_id WHERE e.task_id IS NULL
WITH RECURSIVE cte AS ( SELECT task_id, 1 AS subtask_id, subtasks_count FROM Tasks UNION ALL SELECT task_id, subtask_id + 1, subtasks_count FROM cte WHERE subtask_id < subtasks_count ) SELECT c.task_id ,c.subtask_id FROM cte c LEFT JOIN Executed e ON c.task_id = e.task_id AND c.subtask_id = e.subtask_id WHERE e.task_id IS NULL
WITH RECURSIVE cte AS ( SELECT task_id, 1 as subtask_id, subtasks_count FROM tasks UNION ALL SELECT task_id, subtask_id + 1, subtasks_count FROM cte WHERE subtask_id < subtasks_count ) SELECT cte.task_id, cte.subtask_id FROM cte LEFT JOIN executed as e ON cte.task_id = e.task_id AND cte.subtask_id = e.subtask_id WHERE e.task_id IS NULL ORDER BY cte.task_id
WITH RECURSIVE cte AS ( SELECT task_id, subtasks_count AS subtask_id FROM Tasks UNION SELECT task_id, subtask_id - 1 AS subtask_id FROM cte WHERE subtask_id > 1 ) SELECT c.task_id, c.subtask_id FROM cte c LEFT JOIN Executed e ON c.task_id = e.task_id AND c.subtask_id = e.subtask_id WHERE e.task_id IS NULL OR e.subtask_id IS NULL ORDER BY 1, 2
WITH RECURSIVE cte AS ( SELECT task_id, subtasks_count, 1 AS subtask_id FROM Tasks UNION ALL SELECT cte.task_id, cte.subtasks_count, cte.subtask_id + 1 FROM cte WHERE subtask_id < subtasks_count ) SELECT cte.task_id, cte.subtask_id FROM cte LEFT JOIN Executed e ON cte.task_id = e.task_id AND cte.subtask_id = e.subtask_id WHERE e.subtask_id IS NULL
WITH RECURSIVE cte AS ( SELECT task_id, subtasks_count, 1 subtask_id FROM Tasks UNION SELECT task_id, subtasks_count, subtask_id+1 FROM cte WHERE subtask_id+1 <= subtasks_count ) SELECT cte.task_id, cte.subtask_id FROM cte LEFT JOIN Executed e ON cte.task_id = e.task_id AND cte.subtask_id = e.subtask_id WHERE e.subtask_id IS NULL
WITH RECURSIVE cte AS ( SELECT task_id, subtasks_count, 1 subtask_id FROM tasks UNION SELECT task_id, subtasks_count, subtask_id + 1 FROM cte WHERE subtask_id + 1 <= subtasks_count ) SELECT cte.task_id, cte.subtask_id FROM cte LEFT JOIN executed e ON cte.task_id = e.task_id AND cte.subtask_id = e.subtask_id WHERE e.task_id IS NULL AND e.subtask_id IS NULL
WITH RECURSIVE cte AS (SELECT task_id, 1 AS subtask_id, subtasks_count FROM Tasks UNION ALL SELECT task_id, subtask_id + 1, subtasks_count FROM cte WHERE subtask_id < subtasks_count ) SELECT c.task_id, c.subtask_id FROM cte c LEFT JOIN Executed e ON c.task_id = e.task_id and c.subtask_id = e.subtask_id WHERE e.subtask_id IS NULL
WITH RECURSIVE cte AS (SELECT task_id, 1 AS subtask_id, subtasks_count FROM Tasks UNION ALL SELECT task_id, subtask_id+1, subtasks_count FROM cte WHERE subtask_id<subtasks_count) SELECT c.task_id, c.subtask_id FROM cte c LEFT JOIN Executed e ON c.task_id=e.task_id AND c.subtask_id=e.subtask_id WHERE e.subtask_id IS NULL
WITH RECURSIVE cte AS (SELECT task_id, 1 subtask_id, subtasks_count FROM tasks UNION ALL SELECT task_id, 1 + subtask_id, subtasks_count FROM cte WHERE subtask_id< subtasks_count) SELECT c.task_id,c.subtask_id FROM cte c LEFT JOIN Executed e ON c.task_id = e.task_id and c.subtask_id = e.subtask_id WHERE e.subtask_id IS NULL
WITH RECURSIVE cte AS( SELECT t.task_id,1 AS id FROM Tasks t UNION SELECT t.task_id,id+1 FROM cte,Tasks t WHERE id<t.subtasks_count) SELECT task_id,id AS subtask_id FROM cte WHERE (task_id,id) NOT IN(SELECT task_id,subtask_id FROM Executed)
WITH RECURSIVE cte AS( SELECT task_id, 1 as subtask_id, subtasks_count FROM Tasks UNION ALL SELECT task_id, subtask_id+1 as subtask_id, subtasks_count from cte where subtask_id<subtasks_count ) select cte.task_id, cte.subtask_id from cte left join Executed as e on cte.task_id = e.task_id and cte.subtask_id = e.subtask_id where e.subtask_id is null
WITH RECURSIVE cte AS( SELECT task_id, 1 as subtask_id, subtasks_count FROM Tasks UNION ALL SELECT task_id, subtask_id+1 as subtask_id, subtasks_count from cte where subtask_id<subtasks_count ) select task_id, subtask_id from cte where subtask_id not in (select subtask_id from Executed where cte.task_id = Executed.task_id)
WITH RECURSIVE cte AS( SELECT task_id, subtasks_count FROM Tasks UNION ALL SELECT task_id, subtasks_count - 1 FROM cte WHERE subtasks_count > 1 ) SELECT task_id, subtasks_count AS subtask_id FROM cte WHERE (task_id, subtasks_count) NOT IN (SELECT * FROM Executed) ORDER BY task_id, subtask_id
WITH RECURSIVE cte AS( SELECT task_id, subtasks_count as subtask_id FROM Tasks UNION ALL SELECT task_id, subtask_id - 1 AS subtask_id FROM cte WHERE subtask_id >1) SELECT task_id, subtask_id FROM cte WHERE (task_id, subtask_id) NOT IN (SELECT * FROM Executed) ORDER BY task_id
WITH RECURSIVE cte as ( select task_id ,1 as label , subtasks_count from Tasks union all select task_id ,label + 1 as label , subtasks_count from cte where label < subtasks_count ) select distinct T.task_id, T.label as subtask_id from cte as T where (task_id,label) not in (Select task_id ,subtask_id from Executed E ) order by 1,2
WITH RECURSIVE cte_st AS ( SELECT task_id, subtasks_count, 1 AS subtask_id FROM Tasks UNION ALL SELECT task_id, subtasks_count, subtask_id + 1 AS subtask_id FROM cte_st WHERE subtask_id < subtasks_count ) SELECT task_id, subtask_id FROM cte_st WHERE (task_id, subtask_id) NOT IN (SELECT task_id, subtask_id FROM Executed)
WITH RECURSIVE cte_tasks (task_id, subtasks_count) AS ( SELECT task_id, subtasks_count FROM Tasks UNION ALL SELECT task_id, subtasks_count - 1 FROM cte_tasks WHERE subtasks_count > 1 ) SELECT cte_tasks.task_id, cte_tasks.subtasks_count AS subtask_id FROM cte_tasks LEFT JOIN Executed ON cte_tasks.task_id = Executed.task_id and cte_tasks.subtasks_count = Executed.subtask_id WHERE Executed.subtask_id IS NULL
WITH RECURSIVE id AS ( SELECT task_id, 1 AS subtask_id FROM Tasks UNION ALL SELECT task_id, subtask_id + 1 FROM id WHERE subtask_id < (select max(subtasks_count) from tasks) ) select id.task_id,id.subtask_id from id left join Executed on Executed.task_id = id.task_id and Executed.subtask_id = id.subtask_id where Executed.task_id is null and id.subtask_id <= (select subtasks_count from tasks where task_id = id.task_id) order by 1,2
WITH RECURSIVE id AS ( SELECT task_id, 1 AS subtask_id FROM Tasks UNION SELECT task_id, subtask_id + 1 AS subtask_id FROM id WHERE subtask_id < (SELECT MAX(subtasks_count) FROM Tasks)) select * from( select tasks.task_id, id.subtask_id from tasks, id where tasks.task_id = id.task_id and id.subtask_id<= tasks.subtasks_count ) t where (t.task_id,subtask_id) not in (select * from executed)
WITH RECURSIVE id AS ( SELECT task_id, subtasks_count FROM Tasks UNION ALL SELECT task_id, subtasks_count - 1 FROM id WHERE subtasks_count > 1) select task_id, subtasks_count as subtask_id from id where (task_id, subtasks_count) not in (select * from Executed)
WITH RECURSIVE id AS ( SELECT task_id, subtasks_count, 1 AS subtask_id FROM Tasks UNION ALL SELECT task_id, subtasks_count, subtask_id + 1 AS subtask_id FROM id WHERE subtask_id < (SELECT MAX(subtasks_count) FROM Tasks) ) SELECT id.task_id, id.subtask_id FROM id LEFT JOIN Executed e ON id.task_id=e.task_id AND id.subtask_id=e.subtask_id WHERE e.subtask_id IS NULL AND id.subtasks_count >= id.subtask_id
WITH RECURSIVE id AS ( SELECT task_id, subtasks_count, 1 AS subtask_id FROM Tasks UNION ALL SELECT task_id, subtasks_count, subtask_id + 1 AS subtask_id FROM id WHERE subtask_id < (SELECT MAX(subtasks_count) FROM Tasks)) SELECT id.task_id, id.subtask_id FROM id LEFT JOIN Executed e ON id.task_id = e.task_id AND id.subtask_id = e.subtask_id WHERE e.subtask_id IS NULL AND id.subtasks_count >= id.subtask_id
WITH RECURSIVE id AS ( SELECT task_id, subtasks_count, 1 AS subtask_id FROM Tasks UNION ALL SELECT task_id, subtasks_count, subtask_id + 1 AS subtask_id FROM id WHERE subtask_id < (SELECT MAX(subtasks_count) FROM Tasks)) SELECT id.task_id, id.subtask_id FROM id LEFT JOIN Executed e ON id.task_id = e.task_id AND id.subtask_id = e.subtask_id WHERE e.subtask_id IS null AND id.subtasks_count >= id.subtask_id
WITH RECURSIVE id AS ( SELECT task_id, subtasks_count, 1 AS subtask_id FROM Tasks UNION ALL SELECT task_id, subtasks_count, subtask_id + 1 AS subtask_id FROM id WHERE subtask_id < (SELECT MAX(subtasks_count) FROM Tasks)) SELECT id.task_id, id.subtask_id FROM id left join Executed e on id.task_id = e.task_id and id.subtask_id = e.subtask_id left join Tasks t on id.task_id = t.task_id where id.subtask_id <= t.subtasks_count and e.subtask_id is Null
WITH RECURSIVE id AS ( SELECT task_id, subtasks_count, 1 AS subtask_id FROM Tasks UNION ALL SELECT task_id, subtasks_count, subtask_id + 1 AS subtask_id FROM id WHERE subtask_id < (SELECT MAX(subtasks_count) FROM Tasks)) select t.task_id, t.subtask_id from ( select task_id, subtask_id from id where id.subtask_id <= subtasks_count ) t left join Executed on t.task_id = Executed.task_id and t.subtask_id = Executed.subtask_id where Executed.subtask_id is null
WITH RECURSIVE id AS ( SELECT task_id, subtasks_count, 1 AS subtask_id FROM Tasks UNION ALL SELECT task_id, subtasks_count, subtask_id + 1 AS subtask_id FROM id WHERE subtask_id < (SELECT MAX(subtasks_count) FROM Tasks)) select task_id, subtask_id from id where subtasks_count >= subtask_id and (task_id, subtask_id) not in (select * from Executed)
WITH RECURSIVE id AS ( SELECT task_id, subtasks_count, 1 AS subtask_id FROM Tasks UNION ALL SELECT task_id, subtasks_count, subtask_id + 1 AS subtask_id FROM id WHERE subtask_id < (SELECT MAX(subtasks_count) FROM Tasks)) select task_id,subtask_id from id where not exists (select task_id,subtask_id from executed e where id.task_id=e.task_id and id.subtask_id=e.subtask_id) and id.subtask_id<=id.subtasks_count
WITH RECURSIVE id AS ( SELECT task_id, subtasks_count, 1 AS subtask_id FROM Tasks UNION ALL SELECT task_id, subtasks_count, subtask_id + 1 as subtask_id FROM id WHERE subtask_id < (SELECT MAX(subtasks_count) FROM Tasks) ) SELECT id.task_id, id.subtask_id FROM id LEFT JOIN Executed e ON id.task_id = e.task_id AND id.subtask_id = e.subtask_id WHERE e.subtask_id IS NULL AND id.subtasks_count >= id.subtask_id
WITH RECURSIVE main(task_id, subtasks_count, subtask_id) AS ( SELECT task_id, subtasks_count, 1 FROM Tasks UNION SELECT task_id, subtasks_count, subtask_id+1 FROM main WHERE subtask_id < subtasks_count ) SELECT main.task_id AS task_id, main.subtask_id AS subtask_id FROM main LEFT JOIN Executed USING(task_id, subtask_id) WHERE Executed.subtask_id IS NULL
WITH RECURSIVE my_list AS(SELECT task_id, subtasks_count task_count FROM Tasks UNION ALL SELECT task_id, task_count-1 FROM my_list WHERE task_count>1) SELECT task_id, task_count subtask_id FROM my_list WHERE (task_id, task_count) NOT IN (SELECT * FROM Executed) ORDER BY 1,2
WITH RECURSIVE my_list AS(SELECT task_id, subtasks_count, 1 task_count FROM Tasks UNION ALL SELECT task_id, subtasks_count, task_count+1 task_count FROM my_list WHERE task_count<subtasks_count) SELECT task_id, task_count subtask_id FROM my_list WHERE (task_id, task_count) NOT IN (SELECT * FROM Executed) ORDER BY task_id
WITH RECURSIVE num as( select 1 as subtask union all select subtask+1 as subtask from num where subtask < (select max(subtasks_count) from tasks) ) select t.task_id, t.subtask as subtask_id from (select t.task_id, num.subtask from tasks t join num where t.subtasks_count >= num.subtask) t left join Executed r on t.task_id = r.task_id and r.subtask_id = t.subtask where r.task_id is null
WITH RECURSIVE q AS ( SELECT Tasks.task_id, 1 AS subtask_id, Tasks.subtasks_count as subtasks_count from Tasks UNION ALL SELECT task_id, subtask_id + 1, subtasks_count FROM q WHERE subtask_id < subtasks_count ) SELECT q.task_id, q.subtask_id FROM q left join Executed on q.task_id = Executed.task_id and q.subtask_id = Executed.subtask_id where Executed.task_id is null order by q.task_id, q.subtask_id
WITH RECURSIVE r AS( SELECT task_id, 1 AS subtasks_id, subtasks_count FROM Tasks UNION ALL SELECT task_id, subtasks_id+1, subtasks_count FROM r WHERE subtasks_id < subtasks_count ) SELECT r.task_id, r.subtasks_id AS subtask_id FROM r LEFT JOIN Executed e ON r.task_id = e.task_id AND r.subtasks_id = e.subtask_id WHERE e.subtask_id IS NULL ORDER BY task_id, subtasks_id
WITH RECURSIVE r_cte as (SELECT 1 as sub_count UNION ALL SELECT sub_count+1 from r_cte WHERE sub_count< 20), cte1 as (SELECT t.task_id, r.sub_count as sub_task FROM Tasks t CROSS JOIN r_cte r WHERE r.sub_count <= t.subtasks_count ORDER BY 1) SELECT c.task_id as task_id, c.sub_task as subtask_id FROM cte1 c LEFT JOIN Executed e ON c.task_id = e.task_id AND e.subtask_id = c.sub_task WHERE e.task_id IS NULL ORDER BY c.task_id,c.sub_task
WITH RECURSIVE se AS (SELECT 1 AS subtask_id UNION ALL SELECT subtask_id + 1 AS subtask_id FROM se WHERE subtask_id < 20) ,all_task AS ( SELECT t.task_id ,se.subtask_id FROM Tasks t LEFT JOIN se ON se.subtask_id <= t.subtasks_count) SELECT * FROM all_task WHERE (task_id,subtask_id) NOT IN (SELECT task_id,subtask_id FROM Executed)
WITH RECURSIVE se AS (SELECT 1 AS subtask_id UNION ALL SELECT subtask_id+1 AS subtask_id FROM se WHERE subtask_id < (SELECT MAX(subtasks_count) FROM Tasks)) ,task AS ( SELECT t1.task_id ,t2.subtask_id FROM Tasks t1 LEFT JOIN se t2 ON t2.subtask_id <= t1.subtasks_count) SELECT * FROM task WHERE (task_id,subtask_id) NOT IN (SELECT task_id,subtask_id FROM Executed)
WITH RECURSIVE seq AS ( SELECT 1 as continued_id UNION SELECT continued_id + 1 FROM seq WHERE continued_id < (SELECT MAX(subtasks_count) FROM tasks) ) SELECT task_id, continued_id AS subtask_id FROM tasks AS t JOIN seq ON t.subtasks_count>=seq.continued_id WHERE continued_id NOT IN (SELECT subtask_id FROM executed AS e WHERE t.task_id=e.task_id)
WITH RECURSIVE subid AS ( SELECT *, 1 AS sub_id FROM Tasks UNION ALL SELECT task_id, subtasks_count, sub_id + 1 AS sub_id FROM subid WHERE sub_id < subtasks_count ) SELECT task_id, sub_id AS subtask_id FROM subid s WHERE NOT EXISTS ( SELECT 1 FROM Executed e WHERE s.task_id = e.task_id AND s.sub_id = e.subtask_id )
WITH RECURSIVE t AS ( SELECT 1 AS continue_id UNION ALL SELECT continue_id + 1 FROM t WHERE continue_id <= 20), t2 as (SELECT task_id, continue_id FROM Tasks CROSS JOIN t WHERE continue_id <= subtasks_count order by 1,2) SELECT t2.task_id, t2.continue_id as subtask_id FROM t2 LEFT JOIN executed e on t2.task_id = e.task_id and t2.continue_id = e.subtask_id WHERE e.task_id is null order by 1,2
WITH RECURSIVE t AS ( SELECT task_id, subtasks_count AS n FROM Tasks UNION ALL SELECT task_id, n - 1 AS n FROM t WHERE n > 1 ) SELECT t.task_id, t.n AS subtask_id FROM t LEFT JOIN Executed e ON t.task_id = e.task_id AND t.n = e.subtask_id WHERE e.subtask_id IS NULL
WITH RECURSIVE t AS (SELECT 1 AS subtask_id UNION SELECT subtask_id + 1 FROM t WHERE subtask_id < 20 ) SELECT task_id, subtask_id FROM ( SELECT ta.task_id, subtask_id FROM t INNER JOIN Tasks ta WHERE t.subtask_id <= ta.subtasks_count ORDER BY ta.task_id, subtask_id ) tt WHERE (task_id, subtask_id) NOT IN (SELECT * FROM Executed)
WITH RECURSIVE t AS (SELECT task_id, 1 AS subtask_id FROM tasks UNION ALL SELECT t.task_id, subtask_id+1 FROM t JOIN tasks ta ON t.task_id = ta.task_id WHERE subtask_id < subtasks_count) SELECT * FROM t WHERE (task_id, subtask_id) NOT IN (SELECT * FROM executed)
WITH RECURSIVE t AS (SELECT task_id, 1 AS subtask_id FROM tasks UNION SELECT t.task_id, subtask_id+1 FROM t JOIN tasks ta ON t.task_id = ta.task_id WHERE subtask_id < subtasks_count) SELECT task_id, subtask_id FROM t WHERE (task_id, subtask_id) NOT IN (SELECT task_id, subtask_id FROM executed)
WITH RECURSIVE t1 AS ( (SELECT task_id, 1 AS subtask_id, subtasks_count FROM Tasks) UNION ALL (SELECT task_id, subtask_id +1, subtasks_count FROM t1 WHERE subtask_id+1 <= subtasks_count) ) SELECT t1.task_id, t1.subtask_id FROM t1 WHERE (t1.task_id, t1.subtask_id) NOT IN ( SELECT * FROM Executed)
WITH RECURSIVE t1 AS (SELECT *, 1 AS subtask_id FROM Tasks UNION ALL SELECT task_id, subtasks_count, subtask_id + 1 FROM t1 WHERE subtasks_count > subtask_id) SELECT t1.task_id, t1.subtask_id FROM t1 LEFT JOIN Executed e ON t1.task_id = e.task_id AND t1.subtask_id = e.subtask_id WHERE e.subtask_id IS NULL
WITH RECURSIVE task_ids AS ( SELECT task_id, 1 AS subtask_id FROM Tasks UNION ALL SELECT task_id, subtask_id+1 FROM task_ids A WHERE subtask_id < (SELECT subtasks_count FROM Tasks B WHERE A.task_id = B.task_id) ) SELECT * FROM task_ids WHERE (task_id, subtask_id) NOT IN (SELECT * FROM Executed)
WITH RECURSIVE task_sub_totoal AS ( SELECT task_id , subtasks_count as subtask_id FROM Tasks UNION ALL SELECT task_id , subtask_id-1 FROM task_sub_totoal WHERE subtask_id>1 ) SELECT task_id , subtask_id FROM task_sub_totoal WHERE (task_id , subtask_id) NOT IN (SELECT * FROM Executed)
WITH RECURSIVE task_subtask AS ( SELECT task_id, subtasks_count, 1 AS subtask_id FROM Tasks UNION ALL SELECT task_id, subtasks_count, subtask_id + 1 AS subtask_id FROM task_subtask WHERE subtask_id < subtasks_count) SELECT task_id, subtask_id FROM task_subtask WHERE (task_id, subtask_id) NOT IN (SELECT task_id, subtask_id FROM Executed)
WITH RECURSIVE task_subtask AS ( SELECT task_id, subtasks_count, 1 AS subtask_id FROM Tasks UNION ALL SELECT task_id, subtasks_count, subtask_id + 1 AS subtask_id FROM task_subtask WHERE subtask_id < subtasks_count) Select task_subtask.task_id,task_subtask.subtask_id from task_subtask left join Executed on task_subtask.task_id=Executed.task_id and task_subtask.subtask_id=Executed.subtask_id where Executed.subtask_id IS NULL
WITH RECURSIVE task_subtask AS ( SELECT task_id, subtasks_count, 1 AS subtask_id FROM Tasks UNION ALL SELECT task_id, subtasks_count, subtask_id + 1 AS subtask_id FROM task_subtask WHERE subtask_id < subtasks_count) select p.task_id, p.subtask_id from task_subtask p left join executed e on e.task_id = p.task_id and e.subtask_id = p.subtask_id where e.subtask_id is null
WITH RECURSIVE temp AS ( SELECT task_id, subtasks_count, 1 AS subtask_id FROM Tasks UNION ALL SELECT task_id, subtasks_count, subtask_id + 1 FROM temp WHERE subtask_id < subtasks_count ) SELECT task_id, subtask_id FROM temp WHERE (task_id, subtask_id) NOT IN (SELECT * FROM Executed)
WITH Recursive tab AS ( SELECT task_id, 1 AS task_num FROM Tasks UNION ALL SELECT tab.task_id, tab.task_num+1 FROM tab, Tasks WHERE tab.task_num < Tasks.subtasks_count AND tab.task_id = Tasks.task_id ), b AS ( SELECT tab.task_id, tab.task_num AS subtask_id, Executed.task_id as Execution FROM tab LEFT JOIN Executed ON tab.task_id = Executed.task_id AND tab.task_num = Executed.subtask_id) SELECT task_id, subtask_id FROM b WHERE execution IS NULL
WITH S AS (SELECT 1 id UNION SELECT 2 id UNION SELECT 3 id UNION SELECT 4 id UNION SELECT 5 id UNION SELECT 6 id UNION SELECT 7 id UNION SELECT 8 id UNION SELECT 9 id UNION SELECT 10 id UNION SELECT 11 id UNION SELECT 12 id UNION SELECT 13 id UNION SELECT 14 id UNION SELECT 15 id UNION SELECT 16 id UNION SELECT 17 id UNION SELECT 18 id UNION SELECT 19 id UNION SELECT 20 id) SELECT task_id, id subtask_id FROM Tasks T, S WHERE T.subtasks_count >= S.id AND (task_id, id) NOT IN (SELECT * FROM Executed)
WITH recursive CTE1 AS ( SELECT 1 AS subtask_id UNION SELECT subtask_id+1 FROM CTE1 WHERE subtask_id < (SELECT MAX(subtasks_count) FROM Tasks) ), CTE2 AS ( SELECT task_id, subtask_id FROM Tasks, CTE1 WHERE subtask_id <= subtasks_count ) SELECT task_id, subtask_id FROM CTE2 WHERE (task_id, subtask_id) not in (SELECT task_id, subtask_id FROM Executed)
WITH recursive cte (n) AS ( SELECT 1 UNION ALL SELECT n + 1 FROM cte WHERE n < 20 ), all_task_sub_task AS ( SELECT task_id, n AS subtask_id FROM Tasks LEFT JOIN cte ON cte.n <= Tasks.subtasks_count ) SELECT ats.task_id, ats.subtask_id FROM all_task_sub_task ats LEFT JOIN Executed e ON e.task_id = ats.task_id AND e.subtask_id = ats.subtask_id WHERE e.subtask_id IS NULL
WITH recursive cte AS ( SELECT 1 AS subtask_id UNION ALL SELECT subtask_id + 1 FROM cte WHERE subtask_id < 20 ) SELECT t.task_id, cte.subtask_id FROM cte JOIN tasks t LEFT JOIN executed e ON ( t.task_id = e.task_id AND cte.subtask_id = e.subtask_id) WHERE t.subtasks_count >= cte.subtask_id AND e.task_id IS NULL
WITH recursive cte AS ( SELECT 1 AS subtask_id UNION ALL SELECT subtask_id + 1 FROM cte WHERE subtask_id < 20) select t.task_id, cte.subtask_id from cte join Tasks t left join Executed e on t.task_id = e.task_id and cte.subtask_id = e.subtask_id where e.subtask_id is null and cte.subtask_id <= t.subtasks_count
WITH recursive cte AS ( SELECT task_id, subtasks_count, 1 AS subtask_id FROM Tasks UNION ALL SELECT task_id, subtasks_count, subtask_id + 1 AS subtask_id FROM cte WHERE subtask_id < (select max(subtasks_count) from Tasks) ) select distinct cte.task_id, cte.subtask_id from executed e right join cte on e.task_id = cte.task_id and e.subtask_id = cte.subtask_id where cte.subtask_id <= cte.subtasks_count and e.subtask_id is null
WITH recursive cte AS (SELECT task_id, subtasks_count AS subtask_id FROM Tasks UNION ALL SELECT task_id, (subtask_id - 1) AS subtask_id FROM cte WHERE subtask_id > 1) SELECT task_id, subtask_id FROM cte WHERE (task_id, subtask_id) NOT IN (SELECT task_id, subtask_id FROM Executed)
WITH recursive cte AS (SELECT task_id, subtasks_count AS subtask_id FROM Tasks UNION ALL SELECT task_id, subtask_id - 1 AS subtask_id FROM cte WHERE subtask_id > 1) SELECT * FROM cte WHERE (task_id, subtask_id) NOT IN (SELECT task_id, subtask_id FROM Executed)
WITH recursive cte as( select 1 as num union all select num+1 from cte where num<20 ) select task_id,num as subtask_id from Tasks t,cte c where t.subtasks_count >= num and (task_id,num) not in (select task_id , subtask_id from Executed) order by task_id
WITH recursive cte_subtask AS ( SELECT t.task_id as task_id, 1 as subtask_id FROM Tasks t UNION SELECT t.task_id as task_id, subtask_id + 1 as subtask_id FROM Tasks t, cte_subtask WHERE subtask_id < t.subtasks_count ) SELECT task_id, subtask_id FROM cte_subtask WHERE (task_id, subtask_id) NOT IN (SELECT task_id, subtask_id FROM Executed)
WITH recursive tasktable(task_id, subtask_seq) AS( SELECT DISTINCT task_id, 1 AS subtask_seq FROM tasks UNION ALL SELECT t1.task_id, t1.subtask_seq + 1 FROM tasktable as t1 WHERE t1.subtask_seq <( SELECT MAX(subtasks_count) FROM tasks as t2 WHERE t2.task_id=t1.task_id ) ) SELECT t.task_id, t.subtask_seq as subtask_id FROM tasktable as t LEFT JOIN Executed as e ON t.task_id=e.task_id and t.subtask_seq=e.subtask_id WHERE e.subtask_id IS NULL
With A as ( Select 1 as subtask_id UNION Select 2 as subtask_id UNION Select 3 as subtask_id UNION Select 4 as subtask_id UNION Select 5 as subtask_id UNION Select 6 as subtask_id UNION Select 7 as subtask_id UNION Select 8 as subtask_id UNION Select 9 as subtask_id UNION Select 10 as subtask_id UNION Select 11 as subtask_id UNION Select 12 as subtask_id UNION Select 13 as subtask_id UNION Select 14 as subtask_id UNION Select 15 as subtask_id UNION Select 16 as subtask_id UNION Select 17 as subtask_id UNION Select 18 as subtask_id UNION Select 19 as subtask_id UNION Select 20 as subtask_id) Select B.task_id, B.subtask_id From (Select Tasks.task_id, Tasks.subtasks_count, A.subtask_id From A JOIN Tasks On A.subtask_id<=Tasks.subtasks_count where A.subtask_id<=Tasks.subtasks_count) B Left Join Executed On B.task_id=Executed.task_id and B.subtask_id=Executed.subtask_id where Executed.subtask_id is null Order by B.task_id
With RECURSIVE tasks_count AS( Select task_id, subtasks_count from Tasks union all select task_id, subtasks_count-1 from tasks_count where subtasks_count >1 ) Select tc.task_id, tc.subtasks_count as subtask_id from tasks_count tc left join Executed e on tc.task_id = e.task_id and tc.subtasks_count = subtask_id where e.task_id is null order by tc.task_id, tc.subtasks_count
With recursive cte as ( Select task_id, subtasks_count as subtask_id from Tasks UNION ALL Select task_id, (subtask_id - 1) as subtask_id from cte where subtask_id>=2 ) Select cte.* from cte where (task_id, subtask_id) not in (Select e.task_id, e.subtask_id from Executed e where e.subtask_id = cte.subtask_id ) group by cte.task_id, cte.subtask_id order by cte.task_id
With recursive task_count As (Select 1 as num Union All Select num+1 From task_count Where num < (Select max(subtasks_count) FROM Tasks) ) Select a.task_id, b.num as subtask_id From Tasks as a Join task_count as b On b.num <= a.subtasks_count Where (a.task_id, b.num) not in (Select * From Executed)
With recursive task_count As (Select 1 as num Union All Select num+1 From task_count Where num < 20 ) Select a.task_id, b.num as subtask_id From Tasks as a Join task_count as b On b.num <= a.subtasks_count Where (a.task_id, b.num) not in (Select * From Executed)
select t.task_id , dummy.subtask_id from tasks t inner join ( select 1 as subtask_id union all select 2 union all select 3 union all select 4 union all select 5 union all select 6 union all select 7 union all select 8 union all select 9 union all select 10 union all select 11 union all select 12 union all select 13 union all select 14 union all select 15 union all select 16 union all select 17 union all select 18 union all select 19 union all select 20 ) dummy on t.subtasks_count >= dummy.subtask_id left outer join executed e on t.task_id = e.task_id and dummy.subtask_id = e.subtask_id where e.subtask_id is null order by task_id, subtask_id
select t.task_id, child.rnum as subtask_id from tasks t join ( select subtask_id, row_number() over (order by subtask_id ) as rnum from executed ) child on t.subtasks_count>= child.rnum left join executed e on t.task_id = e.task_id and child.rnum = e.subtask_id where e.subtask_id is null order by t.task_id
select t.task_id, t1.rnum as subtask_id from tasks t join (select row_number() over (order by subtask_id) rnum from executed) t1 on t.subtasks_count>= t1.rnum left join executed e on t.task_id = e.task_id and t1.rnum = e.subtask_id where e.subtask_id is null
select t.task_id, x.subtask_id from Tasks t join ( select 1 as subtask_id union select 2 as subtask_id union select 3 as subtask_id union select 4 as subtask_id union select 5 as subtask_id union select 6 as subtask_id union select 7 as subtask_id union select 8 as subtask_id union select 9 as subtask_id union select 10 as subtask_id union select 11 as subtask_id union select 12 as subtask_id union select 13 as subtask_id union select 14 as subtask_id union select 15 as subtask_id union select 16 as subtask_id union select 17 as subtask_id union select 18 as subtask_id union select 19 as subtask_id union select 20 as subtask_id ) x where x.subtask_id <= t.subtasks_count and (t.task_id, x.subtask_id) not in ( select task_id, subtask_id from Executed )
with RECURSIVE a as( select task_id, subtasks_count, 1 as idx from tasks union select task_id, subtasks_count, idx+1 as idx from a where idx < subtasks_count ) select a.task_id, a.idx as subtask_id from a left join executed as e on a.task_id=e.task_id and a.idx=e.subtask_id where e.task_id is null order by a.task_id asc, a.idx asc
with RECURSIVE cte as ( select task_id, 1 as subtask_id, subtasks_count from tasks union all select task_id, subtask_id +1, subtasks_count from cte where subtask_id < subtasks_count) select cte.task_id, cte.subtask_id from cte left join Executed as e on e.task_id = cte.task_id and e.subtask_id = cte.subtask_id where e.task_id is null order by task_id
with RECURSIVE cte as ( select task_id, subtasks_count, 1 as subtask_id from Tasks UNION ALL select cte.task_id, subtasks_count, 1 + subtask_id as subtask_id from cte where subtask_id < subtasks_count ) select c.task_id as task_id, c.subtask_id as subtask_id from cte c left join Executed e on c.task_id = e.task_id and c.subtask_id = e.subtask_id where e.task_id is null
with RECURSIVE cte as (select task_id, subtasks_count from tasks union all select task_id, subtasks_count-1 from cte where subtasks_count>1) select task_id, subtasks_count as subtask_id from cte where (task_id, subtasks_count) not in(select * from executed) order by 1,2
with RECURSIVE t1 as( select task_id, subtasks_count, 1 as subtask_id from tasks union all select task_id, subtasks_count, subtask_id+1 as subtask_id from t1 where subtask_id < subtasks_count ) select a.task_id, a.subtask_id from t1 as a left join executed b on a.task_id = b.task_id and a.subtask_id =b.subtask_id where b.subtask_id is null
with RECURSIVE taskss as (select task_id, subtasks_count from tasks union all select task_id, subtasks_count-1 from taskss where subtasks_count>1 ) Select a.task_id, a.subtasks_count as subtask_id from taskss a left join executed e on a.task_id = e.task_id and a.subtasks_count=e.subtask_id where e.subtask_id is null order by 1
with Recursive cte as (select task_id, 1 as id from tasks union all select task_id, id+1 as id from cte C where id<(select subtasks_count from tasks T where T.task_id=C.task_id )) select C.task_id,C.id as subtask_id from cte C left join executed E on C.task_id=E.task_id and C.id=E.subtask_id where E.subtask_id is null
with possible_subtask_ids as ( select 1 as subtask_id union all select 2 union all select 3 union all select 4 union all select 5 union all select 6 union all select 7 union all select 8 union all select 9 union all select 10 union all select 11 union all select 12 union all select 13 union all select 14 union all select 15 union all select 16 union all select 17 union all select 18 union all select 19 union all select 20 ) select t.task_id, p.subtask_id from Tasks t join possible_subtask_ids p on p.subtask_id <= t.subtasks_count left join Executed e on e.task_id = t.task_id and e.subtask_id = p.subtask_id where e.task_id is NULL
with recursive CTE as ( select task_id, 1 as id from Tasks union select T.task_id, C.id + 1 from CTE as C,Tasks as T where C.id < T.subtasks_count ) select task_id, id as subtask_id from CTE where (task_id, id) not in (select task_id, subtask_id from Executed)
with recursive CTE as ( select task_id, 1 as subtask_id from Tasks union select T.task_id, C.subtask_id + 1 from CTE as C,Tasks as T where C.subtask_id < T.subtasks_count ) Select * from CTE where (task_id , subtask_id ) not in ( Select task_id, subtask_id from Executed)
with recursive CTE as ( select task_id, subtasks_count from tasks union all select task_id, subtasks_count-1 from CTE where subtasks_count>1 ) select task_id, subtasks_count as subtask_id from cte where (task_id, subtasks_count) not in (select * from Executed) order by task_id, subtasks_count ASC
with recursive Counts (n) as ( select 1 as a union all select n + 1 from Counts c where n <= 20 ) select T.task_id, C.n as subtask_id from Tasks T left join Counts C on C.n <= T.subtasks_count left join Executed E on T.task_id = E.task_id and C.n = E.subtask_id where E.subtask_id is null
with recursive T as (select task_id, 1 as subtask_id, subtasks_count from Tasks UNION ALL select task_id, 1+subtask_id as subtask_id, subtasks_count from T where subtask_id<subtasks_count) select T.task_id, T.subtask_id from T left join Executed E on E.task_id=T.task_id and T.subtask_id=E.subtask_id where E.subtask_id is null
with recursive a as ( SELECT task_id,subtasks_count FROM Tasks WHERE subtasks_count >0 UNION SELECT task_id,subtasks_count-1 as subtasks_count FROM a WHERE subtasks_count-1 >0) SELECT a.task_id,a.subtasks_count as subtask_id FROM a WHERE (a.task_id,a.subtasks_count) not in (SELECT task_id,subtask_id as subtasks_count FROM Executed) ORDER BY task_id
with recursive a as ( select task_id , subtasks_count , 1 as subtask_id from Tasks union select task_id , subtasks_count , subtask_id +1 as subtask_id from a where subtask_id < subtasks_count ) select a.task_id, a.subtask_id from a left join Executed e on e.task_id = a.task_id and e.subtask_id = a.subtask_id where e.subtask_id is Null
with recursive a as ( select task_id, 1 as subtask_id from Tasks union select Tasks.task_id, subtask_id + 1 from a join Tasks where subtask_id < subtasks_count ) select * from a where (task_id, subtask_id) not in (select * from Executed)
with recursive a as ( select task_id, subtasks_count, 1 as subtask_id from tasks union all select task_id, subtasks_count, subtask_id + 1 as subtask_id from a where subtask_id < subtasks_count ) select a.task_id, a.subtask_id from a left join executed e on a.task_id = e.task_id and a.subtask_id = e.subtask_id where e.subtask_id is null
with recursive a as ( select task_id, subtasks_count, 1 as subtask_id from tasks union all select task_id, subtasks_count, subtask_id+1 as subtask_id from a where subtask_id <(select max(subtasks_count) from tasks)) select a.task_id, a.subtask_id from a left join executed e on a.task_id = e.task_id and a.subtask_id = e.subtask_id where a.subtasks_count >= a.subtask_id and e.subtask_id is null
with recursive a as( select task_id, 1 subtask_id,subtasks_count from tasks union all select task_id, subtask_id+1,subtasks_count from a where subtask_id < subtasks_count ) select a1.task_id,a1.subtask_id from a a1 left join executed e on a1.subtask_id=e.subtask_id and a1.task_id=e.task_id where e.task_id is null
with recursive all_comb as ( select task_id, subtasks_count from tasks union all select task_id, subtasks_count-1 from all_comb where subtasks_count > 1 ) select a.task_id,a.subtasks_count as subtask_id from all_comb a where (a.task_id,a.subtasks_count) not in (select e.task_id,e.subtask_id from executed e)
with recursive all_sub as( select task_id, 1 as subtask_id from tasks union select task_id, subtask_id+1 from all_sub b where subtask_id<(select subtasks_count from tasks a where a.task_id = b.task_id)) select * from all_sub where (task_id, subtask_id) not in (select task_id, subtask_id from Executed)
with recursive all_subtasks as ( select task_id, 1 as subtask_id from tasks union select t1.task_id, case when t1.subtask_id < (select subtasks_count from tasks t2 where t2.task_id = t1.task_id) then subtask_id + 1 else null end as subtask_id from all_subtasks t1 where t1.subtask_id < (select max(subtasks_count) from tasks) ) select * from all_subtasks where (task_id, subtask_id) not in ( select task_id, subtask_id from executed ) and subtask_id is not null order by task_id asc, subtask_id asc
with recursive all_subtasks as ( select task_id,1 as subtask_id,subtasks_count from tasks union all select task_id,subtask_id+1 as subtask_id,subtasks_count from all_subtasks where subtask_id+1 <= subtasks_count ) select a.task_id,a.subtask_id from all_subtasks a left join executed e on e.task_id = a.task_id and e.subtask_id = a.subtask_id where e.task_id is null
with recursive all_tasks as ( select task_id, subtasks_count from Tasks union all select task_id, subtasks_count-1 from all_tasks where subtasks_count > 1 ) select task_id, subtasks_count as subtask_id from all_tasks where (task_id, subtasks_count) not in (select task_id, subtask_id from Executed)
with recursive all_tasks as ( select task_id, subtasks_count from tasks union all select task_id, subtasks_count - 1 from all_tasks where subtasks_count > 1 ) select task_id, subtasks_count as subtask_id from all_tasks where (task_id, subtasks_count) not in (select * from executed)
with recursive all_tasks as ( select task_id,1 as num,subtasks_count from Tasks union select task_id,num+1 as num,subtasks_count from all_tasks where num+1<=subtasks_count ) select all1.task_id, all1.num as subtask_id from all_tasks all1 left join executed e on(all1.task_id=e.task_id and all1.num=e.subtask_id) where e.task_id is null or e.subtask_id is null
with recursive alltasks as (select task_id, subtasks_count as subtask from Tasks union all select task_id, subtask-1 as subtask from alltasks where subtask-1>0 ) select task_id, subtask as subtask_id from alltasks t1 where subtask NOT IN (select subtask_id from Executed where Executed.task_id = t1.task_id)
with recursive cte (task_id, subtask_id) as ( select task_id, subtasks_count from Tasks union all select c.task_id, c.subtask_id - 1 from cte c where subtask_id > 1 ) select c.* from cte c left join Executed e on c.task_id = e.task_id and c.subtask_id = e.subtask_id where e.task_id is null
with recursive cte AS( SELECT TASK_ID, subtasks_count from tasks union select TASK_ID, subtasks_count-1 from cte where subtasks_count>1 ) select c.task_id,c.subtasks_count as subtask_id from cte c left join executed e on c.task_id=e.task_id and c.subtasks_count=e.subtask_id where e.task_id is null
with recursive cte as ( SELECT task_id, subtasks_count FROM Tasks UNION ALL SELECT task_id, subtasks_count - 1 FROM CTE WHERE subtasks_count > 1 ) select task_id, subtasks_count as subtask_id from cte where (task_id, subtasks_count) not in (select task_id, subtask_id from executed)
with recursive cte as ( Select task_id, subtasks_count, 1 subtask_id from tasks union all Select task_id, subtasks_count, 1+subtask_id from cte where subtask_id < subtasks_count ) SELECT cte.task_id, cte.subtask_id FROM cte LEFT JOIN Executed e ON cte.task_id = e.task_id AND cte.subtask_id = e.subtask_id WHERE e.subtask_id IS NULL
with recursive cte as ( Select task_id, subtasks_count, 1 subtask_id from tasks union all Select task_id, subtasks_count, 1+subtask_id from cte where subtask_id < subtasks_count ) SELECT cte.task_id, cte.subtask_id FROM cte LEFT JOIN executed e ON cte.task_id = e.task_id AND cte.subtask_id = e.subtask_id WHERE e.subtask_id IS NULL
with recursive cte as ( Select task_id, subtasks_count, 1 subtask_id from tasks union all Select task_id, subtasks_count, 1+subtask_id from cte where subtask_id < subtasks_count ) SELECT id.task_id, id.subtask_id FROM cte id LEFT JOIN Executed e ON id.task_id = e.task_id AND id.subtask_id = e.subtask_id WHERE e.subtask_id IS NULL AND id.subtasks_count >= id.subtask_id
with recursive cte as ( select 1 as cnt union select cnt+1 from cte where cnt<20), cte2 as ( select task_id, cnt from (select task_id from tasks) as t1 join cte), cte3 as ( select cte2.task_id, cte2.cnt as subtask_id from tasks join cte2 on tasks.task_id = cte2.task_id and subtasks_count >= cnt) select cte3.task_id, cte3.subtask_id from cte3 left join executed as e on cte3.task_id = e.task_id and cte3.subtask_id = e.subtask_id where e.task_id is null
with recursive cte as ( select 1 as id union all select id+1 from cte where id < 20) select distinct t.task_id,c.id as 'subtask_id' from tasks t left join cte c on t.subtasks_count >= c.id left join executed e on e.task_id = t.task_id and e.subtask_id = c.id where e.subtask_id is null order by t.task_id, c.id desc
with recursive cte as ( select 1 as startnum union all select startnum + 1 as startnum from cte where startnum <= 20 ) select ta.task_id, c1.startnum as subtask_id from cte c1 cross join Tasks ta left join Executed ex on ta.task_id = ex.task_id and ex.subtask_id = c1.startnum where ta.subtasks_count >= c1.startnum and ex.subtask_id is null
with recursive cte as ( select 1 as sub union all select sub+1 from cte where sub < 20 ), all_tasks as ( select task_id, sub from tasks join cte on tasks.subtasks_count >= cte.sub order by task_id) select a.task_id, a.sub as subtask_id from all_tasks a left join executed e on a.task_id = e.task_id and a.sub = e. subtask_id where e.subtask_id is NULL
with recursive cte as ( select 1 as sub union select sub + 1 from cte where sub < (select max(subtasks_count) from tasks)) select drv.* from ( select a.task_id, b.sub as subtask_id from tasks as a cross join cte as b ) as drv left join executed as bb on drv.task_id = bb.task_id and drv.subtask_id = bb.subtask_id left join tasks as cc on drv.task_id = cc.task_id where bb.subtask_id is null and drv.subtask_id <= cc.subtasks_count
with recursive cte as ( select 1 as subtask_id union all select subtask_id +1 as subtask_id from cte where subtask_id < (select max(subtasks_count) from Tasks) ) select t.task_id, c.subtask_id from Tasks t join cte c on t.subtasks_count >= c.subtask_id left join Executed e on c.subtask_id = e.subtask_id and t.task_id = e.task_id where e.subtask_id is null
with recursive cte as ( select t.task_id, 1 as id from Tasks as t union select t.task_id, id+1 from cte, Tasks as t where id<t.subtasks_count ) select task_id, subtask_id from (select a.task_id, a.id as subtask_id , b.task_id as task_id_2 from cte as a left join Executed as b on a.task_id = b.task_id and a.id=b.subtask_id ) as c where task_id_2 is null
with recursive cte as ( select task_id, 1 as id from tasks union all select tasks.task_id, id+1 as id from tasks join cte on cte.task_id = tasks.task_id where id<subtasks_count ) select cte.task_id, cte.id as subtask_id from cte left join executed e on cte.id = e.subtask_id and cte.task_id = e.task_id where e.subtask_id is null
with recursive cte as ( select task_id, 1 as id from tasks union select t.task_id, c.id + 1 from cte as c, tasks as t where c.id < t.subtasks_count ) select task_id, id as subtask_id from cte where (task_id, id) not in (select task_id, subtask_id from executed)
with recursive cte as ( select task_id, 1 as subtask_id from Tasks union all select cte.task_id, subtask_id + 1 as subtask_id from cte, Tasks t where cte.task_id = t.task_id and cte.subtask_id < t.subtasks_count ) select distinct * from cte where (task_id, subtask_id) not in (select task_id, subtask_id from Executed)
with recursive cte as ( select task_id, 1 as subtask_id from Tasks union all select t.task_id, subtask_id + 1 as subtask_id from cte, Tasks t where cte.task_id = t.task_id and cte.subtask_id < t.subtasks_count ) select distinct * from cte where (task_id, subtask_id ) not in (select * from Executed)
with recursive cte as ( select task_id, 1 as subtask_id from Tasks union all select task_id, subtask_id + 1 from cte where subtask_id < (select subtasks_count from Tasks where task_id = cte.task_id) ) select task_id, subtask_id from cte where (task_id, subtask_id) not in (select * from Executed)
with recursive cte as ( select task_id, 1 as subtask_id from tasks union select c.task_id, subtask_id+1 from tasks t join cte c on t.task_id=c.task_id where subtask_id< subtasks_count) select task_id, subtask_id from cte where (task_id, subtask_id) not in (select task_id, subtask_id from executed)
with recursive cte as ( select task_id, 1 as subtask_id, subtasks_count from Tasks union all select task_id, subtask_id + 1, subtasks_count from cte where subtask_id < subtasks_count ) select task_id, subtask_id from cte where (task_id, subtask_id) not in (select task_id, subtask_id from Executed)
with recursive cte as ( select task_id, 1 as subtask_id, subtasks_count from tasks union all select task_id, subtask_id + 1, subtasks_count from cte where subtask_id < subtasks_count ) select c.task_id, c.subtask_id from cte c left join executed e on c.task_id = e.task_id and c.subtask_id = e.subtask_id where e.subtask_id is null order by c.task_id, c.subtask_id
with recursive cte as ( select task_id, subtasks_count , 1 as subtask_id from Tasks union all select task_id, subtasks_count , subtask_id + 1 as subtask_id from cte where subtask_id < subtasks_count ) select task_id, subtask_id from cte where (task_id, subtask_id) not in (select * from Executed) order by task_id
with recursive cte as ( select task_id, subtasks_count as 'subtask_id' from Tasks union all select task_id, subtask_id - 1 as 'subtask_id' from cte where subtask_id > 1) select cte.task_id, cte.subtask_id from cte left join Executed e using(task_id, subtask_id) where e.task_id is null
with recursive cte as ( select task_id, subtasks_count as n from tasks union all select task_id, n-1 as n from cte where n >1) select a.task_id, a.n as subtask_id from cte a left join executed b on a.task_id=b.task_id and a.n=b.subtask_id where b.subtask_id is null
with recursive cte as ( select task_id, subtasks_count as subtask_id from tasks union all select task_id, subtask_id - 1 as subtask_id from cte where subtask_id > 1 ) select c.task_id, c.subtask_id from cte c left join Executed e on c.task_id = e.task_id and c.subtask_id = e.subtask_id where e.subtask_id is null
with recursive cte as ( select task_id, subtasks_count from Tasks union all select task_id, subtasks_count - 1 from cte where subtasks_count > 1 ) select task_id, subtasks_count as subtask_id from cte where (task_id, subtasks_count) not in (select * from Executed)
with recursive cte as ( select task_id, subtasks_count from Tasks union all select task_id, subtasks_count -1 from cte where subtasks_count > 1 ) select task_id, subtasks_count as subtask_id from cte where (task_id, subtasks_count) not in (select * from Executed)
with recursive cte as ( select task_id, subtasks_count from tasks union all select task_id, subtasks_count - 1 from cte where subtasks_count > 1 ) select task_id, subtasks_count 'subtask_id' from cte where (task_id, subtasks_count) not in (select * from executed)
with recursive cte as ( select task_id, subtasks_count from tasks union all select task_id, subtasks_count-1 from cte where subtasks_count>1 ) select cte.task_id, cte.subtasks_count as subtask_id from cte left outer join executed ex on cte.task_id=ex.task_id and cte.subtasks_count=ex.subtask_id where ex.task_id is null
with recursive cte as ( select task_id, subtasks_count from tasks union all select task_id, subtasks_count-1 from cte where subtasks_count>1 ) select task_id, subtasks_count as subtask_id from cte where (task_id, subtasks_count) not in (select task_id, subtask_id from Executed)
with recursive cte as ( select task_id, subtasks_count n from Tasks union all select task_id, n-1 n from cte where n>1 ) select cte.task_id task_id, cte.n subtask_id from cte left join executed e on cte.task_id = e.task_id and e.subtask_id = cte.n where e.subtask_id is null
with recursive cte as ( select task_id, subtasks_count, 1 as cnt from tasks union select task_id, subtasks_count, cnt+1 as cnt from cte where cnt <subtasks_count) select cte.task_id, cnt as subtask_id from cte left join executed on cte.task_id = executed.task_id and cte.cnt = executed.subtask_id where executed.subtask_id is null
with recursive cte as ( select task_id, subtasks_count, 1 as subtask_id from Tasks union all select t.task_id, t.subtasks_count, subtask_id+1 as subtask_id from Tasks t inner join cte c on t.task_id = c.task_id where c.subtask_id < t.subtasks_count ) select c.task_id, c.subtask_id from cte c left outer join Executed e on c.task_id = e.task_id and c.subtask_id = e.subtask_id where e.subtask_id is null
with recursive cte as ( select task_id, subtasks_count, 1 as subtask_id from Tasks union all select task_id, subtasks_count, subtask_id + 1 as subtask_id from cte where subtask_id < subtasks_count ) select task_id, subtask_id from cte where (task_id, subtask_id) not in (select task_id, subtask_id from executed)
with recursive cte as ( select task_id, subtasks_count, 1 as subtask_id from Tasks union all select task_id, subtasks_count, subtask_id + 1 as subtask_id from cte where subtask_id < subtasks_count) select c.task_id, c.subtask_id from cte c left join Executed e on c.task_id = e.task_id and c.subtask_id = e.subtask_id where e.subtask_id is null
with recursive cte as ( select task_id, subtasks_count, 1 as subtask_id from Tasks union all select task_id, subtasks_count, subtask_id + 1 from cte where subtask_id < subtasks_count ) select task_id, subtask_id from cte where (task_id, subtask_id) not in (select * from executed)
with recursive cte as ( select task_id, subtasks_count, 1 as subtask_id from Tasks union all select task_id, subtasks_count, subtask_id + 1 from cte where subtask_id <= (select subtasks_count from Tasks where task_id = cte.task_id) ) select cte.task_id, cte.subtask_id from cte left join Executed on cte.task_id = Executed.task_id and cte.subtask_id = Executed.subtask_id where Executed.subtask_id is null and cte.subtask_id <= cte.subtasks_count
with recursive cte as ( select task_id, subtasks_count, 1 as subtask_id from tasks union all select task_id, subtasks_count, subtask_id + 1 from cte where subtask_id < subtasks_count ) select c.task_id, c.subtask_id from cte c left join executed e on c.task_id = e.task_id and c.subtask_id = e.subtask_id where e.task_id is null order by 1, 2
with recursive cte as ( select task_id, subtasks_count, 1 as subtask_id from tasks union all select task_id, subtasks_count, subtask_id+1 as subtask_id from cte where subtask_id<(select max(subtasks_count) from tasks) ) select a.task_id, a.subtask_id from cte a left join executed b on a.subtask_id=b.subtask_id and a.task_id=b.task_id where b.subtask_id is null and a.subtask_id<=a.subtasks_count
with recursive cte as ( select task_id, subtasks_count, 1 subtask_id from tasks union all select task_id, subtasks_count, subtask_id+1 as subtask_id from cte where subtask_id<subtasks_count) select task_id, subtask_id from cte where (task_id, subtask_id) not in (select * from executed)
with recursive cte as ( select task_id,1 as id from tasks union select t.task_id,id+1 as id from cte,tasks t where id<t.subtasks_count ) select task_id,id as subtask_id from cte where (task_id,id) not in ( select task_id,subtask_id from executed)
with recursive cte as ( select task_id,1 as subtask_id,subtasks_count from tasks union all select task_id,subtask_id+1,subtasks_count from cte where subtask_id<subtasks_count ) select task_id,subtask_id from cte where (task_id,subtask_id) not in (select task_id,subtask_id from executed) order by task_id,subtask_id
with recursive cte as ( select task_id,subtasks_count, 1 as subtask_id from tasks union all select task_id,subtasks_count,subtask_id+1 as subtask_id from cte where subtask_id<subtasks_count ) select task_id,subtask_id from cte where (task_id,subtask_id) not in ( select task_id,subtask_id from executed ) order by task_id,subtask_id
with recursive cte as ( select task_id,subtasks_count,1 as actual_subid from tasks UNION select task_id,subtasks_count,actual_subid+1 as actual_subid from cte where actual_subid <= subtasks_count-1 ) select task_id,actual_subid as subtask_id from cte where (task_id,actual_subid) NOT IN (select * from executed)
with recursive cte as ( select ts.task_id as taskId, ts.subtasks_count as subtaskCount, 1 as subTaskId from tasks ts union all select ct1.taskId as taskId, ct1.subtaskCount as subtaskCount, ct1.subTaskId+1 as subTaskId from cte ct1 where ct1.subTaskId <= ((select max(tk2.subtasks_count)from tasks tk2)-1) ) select ct2.taskId as task_id, ct2.subTaskId as subtask_id from cte ct2 left join Executed ex on ct2.taskId = ex.task_id and ct2.subTaskId = ex.subtask_id where ex.subtask_id is null and ct2.subTaskId <= ct2.subtaskCount order by taskId,subTaskId asc
with recursive cte as (select 1 as num union all select num+1 as num from cte where num < 20), allsubtasks as (select a.task_id, b.num from Tasks a cross join cte b where b.num <= a.subtasks_count ) select distinct x.task_id, x.num as subtask_id from allsubtasks x left join Executed y on x.task_id = y.task_id and x.num = y.subtask_id where y.subtask_id is null
with recursive cte as (select 1 as subtask_id union all select subtask_id + 1 from cte where subtask_id <= 19), alll as (select t.task_id, c.subtask_id from tasks t, cte c where c.subtask_id <= subtasks_count ) select a.task_id, a.subtask_id from alll a left join executed e on a.task_id = e.task_id and a.subtask_id = e.subtask_id where e.subtask_id is null
with recursive cte as (select task_id, 1 as sub, subtasks_count from tasks union all select task_id, sub+1 as sub, subtasks_count from cte where sub < subtasks_count ) select c.task_id, c.sub as subtask_id from cte c LEFT JOIN Executed e on c.task_id=e.task_id and c.sub=e.subtask_id where e.task_id is null order by c.task_id, c.sub
with recursive cte as (select task_id, 1 as subtask_id from Tasks UNION ALL select task_id, subtask_id+1 as subtask_id from cte where subtask_id < (select subtasks_count from Tasks t where t.task_id = cte.task_id)) select cte.* from cte LEFT JOIN Executed e ON cte.task_id = e.task_id AND cte.subtask_id = e.subtask_id WHERE e.subtask_id is NULL
with recursive cte as (select task_id, 1 as subtask_id from Tasks UNION ALL select task_id, subtask_id+1 as subtask_id from cte where subtask_id < (select subtasks_count from Tasks t where t.task_id = cte.task_id)) select cte.* from cte LEFT JOIN Executed e ON cte.task_id = e.task_id AND cte.subtask_id = e.subtask_id WHERE e.task_id IS NULL AND e.subtask_id is NULL
with recursive cte as (select task_id, subtasks_count FROM Tasks UNION ALL select task_id, subtasks_count-1 from cte WHERE subtasks_count > 1 ) select task_id, subtasks_count as subtask_id from cte where (task_id, subtasks_count) NOT IN (SELECT * FROM Executed)
with recursive cte as (select task_id, subtasks_count as n from Tasks union all select task_id, n - 1 from cte where n > 1 ) select cte.task_id, cte.n as subtask_id from cte left join Executed e on cte.task_id = e.task_id and cte.n = e.subtask_id where e.subtask_id is null order by 1, 2
with recursive cte as (select task_id, subtasks_count as n from Tasks union all select task_id, n-1 as n from cte where n> 1) select c.task_id, c.n as subtask_id from cte c left join Executed e on c.task_id = e.task_id and c.n = e.subtask_id where e.subtask_id is null
with recursive cte as (select task_id, subtasks_count as subtask_id from Tasks UNION ALL select task_id, subtask_id-1 as subtask_id from cte where subtask_id > 1) select cte.* from cte LEFT JOIN Executed e ON cte.task_id = e.task_id AND cte.subtask_id = e.subtask_id WHERE e.subtask_id is NULL
with recursive cte as (select task_id, subtasks_count from Tasks union all select task_id, subtasks_count - 1 from cte where subtasks_count > 1) select task_id, subtasks_count subtask_id from cte where (task_id, subtasks_count) not in (select * from Executed)
with recursive cte as (select task_id, subtasks_count from tasks union all select task_id, subtasks_count - 1 from cte where subtasks_count > 1) select c.task_id, c.subtasks_count as subtask_id from cte c left join executed e on c.task_id = e.task_id and c.subtasks_count = e.subtask_id where e.subtask_id is null
with recursive cte as (select task_id,subtasks_count from Tasks union select task_id,subtasks_count-1 from cte where subtasks_count>1) select cte.task_id, cte.subtasks_count as subtask_id from cte left join Executed e on cte.task_id=e.task_id and cte.subtasks_count = e.subtask_id where e.task_id is null
with recursive cte as (select task_id,subtasks_count n from tasks union all select task_id, n-1 n from cte where n > 1 ) select task_id , n as subtask_id from cte where (task_id , n ) not in (select task_id , subtask_id from Executed) order by 1,2
with recursive cte as( select 1 as n union all select n+1 as n from cte where n< (select max(subtasks_count) from Tasks) ) select task_id, n as subtask_id from Tasks join cte on cte.n <= Tasks.subtasks_count where (task_id, n) not in (select * from Executed)
with recursive cte as( select 1 as subtask_id union all select subtask_id+1 from cte where subtask_id<21 ) select a.task_id, b.subtask_id from tasks a inner join cte b on b.subtask_id<= a.subtasks_count where not exists (select * from executed where a.task_id=task_id and b.subtask_id=subtask_id ) order by 1,2
with recursive cte as( select 1 cnt union all select cnt+1 from cte where cnt < (select max(subtasks_count) from Tasks)) select T.task_id as task_id, C.cnt as subtask_id from Tasks T left join cte C on T.subtasks_count>=C.cnt where (T.task_id, C.cnt) not in (select * from Executed)
with recursive cte as( select t.task_id ,1 as id from Tasks t UNION select t.task_id,id+1 from cte ,Tasks t where id <= subtasks_count-1 ) select task_id,id as subtask_id from cte where (task_id,id) not in (select task_id,subtask_id from Executed)
with recursive cte as( select t.task_id, 1 as ct from tasks t union select t.task_id, ct+1 from cte, tasks t where ct < t.subtasks_count) select task_id, ct as subtask_id from cte where (task_id,ct) not in (select task_id, subtask_id from executed)
with recursive cte as( select t.task_id, 1 as id from tasks t union select t.task_id,id+1 from cte join tasks t where id < t.subtasks_count ) select task_id, id as subtask_id from cte where (task_id, id) not in (select task_id, subtask_id from executed)
with recursive cte as( select t.task_id, 1 as id from tasks t union select t.task_id,id+1 from cte, tasks t where id < t.subtasks_count ) select task_id, id as subtask_id from cte where (task_id, id) not in (select task_id, subtask_id from executed)
with recursive cte as( select t.task_id, 1 as id from tasks t union select t.task_id,id+1 from cte, tasks t where id < t.subtasks_count ), cte2 as( select * from cte ) select task_id, id as subtask_id from cte2 where (task_id, id) not in (select task_id, subtask_id from executed)
with recursive cte as( select t.task_id, 1 as id from tasks t union select t.task_id,id+1 from cte, tasks t where id < t.subtasks_count ), cte2 as( select * from cte order by task_id,id) select task_id, id as subtask_id from cte2 where (task_id, id) not in (select task_id, subtask_id from executed)
with recursive cte as( select t1.task_id, 1 as subtask_id from Tasks t1 union select t1.task_id, subtask_id+1 as subtask_id from cte, Tasks t1 where subtask_id < t1.subtasks_count ) select task_id, subtask_id from cte where (task_id, subtask_id) not in (select task_id, subtask_id from Executed)
with recursive cte as( select task_id, 1 as id from tasks t union select t.task_id, id+1 as id from cte, tasks t where id < t.subtasks_count ) select task_id, id as subtask_id from cte where (task_id, id) not in ( select task_id, subtask_id from executed )
with recursive cte as( select task_id, 1 as ids, subtasks_count from tasks union all select task_id, ids+1 as ids, subtasks_count from cte where ids < subtasks_count ) select a.task_id, a.ids as subtask_id from cte a left join executed b on a.task_id = b.task_id and a.ids = b.subtask_id where b.subtask_id IS NULL order by a.task_id
with recursive cte as( select task_id, subtasks_count from Tasks union all select task_id, subtasks_count-1 from cte where subtasks_count > 1) select task_id, subtasks_count as subtask_id from cte where (task_id, subtasks_count) not in (select * from Executed)
with recursive cte as( select task_id, subtasks_count from tasks union all select task_id, subtasks_count - 1 from cte where subtasks_count > 1 ) select task_id, subtasks_count as subtask_id from ( select cte.task_id, cte.subtasks_count, Executed.task_id as label from cte left join Executed on cte.task_id = Executed.task_id and cte.subtasks_count = Executed.subtask_id ) tmp1 where label is NULL
with recursive cte as( select task_id, subtasks_count from tasks union all select task_id, subtasks_count - 1 from cte where subtasks_count > 1) select task_id, subtasks_count as subtask_id from cte where (task_id, subtasks_count) not in(select * from Executed)
with recursive cte as( select task_id, subtasks_count from tasks union all select task_id, subtasks_count -1 from cte where subtasks_count - 1 >=1 ) select task_id, subtasks_count as subtask_id from cte where (task_id, subtasks_count) not in (select task_id, subtask_id from Executed)
with recursive cte as( select task_id, subtasks_count n from tasks union all select task_id, n-1 as n from cte where n > 1) select cte.task_id, n subtask_id from cte left join executed e on cte.task_id = e.task_id and cte.n = e.subtask_id where e.subtask_id is null
with recursive cte as( select task_id, subtasks_count n from tasks union all select task_id, n-1 n from cte where n > 1) select cte.task_id as task_id, cte.n as subtask_id from cte left join executed as e on cte.task_id = e.task_id and cte.n = e.subtask_id where e.task_id is null
with recursive cte as( select task_id, subtasks_count n from tasks union all select task_id, n-1 n from cte where n > 1) select cte.task_id, n subtask_id from cte left join executed e on cte.task_id = e.task_id and cte.n = e.subtask_id where e.subtask_id is null
with recursive cte as( select task_id, subtasks_count n from tasks union all select task_id, n-1 n from cte where n>1) select task_id, n as subtask_id from( select cte.task_id, cte.n, executed.task_id t, executed.subtask_id st from cte left join executed on cte.task_id=executed.task_id and cte.n=executed.subtask_id) as a where t is null
with recursive cte as( select task_id, subtasks_count, 1 as id from tasks union all select task_id, subtasks_count, id + 1 from cte where id+1<=subtasks_count ) select c.task_id, c.id as subtask_id from cte c left join executed e on c.task_id = e.task_id and c.id = e.subtask_id where e.task_id is null
with recursive cte as( select task_id,subtasks_count from tasks union all select task_id, subtasks_count-1 from cte where subtasks_count >1 ) select CTE.task_id, CTE.subtasks_count as subtask_id from CTE left join executed as e on CTE.task_id=e.task_id and CTE.subtasks_count=e.subtask_id where subtask_id is null
with recursive cte as( select task_id,subtasks_count from tasks union all select task_id, subtasks_count-1 from cte where subtasks_count >1 ) select a.task_id task_id,a.subtasks_count subtask_id from cte as a left join Executed as b on a.task_id=b.task_id and a.subtasks_count=b.subtask_id where b.task_id is null
with recursive cte as( select task_id,subtasks_count from tasks union all select task_id, subtasks_count-1 from cte where subtasks_count >1 ) select task_id, subtask_id from ( select a.task_id task_id,a.subtasks_count subtask_id,b.task_id tt, b.subtask_id ss from cte a left join executed b on a.task_id = b.task_id and a.subtasks_count=b.subtask_id order by 1,2) x where tt is null
with recursive cte as( select task_id,subtasks_count from tasks union all select task_id, subtasks_count-1 from cte where subtasks_count >1 ) select task_id, subtask_id from (select a.task_id task_id,a.subtasks_count subtask_id,b.task_id tt, b.subtask_id ss from cte as a left join Executed as b on a.task_id=b.task_id and a.subtasks_count=b.subtask_id ) x where tt is null
with recursive cte as( select task_id,subtasks_count from tasks union all select task_id, subtasks_count-1 from cte where subtasks_count >1 ) select task_id,subtasks_count as subtask_id from cte where (task_id,subtasks_count) not in ( select * from executed )
with recursive cte as(select t.task_id, 1 as id from tasks t union select t.task_id, id+1 from cte, tasks t where id < t.subtasks_count ) select task_id, id as subtask_id from cte where(task_id, id ) not in (select task_id, subtask_id from executed )
with recursive cte(n) as( select 1 union all select n +1 from cte where n < 21 ), Q1 as(select task_id,n subtask_id from cte cross join tasks where n <= subtasks_count ) select * from Q1 where not exists(select 1 from executed where executed.task_id = Q1.task_id and executed.subtask_id = Q1.subtask_id)
with recursive cte(num) as( select 1 as num union all select num+1 from cte where num+1 <= 21 ) select task_id, num as subtask_id from ( select task_id, num from tasks cross join cte where num <= subtasks_count order by task_id,num ) t where num not in ( select subtask_id from executed e where e.task_id=t.task_id)
with recursive cte(task_id, subtask_id) as ( select task_id as task_id , 1 as subtask_id from tasks union all select t1.task_id, t1.subtask_id + 1 from cte t1 join tasks t2 on t1.task_id = t2.task_id and t1.subtask_id < t2.subtasks_count ) select * from cte where ( task_id , subtask_id) not in ( select task_id, subtask_id from executed )
with recursive cte(task_id, subtask_id) as ( select task_id, subtasks_count from Tasks union all select task_id, subtask_id-1 from cte where subtask_id -1 >= 1 ) select * from cte where (task_id, subtask_id) not in (select * from Executed)
with recursive cte(task_id, subtask_id) as (select task_id, subtasks_count as subtask_id from Tasks union all select task_id, subtask_id - 1 as subtask_id from cte where subtask_id > 1 ) select CTE.task_id, CTE.subtask_id from CTE left join executed as e on CTE.task_id=e.task_id and CTE.subtask_id=e.subtask_id where e.subtask_id is null
with recursive cte1 as ( select task_id, 1 as subtask_id from Tasks union all select task_id, subtask_id + 1 as subtask_id from cte1 where subtask_id < (select subtasks_count from tasks where task_id = cte1.task_id) ) select * from cte1 where (task_id, subtask_id) not in (select * from executed)
with recursive cte1 as ( select task_id, 1 as subtask_id from tasks union all select t.task_id, c.subtask_id+1 from tasks t, cte1 c where t.task_id=c.task_id and c.subtask_id+1<=t.subtasks_count ) select c.task_id, c.subtask_id from cte1 c left join executed e on( c.task_id=e.task_id and c.subtask_id=e.subtask_id) where e.subtask_id is null
with recursive cte_spine as ( select task_id, subtasks_count as n from Tasks union all select task_id, n - 1 as n from cte_spine where n > 1 ), cte_final as ( select s.task_id, s.n as subtask_id from cte_spine as s left join Executed as e on s.task_id = e.task_id and s.n = e.subtask_id where e.subtask_id is null ) select * from cte_final
with recursive cte_st as ( select 1 as subtask_id union all select subtask_id+1 from cte_st where subtask_id < 21 ) select t.task_id, st.subtask_id from tasks t join cte_st st on st.subtask_id <= t.subtasks_count left join Executed c on t.task_id=c.task_id and st.subtask_id=c.subtask_id where c.subtask_id is null
with recursive cte_task as ( Select task_id, subtasks_count, 1 as subtask_id From Tasks union all Select c.task_id, c.subtasks_count, c.subtask_id+1 as subtask_id from cte_task c where c.subtask_id+1<=c.subtasks_count ) select c.task_id, c.subtask_id from cte_task c where (c.task_id, c.subtask_id) not in (select task_id, subtask_id from Executed)
with recursive dim_positive_int as ( select 1 as n union all select n + 1 as n from dim_positive_int where n < 20 ), cte_spine as ( select task_id, dim.n from Tasks as t join dim_positive_int as dim on t.subtasks_count >= dim.n ), cte_final as ( select s.task_id, s.n as subtask_id from cte_spine as s left join Executed as e on s.task_id = e.task_id and s.n = e.subtask_id where e.subtask_id is null ) select * from cte_final
with recursive generate_subtasks as( select task_id, subtasks_count, 1 as subtask_id from tasks union all select task_id, subtasks_count, subtask_id + 1 from generate_subtasks where subtask_id < subtasks_count ) select st.task_id, st.subtask_id from generate_subtasks st left join executed e on st.task_id = e.task_id and st.subtask_id = e. subtask_id where e.subtask_id is null
with recursive getTotalRow as ( select task_id, 1 as subtask_id from tasks union select tasks.task_id, subtask_id + 1 from getTotalRow, tasks where subtask_id < tasks.subtasks_count ) select * from getTotalRow a where not exists (select 1 from Executed where task_id = a.task_id and subtask_id = a.subtask_id )
with recursive id as ( Select 1 as num union all Select num + 1 from id where num < (select max(subtasks_count) from Tasks) ), tasks_merged as ( Select t.*, id.* from Tasks t, id where t.subtasks_count >= id.num ) Select t.task_id, t.num as subtask_id from tasks_merged t left join Executed e on t.task_id = e.task_id and t.num = subtask_id where e.task_id is null
with recursive id as ( select task_id, subtasks_count, 1 as subtask_id from Tasks union select task_id, subtasks_count, subtask_id + 1 as subtask_id from id where subtask_id < (select max(subtasks_count) from Tasks) ) select task_id, subtask_id from id where subtask_id <= subtasks_count and subtask_id not in (select subtask_id from Executed where task_id = id.task_id)
with recursive id as ( select task_id, subtasks_count, 1 as subtask_id from tasks t union all select task_id, subtasks_count, subtask_id+1 as subtask_id from id where subtask_id <= 20 ) select distinct id.task_id, id.subtask_id from id where id.subtask_id <= id.subtasks_count and not exists ( select * from executed e where e.task_id = id.task_id and e.subtask_id = id.subtask_id )
with recursive id as ( select task_id, subtasks_count, 1 as subtask_id from tasks union all select task_id, subtasks_count, subtask_id +1 as subtask_id from id where subtask_id < (select max(subtasks_count) from tasks) ) select i.task_id, i.subtask_id from id as i left join executed as e on e.task_id = i.task_id and e.subtask_id = i.subtask_id where i.subtask_id <= i.subtasks_count and e.subtask_id is null
with recursive id as (select task_id,subtasks_count,1 as subtask_id from tasks union all select task_id,subtasks_count,subtask_id+1 from id where subtask_id <= (select max(subtasks_count) from tasks)) SELECT id.task_id, id.subtask_id FROM id LEFT JOIN Executed e ON id.task_id = e.task_id AND id.subtask_id = e.subtask_id WHERE e.subtask_id IS NULL AND id.subtasks_count >= id.subtask_id
with recursive id as( SELECT task_id, subtasks_count, 1 AS subtask_id FROM Tasks union all select task_id, subtasks_count, subtask_id+1 as subtask_id from id where subtask_id < (select max(subtasks_count) from Tasks) ) select id.task_id, id.subtask_id from id left join Executed e on id.task_id = e.task_id and id.subtask_id = e.subtask_id where e.subtask_id is Null and id.subtasks_count >= id.subtask_id
with recursive ids as ( select task_id , subtasks_count as subtask_id from Tasks union all select task_id , subtask_id-1 as subtask_id from ids where subtask_id>1 ) select task_id , subtask_id from ids where (task_id,subtask_id) not in (select * from Executed)
with recursive list_subtasks as ( select task_id, subtasks_count from Tasks union all select task_id, subtasks_count - 1 as value from list_subtasks where subtasks_count - 1 >0 ) select l.task_id, subtasks_count as subtask_id from list_subtasks l left join Executed e on l.task_id = e.task_id and l.subtasks_count = e.subtask_id where e.subtask_id is null
with recursive m as ( select task_id, 1 as subtask, subtasks_count from tasks union select task_id, subtask+1,subtasks_count from m where subtask< subtasks_count ) select m.task_id, subtask as subtask_id from m left join executed on m.task_id = executed.task_id and m.subtask = executed.subtask_id where executed.subtask_id is null
with recursive p as ( select 1 as n union all select n + 1 from p where n < 20 ) select task_id, p.n as subtask_id from p, Tasks t where p.n <= subtasks_count and (task_id, p.n) not in (select task_id, subtask_id from Executed) order by 1, 2
with recursive possible_subtasks as ( Select 1 as sub_task_id union all Select sub_task_id+1 as sub_task_id from possible_subtasks where sub_task_id < 20 ) Select task_id , ps.sub_task_id as subtask_id from Tasks t cross join possible_subtasks ps where ps.sub_task_id <=t.subtasks_count and not exists ( Select task_id,subtask_id from executed e where e.task_id=t.task_id and e.subtask_id = ps.sub_task_id ) order by task_id
with recursive possible_subtasks as ( select 1 as subtask_id union all select subtask_id + 1 as subtask_id from possible_subtasks where subtask_id < 20 ), all_tasks_and_subtasks as ( select task_id, subtask_id from possible_subtasks cross join tasks where subtask_id <= subtasks_count ) select p.task_id, p.subtask_id from all_tasks_and_subtasks p left join executed e on e.task_id = p.task_id and e.subtask_id = p.subtask_id where e.subtask_id is null
with recursive r as ( select 1 as id union all select id+1 as id from r where id < (select max(subtasks_count) from Tasks) ), helper as ( select distinct task_id, r.id as subtasks from Tasks T join r on T.subtasks_count >= r.id ) select distinct task_id, subtasks as subtask_id from helper where (task_id, subtasks) not in (select * from Executed)
with recursive r as (select task_id, 1 as subtask_id from tasks union select task_id, 1 + subtask_id from r where subtask_id < (select max(subtasks_count) from tasks)) select r.task_id, r.subtask_id from r left join tasks a using (task_id) left join executed b using (task_id, subtask_id) where b.subtask_id is null and r.subtask_id <= a.subtasks_count
with recursive r as (select task_id, subtasks_count,1 as subtask_id from tasks union all select task_id, subtasks_count, subtask_id+1 as subtask_id from r where subtask_id<(select max(subtasks_count) from tasks)) select r.task_id, r.subtask_id from r left join executed e on r.task_id=e.task_id and r.subtask_id=e.subtask_id where e.subtask_id is null and r.subtask_id<=r.subtasks_count
with recursive r_cte as ( select task_id, subtasks_count from tasks union all select task_id, subtasks_count -1 from r_cte where subtasks_count>1 ) select task_id, subtasks_count as subtask_id from r_cte where (task_id, subtasks_count) not in (select task_id, subtask_id from executed)
with recursive range_table as ( select 1 as range_val union all select range_val+1 from range_table where range_val < 20 ) select tr.task_id, tr.range_val as 'subtask_id' from (select * from range_table r join Tasks t where r.range_val <= t.subtasks_count) tr left join Executed e on tr.task_id = e.task_id and tr.range_val = e.subtask_id where e.subtask_id is null
with recursive rcte as ( select 1 as main union all select main + 1 from rcte limit 20 ) select a.task_id ,b.main subtask_id from Tasks a join rcte b on main <= subtasks_count where (a.task_id, b.main) not in (select * from Executed) order by 1,2
with recursive rec_cte (inum) as ( select 1 as inum union all select inum + 1 from rec_cte where inum + 1 <= 20 ) select t.task_id , rc.inum as subtask_id from tasks t inner join rec_cte rc on t.subtasks_count >= rc.inum left join executed e on t.task_id = e.task_id and e.subtask_id = rc.inum where e.subtask_id is null order by 1,2
with recursive s as ( select task_id,subtasks_count,1 subtask_id from tasks union all select task_id,subtasks_count, subtask_id+1 from s where subtask_id < subtasks_count ) select s.task_id,s.subtask_id from s left join Executed e on s.task_id=e.task_id and s.subtask_id = e.subtask_id where e.subtask_id is null
with recursive seq as (select 1 as counts union select counts+1 from seq where counts < 20) select t1.task_id, seq.counts as subtask_id from tasks t1, seq where seq.counts <= t1.subtasks_count and seq.counts not in (select subtask_id from executed e where e.task_id = t1.task_id)
with recursive seq as (select task_id, subtasks_count,1 as value from tasks union all select task_id, subtasks_count, value+1 from seq where value <= (select max(subtasks_count) from tasks)) select seq.task_id, seq.value as subtask_id from seq left join tasks t on seq.task_id = t.task_id left join executed e on seq.task_id = e.task_id and seq.value = e.subtask_id where e.task_id is null and seq.value <= t.subtasks_count
with recursive sub as ( select task_id,1 as subtask_id, subtasks_count from Tasks union select task_id,subtask_id+1,subtasks_count from sub where subtask_id<subtasks_count ) select sub.task_id,sub.subtask_id from sub left join Executed e on sub.task_id=e.task_id and sub.subtask_id=e.subtask_id where e.task_id is null
with recursive sub as (select task_id, 1 as subtask_id, subtasks_count from tasks union select task_id, subtask_id + 1 as subtask_id, subtasks_count from sub where subtask_id < subtasks_count) select s.task_id, s.subtask_id from sub s left join Executed e on s.task_id = e.task_id and s.subtask_id = e.subtask_id where e.subtask_id is null
with recursive sub as (select task_id,1 as subtask_id from tasks union all select sub.task_id, subtask_id+1 from sub inner join tasks on sub.task_id=tasks.task_id where subtask_id<subtasks_count) select sub.task_id, sub.subtask_id from sub left join executed e on sub.task_id = e.task_id and sub.subtask_id = e.subtask_id where e.subtask_id is null
with recursive sub as (select task_id,1 as subtask_id from tasks union all select sub.task_id, subtask_id+1 from sub inner join tasks on sub.task_id=tasks.task_id where subtask_id<subtasks_count) select task_id,subtask_id from sub where (task_id,subtask_id) not in (select * from executed)
with recursive subID as ( select task_id, subtasks_count, 1 as subtask from Tasks union select task_id, subtasks_count, subtask + 1 as subtask from subID where subtask < subtasks_count ) select s.task_id as task_id, s.subtask as subtask_id from subID s left join Executed e on e.task_id = s.task_id and e.subtask_id = s.subtask where subtask_id is NULL
with recursive subtaskids as ( select task_id, 1 as subtask_id, subtasks_count from Tasks union all select task_id ,subtask_id + 1 ,subtasks_count from subtaskids where subtask_id < subtasks_count ) select subs.task_id ,subs.subtask_id from subtaskids subs left join Executed exe on subs.task_id = exe.task_id and subs.subtask_id = exe.subtask_id where exe.subtask_id is null
with recursive subtasks as ( select 1 as subtask_id union all select subtask_id+1 from subtasks where subtask_id < 20 ) select tasks.task_id, subtasks.subtask_id from subtasks join tasks on ( subtasks.subtask_id <= tasks.subtasks_count ) where not exists ( select 1 from executed where executed.task_id = tasks.task_id and executed.subtask_id = subtasks.subtask_id ) order by tasks.task_id
with recursive subtasks as ( select 1 sub_id union all select sub_id + 1 from subtasks where sub_id < 20 ) select t.task_id, s.sub_id subtask_id from Tasks t join subtasks s on t.subtasks_count >= s.sub_id where s.sub_id not in (select subtask_id from Executed where t.task_id = task_id) order by task_id
with recursive subtasks as ( select task_id, 0 as 'subtask_id', subtasks_count from Tasks union select task_id, subtask_id + 1, subtasks_count from subtasks where subtask_id < subtasks_count ) select task_id, subtask_id from subtasks where (task_id, subtask_id) not in (select * from Executed) and subtask_id <> 0
with recursive subtasks as ( select task_id, subtasks_count from Tasks union select task_id, subtasks_count - 1 from subtasks where subtasks_count - 1 > 0 ) select s.task_id, s.subtasks_count as subtask_id from subtasks s where (s.task_id, s.subtasks_count) not in ( select e.task_id, e.subtask_id from Executed e )
with recursive subtasks(task_id, subtask_id) as ( select t1.task_id, t1.subtasks_count as subtask_id from Tasks t1 union all select t2.task_id, subtask_id - 1 from Tasks t2 inner join subtasks t1 on t1.task_id = t2.task_id where subtask_id > 1 ) select subtasks.task_id, subtasks.subtask_id from subtasks left join Executed on subtasks.task_id = Executed.task_id and subtasks.subtask_id = Executed.subtask_id where Executed.task_id is null order by subtasks.task_id, subtasks.subtask_id
with recursive t as ( select task_id, subtasks_count from tasks union all select task_id, subtasks_count -1 from t where subtasks_count>1 ) select t.task_id,t.subtasks_count as subtask_id from t left join Executed on t.subtasks_count = Executed.subtask_id and t.task_id = Executed.task_id where Executed.task_id is null
with recursive t as (select *, 1 as 'subtask_id' from Tasks UNION ALL select task_id, subtasks_count, subtask_id + 1 as 'subtask_id' from t where subtask_id < subtasks_count) select task_id, subtask_id from t where (task_id, subtask_id) not in (select task_id, subtask_id from Executed)
with recursive t as (select 1 as cnt union all select cnt+1 from t where cnt+1 <= (select max(subtasks_count) from Tasks)) select t1.task_id, t.cnt as subtask_id from Tasks t1 join t on t1.subtasks_count >= t.cnt where (t1.task_id, t.cnt) not in (select * from Executed)
with recursive t as (select task_id, 1 subtask_id, subtasks_count from tasks union all select task_id, subtask_id+1, subtasks_count from t where subtask_id < subtasks_count) select task_id, subtask_id from t where (task_id, subtask_id) not in (select * from executed)
with recursive t as (select task_id, 1 subtask_id, subtasks_count from tasks union all select task_id, subtask_id+1, subtasks_count from t where subtask_id< subtasks_count ) select task_id, subtask_id from t where (task_id, subtask_id) not in (select * from executed)
with recursive t as (select task_id, subtasks_count as subtask_id from tasks union all select task_id, subtask_id-1 from t where subtask_id>1) select task_id, subtask_id from t where (task_id, subtask_id) not in (select * from executed)
with recursive t(n) as ( select 1 n union all select n + 1 from t where n < (select max(subtasks_count) from Tasks) ), cte as ( select *, row_number() over(partition by task_id) rk from Tasks, t ) select cte.task_id,rk as subtask_id from cte left join Executed e on cte.task_id = e.task_id and rk = subtask_id where rk <= subtasks_count and subtask_id is null
with recursive t(task_id,subtask_id) AS (SELECT task_id,1 FROM tasks UNION ALL SELECT k.task_id,k.subtask_id+1 FROM t k INNER JOIN tasks t1 ON k.task_id=t1.task_id WHERE k.subtask_id<t1.subtasks_count ) SELECT l.task_id,l.subtask_id FROM t l LEFT JOIN Executed e ON l.task_id=e.task_id AND l.subtask_id=e.subtask_id WHERE e.subtask_id IS NULL ORDER BY l.task_id,l.subtask_id
with recursive t1 as ( select task_id, 1 as occurance, subtasks_count from Tasks union all select task_id, 1+occurance, subtasks_count from t1 where occurance < subtasks_count ) select t1.task_id, t1.occurance as subtask_id from t1 left join Executed t2 on t1.task_id = t2.task_id and t1.occurance = t2.subtask_id where t2.subtask_id is null
with recursive t1 as ( select task_id, subtasks_count as subtask_id from Tasks union all select task_id, subtask_id-1 as subtask_id from t1 where subtask_id >1) select distinct t1.task_id, t1.subtask_id from t1 left join Executed t2 on t1.task_id = t2.task_id AND t1.subtask_id =t2.subtask_id where t2.subtask_id is null order by 1,2
with recursive t1 as (select task_id, 1 as subtask_id, subtasks_count from tasks union all select task_id, subtask_id + 1, subtasks_count from t1 where subtask_id < subtasks_count) select task_id, subtask_id from t1 where (task_id, subtask_id) not in (select * from executed)
with recursive t1 as( select task_id, 1 as subtask_id,subtasks_count from tasks union all select task_id, subtask_id+1 as subtask_id,subtasks_count from t1 where subtask_id<subtasks_count ) select t1.task_id,t1.subtask_id from t1 left join executed t on t1.task_id = t.task_id and t1.subtask_id = t.subtask_id where t.subtask_id is null
with recursive t1(n) as ( SELECT 1 UNION ALL SELECT n+1 FROM t1 WHERE n<25 ) SELECT tsk.task_id, n subtask_id FROM Tasks tsk INNER JOIN t1 ON t1.n <= tsk.subtasks_count LEFT OUTER JOIN Executed ex ON tsk.task_id = ex.task_id and t1.n = ex.subtask_id WHERE ex.task_id IS NULL
with recursive t1(subtask_id) as ( select 1 union all select subtask_id + 1 from t1 where subtask_id < 20 ), t2 as ( select ta.task_id, t1.subtask_id from tasks ta cross join t1 where t1.subtask_id <= ta.subtasks_count ) select t2.* from t2 left join executed ex on t2.task_id = ex.task_id and t2.subtask_id = ex.subtask_id where ex.subtask_id is null
with recursive tab_task as ( select 1 as task_id union select task_id + 1 from tab_task where task_id < (select max(task_id) from tasks) ), tab_subtask as ( select 1 as subtasks_count union select subtasks_count + 1 from tab_subtask where subtasks_count < (select max(subtasks_count) from tasks) ), tab_tasks as ( select * from tab_task join tab_subtask ), full_tab as ( select tab_tasks.task_id, tab_tasks.subtasks_count from tab_tasks join tasks on tab_tasks.task_id = tasks.task_id and tab_tasks.subtasks_count <= tasks.subtasks_count ) select full_tab.task_id as task_id, full_tab.subtasks_count as subtask_id from full_tab where concat(task_id, '-', subtasks_count) not in ( select concat(task_id, '-', subtask_id) from executed ) order by task_id, subtask_id
with recursive task_all as ( select task_id,1 subtask_id ,subtasks_count from tasks union all select task_id, subtask_id+1, subtasks_count from task_all where subtask_id<subtasks_count ) select t.task_id, t.subtask_id from task_all t left outer join executed e on e.task_id=t.task_id and e.subtask_id=t.subtask_id where e.task_id is null
with recursive task_ids(task_id,subtask_id) as ( select task_id,1 from Tasks union all select ti.task_id,subtask_id+1 from task_ids ti join Tasks ta on ti.task_id = ta.task_id where ti.subtask_id < ta.subtasks_count ) select ti.task_id as task_id ,ti.subtask_id as subtask_id from task_ids ti left join Executed exe on exe.task_id = ti.task_id and ti.subtask_id = exe.subtask_id where exe.subtask_id is null
with recursive tasktable as( select task_id, 1 as task_subid from tasks union all select task_id, task_subid+1 as task_subid from tasktable as t1 where t1.task_subid<( select subtasks_count from tasks as t2 where t1.task_id=t2.task_id ) ) select tall.task_id, tall.task_subid as subtask_id from tasktable as tall left join Executed as tdon on tall.task_id=tdon.task_id and tall.task_subid=tdon.subtask_id where tdon.subtask_id is null
with recursive tb as (select 1 cnt union all select cnt + 1 from tb where cnt < (select max(subtasks_count) from tasks)) select t1.task_id, t2.cnt subtask_id from Tasks t1 left join tb t2 on t1.subtasks_count >= t2.cnt where (t1.task_id, t2.cnt) not in (select * from Executed)
with recursive tbl as( select task_id , 1 as subtask_id, subtasks_count from Tasks UNION ALL select task_id , subtask_id +1, subtasks_count from tbl where tbl.subtask_id < tbl.subtasks_count ) select tbl.task_id, tbl.subtask_id from tbl left join Executed on tbl.task_id = Executed.task_id and tbl.subtask_id = Executed.subtask_id where Executed.subtask_id is null
with recursive temp as ( select task_id, subtasks_count, 1 as subtask_id from tasks union all select task_id, subtasks_count, subtask_id + 1 as subtask_id from temp where subtask_id < subtasks_count) select t.task_id, t.subtask_id from temp t left join executed e on t.task_id = e.task_id and t.subtask_id = e.subtask_id where e.subtask_id is null
with recursive temp as (select 1 as subtask_id union select subtask_id+1 as subtask_id from temp where subtask_id<(select max(subtasks_count) from tasks) ) select a.task_id, b.subtask_id from tasks a cross join temp b left join executed c on a.task_id=c.task_id and b.subtask_id=c.subtask_id where c.subtask_id is null and b.subtask_id<=a.subtasks_count
with recursive temp as( select task_id, 1 as subtask_id, subtasks_count from Tasks union all select task_id, subtask_id+1 as subtask_id,subtasks_count from temp where subtask_id < subtasks_count) select temp.task_id,temp.subtask_id from temp left join Executed on temp.task_id = Executed.task_id and temp.subtask_id = Executed.subtask_id where Executed.task_id is NULL
with recursive temp1 as ( select 1 as st_set union all select st_set+1 from temp1 where st_set < 20 ), temp2 as ( select t.task_id, t1.st_set from Tasks t join temp1 t1 where t.subtasks_count >= t1.st_set ) select t2.task_id, t2.st_set as subtask_id from temp2 t2 left join Executed e on t2.task_id = e.task_id and t2.st_set = e.subtask_id where e.subtask_id is null
with recursive temp1 as ( select task_id, subtasks_count, 1 as subtask_id from Tasks union all select task_id, subtasks_count,subtask_id +1 from temp1 where subtask_id < subtasks_count ) select a.task_id, a.subtask_id from temp1 as a where (a.task_id, a.subtask_id) not in (select task_id, subtask_id from Executed)
with recursive temp1 as( select task_id,1 as subtask_id,subtasks_count from tasks union all select task_id,subtask_id +1 as subtask_id, subtasks_count from temp1 where subtask_id < subtasks_count ) select temp1.task_id, temp1.subtask_id from temp1 left join executed e on temp1.task_id = e.task_id and temp1.subtask_id = e.subtask_id where e.subtask_id is null
with recursive tmp (id) as (select 1 union all select id + 1 from tmp where id < (select max(subtasks_count) from tasks)) select task_id, id as subtask_id from tasks a, tmp b where id <= subtasks_count and id not in (select subtask_id from Executed where task_id = a.task_id)
with recursive tmp as ( select 1 as subtask_id union all select subtask_id+1 from tmp where subtask_id+1 <= 20 ) select t.task_id, tmp.subtask_id from tasks t left join tmp on t.subtasks_count >= tmp.subtask_id left join executed e on t.task_id = e.task_id and tmp.subtask_id = e.subtask_id where e.subtask_id is null
with recursive tmp as ( select task_id, 1 as subtask_id from tasks union all select tmp.task_id, subtask_id+1 from tmp join tasks on tmp.task_id = tasks.task_id where subtask_id+1 <= subtasks_count ) select tmp.task_id, tmp.subtask_id from tmp left join executed e on tmp.task_id = e.task_id and tmp.subtask_id = e.subtask_id where e.subtask_id is null
with recursive tmp as ( select task_id, subtasks_count, 1 as subtask_id from Tasks union all select task_id, subtasks_count, subtask_id + 1 as subtask_id from tmp where subtask_id < subtasks_count ) select t.task_id, t.subtask_id from tmp t left join Executed e on t.task_id = e.task_id and t.subtask_id = e.subtask_id where e.subtask_id is null
with recursive tmp as (select task_id, subtasks_count, 1 as subtask_id from tasks union all select task_id, subtasks_count, subtask_id + 1 as subtask_id from tmp where subtask_id < subtasks_count ) select a.task_id, a.subtask_id from tmp a left join Executed b on a.task_id=b.task_id and a.subtask_id=b.subtask_id where b.task_id is null and b.subtask_id is null order by 1,2
with recursive tmp as (select task_id, subtasks_count, 1 as subtask_id from tasks union all select task_id, subtasks_count, subtask_id + 1 as subtask_id from tmp where subtask_id<subtasks_count ) select a.task_id, a.subtask_id from tmp a left join executed b on a.task_id=b.task_id and a.subtask_id=b.subtask_id where b.task_id is null and b.subtask_id is null order by 1,2
with recursive tmp as( select *, 1 as subtasks from tasks union select task_id, subtasks_count, subtasks + 1 from tmp where subtasks < subtasks_count ) select tmp.task_id, tmp.subtasks as subtask_id from tmp left join executed e on tmp.task_id = e.task_id and tmp.subtasks = e.subtask_id where e.subtask_id is null
with recursive tmp as( select 1 as value union select value + 1 from tmp where value < (select max(subtasks_count) from tasks) ), tmp2 as( select task_id, value as subtasks from tasks join tmp on subtasks_count >= value ) select task_id, subtasks as subtask_id from tmp2 t where subtasks not in ( select subtask_id from executed where task_id = t.task_id )
with recursive tsk as( select task_id, 1 as r,subtasks_count from tasks union all select task_id, r+1,subtasks_count from tsk where r<subtasks_count ) select t.task_id,t.r as subtask_id from tsk t left join Executed e on t.task_id = e.task_id and t.r = e.subtask_id where e.subtask_id is null
with t as ( with recursive months as ( select 1 as month union all select month+1 from months where month < (select max(subtasks_count) mx from Tasks)) select month as sid from months ) select tk.task_id, sid as subtask_id from tasks tk join t on subtasks_count >= t.sid left join Executed e on tk.task_id = e.task_id and t.sid = e.subtask_id where e.subtask_id is null
with temp as( select 1 as num from Tasks union select 2 as num from Tasks union select 3 as num from Tasks union select 4 as num from Tasks union select 5 as num from Tasks union select 6 as num from Tasks union select 7 as num from Tasks union select 8 as num from Tasks union select 9 as num from Tasks union select 10 as num from Tasks union select 11 as num from Tasks union select 12 as num from Tasks union select 13 as num from Tasks union select 14 as num from Tasks union select 15 as num from Tasks union select 16 as num from Tasks union select 17 as num from Tasks union select 18 as num from Tasks union select 19 as num from Tasks union select 20 as num from Tasks ) select distinct Tasks.task_id, temp.num as subtask_id from Tasks left join temp on Tasks.subtasks_count>=temp.num left join Executed E on Tasks.task_id = E.task_id and temp.num = E.subtask_id where (E.task_id is not null and E.subtask_id is null) or E.task_id is null
