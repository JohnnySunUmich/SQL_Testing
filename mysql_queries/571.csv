SELECT AVG(D.Number) AS median FROM ( SELECT c.Number, c.cum1, c.cum, CASE WHEN (c.tot%2) <> 0 THEN (c.tot+1)/2 ELSE (c.tot)/2 END as fif1, CASE WHEN (c.tot%2) = 0 THEN ((c.tot)/2 +1) ELSE (c.tot+1)/2 END as fif2 FROM ( SELECT b.Number, b.Frequency, LAG(b.cum,1,0) OVER(ORDER BY b.cum asc) as cum1, b.cum, (select sum(Frequency) from Numbers) as tot FROM ( SELECT A.Number, A.Frequency, SUM(B.Frequency) as cum FROM Numbers A, Numbers B WHERE A.Number >= B.Number GROUP BY A.Number ORDER BY A.Number ) b ) c ) D WHERE ((D.fif1 > D.cum1 AND D.fif1 <= D.cum) OR (D.fif2 > D.cum1 AND D.fif2 <= D.cum))
SELECT AVG(NUMBER) median FROM (SELECT *, SUM(Frequency)OVER(ORDER BY Number) cumsum, (sum(frequency) over())/2 median_num from Numbers )temp where cumsum-Frequency <= median_num and cumsum >= median_num
SELECT AVG(Number) AS median FROM (SELECT * ,SUM(Frequency) OVER () AS ct ,SUM(Frequency) OVER (ORDER BY Number) AS freq FROM Numbers) a WHERE ct/2 BETWEEN freq - Frequency AND freq
SELECT AVG(Number) AS median FROM (SELECT *,SUM(Frequency) OVER(ORDER BY Number) AS rt,SUM(Frequency) OVER() AS m FROM Numbers) a WHERE m/2 BETWEEN rt-Frequency AND rt
SELECT AVG(Number) as median FROM ( SELECT Number, Frequency, SUM(Frequency) OVER(ORDER BY Number ASC) AS sum1, SUM(Frequency) OVER(ORDER BY Number DESC) AS sum2 FROM Numbers ) as sub WHERE Frequency >= abs(sum1 - sum2)
SELECT AVG(Number) as median FROM( SELECT Number, Frequency, (SUM(Frequency) OVER (ORDER BY Number))/(SUM(Frequency) OVER ()) as p1, SUM(Frequency) OVER (ORDER BY Number DESC) /(SUM(Frequency) OVER ()) as p2 FROM Numbers ORDER BY Number ) temp WHERE p1 = 0.5 OR p2 = 0.5 OR p1 > 0.5 AND p1 <= p2
SELECT AVG(Number) median FROM (SELECT *, (Lastnumber - (Frequency - 1)) Firstnumber FROM (SELECT a.Number, a.Frequency, SUM(b.Frequency) Lastnumber FROM Numbers a, Numbers b WHERE a.Number >= b.Number GROUP BY a.Number, a.Frequency ORDER BY a.Number) t1, (SELECT SUM(Frequency) AS totalcount FROM Numbers) t2) t3 WHERE (Firstnumber <= FLOOR((totalcount+1)/2) and Lastnumber >= CEILING((totalcount+1)/2)) or Lastnumber = FLOOR((totalcount+1)/2) or Firstnumber = CEILING((totalcount+1)/2)
SELECT AVG(Number) median FROM Numbers n WHERE Frequency >= ABS((SELECT SUM(Frequency) FROM NUMBERS WHERE Number <= n.Number) - (SELECT SUM(FREQUENCY) FROM NUMBERS WHERE Number >= n.Number))
SELECT AVG(a.Number) AS median FROM Numbers a WHERE a.Frequency >= ABS( (SELECT SUM(Frequency) FROM Numbers WHERE Number>=a.Number) - ( SELECT SUM(Frequency) FROM Numbers WHERE Number<=a.Number) )
SELECT AVG(n.Number) AS median FROM Numbers AS n WHERE n.Frequency >= ABS( (SELECT sum(Frequency) From Numbers WHERE Number <= n.Number) - (SELECT sum(Frequency) From Numbers WHERE Number >= n.Number) )
SELECT AVG(n.Number) AS median FROM Numbers n WHERE n.Frequency >= ABS( (SELECT SUM(Frequency) FROM Numbers WHERE Number <= n.Number) - (SELECT SUM(Frequency) FROM Numbers WHERE Number >= n.Number) )
SELECT AVG(n.Number) AS median FROM Numbers n WHERE n.Frequency >= ABS((SELECT SUM(Frequency) FROM Numbers WHERE Number <= n.Number) - (SELECT SUM(Frequency) FROM Numbers WHERE Number >= n.Number))
SELECT AVG(n.Number) AS median FROM Numbers n WHERE n.Frequency >= ABS((SELECT SUM(Frequency) FROM Numbers WHERE Number >= n.Number)-(SELECT SUM(Frequency) FROM Numbers WHERE Number <= n.Number))
SELECT AVG(n.Number) median FROM Numbers n WHERE n.Frequency >= abs((SELECT SUM(Frequency) FROM Numbers WHERE Number<=n.Number) - (SELECT SUM(Frequency) FROM Numbers WHERE Number>=n.Number))
SELECT AVG(n1.Number) AS median FROM Numbers n1 WHERE Frequency >= ABS( (SELECT SUM(Frequency) FROM Numbers n2 WHERE n2.Number <= n1.Number)- (SELECT SUM(Frequency) FROM Numbers n3 WHERE n3.Number >= n1.Number) )
SELECT AVG(n1.Number) as median FROM Numbers n1 WHERE n1.Frequency >= ABS((SELECT SUM(n2.Frequency) FROM Numbers n2 WHERE n2.Number <= n1.Number) - (SELECT SUM(n3.Frequency) FROM Numbers n3 WHERE n3.Number >= n1.Number))
SELECT AVG(number) AS median FROM numbers AS n WHERE n.frequency >= ABS((SELECT SUM(frequency) FROM numbers WHERE n.number <= numbers.number) - (SELECT SUM(frequency) FROM numbers WHERE n.number >= numbers.number))
SELECT AVG(t1.Number) AS median FROM ( SELECT n1.Number ,n1.Frequency ,SUM(n2.Frequency) AS left_total FROM Numbers n1, Numbers n2 WHERE n1.Number >= n2.Number GROUP BY n1.Number, n1.Frequency ) t1 INNER JOIN ( SELECT n1.Number ,n1.Frequency ,SUM(n2.Frequency) AS right_total FROM Numbers n1, Numbers n2 WHERE n1.Number <= n2.Number GROUP BY n1.Number, n1.Frequency ) t2 ON t1.Number = t2.Number WHERE t1.Frequency >= ABS(t1.left_total - t2.right_total)
SELECT CASE WHEN running_total>total/2 and running_total-frequency<total/2 then Number WHEN running_total = total/2 THEN (Number + Number + 1)/2 else NULL end as median From ( select number, frequency, sum(Frequency) OVER(order by Number) as running_total , sum(Frequency) OVER() as total FROM Numbers )base HAVING median is NOT NULL
SELECT avg(Number) AS median FROM (SELECT Number, Frequency, SUM(Frequency) OVER (ORDER BY Number) AS cumulative_num, SUM(Frequency) OVER () AS total_num FROM Numbers) sub WHERE total_num / 2.0 BETWEEN cumulative_num - Frequency AND cumulative_num
SELECT avg(n.Number) AS median FROM Numbers n WHERE n.Frequency >= abs((SELECT sum(Frequency) FROM Numbers WHERE Number <= n.Number) - (SELECT sum(Frequency) FROM Numbers WHERE Number >= n.Number))
SELECT avg(number) as median FROM Numbers n WHERE Frequency >= abs((SELECT SUM(Frequency) FROM Numbers where Number<=n.Number) -(SELECT SUM(Frequency) FROM Numbers where Number>=n.Number))
SELECT avg(number) as median FROM numbers n WHERE frequency >= abs((SELECT sum(frequency) FROM numbers WHERE number <= n.number) - (SELECT sum(frequency) FROM numbers WHERE number>=n.number))
SELECT avg(number) as median FROm( select number, frequency, sum(frequency) OVER(ORDER BY number) as cumsum, SUM(frequency) over()/2.0 as medpos FROM numbers )a WHERE medpos between cumsum-frequency and cumsum
Select (SQ4.num+SQ5.num)/2 as median from ( Select min(SQ3.Number) as num from (Select SQ2.Number, SQ2.RN, SQ2.running_total, SQ2.pos1, SQ2.pos2, (Case when running_total>=pos1 then 1 else 0 end) flag1, (Case when running_total>=pos2 then 1 else 0 end) flag2 from ( Select N1.Number, row_number() over (order by N1.Number) as RN, sum(N1.frequency) over (order by N1.Number) as running_total, N2.total, N2.pos1, N2.pos2 from Numbers N1, ( Select Sum(frequency) as total, (case when sum(frequency)%2=1 then (Sum(frequency)+1)/2 when sum(frequency)%2=0 then (Sum(frequency))/2 end) as pos1, (case when sum(frequency)%2=1 then (Sum(frequency)+1)/2 when sum(frequency)%2=0 then (Sum(frequency)+2)/2 end) as pos2 from Numbers ) N2 ) SQ2 )SQ3 where flag1=1 )SQ4, ( Select min(SQ3.Number) as num from (Select SQ2.Number, SQ2.RN, SQ2.running_total, SQ2.pos1, SQ2.pos2, (Case when running_total>=pos1 then 1 else 0 end) flag1, (Case when running_total>=pos2 then 1 else 0 end) flag2 from ( Select N1.Number, row_number() over (order by N1.Number) as RN, sum(N1.frequency) over (order by N1.Number) as running_total, N2.total, N2.pos1, N2.pos2 from Numbers N1, ( Select Sum(frequency) as total, (case when sum(frequency)%2=1 then (Sum(frequency)+1)/2 when sum(frequency)%2=0 then (Sum(frequency))/2 end) as pos1, (case when sum(frequency)%2=1 then (Sum(frequency)+1)/2 when sum(frequency)%2=0 then (Sum(frequency)+2)/2 end) as pos2 from Numbers ) N2 ) SQ2 )SQ3 where flag2=1 )SQ5
Select AVG(n.Number) as median From Numbers n where ((select IFNULL(sum(Frequency),0) From Numbers where Number<n.Number) <= (Select SUM(Frequency)/2 From Numbers)) and ((Select IFNULL(sum(Frequency),0) From Numbers where Number>n.Number) <= (Select SUM(Frequency)/2 From Numbers))
Select Avg(Number*1.00) as Median from ( Select Number, sum(Frequency) over(order by Number) - Frequency + 1 as StartIndex, sum(Frequency) over(order by Number) as EndIndex, Sum(Frequency) over() TotalCount from Numbers ) A where (TotalCount+1)/2 between StartIndex and EndIndex or ( TotalCount%2 = 0 and (((TotalCount/2.00) + 1 between StartIndex and EndIndex) OR ((TotalCount/2.00) - 1 between StartIndex and EndIndex)))
Select avg(Number) as median From (Select Number, sum(Frequency)over(Order by Number) as "asc_sum", sum(Frequency)over(Order by Number desc) as "desc_sum" From Numbers) t Where asc_sum>= (Select sum(Frequency) From Numbers)/2 and desc_sum>=(Select sum(Frequency) From Numbers)/2
WITH CTE AS ( SELECT Number, Frequency, SUM(Frequency) OVER(ORDER BY Number) AS total FROM Numbers ) SELECT CASE WHEN MAX(total)%2 = 0 THEN ((SELECT Number FROM CTE WHERE total >= (SELECT MAX(total)/2 FROM CTE) ORDER BY total LIMIT 1) + (SELECT Number FROM CTE WHERE total >= (SELECT MAX(total)/2+1 FROM CTE) ORDER BY total LIMIT 1))/2 ELSE (SELECT Number FROM CTE WHERE total >= (SELECT (MAX(total)+1) / 2 FROM CTE) ORDER BY total LIMIT 1) END AS median FROM CTE
WITH CUMU AS(SELECT NUMBER ,FREQUENCY ,SUM(FREQUENCY) OVER(ORDER BY NUMBER) CUM_FREQ FROM NUMBERS GROUP BY 1,2 ) , MID_POINT AS ( SELECT SUM(FREQUENCY) SUM_FREQ ,FLOOR(SUM(FREQUENCY)/2) FLR_MID ,CEIL(SUM(FREQUENCY)/2) CEIL_MID FROM NUMBERS ) , FLR_NUM AS ( SELECT NUMBER,ROW_NUMBER() OVER( ORDER BY FLR_DIFF) FLR_DIFF_RNK FROM ( SELECT C.NUMBER ,(C.CUM_FREQ - MP.FLR_MID) FLR_DIFF FROM CUMU C JOIN MID_POINT MP ON 1=1 WHERE C.CUM_FREQ >= MP.FLR_MID AND MP.FLR_MID = MP.CEIL_MID )T ) ,CEIL_NUM AS ( SELECT NUMBER,ROW_NUMBER() OVER(ORDER BY CEIL_DIFF) CEIL_DIFF_RNK FROM( SELECT C.NUMBER ,C.CUM_FREQ - (CASE WHEN MP.CEIL_MID = MP.FLR_MID THEN MP.FLR_MID+1 ELSE MP.CEIL_MID END) CEIL_DIFF FROM CUMU C JOIN MID_POINT MP ON 1=1 WHERE C.CUM_FREQ >= (CASE WHEN MP.CEIL_MID = MP.FLR_MID THEN MP.FLR_MID+1 ELSE MP.CEIL_MID END) )T ) SELECT CASE WHEN FN.NUMBER IS NOT NULL THEN ROUND((CN.NUMBER+FN.NUMBER)/2,4) ELSE CN.NUMBER END AS median FROM CEIL_NUM CN LEFT JOIN FLR_NUM FN ON 1=1 AND FN.FLR_DIFF_RNK=1 WHERE CN.CEIL_DIFF_RNK=1
WITH RECURSIVE AllNumbers AS (SELECT Number ,Frequency FROM Numbers UNION ALL SELECT Number ,Frequency - 1 AS Frequency FROM AllNumbers WHERE Frequency > 1), Temp as (SELECT ROW_NUMBER() OVER (ORDER BY Number ASC) AS Rnk ,Number ,(SELECT SUM(Frequency) FROM Numbers) AS Total FROM AllNumbers) SELECT AVG(Number) AS median FROM Temp WHERE Rnk IN (((Total+1)/2),Total/2,Total/2+1)
WITH RECURSIVE AllNumbers AS (SELECT Number ,Frequency FROM Numbers UNION ALL SELECT Number ,Frequency - 1 AS Frequency FROM AllNumbers WHERE Frequency > 1), Temp as (SELECT ROW_NUMBER() OVER (ORDER BY Number ASC) AS Rnk ,Number ,(SELECT SUM(Frequency) FROM Numbers) AS Total FROM AllNumbers) SELECT AVG(Number) AS median FROM Temp WHERE Rnk IN (((Total/2)+0.5),Total/2,Total/2+1)
WITH RECURSIVE AllNums AS (SELECT Number,Frequency FROM Numbers UNION ALL SELECT Number,Frequency - 1 AS Frequency FROM AllNums WHERE Frequency > 1), OrderedList AS (SELECT Number ,ROW_NUMBER() OVER(ORDER BY Number ASC) AS Rn ,(SELECT SUM(Frequency) FROM Numbers) AS Counter FROM AllNums) SELECT AVG(Number) AS median FROM OrderedList WHERE Rn IN ((counter+1)/2, counter/2, (counter/2)+1)
WITH RECURSIVE NUM_LIST AS ( SELECT NUMBER , 1 AS DUMMY FROM NUMBERS UNION ALL SELECT N1.NUMBER , DUMMY + 1 FROM NUM_LIST N1, NUMBERS N2 WHERE N1.DUMMY < N2.FREQUENCY AND N1.NUMBER = N2.NUMBER ), ORDERED_LIST AS (SELECT NUMBER, ROW_NUMBER() OVER ( ORDER BY NUMBER) as RN, COUNT(*) OVER () AS TOT FROM NUM_LIST ) SELECT AVG(NUMBER) AS Median FROM ORDERED_LIST WHERE (TOT % 2 = 0 AND (TOT/2 = RN OR FLOOR(TOT/2) + 1 = RN )) OR (TOT % 2 = 1 AND FLOOR(TOT/2) + 1 = RN )
WITH RECURSIVE all_nums1 AS ( SELECT number, frequency, 1 AS cnt FROM numbers UNION ALL SELECT number, frequency, 1 + cnt AS cnt FROM all_nums1 WHERE cnt<frequency ), all_nums2 AS ( SELECT number, ROW_NUMBER() OVER(ORDER BY number) row_num FROM all_nums1 ) SELECT AVG(number) median FROM all_nums2 WHERE row_num BETWEEN (SELECT COUNT(*) FROM all_nums2) / 2 AND (SELECT COUNT(*) FROM all_nums2)/2+1
WITH RECURSIVE cte AS ( SELECT Number, 1 AS lvl, Frequency FROM Numbers UNION ALL SELECT Number, lvl+1, Frequency FROM cte WHERE lvl < Frequency ), temp AS ( SELECT Number, ROW_NUMBER() OVER (ORDER BY Number) AS row_count, COUNT(*) OVER () AS tot FROM cte ) SELECT ROUND(AVG(Number),4) AS median FROM temp WHERE row_count BETWEEN tot/2 AND tot/2 + 1
WITH RECURSIVE table1 AS( SELECT Number, COUNT(Number) AS cnt, Frequency FROM Numbers GROUP BY Number ), cte AS( SELECT Number, cnt, Frequency FROM table1 UNION ALL SELECT Number, cnt+1, Frequency FROM cte WHERE cnt < Frequency ), table2 AS( SELECT Number, Frequency, ROW_NUMBER()OVER(ORDER BY NUMBER) AS rn FROM cte ORDER BY Number ) SELECT (CASE WHEN MOD(SUM(Frequency)/2,2)=0 THEN SUM(Number)/2 ELSE Number END) AS median FROM table2 WHERE rn BETWEEN (SELECT SUM(FREQUENCY)/2 FROM Numbers) AND (SELECT SUM(FREQUENCY)/2 +1 FROM Numbers)
WITH T1 As ( select number, frequency, sum(frequency) over (order by number rows unbounded preceding) as freq_total from numbers ), T2 AS ( select SUM(frequency) as total from numbers ), T3 As ( select num1, num2, num3 from (select min(a.number) as num1 from T1 a, T2 b where a.freq_total >= b.total/2) t1, (select min(a.number) as num2 from T1 a, T2 b where a.freq_total >= (b.total+1)/2) t2, (select min(a.number) as num3 from T1 a, T2 b where a.freq_total >= (b.total/2+1)) t3 ) select case when (select total from T2)%2 = 1 then num2 else 1/2*(num1+num2) end as median from T3
WITH TMP AS ( SELECT Number , Frequency , SUM(Frequency) OVER(ORDER BY Number) AS FREQ , (SUM(Frequency) OVER())/2 AS MED FROM Numbers ) SELECT AVG(Number) AS median FROM TMP WHERE MED BETWEEN (FREQ - Frequency) AND FREQ
WITH TotalNumbers AS ( SELECT SUM(Frequency) AS total_count FROM Numbers ), MedianIndex AS ( SELECT CEIL(total_count/2) AS first_index, IF(total_count % 2 = 0, CEIL(total_count/2) + 1, CEIL(total_count/2) ) AS second_index FROM TotalNumbers ), NumbersWithStartIndex AS ( SELECT N1.Number, N1.Frequency, IFNULL(SUM(N2.Frequency),0) + 1 AS Start_Position, IFNULL(SUM(N2.Frequency),0) + N1.Frequency AS End_Position FROM Numbers N1 LEFT OUTER JOIN Numbers N2 ON N1.Number > N2.Number GROUP BY 1,2 ORDER BY 1 ), NumbersWithFirstIndex AS ( SELECT N.Number AS number FROM NumbersWithStartIndex N INNER JOIN MedianIndex I ON I.first_index BETWEEN N.Start_Position AND N.End_Position ), NumbersWithSecondIndex AS ( SELECT N.Number AS number FROM NumbersWithStartIndex N INNER JOIN MedianIndex I ON I.second_index BETWEEN N.Start_Position AND N.End_Position ), NumbersWithIndex AS ( SELECT ROUND((NumbersWithFirstIndex.Number + NumbersWithSecondIndex.Number)/2,2) AS median FROM NumbersWithFirstIndex JOIN NumbersWithSecondIndex ) SELECT * FROM NumbersWithIndex
WITH X AS(SELECT Number, Frequency, SUM(Frequency) OVER(ORDER BY Number) AS run_total, (SUM(Frequency) OVER())/2 AS med, LEAD(Number) OVER(ORDER BY Number) AS next_num FROM Numbers) SELECT ROUND((CASE WHEN med > (run_total - Frequency) AND med < run_total THEN Number WHEN med = run_total THEN (Number+next_num)/2 END),4) AS median FROM X WHERE (med > (run_total - Frequency) AND med < run_total) OR (med = run_total)
WITH a AS (SELECT Number, SUM(Frequency) OVER(ORDER BY Number) as c FROM Numbers) SELECT ((SELECT MIN(NUMBER) FROM a WHERE c>=CEILING((SELECT SUM(Frequency)/2 as m FROM Numbers))) + (SELECT MIN(NUMBER) FROM a WHERE c>=CEILING((SELECT (SUM(Frequency)+1)/2 as m FROM Numbers))))/2 as median
WITH candidates AS ( SELECT n1.Number FROM Numbers n1, Numbers n2 WHERE n1.Number <> n2.Number GROUP BY n1.Number, n1.Frequency HAVING n1.Frequency >= ABS(SUM(CASE WHEN n1.Number > n2.Number THEN n2.Frequency ELSE 0 END) - SUM(CASE WHEN n1.Number < n2.Number THEN n2.Frequency ELSE 0 END)) ) SELECT AVG(Number) AS median FROM candidates
WITH cte AS ( SELECT *, SUM(frequency) OVER (ORDER BY number) AS roll_sum FROM Numbers ORDER BY roll_sum ) SELECT ( (SELECT Number FROM cte WHERE roll_sum >= CEILING((SELECT MAX(roll_sum) FROM cte)/2) LIMIT 1) + (SELECT Number FROM cte WHERE roll_sum >= CEILING(((SELECT MAX(roll_sum) FROM cte) + 1) / 2) LIMIT 1 ) ) / 2 AS median
WITH cte AS (SELECT *, SUM(Frequency) OVER(ORDER BY Number) as cum_sum FROM Numbers) SELECT AVG(Number) AS median FROM cte, (SELECT SUM(Frequency) AS total FROM Numbers) AS t WHERE cum_sum >= 0.5*t.total AND cum_sum - Frequency <= 0.5*t.total
WITH cte AS (SELECT Number, Frequency, SUM(Frequency)OVER(ORDER BY Number) AS f, SUM(Frequency)over()/2 AS m FROM Numbers) SELECT AVG(Number) AS median FROM cte WHERE m BETWEEN (f-Frequency) AND f
WITH cte AS (SELECT floor((sum(frequency) + 1) / 2) AS m1 , FLOOR((SUM(frequency) + 2) / 2) AS m2 FROM numbers ) , cte2 AS (select number , SUM(frequency) OVER (ORDER BY number ROWS UNBOUNDED PRECEDING) AS presum FROM numbers ) , n1 AS ( SELECT number FROM cte2 WHERE presum >= (SELECT m1 FROM cte) LIMIT 1) , n2 AS ( SELECT number FROM cte2 WHERE presum >= (SELECT m2 FROM cte) LIMIT 1) SELECT AVG(number) AS median FROM (select * FROM n1 UNION SELECT * FROM n2) t
WITH cte as ( SELECT Number, Frequency, SUM(Frequency) Over(order by Number) as rolling_total, SUM(Frequency) Over() as total FROM Numbers), cte2 as ( SELECT Number, (CASE WHEN mod(total, 2) = 1 and (total+1)/2 BETWEEN (rolling_total - frequency + 1) AND rolling_total THEN 'T' WHEN mod(total,2) = 0 and (total)/2 BETWEEN (rolling_total - frequency +1) AND rolling_Total THEN 'T' WHEN mod(total,2) = 0 and (total/2)+1 BETWEEN (rolling_total - frequency +1 ) AND rolling_total THEN 'T' ELSE 'F' END) as 'if_median_or_not' FROM cte ) SELECT avg(number) as median FROM cte2 WHERE if_median_or_not = 'T'
WITH cte1 AS ( SELECT Number, Frequency, SUM(Frequency) OVER(ORDER BY Number ASC) AS freq_left, SUM(Frequency) OVER(ORDER BY Number DESC) AS freq_right FROM Numbers ) SELECT AVG(Number) AS median FROM cte1 WHERE ABS(freq_left - freq_right) <= Frequency
WITH cte1 AS ( SELECT Number, Frequency, SUM(Frequency) OVER(ORDER BY Number ASC) AS rank_asc, SUM(Frequency) OVER(ORDER BY Number DESC) AS rank_desc FROM Numbers ) SELECT AVG(Number) AS median FROM cte1 WHERE ABS(rank_asc - rank_desc) <= Frequency
WITH cte1 AS (SELECT DISTINCT CASE WHEN (SELECT SUM(Frequency) FROM Numbers)%2<>0 THEN ((SELECT SUM(Frequency) FROM Numbers)+1)/2 ELSE ((SELECT SUM(Frequency) FROM Numbers))/2 END AS t1, CASE WHEN (SELECT SUM(Frequency) FROM Numbers)%2<>0 THEN NULL ELSE ((SELECT SUM(Frequency) FROM Numbers)+2)/2 END AS t2 FROM Numbers) ,cte2 AS (SELECT *,SUM(Frequency) OVER(ORDER BY Number) - (SELECT t1 FROM cte1) as k1, SUM(Frequency) OVER(ORDER BY Number) - (SELECT t2 FROM cte1) as k2 FROM Numbers) ,cte3 AS (SELECT number FROM cte2 WHERE k1 IN (SELECT MIN(k1) FROM cte2 WHERE k1>=0)) ,cte4 AS (SELECT number FROM cte2 WHERE k2 IN (SELECT MIN(k2) FROM cte2 WHERE k2>=0)) ,cte5 AS (SELECT number as 'median' FROM cte3 UNION SELECT number as 'median' FROM cte4) SELECT AVG(median) as 'median' FROM cte5
WITH m_pos as ( SELECT CEILING((SUM(Frequency) + 1)/2) as m1, FLOOR((SUM(Frequency) + 1)/2) as m2 FROM Numbers ), cum_count as ( SELECT Number, SUM(Frequency) OVER (ORDER BY Number) as cum_ct FROM Numbers ), rnge as ( SELECT Number, IFNULL(LAG(cum_ct,1) OVER (),0) as lower, cum_ct as upper FROM cum_count ) SELECT avg(rnge.Number) as median FROM rnge, m_pos WHERE (m_pos.m1 > rnge.lower AND m_pos.m1 <= rnge.upper) OR (m_pos.m2 > rnge.lower AND m_pos.m2 <= rnge.upper)
WITH median_number as ( SELECT Number , Frequency , SUM(Frequency) OVER(ORDER BY NUmber ASC) cum_Freq , SUM(Frequency) OVER () total_count FROM Numbers as n ) SELECT AVG(NUmber) as median FROM median_number WHERE total_count/2 BETWEEN cum_Freq-Frequency AND cum_Freq
WITH median_pos as ( SELECT FLOOR((sum(frequency) + 1)/2) as med1, CEILING((sum(frequency) + 1)/2) as med2 FROM Numbers ), rnge as ( SELECT Number, sum(frequency) OVER (ORDER BY Number) as upper, sum(frequency) OVER (ORDER BY Number) - Frequency + 1 as lower FROM Numbers ) SELECT avg(Number) as median FROM median_pos p JOIN rnge r ON p.med1 between r.lower and r.upper OR p.med2 between r.lower and r.upper
WITH median_pos as ( SELECT FLOOR((sum(frequency) + 1)/2) as med1, CEILING((sum(frequency) + 1)/2) as med2 FROM Numbers ), rnge as ( SELECT Number, sum(frequency) OVER (ORDER BY Number) as upper, sum(frequency) OVER (ORDER BY Number) - Frequency + 1 as lower FROM Numbers ) SELECT avg(Number) as median FROM median_pos p, rnge r WHERE p.med1 between r.lower and r.upper OR p.med2 between r.lower and r.upper
WITH n1 AS ( SELECT MIN(Number) AS median FROM ( SELECT Number, SUM(Frequency) OVER(ORDER BY Number) AS r FROM Numbers ) t WHERE (SELECT FLOOR(SUM(Frequency) / 2) FROM Numbers) <= r ), n2 AS ( SELECT MIN(Number) AS median FROM ( SELECT Number, SUM(Frequency) OVER(ORDER BY Number) AS r FROM Numbers ) t WHERE (SELECT FLOOR(SUM(Frequency) / 2) + 1 FROM Numbers) <= r ), c AS ( SELECT MOD(SUM(Frequency), 2) AS cnt FROM Numbers ) SELECT CASE WHEN (SELECT * FROM c) = 1 THEN ROUND((SELECT * FROM n2), 4) ELSE ROUND(((SELECT * FROM n1) + (SELECT * FROM n2)) / 2, 4) END AS median
WITH r AS( SELECT *, SUM(Frequency)OVER(ORDER BY Number)AS running_total FROM Numbers ) , r2 AS( SELECT FLOOR((SUM(Frequency)+1)/2) AS pos FROM Numbers UNION SELECT CEILING((SUM(Frequency)+1)/2) AS pos FROM Numbers ) SELECT AVG(r3.number) AS median FROM( SELECT r2.pos, min(r.running_total),r.number FROM r JOIN r2 ON r.running_total >= r2.pos GROUP BY r2.pos ) r3
WITH recursive all_nums AS ( SELECT number, frequency FROM numbers UNION ALL SELECT number, frequency - 1 FROM all_nums WHERE frequency > 1 ), ranked AS ( SELECT number, ROW_NUMBER() OVER (ORDER BY number ASC, frequency ASC) as ra, ROW_NUMBER() OVER (ORDER BY number DESC, frequency DESC) as rd FROM all_nums ) SELECT ROUND(AVG(number), 4) AS median FROM ranked WHERE ra BETWEEN rd - 1 AND rd + 1
WITH recursive total_rows AS ( SELECT Number, Frequency from Numbers UNION ALL SELECT Number, Frequency-1 from total_rows WHERE Frequency > 1 ), max_count AS ( SELECT SUM(Frequency) as max_count FROM Numbers ), row_count AS ( SELECT Number, row_number() OVER (ORDER BY Number) as row_num FROM total_rows ORDER BY Number ), first_half AS ( SELECT Number FROM row_count CROSS JOIN max_count WHERE row_num = (max_count / 2) ), second_half AS ( SELECT Number FROM row_count CROSS JOIN max_count WHERE row_num = (max_count / 2 + 1) ) SELECT CASE WHEN max_count % 2 = 0 THEN (first_half.Number + second_half.Number) / 2.0 ELSE first_half.Number END as median FROM first_half CROSS JOIN second_half CROSS JOIN max_count
WITH s1 AS ( SELECT number, SUM(frequency) OVER (ORDER BY number ASC) AS acc_fre FROM numbers ), s2 AS ( SELECT FLOOR((SUM(frequency)+1)/2) AS fl, CEIL((SUM(frequency)+1)/2) AS ce FROM numbers ), n1 AS ( SELECT number FROM s1 WHERE acc_fre >= (SELECT fl FROM s2) LIMIT 1 ), n2 AS ( SELECT number FROM s1 WHERE acc_fre >= (SELECT ce FROM s2) LIMIT 1 ) SELECT AVG(number) AS median FROM ( SELECT number FROM n1 UNION ALL SELECT number FROM n2 ) t
WITH sorting AS ( SELECT *, SUM(Frequency) OVER (ORDER BY Number) AS running_total, (SUM(Frequency) OVER ())/2 AS median FROM Numbers ), discover AS ( SELECT CASE WHEN running_total > median AND (running_total - Frequency) < median THEN Number WHEN running_total = median THEN (Number + Number + 1)/2 ELSE Null END AS median FROM sorting ) SELECT median FROM discover WHERE median IS NOT Null
WITH t AS ( SELECT *, SUM(frequency) OVER(ORDER BY number ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) running_total, IF((SUM(frequency) OVER())%2=1, ((SUM(frequency) OVER())+1)/2, (SUM(frequency) OVER())/2) med_row1, IF((SUM(frequency) OVER())%2=1, null, (SUM(frequency) OVER())/2+1) med_row2 FROM numbers ) SELECT AVG(number) median FROM t WHERE CASE WHEN med_row2 IS NULL THEN med_row1 BETWEEN running_total - frequency + 1 AND running_total ELSE med_row1 BETWEEN running_total - frequency + 1 AND running_total OR med_row2 BETWEEN running_total - frequency + 1 AND running_total END
WITH t AS ( SELECT IF( SUM(Frequency)%2=0, 2, 1) AS num, IF( SUM(Frequency)%2=0, SUM(Frequency)/2, (SUM(Frequency)+1)/2) AS ind FROM Numbers) SELECT DISTINCT CASE WHEN cnt > 1 OR num = 1 THEN FIRST_VALUE(NUMBER) OVER(ORDER BY Number) ELSE AVG(Number) END AS median FROM ( SELECT Number, cm-ind+1 AS cnt FROM ( SELECT Number, SUM(Frequency) OVER (ORDER BY Number) AS cm FROM Numbers )tmp JOIN t WHERE t.ind <= cm LIMIT 2 )tmp JOIN t
WITH t AS ( SELECT Number, COALESCE(SUM(Frequency) OVER (ORDER BY Number ROWS BETWEEN UNBOUNDED PRECEDING and 1 PRECEDING), 0) + 1 AS RangeStart, SUM(Frequency) OVER (ORDER BY Number ROWS UNBOUNDED PRECEDING) AS RangeEnd, SUM(Frequency) OVER () AS Total FROM Numbers ) SELECT AVG(Number) AS median FROM t WHERE (CEIL(Total/2) BETWEEN RangeStart AND RangeEnd) OR (Total/2 + 1 BETWEEN RangeStart AND RangeEnd)
WITH t AS (SELECT number, frequency, SUM(frequency) OVER (ORDER BY number) position FROM (SELECT * FROM numbers ORDER BY number) sub), t1 AS (SELECT *, IFNULL(LAG(position) OVER (ORDER BY number), -1) pl FROM t), t2 AS (SELECT CASE WHEN SUM(frequency)%2 = 1 THEN (SUM(frequency)+1)/2 END AS odd, CASE WHEN SUM(frequency)%2 = 0 THEN SUM(frequency)/2 END AS even1, CASE WHEN SUM(frequency)%2 = 0 THEN SUM(frequency)/2+1 END AS even2 FROM t1), t3 AS (SELECT number FROM t1 WHERE ((SELECT even2 FROM t2) > pl AND (SELECT even2 FROM t2) <= position) UNION ALL SELECT number FROM t1 WHERE ((SELECT even1 FROM t2) > pl AND (SELECT even1 FROM t2) <= position) UNION ALL SELECT number FROM t1 WHERE ((SELECT odd FROM t2) > pl AND (SELECT odd FROM t2) <= position)) SELECT AVG(number) median FROM t3
WITH t1 AS ( SELECT FLOOR((SUM(Frequency)+1)/2) AS value1, FLOOR((SUM(Frequency)+2)/2)AS value2 FROM Numbers), t2 AS ( SELECT Number, SUM(Frequency)OVER(ORDER BY Number) AS roll_sum FROM Numbers), t3 AS ( SELECT MIN(Number) AS v1 FROM t1, t2 WHERE value1<=roll_sum), t4 AS ( SELECT MIN(Number) AS v2 FROM t1, t2 WHERE value2<=roll_sum) SELECT (v1+v2)/2 AS median FROM t3,t4
WITH table1 AS (SELECT *, SUM(Frequency) OVER (ORDER BY Number) AS running_total, SUM(Frequency) OVER ()/2 AS num FROM Numbers) SELECT AVG(Number) AS median FROM table1 WHERE num BETWEEN (running_total-Frequency) AND running_total
WITH temp AS (SELECT Number, Frequency, (SUM(Frequency) OVER(ORDER BY Number ASC))/(SUM(Frequency) OVER()) AS p1, (SUM(Frequency) OVER(ORDER BY Number DESC))/(SUM(Frequency) OVER()) AS p2 FROM Numbers ORDER BY Number) SELECT AVG(Number) AS median FROM temp WHERE p1>=0.5 AND p2>=0.5
WITH tmp AS (SELECT Number, Frequency, SUM(Frequency) OVER (ORDER BY Number ASC) rk1, SUM(Frequency) OVER (ORDER BY Number DESC) rk2 FROM Numbers) SELECT AVG(Number*1.0) AS median FROM tmp WHERE ABS(rk1-rk2)<=Frequency
WITH tmp AS( SELECT Number, Frequency, SUM(Frequency) OVER (ORDER BY Number ASC) rankup, SUM(Frequency) OVER (ORDER BY Number DESC) rankdown FROM Numbers ) SELECT AVG(CAST(Number AS FLOAT)) AS 'median' FROM tmp WHERE Frequency >= ABS(rankup-rankdown)
WITH tmp1 AS ( SELECT Number, SUM(Frequency) OVER (ORDER BY Number ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS 'rnk', (SELECT (CASE WHEN SUM(Frequency) % 2 = 0 THEN SUM(Frequency) / 2 ELSE (SUM(Frequency) + 1) / 2 END) FROM Numbers) as 'num1', (SELECT (CASE WHEN SUM(Frequency) % 2 = 0 THEN SUM(Frequency) / 2 + 1 ELSE (SUM(Frequency) + 1) / 2 END) FROM Numbers) as 'num2' FROM Numbers) SELECT( (SELECT Number FROM tmp1 WHERE (rnk >= num1) AND (rnk - num1) = (SELECT MIN(rnk - num1) FROM tmp1 WHERE (rnk >= num1))) + (SELECT Number FROM tmp1 WHERE (rnk >= num2) AND (rnk - num2) = (SELECT MIN(rnk - num2) FROM tmp1 WHERE (rnk >= num2)))) / 2 AS 'median'
With median_point as (Select (Case When sum(Frequency) % 2 = 1 Then (sum(Frequency)+1)/2 Else sum(Frequency)/2 End) as start_point, (Case When sum(Frequency) % 2 = 1 Then (sum(Frequency)+1)/2 Else sum(Frequency)/2+1 End) as end_point From Numbers), cumu as (Select a.Number, sum(b.Frequency) as Frequency From Numbers a, Numbers b Where a.Number >= b.Number Group By a.Number) Select ((Select min(Number) From cumu Where Frequency >= (Select start_point From median_point))+ (Select min(Number) From cumu Where Frequency >= (Select end_point From median_point)))/2 As median
With t as (SELECT b.Number, b.Frequency, (SELECT SUM(a.Frequency) from Numbers a where a.Number <=b.Number) As agg_freq FROM Numbers b group by b.Number), t1 as (SELECT MAX(agg_freq) as max_freq, MIN(agg_freq) as min_freq FROM t), t2 as (SELECt *, (CASE WHEN t.agg_freq = (select min_freq from t1) THEN 0 ELSE LAG(t.agg_freq, 1) OVER (ORDER BY t.agg_freq) END) as lag_freq from t) SELECT (CASE WHEN t1.max_freq%2=1 THEN (SELECT t2.Number from t2 WHERE ((t1.max_freq DIV 2)+1)>t2.lag_freq AND ((t1.max_freq DIV 2)+1) <= t2.agg_freq) ELSE (((SELECT t2.Number from t2 WHERE t2.lag_freq <(t1.max_freq DIV 2) AND t2.agg_freq >=(t1.max_freq DIV 2)) + (SELECT t2.Number from t2 WHERE t2.lag_freq <(t1.max_freq DIV 2)+1 AND t2.agg_freq >=(t1.max_freq DIV 2)+1))/2) END) as median from t1
With t as (SELECT b.Number, b.Frequency, (SELECT SUM(a.Frequency) from Numbers a where a.Number <=b.Number) As agg_freq FROM Numbers b group by b.Number), t1 as (SELECT MAX(agg_freq) as max_freq, MIN(agg_freq) as min_freq FROM t), t2 as (SELECt *, (CASE WHEN t.agg_freq = (select min_freq from t1) THEN 0 ELSE LAG(t.agg_freq, 1) OVER (ORDER BY t.agg_freq) END) as lag_freq from t) SELECT (CASE WHEN t1.max_freq%2=1 THEN (SELECT t2.Number from t2 WHERE ((t1.max_freq DIV 2)+1)>t2.lag_freq AND ((t1.max_freq DIV 2)+1) <= t2.agg_freq) ELSE (SELECT AVG(t2.Number) from t2 WHERE (t2.lag_freq <(t1.max_freq DIV 2) AND t2.agg_freq >=(t1.max_freq DIV 2)) OR (t2.lag_freq <(t1.max_freq DIV 2)+1 AND t2.agg_freq >=(t1.max_freq DIV 2)+1)) END) as median from t1
With table1 as ( Select nu.number, nu.frequency, sum(nu1.frequency) as end From numbers nu Join numbers nu1 on nu.number>= nu1.number Group by nu.number Order by nu.number) Select avg(number) as median From ( Select *, (end-frequency+1) as start, (select max(end) from table1) as new2 from table1) tmp where (new2/2 >= start and new2/2 <= end) or (new2/2 >=start-1 and new2/2 <=start)
select (X.Number + Y.number)/2 median from ( select X.* , rank() over ( order by case when cum_freq - md < 0 then cum_freq - md+ (md*3) else cum_freq - md end ) nr FROM (select *, sum(frequency) over (order by number) as cum_freq From Numbers ) X , (select (sum(frequency)-1)/2 md From Numbers) md ) X , ( select X.* , rank() over ( order by case when cum_freq - md < 0 then cum_freq - md+ (md*3) else cum_freq - md end ) nr FROM (select *, sum(frequency) over (order by number) as cum_freq From Numbers ) X , (select ((sum(frequency))/2 +1) md From Numbers) md ) Y where X.nr=1 and Y.nr=1
select avg(1.0*Number) as median from ( select *, sum(frequency) over (order by Number) as cum_sum , (sum(Frequency) over ())/2.0 as mid from Numbers ) temp where mid between cum_sum - frequency and cum_sum
select avg(Number) as median from (select *, sum(Frequency) over (order by Number) as cumulative from Numbers) as t1, (select sum(Frequency) as total from Numbers) as t2 where total/2.0 between cumulative - Frequency and cumulative
select avg(Number) as median from Numbers n where n.Frequency >= abs( (select sum(Frequency) from Numbers where Number<=n.Number) - (select sum(Frequency) from Numbers where Number>=n.Number) )
select avg(Number) as median from( select *, SUM(Frequency) OVER (ORDER BY Number) AS cum_sum, (SUM(Frequency) OVER ())/2.0 AS mid FROM Numbers) a where mid between cum_sum-Frequency and cum_sum
select avg(Number) as median from( select Number, Frequency, sum(Frequency) over(Order by Number asc) as c1, sum(Frequency) over(Order by Number desc) as c2, sum(Frequency) over() as cnt from Numbers )temp where c1>= cnt/2 and c2>= cnt/2
select avg(a.number) as median from numbers a where a.frequency >=abs((select sum(Frequency) from Numbers where Number<=a.Number) - (select sum(Frequency) from Numbers where Number>=a.Number))
select avg(b.number) as median from (select case (sum_freq mod 2) when 0 then floor((sum_freq + 1)/2) else ((sum_freq + 1)/2) end as lower, case (sum_freq mod 2) when 0 then floor((sum_freq + 1)/2)+1 else ((sum_freq + 1)/2) end as upper from (select sum(Frequency) as sum_freq from Numbers) f) a inner join (select Number, rolling_freq, ifnull(lag(rolling_freq,1) over (order by Number), 0) as lag1 from (select Number, sum(Frequency) over (order by Number) as rolling_freq from Numbers) t) b where (b.lag1 < a.lower and a.lower <= b.rolling_freq) or (b.lag1 < a.upper and a.upper <= b.rolling_freq)
select avg(b.number) as median from (select case (sum_freq mod 2) when 0 then floor((sum_freq + 1)/2) else ((sum_freq + 1)/2) end as lower, case (sum_freq mod 2) when 0 then floor((sum_freq + 1)/2)+1 else ((sum_freq + 1)/2) end as upper from (select sum(Frequency) as sum_freq from Numbers) f) a join (select Number, rolling_freq, ifnull(lag(rolling_freq,1) over (order by Number), 0) as lag1 from (select Number, sum(Frequency) over (order by Number) as rolling_freq from Numbers) t) b where (b.lag1 < a.lower and a.lower <= b.rolling_freq) or (b.lag1 < a.upper and a.upper <= b.rolling_freq)
select avg(cast(n.Number as float)) median from Numbers n where n.Frequency >= abs((select sum(Frequency) from Numbers where Number<=n.Number) - (select sum(Frequency) from Numbers where Number>=n.Number))
select avg(median) as median from( select min(n.number) as median from ( select number, sum(Frequency) over(order by Number asc) as running_total from Numbers ) n join (select floor((sum(Frequency)+1)/2) as median_pos from Numbers union select ceiling((sum(Frequency)+1)/2) as median_pos from Numbers ) m on n.running_total>=m.median_pos group by m.median_pos ) a
select avg(n.Number) as median from Numbers as n where n.Frequency >= abs((select sum(Frequency) from Numbers where Number <= n.Number) - (select sum(Frequency) from Numbers where Number >= n.Number))
select avg(n.Number) as median from Numbers n where n.Frequency >= ABS((select sum(frequency) from Numbers where n.Number >= Number)- (select sum(frequency) from Numbers where n.Number <=Number))
select avg(n.Number) as median from Numbers n where n.Frequency >= abs( (select ifnull(sum(Frequency),0) from Numbers where n.Number > Number) - (select ifnull(sum(Frequency),0) from Numbers where n.Number < Number) )
select avg(n.Number) as median from Numbers n where n.Frequency >= abs((select sum(Frequency) from Numbers where Number <= n.Number) - (select sum(Frequency) from Numbers where Number >= n.Number))
select avg(n.Number) as median from Numbers n where n.Frequency >= abs((select sum(Frequency) from Numbers where Number <= n.Number)- (select sum(Frequency) from Numbers where Number >= n.Number))
select avg(n.Number) as median from Numbers n where n.Frequency >= abs((select sum(Frequency) from Numbers where Number<=n.Number) - (select sum(Frequency) from Numbers where Number>=n.Number))
select avg(n.Number) as median from Numbers n where n.Frequency >= abs((select sum(b.Frequency) from Numbers b where n.Number<= b.Number) -(select sum(b.Frequency) from Numbers b where n.Number>= b.Number) )
select avg(n.Number) as median from Numbers n where n.Frequency>=abs((select sum(Frequency) from Numbers where Number<=n.Number)-(select sum(Frequency) from Numbers where Number>=n.Number))
select avg(n.Number) median from Numbers n where n.Frequency >= abs((select sum(Frequency) from Numbers where Number<=n.Number) - (select sum(Frequency) from Numbers where Number>=n.Number))
select avg(n.Number) median from Numbers n where n.Frequency >= abs((select sum(Frequency) from Numbers where Number<=n.Number) -(select sum(Frequency) from Numbers where Number>=n.Number))
select avg(n.Number) median from Numbers n where n.Frequency >= abs((select sum(Frequency) from numbers where Number >= n.Number) - (select sum(Frequency) from numbers where Number <= n.Number))
select avg(n.number) as median from Numbers n where n.Frequency >= abs ( (select sum(Frequency) from Numbers n1 where n1.Number<=n.Number) - (select sum(Frequency) from Numbers n2 where n2.Number >= n.Number) )
select avg(n.number) as median from Numbers n where n.Frequency >= abs((select sum(Frequency) from Numbers where Number<=n.Number) - (select sum(Frequency) from Numbers where Number>=n.Number))
select avg(n.number) as median from Numbers n where n.frequency >= abs( (select sum(frequency) from numbers where number <= n.number) - (select sum(frequency) from numbers where number >= n.number) )
select avg(n.number) as median from numbers as n where n.frequency >= abs((select sum(frequency) from numbers where number <= n.number) - (select sum(frequency) from numbers where number >= n.number))
select avg(n.number) as median from numbers as n where n.frequency >= abs((select sum(frequency) from numbers where number>=n.number) - (select sum(frequency) from numbers where number<=n.number))
select avg(n.number) as median from numbers n where frequency>=abs((select sum(frequency) from numbers where number<=n.number)-(select sum(frequency) from numbers where number>=n.number))
select avg(n.number) median from Numbers n where n.Frequency >= abs((select sum(Frequency) from numbers where number <= n.number) - (select sum(Frequency) from numbers where number >= n.number))
select avg(num) as median from ( select n1.number as num, sum(n2.frequency) - n1.frequency + 1 as low, sum(n2.frequency) as high from numbers n1 join numbers n2 on n1.number >= n2.number group by n1.number, n1.frequency )temp where (low <= (select floor((sum(frequency)+1)/2) from Numbers) and high >= (select floor((sum(frequency)+1)/2) from Numbers)) or (low <= (select ceil((sum(frequency)+1)/2) from Numbers) and high >= (select ceil((sum(frequency)+1)/2) from Numbers))
select avg(number) as median from ( select l.number from numbers l join numbers r group by 1 having abs(sum(sign(l.number - r.number) * r.frequency)) <= max(l.frequency) ) t
select avg(number) as median from ( select number, frequency, sum(frequency) over (order by number) as total from numbers ) a, (select sum(frequency) as t from numbers) b where total * 2 >= t and (total - frequency) * 2 <= t
select avg(number) as median from (select a.number from numbers a join numbers b group by a.number having abs(sum(sign(a.number -b.number)*b.frequency)) <= max(a.frequency)) t
select avg(number) as median from (select number, frequency, ifnull(sum(frequency) over (order by number rows between unbounded preceding and 1 preceding), 0) as left_total, ifnull(sum(frequency) over (order by number rows between 1 following and unbounded following), 0) as right_total from numbers) a where frequency >= abs(left_total- right_total)
select avg(number) as median from (select number, sum(frequency) over(order by number asc) as running_total, sum(frequency) over(order by number desc) as reverse_running_total from numbers order by 1) t where running_total >= (select sum(frequency)/2 from numbers) and reverse_running_total >= (select sum(frequency)/2 from numbers)
select avg(number) as median from Numbers A where Frequency >= abs((select sum(Frequency) from Numbers where Number <= A.Number) - (select sum(Frequency) from Numbers where Number >= A.Number))
select avg(number) as median from numbers n where frequency >= abs((select sum(frequency) from numbers where number>= n.number)- (select sum(frequency) from numbers where number<= n.number))
select avg(number) median from (select n1.number, n1.frequency,abs(ifnull(sum(case when n2.number>n1.number then n2.frequency end),0)-ifnull(sum(case when n2.number<n1.number then n2.frequency end),0)) abs from numbers n1 join numbers n2 group by 1,2) tem where frequency>=abs
select avg(number) median from numbers n where frequency >= abs((select sum(frequency) from numbers where number >= n.number)- (select sum(frequency) from numbers where number <= n.number))
select avg(number) median from numbers n where n.frequency >= abs( (select sum(Frequency) from Numbers where Number<=n.number) - (select sum(Frequency) from Numbers where Number>=n.number))
select avg(t1.number) as median from Numbers t1 where Frequency >= abs((select sum(frequency) from Numbers t2 where t1.Number >= t2.Number)-(select sum(frequency) from Numbers t3 where t1.Number <= t3.Number))
select avg(t3.Number) as median from Numbers as t3 inner join (select t1.Number, abs(sum(case when t1.Number>t2.Number then t2.Frequency else 0 end) - sum(case when t1.Number<t2.Number then t2.Frequency else 0 end)) as count_diff from Numbers as t1, Numbers as t2 group by t1.Number) as t4 on t3.Number = t4.Number where t3.Frequency>=t4.count_diff
select avg(t3.Number) as median from Numbers as t3 inner join (select t1.Number, abs(sum(case when t1.Number>t2.Number then t2.Frequency else 0 end) - sum(case when t1.Number<t2.Number then t2.Frequency else 0 end)) as count_diff from numbers as t1, numbers as t2 group by t1.Number) as t4 on t3.Number = t4.Number where t3.Frequency>=t4.count_diff
select case when mod(sum(q.frequency),2)=0 then (q.number + q.number_old )/2 else avg(q.number) end as median from (select a.number,coalesce(lag(a.number,1) over (order by a.number),a.number) as number_old, a.frequency, sum(b.frequency) as cum_frq, coalesce(lag(sum(b.frequency),1) over (order by a.number),0) as cum_frq_old from numbers as a join numbers as b on a.number >= b.number group by a.number order by a.number) as q where q.cum_frq >= ( select floor(sum(frequency)/2 +1) from numbers) and q.cum_frq_old < ( select floor(sum(frequency)/2 +1) from numbers)
select med as median from ( select number, frequency, tot, ldnum, lgnum, presum, ifnull(lag(presum) over (order by number), 0) as lgsum, case when mod(tot, 2)<>0 and ifnull(lag(presum) over (order by number), 0)<=tot/2 and presum>=tot/2 then number when mod(tot, 2)=0 and ifnull(lag(presum) over (order by number), 0)<=tot/2 and presum>=tot/2+1 then (number+coalesce(lgnum, number))/2 end as med from (select number, frequency, lead(number) over (order by number) as ldnum, lag(number) over (order by number) as lgnum, sum(frequency) over (order by number range between unbounded preceding and current row) as presum from numbers) a, (select sum(frequency) as tot from numbers) b ) q where med is not null limit 1
select min(case when fraction = 0.5 then (number+post_number)/2 when fraction < 0.5 then case when post_fraction <= 0.5 then null else Post_Number end when fraction > 0.5 then Number end) as 'median' from ( select Number, increase/count as fraction, lead(Number) over() as post_number, lead(increase/count) over() as post_fraction from ( select Number, Frequency, sum(Frequency) over(order by Number) as 'increase', sum(Frequency) over() as 'count' from Numbers) as A ) as B
select round(avg(n1.number),4) as median from numbers n1 where n1.frequency >= abs((select sum(n2.frequency) from numbers n2 where n2.number<=n1.number) - (select sum(n3.frequency) from numbers n3 where n3.number>=n1.number) )
select round(sum(Number) / count(Number), 2) as median from (select Number, Frequency, sum(Frequency) over (order by Number) as cumulative_num, sum(Frequency) over () as total_num from Numbers) sub where total_num / 2.0 between cumulative_num - Frequency and cumulative_num
select sum(num)/count(num) as median from ( select d.tot, min(number) num, min(frequency) freq from (select a.number, sum(b.frequency) frequency from numbers a, numbers b where a.number >= b.number group by 1) c, (select ceiling(sum(frequency)/2.0 + 0.1) as tot from numbers union select case when sum(frequency)%2 = 0 then floor(sum(frequency)/2.0 + 0.1) end as tot from numbers) d where c.frequency >= d.tot group by d.tot )e
with PartialSums as ( select Number, Frequency, sum(Frequency) over() as Total, sum(Frequency) over(order by Number) as Preceding from Numbers ) select avg(Number) as median from PartialSums where Preceding - Frequency <= Total / 2 and Total / 2 <= Preceding
with PartialSums as ( select Number, Frequency, sum(Frequency) over() as Total, sum(Frequency) over(order by Number) as Preceding from Numbers ) select avg(Number) as median from PartialSums where Total / 2 between Preceding - Frequency and Preceding
with TBL1 as (select N1.Number, sum(N2.Frequency) as cum_Frequency_ub from Numbers N1 left join Numbers N2 on N1.Number >=N2.Number group by 1), TBL2 as (select N1.Number, ifnull(sum(N2.Frequency),0) as cum_Frequency_lb from Numbers N1 left join Numbers N2 on N1.Number >N2.Number group by 1) select avg(TBL1.Number) as median from TBL1 left join TBL2 on TBL1.Number = TBL2.Number where TBL2.cum_Frequency_lb <= (select max(cum_Frequency_ub)/2 from TBL1) and TBL1.cum_Frequency_ub >=(select max(cum_Frequency_ub)/2 from TBL1)
with a as ( select n.number as median from numbers n where n.frequency >= abs((select sum(frequency) from numbers where number>=n.number)- (select sum(frequency) from numbers where number<=n.number)) ) select (case when count(median)>1 then sum(median)/2 else median end) as median from a
with a as ( select number, sum(frequency) over(order by number) as s1, sum(frequency) over(order by number desc) as s2 from numbers), b as ( select sum(frequency)/2 as cnt from numbers) select avg(a.number) as median from a where a.s1 >= (select cnt from b) and a.s2 >= (select cnt from b)
with a as (select Number, sum(Frequency)over(order by Number) as asce from Numbers), b as (select Number, sum(Frequency) over(order by Number desc) as des from Numbers), c as (select sum(Frequency) as accu from Numbers) select avg(Number) as median from (select a.Number from a, b, c where a.Number = b.Number and ((a.asce > c.accu / 2 and b.des > c.accu / 2) or a.asce = c.accu / 2 or b.des = c.accu / 2))cte
with aa as ( select Number, Frequency, sum(Frequency) over (order by Number) as cum_freq from Numbers ) select (min(num_1)+min(num_2))/2 as median from ( select aa.*, case when cum_freq >= floor(((select max(cum_freq) from aa)+1)/2) then number end as num_1, case when cum_freq >= ceil(((select max(cum_freq) from aa)+1)/2) then number end as num_2 from aa ) tt
with base as ( select Number, Frequency, sum(Frequency) over(order by Number) as cum_freq, (select sum(Frequency) from Numbers) as sum_freq from Numbers ) select avg(Number) as median from base where sum_freq/2 between cum_freq-Frequency and cum_freq
with bounds as ( Select sum(frequency)/2 as bound from numbers ) Select avg(number) as median from ( Select *, sum(frequency) over (order by number) as cum_sum from numbers cross join bounds ) t2 where bound between (cum_sum- frequency) and cum_sum
with c as ( select number, frequency , coalesce(sum(frequency) over (order by number rows between unbounded preceding and 1 preceding),0)+1 as sf , sum(frequency) over (order by number rows between unbounded preceding and current row) as ef ,sum(frequency) over (order by number rows between unbounded preceding and unbounded following) as tf from numbers ) select 1.0 * sum( case when floor(tf/2)+1 between sf and ef then number else 0 end + case when tf%2 = 0 and (tf/2) between sf and ef then number else 0 end ) / (case when tf%2 = 0 then 2 else 1 end) as median from c
with c1 as (select Number, sum(frequency) over(order by number) as cum_sum from numbers), c2 as (select round(sum(Frequency)/2,0) as rk from numbers union all select round((sum(Frequency)+1)/2,0) from numbers) ,c3 as (select min(c1.Number) num from c2 join c1 on c2.rk <= c1.cum_sum group by c2.rk) select avg(num) median from c3
with cte as ( Select *, sum(frequency) over (order by number) low, sum(frequency) over (order by number DESC) high from Numbers ) Select number/count(DISTINCT number) as median from cte where abs(high - low) <= frequency
with cte as ( select *, ifnull(lag(cum_freq, 1) over (order by Number), 0) as lag_cum_freq from (select *, sum(Frequency) over (order by Number) as cum_freq from Numbers) t ) select avg(Number) as median from cte where (lag_cum_freq < (select ceil(sum(Frequency)/2) from Numbers) and cum_freq >= (select ceil(sum(Frequency)/2) from Numbers)) or (lag_cum_freq < (select floor(sum(Frequency)/2 + 1) from Numbers) and cum_freq >= (select floor(sum(Frequency)/2 + 1) from Numbers))
with cte as ( select *, sum(Frequency) over(order by Number asc) as cum_freq, sum(Frequency) over()/2 as median_pos from Numbers) select avg(Number) as median from cte where median_pos between cum_freq - Frequency and cum_freq
with cte as ( select Number , Frequency , sum(Frequency) over (order by Number) as cumulative_count , sum(Frequency) over () as all_count from Numbers ) select ( ( select min(number) from cte where cumulative_count >= floor((all_count + 1) / 2) ) + ( select min(number) from cte where cumulative_count >= floor((all_count + 2) / 2) ) ) / 2 as median
with cte as ( select case when sum(frequency) % 2 != 0 then ceiling(sum(frequency)/2) else sum(frequency)/2 end as position, case when sum(frequency) % 2 != 0 then 'odd' else 'even' end as quant from numbers ), cte1 as ( select number, frequency, sum(frequency) over(order by number) as total from numbers ), cte2 as ( select number, frequency, total, ifnull(lag(total) over (order by number) ,0) as pre from cte1 ), even_median as ( select cte2.number from cte2 cross join cte on cte.position > cte2.pre and cte.position <= cte2.total where cte.quant = 'even' union all select cte2.number from cte2 cross join cte on cte.position+1 > cte2.pre and cte.position+1 <= cte2.total where cte.quant = 'even' ), cte3 as ( select avg(number) as median from even_median union all select cte2.number from cte2 cross join cte on cte.position > cte2.pre and cte.position <= cte2.total where cte.quant = 'odd' ) select * from cte3 where median is not null
with cte as ( select floor((sum(Frequency)+1)/2) as m1, floor((sum(Frequency)+2)/2) as m2 from Numbers), cte2 as ( select Number, sum(Frequency) over(order by Number) as presum from Numbers), low as ( select Number from cte2 where presum>= (select m1 from cte) limit 1), high as ( select Number from cte2 where presum >= (select m2 from cte) limit 1) SELECT AVG(number) AS median FROM (select * FROM low UNION SELECT * FROM high) t
with cte as ( select number, frequency, sum(frequency) over (order by number) running_sum, (sum(frequency) over ())/2 median FROM Numbers ) select avg(number) median from cte where median between running_sum-frequency and running_Sum
with cte as ( select sum(Frequency) over (order by Number) as cumsum_left, sum(Frequency) over (order by Number desc) as cumsum_right, Number, Frequency from Numbers ) select avg(Number) as median from cte where abs(cumsum_left-cumsum_right)<=frequency
with cte as (SELECT Number, Frequency, SUM(Frequency) OVER (ORDER BY Number ASC) rk1, SUM(Frequency) OVER (ORDER BY Number DESC) rk2 FROM Numbers) select avg(Number*1.0) as median from cte where ABS(rk1-rk2) <= Frequency
with cte as (select *, ifnull(lag(cum_freq, 1) over (order by Number), 0) as lag_cum_freq from (select *, sum(Frequency) over (order by Number) as cum_freq from Numbers) t) select avg(Number) as median from cte where (lag_cum_freq < (select ceil(sum(Frequency)/2) from Numbers) and cum_freq >= (select ceil(sum(Frequency)/2) from Numbers)) or (lag_cum_freq < (select floor(sum(Frequency)/2 + 1) from Numbers) and cum_freq >= (select floor(sum(Frequency)/2 + 1) from Numbers))
with cte as (select *, sum(frequency) over (order by number asc rows between unbounded preceding and current row) as left_cumsum, sum(frequency) over (order by number asc rows between current row and unbounded following) as right_cumsum from numbers) select avg(number) as median from cte where abs(left_cumsum - right_cumsum) <= frequency
with cte as (select Number, Frequency, sum(Frequency) over(order by Number rows between unbounded preceding and current row) as cumsum_left, sum(Frequency) over(order by Number rows between current row and unbounded following) as cumsum_right from Numbers) select avg(Number) as median from cte where abs(cumsum_left - cumsum_right) <= Frequency
with cte as (select number, frequency, sum(frequency) over(order by number) as cumsum, sum(frequency) over() as total_sum from numbers) select avg(number) as median from ( ( select number from cte as a where a.cumsum >= 0.5 * a.total_sum limit 1 ) union all ( select case when mod(a.total_sum, 2) = 0 then number else null end as number from cte as a where a.cumsum >= 0.5 * a.total_sum + (select case when mod(c.total_sum, 2) = 0 then 1 else 0 end as t from cte as c limit 1) limit 1 ) ) as b
with cte as (select number, frequency, sum(frequency) over(order by number) as cumsum, sum(frequency) over() as total_sum from numbers) select avg(number) as median from ( ( select number from cte as a where a.cumsum >= 0.5 * a.total_sum limit 1 ) union all ( select case when mod(a.total_sum, 2) = 0 then number else null end as number from cte as a where a.cumsum >= 0.5 * a.total_sum + 1 limit 1 ) ) as b
with cte as (select number, sum(frequency) over(order by number) as max_limit, lead(number) over(order by number) as next_num, total_num from numbers,(select sum(frequency)/2 as total_num from numbers ) t1) select sum(median) as median from (select coalesce(lag(max_limit) over(order by number),0), case when total_num>coalesce(lag(max_limit) over(order by number),0) and total_num<max_limit then number when total_num= max_limit then (number+next_num)/2 else 0 end as median from cte) t1
with cum_numbers as ( select number, frequency, case when start is null then 1 else start + 1 end as start, end + 1 as end from ( select number, frequency, lag(cum_frequency, 1) over (order by number asc) as start, cum_frequency as end from ( select number, frequency, sum(frequency) over (order by number asc rows unbounded preceding) as cum_frequency from numbers ) t ) t ), indexes as ( select case when mod((select max(end) - 1 from cum_numbers), 2) = 1 then round((select (max(end) - 1) / 2 from cum_numbers), 0) else (select (max(end) - 1) / 2 from cum_numbers) end as index_1, case when mod((select (max(end) - 1) from cum_numbers), 2) = 1 then null else (select ((max(end) - 1) / 2) + 1 from cum_numbers) end as index_2 ) select avg(t1.number) as median from cum_numbers t1 join indexes t2 on (t2.index_1 >= t1.start and t2.index_1 < t1.end) or (t2.index_2 >= t1.start and t2.index_2 < t1.end)
with cumulative as ( select Number, Frequency, sum(frequency) over(order by Number) cum_sum, sum(frequency) over() cnt from Numbers ) select avg(Number) as median from cumulative where cnt/2<=cum_sum &amp;&amp; cnt/2>=(cum_sum-frequency)
with frq as( select number, frequency f, ifnull((select sum(frequency) from numbers where number < n.number),0) p, (select sum(frequency) from numbers) count from numbers n order by number asc) select sum(number)/sum(q) median from (select number, 1 q from frq where (p < (floor(count/2) + 1) and (floor(count/2) + 1) <= (p+f)) union all select number, 1 q from frq where case when mod(count, 2) = 0 then (p < floor(count/2) and floor(count/2) <= (p+f)) else p > count end) as t
with idx as ( select case when sum(frequency)%2 = 0 then sum(frequency)/2 else (sum(frequency) + 1)/2 end as left_val, case when sum(frequency)%2 = 0 then sum(frequency)/2 +1 else (sum(frequency) + 1)/2 end as right_val from numbers), temp as ( select number, ifnull(lag(cnt,1) over(order by number) +1,0) as left_idx, cnt from ( select number, sum(frequency) over(order by number) as cnt from numbers) cte ) select (t1.number + t2.number)/2 as median from temp t1, temp t2, idx where t1.left_idx <= left_val and t1.cnt >= left_val and t2.left_idx <= right_val and t2.cnt >= right_val
with idx as (select ceil(sum(Frequency)/2) as n1, ceil((sum(Frequency)+1)/2) as n2 from Numbers), csum as ( select Number, sum(Frequency) over(order by Number) as frequency from numbers) select (fst.Number+snd.Number)/2 as median from ( select c1.Number,min(c1.frequency) from idx i join csum c1 on i.n1 <= c1.frequency ) fst, (select c2.Number,min(c2.frequency) from idx i join csum c2 on i.n2 <= c2.frequency) snd
with med as ( select ceil(sum(frequency)/2) as m1, ceil((sum(frequency)+1)/2) as m2 from Numbers ) , CSUM as ( select Number, sum(Frequency) over(order by Number rows unbounded preceding) as cum_sum From Numbers ), N1 as ( select number from CSUM where cum_sum >= (select m1 from med) Limit 1 ) ,N2 as ( select number from CSUM where cum_sum >= (select m2 from med) Limit 1 ) Select Avg(median) as median from ( Select Number as median from N1 UNION Select Number as median from N2 ) as sub1
with median as ( select CEILING(sum(frequency) / 2) as median_1 , case when mod(sum(frequency),2) = 1 then 0 else CEILING(sum(frequency) / 2) + 1 end as median_2 from Numbers ) , totals as ( select n1.number, sum(n2.Frequency) as frequency from Numbers n1 join Numbers n2 on n1.number >= n2.number group by n1.number ) , freq_range as ( select number, frequency as curr_freq , COALESCE(lag(frequency, 1) over (order by number),0) as prev_freq from totals ) select sum(number)/ count(1) as median from freq_range cross join median where median_1 between prev_freq + 1 and curr_freq or case when median_2 = 0 then median_1 else median_2 end between prev_freq + 1 and curr_freq
with median_loc as (select sum(Frequency)+1 as t_frequency, case when (sum(Frequency)+1)%2=0 then (sum(Frequency)+1)/2 else (sum(Frequency)+1)/2-0.5 end as median_loc_left, case when (sum(Frequency)+1)%2=0 then (sum(Frequency)+1)/2 else (sum(Frequency)+1)/2+0.5 end as median_loc_right from Numbers) , frequency_loc as (select Number, coalesce(frequency_loc_left,1) as frequency_loc_left, coalesce(frequency_loc_left,1) + Frequency -1 as frequency_loc_right from (select Number, Frequency, sum(Frequency) over (order by Number rows between unbounded preceding and 1 preceding) + 1 as frequency_loc_left from Numbers) a) select (b.Number+c.Number)/2 as median from median_loc a inner join frequency_loc b on a.median_loc_left between b.frequency_loc_left and b.frequency_loc_right inner join frequency_loc c on a.median_loc_right between c.frequency_loc_left and c.frequency_loc_right
with n0 as( select round(sum(Frequency)/2) as med from Numbers union select round(sum(Frequency)/2+0.5) as med from Numbers ) select avg(n4.Number) as median from (select n1.Number as Number, (select sum(n2.Frequency) from Numbers n2 where n2.Number <= n1.Number)-n1.Frequency+1 as F_start, (select sum(n3.Frequency) from Numbers n3 where n3.Number <= n1.Number) as F_end from Numbers n1) n4 join n0 on n4.F_start<=n0.med and n4.F_end>=n0.med
with num AS ( select distinct ceil((select sum(Frequency) from Numbers)/2) as min, floor((select sum(Frequency) from Numbers)/2+1) as max from Numbers ), cum AS ( select number, sum(Frequency) OVER (order by Number) as acc from Numbers ) select (a.first+b.first)/2 as median from (select min(cum.number) as first from cum, num where cum.acc >= num.min) as a, (select min(cum.Number) as first from cum, num where cum.acc >= num.max) as b
with num_cfreqs as ( select number, frequency, (sum(frequency) over (order by number))/ (sum(frequency) over ()) as fr, (sum(frequency) over (order by number desc))/ (sum(frequency) over ()) as rfr from Numbers order by number ) select avg(number) as median from num_cfreqs where fr>0.5 and fr<=rfr or fr=0.5 or rfr=0.5
with pct as (select Number, (sum(Frequency) over (order by Number))/ (sum(Frequency) over ()) as pct1, (sum(Frequency) over (order by Number DESC))/ (sum(Frequency) over ()) as pct2 from Numbers order by Number) select avg(Number) as median from pct where pct1 = 0.5 or pct2 = 0.5 or pct1> 0.5 and pct1<=pct2
with recursive all_nums1 as ( select number, frequency, 1 as "cnt" from numbers union all select number, frequency, 1 + cnt as "cnt" from all_nums1 where cnt < frequency ), all_nums2 as ( select number, row_number() over (order by number) "row_num" from all_nums1 ) select avg(number) "median" from all_nums2 where row_num between (select count(*) from all_nums2) / 2 and (select count(*) from all_nums2) / 2 + 1
with recursive cte as ( select number, frequency from Numbers union all select number, frequency-1 as frequency from cte where frequency > 1), sorted as ( select * from cte order by number), tbl1 as ( select t2.* from (select @am:=0) t, (select @am:=@am+1 as row_id, sorted.* from sorted) as t2) select avg(tbl1.number) median from tbl1 join (select floor((count(*)+1)/2) id from cte union select ceiling((count(*)+1)/2) from cte) t3 on tbl1.row_id = t3.id
with recursive cte as ( select number, frequency from numbers union all select number, frequency - 1 from cte where frequency -1 >= 1 ), rk as ( select number, rank() over (order by number, frequency) as jb from cte ), med as ( select case when mod(max(jb),2) =0 then max(jb)/2 +1 else (max(jb)+1)/2 end as t1, case when mod(max(jb),2) =0 then max(jb)/2 else (max(jb)+1)/2 end as t2 from rk ) select avg(number) as median from rk where jb in (select t1 from med) or jb in (select t2 from med)
with recursive cte as (Select Number,max(frequency) as C from Numbers group by Number union all Select Number,C-1 as C from cte where C>1 ), dte as (Select row_number() over (order by Number) as Rnk,Number,C,(Select sum(Frequency) from Numbers) as Total from cte) select avg(Number) as median from dte where Rnk in ((Total/2),((Total/2)+0.5),((total/2)+1))
with recursive cte as (Select number,max(frequency) as C from Numbers group by number union all Select number,C-1 as C from cte where C>1), dte as (select row_number() over (order by number) as Rnk,number,(Select sum(frequency) from Numbers) as Total from cte) Select avg(number) as Median from dte where Rnk in (Total/2,((total/2)+0.5),((total/2)+1))
with recursive cte as (select number, frequency as n from numbers union all select number, n - 1 from cte where n - 1 >= 1) select avg(number) as median from (select number, row_number() over (order by number asc) as row_num, (select sum(frequency) from numbers) as total from cte) as a where row_num between (total / 2) and (total / 2 + 1)
with recursive cte as (select number, frequency as n from numbers union all select number, n - 1 from cte where n - 1 >= 1) select avg(number) as median from (select number, row_number() over (order by number asc, n desc) as rn, (select sum(frequency) from numbers) as total from cte) as temp where rn between (total / 2) and (total / 2 + 1)
with recursive cte as (select number,frequency from numbers union all select number,frequency-1 from cte where frequency>1), cte1 as(select number, row_number() over (order by number) as rnk from cte) select avg(number)as median from cte1 where rnk=(select max(rnk)/2 from cte1) or rnk=(select (1+max(rnk))/2 from cte1) or rnk=(select 1+max(rnk)/2 from cte1)
with recursive cte as( select number, max(frequency) as mf from numbers group by number union all select number, mf-1 as mf from cte where mf>1), od as ( select *,row_number() over(order by number desc, row_asc desc) row_desc from ( select number, row_number() over(order by number) row_asc from cte )od order by number ) select avg(number) as median from od where row_asc=row_desc or row_asc=row_desc+1 or row_asc = row_desc-1
with recursive cte(cnt,Number,Frequency) as (select 1 as cnt, Number, Frequency from Numbers union all select cnt +1 as cnt, Number, Frequency - 1 from cte where Frequency>1 ), cte1 as (select Number, row_number() over(order by Number) as rk from cte) select avg(number) "median" from cte1 where rk between (select count(*) from cte1) / 2 and (select count(*) from cte1) / 2 + 1
with recursive cte1 (number, counter, frequency) as (select number, 1 as counter, frequency from numbers union select number, counter + 1, frequency from cte1 where counter + 1 <= frequency), cte2 as (select number, row_number() over (order by number asc, counter asc) as rn from cte1) select avg(number) as median from (select number from cte2 where rn between ((select max(rn) from cte2) / 2) and ((select max(rn) from cte2) / 2 + 1)) as temp
with recursive cte_spine as ( select 1 as i union all select i+1 as i from cte_spine where i < (select max(Frequency) from Numbers) ), cte_explode as ( select Number, row_number() over (order by Number asc) as Sequence, (select sum(Frequency) from Numbers) as Total_Count from cte_spine as s join Numbers as n on s.i <= n.Frequency order by 2 ), cte_median as ( select avg(number) as Median from cte_explode where Sequence in ( Total_Count / 2, ((Total_Count / 2) + 0.5), ((Total_Count / 2) + 1) ) ) select * from cte_median
with recursive dbse as (select number,frequency from numbers union all select number,frequency-1 from dbse where frequency>1) select avg(number) as median from (select number,rank() over (order by number,frequency) as ranka,rank() over (order by number desc,frequency desc) as rankd from dbse order by number) as a where ranka=rankd+1 or ranka=rankd-1 or ranka=rankd
with recursive details as ( select number, frequency from numbers union all select number, frequency-1 from details where frequency >1 ) , prep as ( select number, row_number()over(order by number, frequency) rn_asc, row_number()over(order by number desc,frequency desc) rn_desc from details ) select avg(number) as median from prep where rn_asc=rn_desc or rn_asc=rn_desc-1 or rn_asc=rn_desc+1
with recursive expand as ( select Number, 1 as ct, Frequency from Numbers UNION ALL select Number, ct + 1, Frequency from expand where ct < Frequency ), cte as ( select number, rank() over w as r from expand WINDOW w as (ORDER BY number, ct) ), x as ( select * from cte group by r having r >= floor((max(r) + 1) / 2) and r <= ceiling((max(r) + 1) / 2) ), y as ( select number, r, max(r) over () max_v from cte ) select avg(number) as median from y where r >= floor((max_v + 1) / 2) and r <= ceiling((max_v + 1) / 2)
with recursive expand as ( select Number, 1 as ct, Frequency from Numbers UNION ALL select Number, ct + 1, Frequency from expand where ct < Frequency ), ranks as ( select number, rank() over (ORDER BY number, ct) as r, count(*) over () as max_v from expand ) select avg(number) as median from ranks where r >= floor((max_v + 1) / 2) and r <= ceiling((max_v + 1) / 2)
with recursive expand as ( select Number, 1 as ct, Frequency from Numbers UNION ALL select Number, ct + 1, Frequency from expand where ct < Frequency ), ranks as ( select number, rank() over (ORDER BY number, ct) as r, count(*) over () as max_v from expand ), cte as ( select number, r, max(r) over () max_v from ranks ) select avg(number) as median from ranks where r >= floor((max_v + 1) / 2) and r <= ceiling((max_v + 1) / 2)
with recursive numbers_tb as ( select Number, Frequency from Numbers union all select Number, Frequency - 1 from numbers_tb where Frequency > 1), numers_all as ( select Number, row_number () over(order by Number asc) as rank_number from numbers_tb) select avg(number) as median from numers_all, (select max(rank_number) as max_rank from numers_all) as k where rank_number between max_rank/2 and max_rank/2+1
with recursive r1 as ( Select Number , 1 as freq, frequency from Numbers union all Select Number, freq +1 ,frequency from r1 where freq < frequency ), r2 as ( Select Number, row_number() over(order by Number) as rnk from r1 ) select avg(number) as median from r2 where rnk between (select max(rnk)/2 from r2) and (select (max(rnk)/2)+1 from r2)
with recursive rec1 as ( select number,frequency from numbers union all select number,frequency-1 from rec1 where frequency>1 ), rec2 as ( select number, row_number() over(order by number,frequency) as rnum_asc, row_number() over(order by number desc,frequency desc) as rnum_desc from rec1 ) select avg(number) as median from rec2 where rnum_asc=rnum_desc or rnum_asc=rnum_desc-1 or rnum_asc=rnum_desc+1
with recursive t1 as ( select Number, Frequency, 1 as occurance from Numbers union all select Number, Frequency, occurance +1 from t1 where occurance < Frequency ), tmp2 as ( select Number, row_number() over(order by Number) as row_index, count(*) over() as num_cnt from t1 ) ,tmp3 as ( select num_cnt, avg(Number) as median from tmp2 where row_index between num_cnt/2 and num_cnt/2+1 ) select median from tmp3
with recursive t1 as (select number, 1 as occurance, frequency from Numbers union all select number, occurance + 1, frequency from t1 where occurance +1 <= frequency), t2 as (select number, row_number() over(order by number) as num_index from t1) select avg(number) as median from t2 where num_index between (select max(num_index)/2 from t2) and (select max(num_index)/2 + 1 from t2)
with recursive t1 as (select number, 1 as occurance, frequency from numbers union all select number, occurance + 1, frequency from t1 where occurance < frequency), t2 as (select number, row_number() over (order by number) as num_index from t1) select avg(number) as median from t2 where num_index between (select max(num_index)/2 from t2) and (select (max(num_index)/2)+1 from t2)
with recursive tmp as ( select Number, Frequency, 1 as dummy from Numbers union all select Number, Frequency - 1 as Frequency, 1 as dummy from tmp where Frequency > 1 ), tmp2 as ( select Number, row_number() over (order by Number) as row_num, count(Number) over (partition by dummy) as total_length from tmp ), odd as ( select round(Number, 2) as median FROM tmp2 where total_length % 2 = 1 and row_num = CEIL(total_length / 2) ), even as ( select round(avg(Number), 2) as median FROM tmp2 where total_length % 2 = 0 and row_num in (total_length / 2, total_length / 2 + 1) ), tmp3 as ( select median from odd union select median from even ) select median from tmp3 where median is not null
with recursive tmp as (select *, 1 as seq from numbers union all select number, Frequency, seq + 1 as seq from tmp where seq<Frequency ) select avg(number) as median from( select number, row_number() over(order by number) as row_nbr, count(*) over() as ttl_cnt from tmp) t where row_nbr between ttl_cnt/2 and ttl_cnt/2 + 1
with recursive tmp as (select *, 1 as seq from numbers union all select number, frequency, seq + 1 as seq from tmp where seq < Frequency ), tmp2 as (select number, row_number() over(order by number) as row_nbr, count(*) over() as ttl_cnt from tmp ) select avg(number) as median from tmp2 where row_nbr between ttl_cnt/2 and ttl_cnt/2 + 1
with rk as( select *, sum(frequency) over(order by number) as cs from numbers ) select avg(number*1.00) as median from rk where (select sum(frequency)/2.0 from rk) between cs-frequency and cs
with rt as ( select number, sum(frequency) over (order by number) as running_total from numbers ), mid as ( select floor((sum(frequency)+1)/2) as med from numbers union select ceiling((sum(frequency)+1)/2) as med from numbers ), min_med as ( select min(rt.number) as median from rt join mid on rt.running_total >= mid.med group by mid.med ) select avg(median) as median from min_med
with runfre as (select n1.number, sum(n2.frequency) as run_freq1, sum(n2.frequency)- n1.frequency as run_freq2 from numbers n1, numbers n2 where n1.number >= n2.number group by n1.number order by n1.number ), ceil_m as (select ceil((sum(frequency)+1)/2) as ceiln from numbers), floor_m as (select floor((sum(frequency)+1)/2) as floorn from numbers) select (rf1.number + rf2.number)/2 as median from runfre rf1, ceil_m c, runfre rf2, floor_m f where rf1.run_freq1 >= c.ceiln and rf1.run_freq2 < c.ceiln and rf2.run_freq1 >= f.floorn and rf2.run_freq2 < f.floorn
with sum_freq as ( select *, lag(sum_freq) over() as sum_freq_lag from( select *, sum(Frequency) over(order by Number) as sum_freq from Numbers ) n ) select case when (select sum(Frequency) from Numbers)%2=0 then ((select Number from sum_freq where (select sum(Frequency)/2 from Numbers) between ifnull(sum_freq_lag,0) and sum_freq limit 1) + (select Number from sum_freq where (select (sum(Frequency)/2)+1 from Numbers) between ifnull(sum_freq_lag,0) and sum_freq limit 1))/2 else (select Number from sum_freq where (select sum(Frequency)/2 from Numbers) between ifnull(sum_freq_lag,0) and sum_freq) end as median
with sum_freq as ( select *, lag(sum_freq) over() as sum_freq_lag from( select *, sum(Frequency) over(order by Number) as sum_freq from Numbers ) n ) select case when (select sum(Frequency) from Numbers)%2=0 then ((select Number from sum_freq where (select sum(Frequency)/2 from Numbers) between ifnull(sum_freq_lag,0) and sum_freq limit 1) + (select Number from sum_freq where (select (sum(Frequency)/2)+1 from Numbers) between ifnull(sum_freq_lag,0) and sum_freq limit 1))/2 else (select Number from sum_freq where (select sum(Frequency)/2 from Numbers) between ifnull(sum_freq_lag,0) and sum_freq) end as median from Numbers limit 1
with summary as ( select number, frequency, (sum(frequency) over(order by number asc)/sum(frequency) over())as per1, (sum(frequency) over(order by number desc)/sum(frequency) over()) as per2 from numbers) select avg(number) as median from summary where per1=0.5 or per2=0.5 or per1>0.5 and per1<=per2
with t as ( select *, sum(frequency) over(order by number) freq, (sum(frequency) over())/2 median_num from numbers) select avg(number) as median from t where median_num between (freq-frequency) and freq
with t as ( select number, frequency, sum(frequency) over (order by number) as running_sum, (sum(frequency) over ())/2 as m from Numbers ) select avg(number) as median from t where m between running_sum-frequency and running_sum
with t as ( select number, sum(frequency) over( order by number range between unbounded preceding and current row) as cum_freq, sum(frequency) over() as ct from numbers ), t1 as ( select number from ( select number,rank() over(order by cum_freq) as rk from t where cum_freq >= (case when ct%2 =0 then floor(ct/2) else floor(ct/2)+1 end) ) x where rk =1 ), t2 as ( select number from ( select number,rank() over(order by cum_freq) as rk from t where cum_freq >= floor(ct/2)+1 ) x where rk =1 ) select avg(number) as median from ( select number from t1 union all select number from t2 ) z
with t as (select *, sum(Frequency) over (order by Number) as freq, (sum(Frequency) over ()) / 2 as median_freq from Numbers) select avg(Number) as median from t where median_freq between (freq - Frequency) and freq
with t as (select *, sum(frequency) over(order by number) freq, (sum(frequency) over())/2 median_num from numbers) select avg(number) as median from t where median_num between (freq-frequency) and freq
with t1 as ( select Number, Frequency, sum(Frequency) over (order by Number rows between unbounded preceding and current row) as rnk, (select case when mod(sum(Frequency),2)=0 then sum(Frequency)/2 else (sum(Frequency)+1)/2 end as num from Numbers) as num1, (select case when mod(sum(Frequency),2)=0 then sum(Frequency)/2+1 else (sum(Frequency)+1)/2 end as num from Numbers) as num2 from Numbers) select ((select Number from t1 where (rnk-num1)>=0 and (rnk-num1)=(select min(rnk-num1) from t1 where (rnk-num1)>=0)) + (select Number from t1 where (rnk-num2)>=0 and (rnk-num2)=(select min(rnk-num2) from t1 where (rnk-num2)>=0)))/2 as median
with t1 as ( select Number, Frequency, sum(Frequency) over (order by Number) as rnk, (select case when mod(sum(Frequency),2)=0 then sum(Frequency)/2 else (sum(Frequency)+1)/2 end as num from Numbers) as num1, (select case when mod(sum(Frequency),2)=0 then sum(Frequency)/2+1 else (sum(Frequency)+1)/2 end as num from Numbers) as num2 from Numbers) select ((select Number from t1 where (rnk-num1)>=0 and (rnk-num1)=(select min(rnk-num1) from t1 where (rnk-num1)>=0)) + (select Number from t1 where (rnk-num2)>=0 and (rnk-num2)=(select min(rnk-num2) from t1 where (rnk-num2)>=0)))/2 as median
with tbCum as ( select n1.number, sum(n2.frequency) as cum_frequency from numbers as n1 join numbers as n2 on n1.number >= n2.number group by n1.number ), tbM as ( select case when max(cum_frequency)%2 = 0 then max(cum_frequency)/2 else (max(cum_frequency)+1)/2 end as median from tbCum union all select case when max(cum_frequency)%2 = 0 then max(cum_frequency)/2+1 else (max(cum_frequency)+1)/2 end from tbCum ) select avg(min_median) as median from ( select tbM.median, min(tbCum.Number) as min_median from tbM join tbCum on tbCum.cum_frequency>= tbM.median group by tbM.median ) tMedian
with tbCum as ( select n1.number, sum(n2.frequency) as cum_frequency from numbers as n1 join numbers as n2 on n1.number >= n2.number group by n1.number ), tbM as ( select case when max(cum_frequency)%2 = 0 then max(cum_frequency)/2 end as even_median, case when max(cum_frequency)%2 <> 0 then (max(cum_frequency)+1)/2 end as odd_median from tbCum ), tbMedian1 as ( select min(cum_frequency) as cum_frequency from tbCum where cum_frequency >= (select case when even_median is null then odd_median when odd_median is null then even_median end from tbM) ), tbMedian2 as ( select min(cum_frequency) as cum_frequency from tbCum where cum_frequency >= (select case when even_median is null then odd_median when odd_median is null then even_median+1 end from tbM) ) select sum(tb.number)/2 as median from (select tbCum.number from tbMedian1 join tbCum on tbCum.cum_frequency = tbMedian1.cum_frequency union all select tbCum.number from tbMedian2 join tbCum on tbCum.cum_frequency = tbMedian2.cum_frequency) as tb
with tbCum as ( select n1.number, sum(n2.frequency) as cum_frequency from numbers as n1 join numbers as n2 on n1.number >= n2.number group by n1.number ), tbM as ( select case when max(cum_frequency)%2 = 0 then max(cum_frequency)/2 end as even_median, case when max(cum_frequency)%2 <> 0 then (max(cum_frequency)+1)/2 end as odd_median from tbCum ), tbMedian1 as ( select min(cum_frequency) as cum_frequency from tbCum where cum_frequency >= (select case when isnull(even_median) then odd_median when isnull(odd_median) then even_median end from tbM) ), tbMedian2 as ( select min(cum_frequency) as cum_frequency from tbCum where cum_frequency >= (select case when isnull(even_median) then odd_median when isnull(odd_median) then even_median+1 end from tbM) ) select sum(tb.number)/2 as median from (select tbCum.number from tbMedian1 join tbCum on tbCum.cum_frequency = tbMedian1.cum_frequency union all select tbCum.number from tbMedian2 join tbCum on tbCum.cum_frequency = tbMedian2.cum_frequency) as tb
with temp as ( select total, case when total%2 =1 then (total+1)/2 else total/2 end as med from (select sum(frequency) as total from numbers ) as t ) select coalesce(round(avg(number),2),0) as median from (select number, endpt, frequency, (endpt-frequency)+1 as startpt from (select number, frequency, sum(frequency) over (order by number) as endpt from numbers) as t) as t where case when (select total from temp)%2 = 1 then (select med from temp) between startpt and endpt else (select med from temp) between startpt and endpt or (select med from temp)+1 between startpt and endpt end
with temp as (select Number, Frequency , sum(Frequency)over(order by number) as cumsum_left, sum(Frequency)over(order by Number desc) cumsum_right from Numbers ) select avg(Number) as median from temp where abs(cumsum_left - cumsum_right) <= Frequency
with temp as (select Number, Frequency , sum(Frequency)over(order by number) as cumsum_left, sum(Frequency)over(order by Number desc) cumsum_right from Numbers ) select round(avg(Number),4) as median from temp where abs(cumsum_left - cumsum_right) <= Frequency
with temp as (select Number, Frequency, sum(Frequency) over(order by Number desc) rd, sum(Frequency) over(order by Number asc) ra from Numbers) select avg(1.0*Number) median from temp where Frequency >= abs(ra-rd)
with temp as (select Number, Frequency, sum(frequency) over (order by Number) as cumulative_sum, sum(Frequency) over () as total_num from Numbers) select round(sum(Number)/count(Number),2) as median from temp where total_num / 2.0 between cumulative_sum - Frequency and cumulative_sum
with temp as (select number, frequency, sum(frequency) OVER (order by number) as incresum from Numbers) select avg(Number) as median from temp where (incresum - frequency < (select ceil(sum(Frequency)/2) from Numbers) and incresum >= (select ceil(sum(Frequency)/2) from Numbers)) or (incresum - frequency < (select floor(sum(Frequency)/2 + 1) from Numbers) and incresum >= (select floor(sum(Frequency)/2 + 1) from Numbers))
with temp1 as( select number,frequency,sum(frequency) over(order by Number) as rolsum from Numbers ) select ((select number from temp1 where rolsum>=ceiling(((select max(rolsum) from temp1)+1)/2) limit 1) + (select number from temp1 where rolsum>=ceiling(((select max(rolsum) from temp1))/2) limit 1))/2 AS median
with temp1 as( select number,frequency,sum(frequency) over(order by Number) as rolsum from Numbers order by rolsum) select ((select number from temp1 where rolsum>=ceiling(((select max(rolsum) from temp1)+1)/2) limit 1) + (select number from temp1 where rolsum>=ceiling(((select max(rolsum) from temp1))/2) limit 1))/2 AS median
with temp_asc as ( select f.Number, f.Frequency, sum(f1.Frequency) as rk1 from Numbers f join Numbers f1 on f1.Number <= f.Number group by 1, 2 ), temp_desc as ( select f.Number, f.Frequency ,sum(f2.Frequency) as rk2 from Numbers f join Numbers f2 on f2.Number >= f.Number group by 1, 2 ) select avg(a.Number) median from temp_asc a join temp_desc d using(Number, Frequency) where abs(a.rk1-d.rk2) <= a.Frequency
with temp_cte2 as ( select number, frequency, sum(frequency) over(order by number rows between unbounded preceding and current row) as prev_sum, sum(frequency) over(order by number rows between current row and unbounded following) as next_sum from numbers ) select avg(number) as median from temp_cte2 where abs(prev_sum - next_sum) <= frequency
with tempset2 as ( select Number , Frequency , sum(Frequency) over (order by Number rows between unbounded preceding and current row) as cumsum_left , sum(Frequency) over (order by Number rows between current row and unbounded following) as cumsum_right from Numbers ) select avg(Number) as median from tempset2 where abs(cumsum_left - cumsum_right) <= Frequency
with tempset2 as ( select Number , Frequency , sum(Frequency) over(order by Number rows between unbounded preceding and current row) as cumsum_left , sum(Frequency) over(order by Number rows between current row and unbounded following) as cumsum_right from Numbers ) select avg(Number) as median from tempset2 where abs(cumsum_left - cumsum_right) <= Frequency
with tmp as ( select Number, Frequency, ifnull(sum(Frequency) over(order By Number rows between unbounded preceding and 1 preceding), 0) as cumulative_frequency_lower, sum(Frequency) over(order By Number) as cumulative_frequency_higher, sum(Frequency) over() as total_size from Numbers ) select Avg(Number) as median from tmp where cumulative_frequency_lower <= (total_size+1)/2.0 and total_size - cumulative_frequency_higher <= (total_size+1)/2.0
with tmp as ( select Number,Frequency, sum(Frequency) over (order by Number desc) rnk1, sum(Frequency) over (order by Number ) rnk2 from Numbers ) select avg(Number) as Median from tmp where abs(rnk1-rnk2) <= Frequency
with tmp as (select *, sum(Frequency ) over (order by number) as cum_freq, ceil(sum(Frequency ) over() /2) as m1, floor(sum(Frequency ) over() /2) + 1 as m2 from numbers ) select avg(number) as median from ((select * from tmp where cum_freq>=m1 limit 1) union (select * from tmp where cum_freq>=m2 limit 1) ) t
with tmp as(select Number, Frequency, sum(Frequency) over(order by Number asc) rk1, sum(Frequency) over(order by Number desc) rk2 from Numbers ) select avg(Number)*1.0 as median from tmp where Frequency >= ABS(rk1-rk2)
with total_size as (select sum(Frequency) as ttl from Numbers), median_pos as (select case when mod(ttl, 2) = 0 then ttl / 2 else round(ttl /2,0) end as pos1, case when mod(ttl, 2) = 0 then (ttl / 2) + 1 else null end as pos2 from total_size ), cumul_num as (select Number, sum(Frequency) over( order by Number asc) as ttl from Numbers ) , num1q as ( select 'a' as lbl, min(c.Number) as num1 from cumul_num c join median_pos m on m.pos1 <= c.ttl group by lbl ) , num2q as (select 'a' as lbl, case when pos2 is not null then min(c.Number) else null end as num2 from cumul_num c join median_pos m on m.pos1+1 <= c.ttl group by lbl ) select case when num2 is not null then (num1 + num2) / 2 else num1 end as median from num1q join num2q on num1q.lbl = num2q.lbl
with tst as (select Number , Frequency , sum(Frequency) over(order by Number rows between unbounded preceding and current row) as cumsum_left , sum(Frequency) over(order by Number rows between current row and unbounded following) as cumsum_right from Numbers ) SELECT ( ( SELECT Number from tst where cumsum_left >= ((SELECT MAX(cumsum_left) from tst)/2) Limit 1 ) + ( SELECT Number from tst where cumsum_left >= (((SELECT MAX(cumsum_left) from tst) + 1)/2) Limit 1 ) ) / 2 as Median
with tt as ( SELECT Number, Frequency, SUM(Frequency) OVER ( ORDER BY NUMBER ) csum FROM Numbers ), t1 as ( SELECT total, odd_index, CASE WHEN MOD(total, 2)=0 then odd_index-1 ELSE NULL END even_index FROM ( SELECT sum(FREQUENCY) total, FLOOR(sum(FREQUENCY)/2)+1 odd_index FROM Numbers ) t2 ), t3 as ( select Number, Frequency, LAG(csum, 1, 0) OVER ( ORDER BY NUmber ) lag_csum, csum, even_index, odd_index from tt cross join t1 ) SELECT AVG(Number) median FROM ( SELECT Number FROM T3 WHERE even_index > lag_csum and even_index <= csum union all SELECT Number FROM T3 WHERE odd_index > lag_csum and odd_index <= csum ) t4
with upper as (select number, frequency, sum(frequency) over(order by number) as upper_bound from numbers), lower as ( select number, frequency, lag(upper_bound, 1) over(order by number) as lower_bound from upper ), ind as ( select case when mod(sum(frequency),2) = 0 then sum(frequency) / 2 - 0.5 else sum(frequency) / 2 end as number1, case when mod(sum(frequency),2) = 0 then sum(frequency) / 2 + 0.5 else sum(frequency) / 2 end as number2 from numbers ), ind1 as ( select distinct ind from (select number1 as ind from ind union all select number2 as ind from ind) temp ) select avg(l.number) as median from lower l join upper u on l.number = u.number left join ind1 i on i.ind > ifnull(lower_bound,0) and i.ind <= upper_bound where i.ind is not null
