( select distinct(id) from ( select id, datediff(login_date, lag(login_date,4) over ( partition by id order by login_date asc )) as diff from (select id, login_date from Logins group by id, login_date) b ) a where a.diff = 4 ) valid_users inner join Accounts on valid_users.id = Accounts.id order by id
Accounts where id in ( select distinct(id) from ( select id, datediff(login_date, lag(login_date,4) over ( partition by id order by login_date asc )) as diff from (select id, login_date from Logins group by id, login_date) b ) a where a.diff = 4 ) order by id
SELECT * FROM ACCOUNTS WHERE ID IN ( SELECT DISTINCT L1.ID FROM LOGINS L1 INNER JOIN LOGINS L2 ON L1.ID = L2.ID AND DATEDIFF(L1.LOGIN_DATE,L2.LOGIN_DATE) BETWEEN 1 AND 4 GROUP BY L1.ID,L1.LOGIN_DATE HAVING COUNT(DISTINCT(L2.LOGIN_DATE)) = 4) ORDER BY ID
SELECT * FROM Accounts WHERE id IN ( SELECT DISTINCT id FROM ( SELECT id, login_date, LAG(login_date,1) OVER(PARTITION BY id ORDER BY login_date ASC) as login_date_lag1, LAG(login_date,2) OVER(PARTITION BY id ORDER BY login_date ASC) as login_date_lag2, LAG(login_date,3) OVER(PARTITION BY id ORDER BY login_date ASC) as login_date_lag3, LAG(login_date,4) OVER(PARTITION BY id ORDER BY login_date ASC) as login_date_lag4 FROM (SELECT DISTINCT id, login_date FROM Logins) as sub1 ) as sub2 WHERE DATEDIFF(login_date,login_date_lag1) = 1 AND DATEDIFF(login_date,login_date_lag2) = 2 AND DATEDIFF(login_date,login_date_lag3) = 3 AND DATEDIFF(login_date,login_date_lag4) = 4 ) ORDER BY 1
SELECT * FROM Accounts WHERE id IN ( SELECT d1.id FROM (SELECT DISTINCT * FROM Logins) as d1 JOIN (SELECT DISTINCT * FROM Logins) as d2 ON d1.id = d2.id AND DATEDIFF(d1.login_date, d2.login_date) BETWEEN 1 AND 4 GROUP BY d1.id, d1.login_date HAVING COUNT(DISTINCT d2.login_date) = 4 ) ORDER BY 1
SELECT * FROM Accounts WHERE id in (select distinct t1.id FROM Logins as t1 inner join Logins as t2 on t1.id = t2.id and datediff(t1.login_date, t2.login_date) between 1 and 4 GROUP BY t1.id, t1.login_date having count(DISTINCT(t2.login_date)) = 4) ORDER BY id
SELECT DISTINCT A.ID, A.NAME FROM ACCOUNTS A, LOGINS L WHERE A.ID = L.ID AND EXISTS ( SELECT 'X' FROM LOGINS LL WHERE LL.ID = L.ID AND LL.LOGIN_DATE = DATE_ADD(L.LOGIN_DATE, INTERVAL 1 DAY) ) AND EXISTS ( SELECT 'X' FROM LOGINS LL WHERE LL.ID = L.ID AND LL.LOGIN_DATE = DATE_ADD(L.LOGIN_DATE, INTERVAL 2 DAY) ) AND EXISTS ( SELECT 'X' FROM LOGINS LL WHERE LL.ID = L.ID AND LL.LOGIN_DATE = DATE_ADD(L.LOGIN_DATE, INTERVAL 3 DAY) ) AND EXISTS ( SELECT 'X' FROM LOGINS LL WHERE LL.ID = L.ID AND LL.LOGIN_DATE = DATE_ADD(L.LOGIN_DATE, INTERVAL 4 DAY) ) ORDER BY A.ID
SELECT DISTINCT A.id, C.Name FROM Logins A JOIN Logins B ON A.id = B.id AND DATEDIFF(A.login_date, B.login_date) BETWEEN 1 AND 4 JOIN Accounts C ON A.id = C.id GROUP BY A.id, A.login_date HAVING COUNT(DISTINCT B.login_date) = 4
SELECT DISTINCT A.id, name FROM ( SELECT id, login_date, COUNT(id) OVER (PARTITION BY id ORDER BY login_date RANGE BETWEEN INTERVAL 4 DAY PRECEDING AND CURRENT ROW) AS cnt FROM (SELECT DISTINCT id, login_date FROM Logins) T ) A LEFT JOIN Accounts B ON A.id = B.id WHERE cnt >= 5
SELECT DISTINCT D.id, a.name FROM (SELECT C.id FROM (SELECT B.id, B.consec_ref, COUNT(B.login_date) no_consec FROM (SELECT A.id, A.login_date, DATE_SUB(A.login_date, INTERVAL ROW_NUMBER() OVER (PARTITION BY A.id ORDER BY A.login_date) DAY) consec_ref FROM (SELECT DISTINCT id, login_date FROM Logins) A) B GROUP BY B.id, B.consec_ref) C WHERE C.no_consec >= 5) D LEFT JOIN Accounts a ON a.id = D.id
SELECT DISTINCT L1.ID, A.NAME FROM LOGINS L1 JOIN LOGINS L2 ON L1.ID=L2.ID AND DATEDIFF(L2.LOGIN_DATE, L1.LOGIN_DATE) BETWEEN 1 AND 4 LEFT JOIN ACCOUNTS A ON A.ID=L1.ID GROUP BY L1.ID, L1.LOGIN_DATE HAVING COUNT(DISTINCT L2.LOGIN_DATE)=4
SELECT DISTINCT L1.id, A.name FROM Logins L1, Logins L2, Accounts A WHERE L1.id = L2.id AND L1.id = A.id AND (DATEDIFF(L1.login_date, L2.login_date) BETWEEN 1 AND 4) GROUP BY L1.id, L1.login_date HAVING COUNT(DISTINCT L2.login_date) = 4 ORDER BY L1.id
SELECT DISTINCT L1.id, name FROM Logins L1 JOIN Logins L2 ON L1.id = L2.id AND DATEDIFF(L2.login_date, L1.login_date) BETWEEN 1 AND 4 JOIN Accounts A1 ON L1.id = A1.id GROUP BY L1.id, L1.login_date HAVING COUNT(DISTINCT L2.login_date) >= 4 ORDER BY 1
SELECT DISTINCT L1.id,(SELECT name FROM Accounts WHERE id=l1.id) aS nameFROM Logins AS L1 JOIN Logins AS L2 ON L1.id=L2.id AND DATEDIFF(L2.login_date,L1.login_date) BETWEEN 1 AND 4 GROUP BY L1.id,l1.login_date HAVING COUNT(DISTINCT L2.login_date)=4
SELECT DISTINCT a.id , (SELECT name FROM Accounts WHERE id=a.id) name FROM Logins a, Logins b WHERE a.id=b.id AND DATEDIFF(a.login_date,b.login_date) BETWEEN 1 AND 4 GROUP BY a.id , a.login_date HAVING COUNT(DISTINCT b.login_date)=4
SELECT DISTINCT a.id , (SELECT name FROM Accounts WHERE id=a.id) name FROM Logins a, Logins b WHERE a.id=b.id AND DATEDIFF(a.login_date,b.login_date) BETWEEN 1 AND 4 GROUP BY a.id, a.login_date HAVING COUNT(DISTINCT b.login_date)=4
SELECT DISTINCT a.id , (SELECT name FROM accounts WHERE id=a.id) AS name FROM logins a, logins b WHERE a.id = b.id AND DATEDIFF(a.login_date, b.login_date) BETWEEN 1 AND 4 GROUP BY a.id, a.login_date HAVING COUNT(DISTINCT b.login_date) = 4
SELECT DISTINCT a.id , (SELECT name FROM accounts WHERE id=a.id) AS name FROM logins a, logins b WHERE a.id = b.id AND DATEDIFF(a.login_date, b.login_date) BETWEEN 1 AND 4 GROUP BY a.id, a.login_date HAVING COUNT(DISTINCT b.login_date) >= 4
SELECT DISTINCT a.id , (SELECT name FROM accounts WHERE id=a.id) AS name FROM logins a, logins b WHERE a.id = b.id AND DATEDIFF(a.login_date, b.login_date) between 1 and 4 GROUP BY a.id, a.login_date having count(distinct b.login_date) = 4
SELECT DISTINCT a.id, (SELECT name FROM Accounts WHERE id = a.id) name FROM Logins a, Logins b WHERE a.id = b.id AND DATEDIFF(a.login_date, b.login_date) BETWEEN 1 AND 4 GROUP BY a.id, a.login_date HAVING COUNT(DISTINCT b.login_date) = 4
SELECT DISTINCT a.id, (SELECT name FROM Accounts WHERE id=a.id) AS name from logins a, logins b WHERE a.id=b.id AND DATEDIFF(a.login_date,b.login_date) BETWEEN 1 AND 4 GROUP BY a.id, a.login_date HAVING COUNT(DISTINCT b.login_date) =4
SELECT DISTINCT a.id, (SELECT name FROM Accounts WHERE id=a.id) name FROM Logins a join Logins b on a.id=b.id AND DATEDIFF(a.login_date,b.login_date) BETWEEN 1 AND 4 GROUP BY a.id, a.login_date HAVING COUNT(DISTINCT b.login_date)=4
SELECT DISTINCT a.id, (SELECT name FROM Accounts WHERE id=a.id) name FROM Logins a, Logins b WHERE a.id=b.id AND DATEDIFF(a.login_date,b.login_date) BETWEEN 1 AND 4 GROUP BY a.id, a.login_date HAVING COUNT(DISTINCT b.login_date) >= 4
SELECT DISTINCT a.id, (SELECT name FROM Accounts WHERE id=a.id) name FROM Logins a, Logins b WHERE a.id=b.id AND DATEDIFF(a.login_date,b.login_date) BETWEEN 1 AND 4 GROUP BY a.id, a.login_date HAVING COUNT(DISTINCT b.login_date)=4
SELECT DISTINCT a.id, (SELECT name FROM Accounts WHERE id=a.id) name FROM Logins a, Logins b WHERE a.id=b.id AND DATEDIFF(a.login_date,b.login_date) BETWEEN 1 AND 4 GROUP BY a.id, a.login_date HAVING COUNT(DISTINCT b.login_date)>=4
SELECT DISTINCT a.id, (SELECT name FROM Accounts WHERE id=a.id) name FROM Logins a, Logins b WHERE a.id=b.id AND DATEDIFF(a.login_date,b.login_date) between 1 and 4 group by a.id, a.login_date having count(distinct b.login_date)>=4
SELECT DISTINCT a.id, (SELECT name FROM Accounts where a.id = id) as name FROM Logins a, Logins b WHERE a.id = b.id AND DATEDIFF(a.login_date, b.login_date) BETWEEN 1 AND 4 GROUP BY a.id, a.login_date HAVING COUNT(DISTINCT b.login_date) >= 4
SELECT DISTINCT a.id, (SELECT name FROM accounts WHERE id = a.id) AS name FROM logins a, logins b WHERE a.id = b.id AND DATEDIFF(a.login_date, b.login_date) BETWEEN 1 AND 4 GROUP BY a.id, a.login_date HAVING COUNT(DISTINCT b.login_date) = 4
SELECT DISTINCT a.id, a.name FROM ( SELECT id, DATEDIFF(LEAD(login_date, 4) OVER (PARTITION BY id ORDER BY login_date), login_date) AS gap FROM (SELECT DISTINCT id, login_date FROM Logins) c ) d LEFT JOIN Accounts a ON a.id = d.id WHERE gap = 4 ORDER BY a.id
SELECT DISTINCT a.id, a.name FROM ( SELECT id, LEAD(login_date, 4) OVER (PARTITION BY id ORDER BY login_date) AS five_days, DATEDIFF(LEAD(login_date, 4) OVER (PARTITION BY id ORDER BY login_date), login_date) AS gap FROM (SELECT DISTINCT id, login_date FROM Logins) c ) d LEFT JOIN Accounts a ON a.id = d.id WHERE gap = 4 ORDER BY a.id
SELECT DISTINCT a.id, a.name FROM ( SELECT l.id AS l_id , DATEDIFF(login_date, LAG(login_date,4)OVER(PARTITION BY id ORDER BY login_date)) AS la FROM logins AS l GROUP BY id, login_date ) AS tmp JOIN accounts AS a ON tmp.l_id = a.id WHERE tmp.la = 4 ORDER BY a.id
SELECT DISTINCT a.id, aa.name FROM logins a JOIN logins b USING(id) LEFT JOIN Accounts aa USING(id) WHERE DATEDIFF(b.login_date, a.login_date) BETWEEN 1 AND 4 GROUP BY a.id, a.login_date HAVING COUNT(DISTINCT b.login_date) = 4
SELECT DISTINCT a.id, acc.name FROM Logins a JOIN Logins b ON a.id=b.id AND DATEDIFF(b.login_date,a.login_date) BETWEEN 1 AND 4 JOIN Accounts acc ON acc.id=a.id GROUP BY 1, a.login_date HAVING COUNT(DISTINCT b.login_date) = 4
SELECT DISTINCT a.id, acc.name FROM Logins a join Accounts as acc on a.id = acc.id join Logins b on a.id=b.id AND DATEDIFF(a.login_date,b.login_date) BETWEEN 1 AND 4 GROUP BY a.id, a.login_date HAVING COUNT(DISTINCT b.login_date)=4
SELECT DISTINCT a.id, b.name FROM ( SELECT id, COUNT(*) AS days FROM ( SELECT id, DATEDIFF(CURDATE(), login_date) AS diff, @rnk:=@rnk+1 AS rnk FROM (SELECT DISTINCT * FROM logins ORDER BY 1 ASC,2 DESC) l, (SELECT @rnk:=0) r) temp GROUP BY id, (diff - rnk) HAVING days >= 5) a LEFT JOIN accounts b ON a.id = b.id ORDER BY 1
SELECT DISTINCT a.id, name FROM Accounts a JOIN Logins b ON a.id = b.id WHERE (a.id, date_add(login_date, interval 1 day)) in (select * from logins) AND (a.id, date_add(login_date, interval 2 day)) in (select * from logins) AND (a.id, date_add(login_date, interval 3 day)) in (select * from logins) AND (a.id, date_add(login_date, interval 4 day)) in (select * from logins) ORDER BY a.id
SELECT DISTINCT a.id, s.name FROM Logins a JOIN Logins b ON a.id=b.id AND DATEDIFF(b.login_date,a.login_date) BETWEEN 1 AND 4 JOIN Accounts s on a.id=s.id GROUP BY a.id, a.login_date HAVING COUNT(DISTINCT b.login_date)=4
SELECT DISTINCT a.id,(SELECT name from Accounts where Accounts.id=a.id) as name FROM Logins a, Logins b WHERE a.id=b.id AND DATEDIFF(a.login_date,b.login_date) BETWEEN 1 AND 4 GROUP BY a.id, a.login_date HAVING COUNT(DISTINCT b.login_date)=4
SELECT DISTINCT acc.id, acc.name FROM (SELECT *, DATEDIFF(b.login_date, b.lag_date) AS duration FROM (select *,lag(a.login_date,4) over (partition by a.id order by a.login_date) as lag_date from (select id, login_date from logins group by id, login_date order by id, login_date)a) AS b) AS c JOIN accounts acc ON c.id=acc.id WHERE c.duration=4 ORDER BY acc.id
SELECT DISTINCT c.id, acc.name FROM (SELECT *, datediff(b.login_date, b.lag_date) AS date_diff FROM (SELECT *, LAG(a.login_date,4) OVER (PARTITION BY a.id ORDER BY a.login_date) AS lag_date FROM (SELECT id, login_date FROM logins GROUP BY id, login_date ORDER BY id, login_date) a ) b ) c JOIN accounts acc ON acc.id = c.id WHERE date_diff = 4 ORDER BY c.id
SELECT DISTINCT id, (SELECT name from Accounts WHERE Accounts.id = A.id) AS name FROM Logins A WHERE (id, DATE_ADD(login_date, INTERVAL 1 DAY)) in (SELECT * FROM logins) AND (id, DATE_ADD(login_date, INTERVAL 2 DAY)) in (SELECT * FROM logins) AND (id, DATE_ADD(login_date, INTERVAL 3 DAY)) in (SELECT * FROM logins) AND (id, DATE_ADD(login_date, INTERVAL 4 DAY)) in (SELECT * FROM logins) ORDER BY id
SELECT DISTINCT id, name FROM ( SELECT id, name, login_date, LAG(login_date, 4) OVER(PARTITION BY id ORDER BY login_date) AS lag_date, DATEDIFF(login_date, LAG(login_date, 4) OVER(PARTITION BY id ORDER BY login_date)) AS diff FROM ( SELECT DISTINCT l.id, a.name, l.login_date FROM logins l LEFT JOIN accounts a ON l.id = a.id )x )y WHERE diff = 4
SELECT DISTINCT ina.id, inc.name FROM Logins AS ina, Logins AS inb, Accounts AS inc WHERE ina.id=inb.id and DATEDIFF(ina.login_date, inb.login_date) BETWEEN 1 and 4 AND ina.id=inc.id GROUP BY ina.id, inc.name, ina.login_date HAVING COUNT(DISTINCT inb.login_date) = 4
SELECT DISTINCT l.id, a.name FROM ( SELECT id, login_date, LEAD(login_date,4) OVER(PARTITION BY id ORDER BY login_date) AS day_before FROM Logins GROUP BY id, login_date) AS l JOIN Accounts a ON a.id =l.id where day_before=date_add(login_date, interval 4 day) ORDER BY id
SELECT DISTINCT l.id, name FROM Logins AS l LEFT JOIN Accounts AS a ON l.id = a.id WHERE (l.id, DATE_SUB(login_date, INTERVAL 1 DAY)) IN (SELECT * FROM Logins) AND (l.id, DATE_SUB(login_date, INTERVAL 2 DAY)) IN (SELECT * FROM Logins) AND (l.id, DATE_SUB(login_date, INTERVAL 3 DAY)) IN (SELECT * FROM Logins) AND (l.id, DATE_SUB(login_date, INTERVAL 4 DAY)) IN (SELECT * FROM Logins) ORDER BY id
SELECT DISTINCT l1.id, (SELECT name FROM Accounts WHERE id = l1.id) AS name FROM Logins l1 JOIN Logins l2 ON l1.id = l2.id AND DATEDIFF(l2.login_date, l1.login_date) BETWEEN 1 AND 4 GROUP BY l1.id, l1.login_date HAVING COUNT(DISTINCT l2.login_date) = 4
SELECT DISTINCT l1.id, (SELECT name FROM Accounts WHERE id=l1.id) AS name FROM Logins l1 JOIN Logins l2 ON l1.id=l2.id AND DATEDIFF(l2.login_date,l1.login_date) BETWEEN 0 AND 4 GROUP BY l1.id, l1.login_date HAVING COUNT(DISTINCT l2.login_date)=5 ORDER BY l1.id
SELECT DISTINCT l1.id, (SELECT name FROM Accounts WHERE id=l1.id) AS name FROM Logins l1 JOIN Logins l2 USING(id) WHERE DATEDIFF(l2.login_date, l1.login_date) BETWEEN 1 AND 4 GROUP BY l1.id, l1.login_date HAVING COUNT(DISTINCT l2.login_date)>=4 ORDER BY l1.id
SELECT DISTINCT l1.id, A.name FROM Logins l1 JOIN Logins l2 ON l1.id = l2.id AND DATEDIFF(l1.login_date, l2.login_date) BETWEEN 1 AND 4 JOIN Accounts A ON l1.id = A.id GROUP BY l1.id, l1.login_date HAVING (COUNT(DISTINCT l2.login_date)) = 4
SELECT DISTINCT l1.id, A.name FROM Logins l1 JOIN Logins l2 ON l1.id = l2.id AND DATEDIFF(l1.login_date, l2.login_date) BETWEEN 1 AND 4 JOIN Accounts A ON l1.id = A.id GROUP BY l1.id, l1.login_date HAVING COUNT(DISTINCT l2.login_date) = 4
SELECT DISTINCT l1.id, A.name FROM Logins l1 JOIN Logins l2 ON l1.id = l2.id AND DATEDIFF(l1.login_date, l2.login_date) BETWEEN 1 AND 4 JOIN Accounts A ON l1.id = A.id GROUP BY l1.id, l1.login_date HAVING COUNT(DISTINCT l2.login_date) >= 4
SELECT DISTINCT l1.id, A.name FROM Logins l1 JOIN Logins l2 ON l1.id = l2.id AND DATEDIFF(l2.login_date, l1.login_date) BETWEEN 0 AND 4 JOIN Accounts A ON l1.id = A.id GROUP BY l1.id, l1.login_date HAVING COUNT(DISTINCT l2.login_date) = 5
SELECT DISTINCT l1.id, A.name FROM Logins l1 JOIN Logins l2 ON l1.id = l2.id AND DATEDIFF(l2.login_date, l1.login_date) BETWEEN 1 AND 4 JOIN Accounts A ON l1.id = A.id GROUP BY l1.id, l1.login_date HAVING COUNT(DISTINCT l2.login_date) = 4
SELECT DISTINCT l1.id, A.name FROM Logins l1 JOIN Logins l2 ON l1.id = l2.id AND DATEDIFF(l2.login_date, l1.login_date) BETWEEN 1 AND 4 JOIN Accounts a ON l1.id = a.id GROUP BY l1.id, l1.login_date HAVING COUNT(DISTINCT l2.login_date) = 4
SELECT DISTINCT l1.id, a.name FROM Logins AS l1 JOIN Logins AS l2 ON l1.id=l2.id AND DATEDIFF(l2.login_date, l1.login_date) BETWEEN 0 AND 4 JOIN Accounts AS a ON l1.id=a.id GROUP BY l1.id, l1.login_date HAVING COUNT(DISTINCT l2.login_date)=5
SELECT DISTINCT l1.id, a.name FROM Logins l1 JOIN Logins l2 ON l1.id = l2.id AND DATEDIFF(l1.login_date, l2.login_date) BETWEEN 1 AND 4 JOIN Accounts a ON l1.id = a.id GROUP BY l1.id, l1.login_date HAVING count(distinct l2.login_date) >= 4 ORDER by l1.id
SELECT DISTINCT l1.id, a.name FROM Logins l1 JOIN Logins l2 ON l1.id = l2.id AND DATEDIFF(l2.login_date, l1.login_date) BETWEEN 1 AND 4 JOIN Accounts A ON l1.id = a.id GROUP BY l1.id, l1.login_date HAVING COUNT(DISTINCT l2.login_date) = 4
SELECT DISTINCT l1.id, a.name FROM Logins l1 LEFT JOIN Accounts a ON l1.id = a.id WHERE date_add(l1.login_date,interval 1 day) in (SELECT login_date from Logins l2 where l2.id = l1.id) AND date_add(l1.login_date,interval 2 day) in (SELECT login_date from Logins l3 where l3.id = l1.id) AND date_add(l1.login_date,interval 3 day) in (SELECT login_date from Logins l4 where l4.id = l1.id) AND date_add(l1.login_date,interval 4 day) in (SELECT login_date from Logins l5 where l5.id = l1.id) ORDER BY 1
SELECT DISTINCT l1.id, a.name FROM Logins l1 LEFT JOIN Logins l2 ON l1.id = l2.id AND DATEDIFF(l2.login_date, l1.login_date) BETWEEN 1 AND 4 LEFT JOIN Accounts a ON l1.id = a.id GROUP BY l1.id, l1.login_date HAVING COUNT(DISTINCT l2.login_date) = 4
SELECT DISTINCT l1.id, a.name FROM logins l1 JOIN logins l2 ON l1.id = l2.id AND DATEDIFF(l2.login_date, l1.login_date) BETWEEN 1 AND 4 JOIN Accounts a ON a.id = l1.id GROUP BY l1.id, l1.login_date HAVING COUNT(DISTINCT l2.login_date) = 4
SELECT DISTINCT l1.id, a.name FROM logins l1 JOIN logins l2 ON l1.id = l2.id AND DATE_ADD(l1.login_date, INTERVAL 1 DAY) = l2.login_date JOIN logins l3 ON l2.id = l3.id AND DATE_ADD(l2.login_date, INTERVAL 1 DAY) = l3.login_date JOIN logins l4 ON l3.id = l4.id AND DATE_ADD(l3.login_date, INTERVAL 1 DAY) = l4.login_date JOIN logins l5 ON l4.id = l5.id AND DATE_ADD(l4.login_date, INTERVAL 1 DAY) = l5.login_date JOIN accounts a ON l1.id = a.id ORDER BY 1
SELECT DISTINCT l1.id, a.name FROM logins l1 JOIN logins l2 ON l1.id = l2.id JOIN Accounts a ON l1.id = a.id WHERE Datediff(l1.login_date, l2.login_date) BETWEEN 1 AND 4 GROUP BY l1.id, l1.login_date HAVING Count(DISTINCT l2.login_date) = 4
SELECT DISTINCT l1.id, a.name FROM logins l1 JOIN logins l2 ON l1.id = l2.id and DATEDIFF(l2.login_date, l1.login_date) between 1 and 4 JOIN Accounts a on a.id = l1.id GROUP BY l1.id, l1.login_date HAVING COUNT(DISTINCT l2.login_date) = 4
SELECT DISTINCT l1.id, a.name FROM logins l1 JOIN logins l2 ON l1.id = l2.id and DATEDIFF(l2.login_date, l1.login_date) between 1 and 4 JOIN Accounts a on a.id = l1.id GROUP BY l1.id, l1.login_date HAVING COUNT(DISTINCT l2.login_date) >= 4
SELECT DISTINCT q.id, b.name FROM( SELECT p.id, new_date, COUNT(new_date) as "cnt" FROM ( SELECT t.id, t.login_date, DATE_ADD(t.login_date, INTERVAL -ROW_NUMBER() OVER(PARTITION BY t.id ORDER BY t.login_date) DAY ) AS new_date FROM (SELECT DISTINCT id, login_date FROM LOGINS) t ) p GROUP BY p.id, p.new_date having count(new_date) >=5 ) q inner join accounts b on q.id = b.id ORDER BY q.id
SELECT DISTINCT sub2.id, name FROM ( SELECT id, DATEDIFF(LEAD(login_date,4) OVER(PARTITION BY id ORDER BY login_date), login_date) AS gap FROM (SELECT distinct id, login_date FROM Logins) sub1 ) sub2 JOIN Accounts ON sub2.id = Accounts.id WHERE gap = 4 ORDER BY sub2.id
SELECT DISTINCT t.id, a.name FROM ( SELECT id, login_date, LEAD(login_date, 4) OVER(PARTITION BY id ORDER BY login_date) fifth_day FROM Logins GROUP BY id, login_date ) t LEFT JOIN Accounts a ON t.id = a.id WHERE DATEDIFF(fifth_day, login_date) >= 4 AND DATE_ADD(login_date, INTERVAL 4 DAY) = fifth_day
SELECT DISTINCT t1.id, (SELECT name FROM Accounts WHERE id = t1.id) AS name FROM Logins AS t1 INNER JOIN Logins AS t2 ON t1.id = t2.id AND DATEDIFF(t2.login_date, t1.login_date) BETWEEN 0 AND 4 GROUP BY t1.id, t1.login_date HAVING COUNT(DISTINCT t2.login_date) = 5
SELECT DISTINCT t1.id, (SELECT name FROM Accounts WHERE id = t1.id) AS name FROM Logins AS t1 INNER JOIN Logins AS t2 ON t1.id = t2.id AND DATEDIFF(t2.login_date, t1.login_date) BETWEEN 0 AND 4 GROUP BY t1.id, t1.login_date HAVING COUNT(DISTINCT t2.login_date) >= 5
SELECT DISTINCT t1.id, (SELECT name FROM Accounts WHERE id = t1.id) AS name FROM Logins AS t1 INNER JOIN Logins AS t2 ON t1.id = t2.id AND DATEDIFF(t2.login_date, t1.login_date) BETWEEN 1 AND 4 GROUP BY t1.id, t1.login_date HAVING COUNT(DISTINCT t2.login_date) = 4
SELECT DISTINCT t1.id, Accounts.name FROM ( SELECT a.id FROM Logins a, Logins b WHERE a.id=b.id AND DATEDIFF(a.login_date,b.login_date) BETWEEN 1 AND 4 GROUP BY a.id, a.login_date HAVING COUNT(DISTINCT b.login_date)=4 ) as t1 JOIN Accounts ON Accounts.id = t1.id ORDER BY t1.id
SELECT DISTINCT x.id, (SELECT name FROM Accounts WHERE id=x.id) name FROM Logins x, Logins y WHERE x.id=y.id AND DATEDIFF(x.login_date, y.login_date) BETWEEN 1 AND 4 GROUP BY x.id, x.login_date HAVING COUNT(DISTINCT y.login_date)=4
SELECT DISTINCT x.id, x.name FROM (SELECT a.id, b.name, a.login_date, DATEDIFF(LEAD(a.login_date,4) OVER (partition by a.id order by a.login_date ASC), a.login_date)+1 as diff FROM Logins a JOIN Accounts b on a.id = b.id group by a.id, b.name, a.login_date) x where x.diff = 5
SELECT DISTINCT(a.id) as id, (select accounts.name from accounts where a.id = accounts.id) as name FROM logins a, logins b WHERE a.id = b.id AND DATEDIFF(a.login_date, b.login_date) BETWEEN 1 AND 4 GROUP BY a.id, a.login_date HAVING COUNT(DISTINCT b.login_date) = 4
SELECT Distinct L.id, A.name FROM Logins L join Logins L2 on L.id = L2.id and datediff(L.login_date,l2.login_date) between 0 and 4 join accounts A on L.id = A.id group by L.id, L.login_date having count(distinct L2.login_date ) > 4
SELECT Distinct L1.id,A.name FROM Accounts A join Logins L1 on A.id = L1.id join Logins L2 on L1.id = L2.id and DATEDIFF(l2.login_date, l1.login_date) BETWEEN 1 AND 4 group by L1.id, l1.login_date having count(distinct L2.login_date) = 4 order by L1.id
SELECT ID, NAME FROM ACCOUNTS WHERE ID IN (SELECT DISTINCT B.ID FROM (SELECT A.ID, DATE_SUB(A.LOGIN_DATE, INTERVAL A.CONSECT_DAYS DAY) AS GROUPED_DATE FROM (SELECT DISTINCT ID, LOGIN_DATE, DENSE_RANK() OVER (PARTITION BY ID ORDER BY LOGIN_DATE) CONSECT_DAYS FROM LOGINS) AS A) AS B GROUP BY B.ID, GROUPED_DATE HAVING COUNT(*) >= 5) ORDER BY ID
SELECT L1.ID, A.NAME FROM LOGINS L1 INNER JOIN LOGINS L2 ON L1.ID=L2.ID AND DATE_ADD(L1.LOGIN_DATE, INTERVAL 1 DAY)=L2.LOGIN_DATE INNER JOIN LOGINS L3 ON L2.ID=L3.ID AND DATE_ADD(L2.LOGIN_DATE, INTERVAL 1 DAY)=L3.LOGIN_DATE INNER JOIN LOGINS L4 ON L3.ID=L4.ID AND DATE_ADD(L3.LOGIN_DATE, INTERVAL 1 DAY)=L4.LOGIN_DATE INNER JOIN LOGINS L5 ON L4.ID=L5.ID AND DATE_ADD(L4.LOGIN_DATE, INTERVAL 1 DAY)=L5.LOGIN_DATE LEFT JOIN ACCOUNTS A ON L1.ID=A.ID GROUP BY L1.ID, A.NAME ORDER BY ID
SELECT a.id, a.name FROM Accounts a JOIN ( SELECT l1.id FROM Logins l1 JOIN Logins l2 ON l1.id = l2.id AND 0 <= DATEDIFF(l1.login_date, l2.login_date) AND DATEDIFF(l1.login_date, l2.login_date) < 5 GROUP BY l1.id, l1.login_date HAVING COUNT(DISTINCT DATEDIFF(l1.login_date, l2.login_date)) >= 5 ) t ON a.id = t.id GROUP BY a.id, a.name ORDER BY a.id
SELECT a.id, a.name FROM Accounts a WHERE a.id IN (SELECT l1.id FROM Logins l1 INNER JOIN Logins l2 ON l1.login_date = DATE_ADD(l2.login_date, INTERVAL 1 DAY) AND l1.id = l2.id INNER JOIN Logins l3 ON l1.login_date = DATE_ADD(l3.login_date, INTERVAL 2 DAY) AND l1.id = l3.id INNER JOIN Logins l4 ON l1.login_date = DATE_ADD(l4.login_date, INTERVAL 3 DAY) AND l1.id = l4.id INNER JOIN Logins l5 ON l1.login_date = DATE_ADD(l5.login_date, INTERVAL 4 DAY) AND l1.id = l5.id) ORDER BY a.id
SELECT distinct L.id, Accounts.name FROM Logins AS L JOIN Logins L1 on date_add(L1.login_date, interval 1 day)=L.login_date and L.id=L1.id JOIN Logins L2 on date_add(L2.login_date, interval 2 day)=L.login_date and L.id=L2.id JOIN Logins L3 on date_add(L3.login_date, interval 3 day)=L.login_date and L.id=L3.id JOIN Logins L4 on date_add(L4.login_date, interval 4 day)=L.login_date and L.id=L4.id JOIN Accounts on Accounts.id=L.id order by L.id
SELECT distinct a.id ,c.name FROM Logins a INNER JOIN Accounts c ON a.id=c.id INNER JOIN Logins b ON a.id=b.id AND a.login_date<b.login_date WHERE DATEDIFF(b.login_date,a.login_date) BETWEEN 1 and 4 GROUP BY a.id,a.login_date HAVING COUNT(distinct b.login_date)=4
SELECT distinct a.id ,c.name FROM Logins a INNER JOIN Accounts c ON a.id=c.id INNER JOIN Logins b ON a.id=b.id WHERE DATEDIFF(b.login_date,a.login_date) BETWEEN 1 and 4 GROUP BY a.id,a.login_date HAVING COUNT(distinct b.login_date)=4
SELECT distinct a.id as id, (SELECT name from Accounts WHERE id = a.id) as name FROM Logins as a, Logins as b WHERE a.id = b.id AND DATEDIFF(a.login_date, b.login_date) BETWEEN 1 and 4 GROUP BY a.id, a.login_date HAVING COUNT(Distinct b.login_date) >= 4
SELECT distinct a.id, (SELECT name FROM accounts WHERE id=a.id) AS name FROM logins a, logins b WHERE a.id = b.id AND DATEDIFF(a.login_date, b.login_date) BETWEEN 1 AND 4 GROUP BY a.id, a.login_date HAVING COUNT(DISTINCT b.login_date) = 4
SELECT distinct a.id, c.name FROM Logins a JOIN Logins b ON a.id = b.id AND DATEDIFF(a.login_date, b.login_date) BETWEEN 1 AND 4 LEFT JOIN Accounts c ON c.id = a.id GROUP BY a.id, a.login_date HAVING COUNT(distinct b.login_date) = 4
SELECT distinct a.id, name FROM accounts a JOIN (SELECT id, datediff(lead(login_date,4)over(partition by id order by login_date), login_date) as diff FROM (SELECT distinct id, login_date FROM logins) b) c ON a.id = c.id WHERE diff = 4 ORDER BY id
SELECT distinct a.id,c.name FROM Logins a INNER JOIN Accounts c ON a.id=c.id INNER JOIN Logins b ON a.id=b.id AND a.login_date<b.login_date WHERE DATEDIFF(b.login_date,a.login_date) BETWEEN 1 and 4 GROUP BY a.id,a.login_date HAVING COUNT(distinct b.login_date)=4
SELECT distinct c.id, c.name FROM (select l.id,a.name, l.login_date, datediff(lead(l.login_date,4)over(partition by l.id order by l.login_date),l.login_date)+1 as diff from logins as l join accounts as a on a.id = l.id group by l.id,l.login_date) as c where c.diff=5
SELECT distinct c.id, c.name FROM (select l.id,a.name, l.login_date, lead(l.login_date,4)over(partition by l.id order by l.login_date) as five, datediff(lead(l.login_date,4)over(partition by l.id order by l.login_date),l.login_date)+1 as diff from logins as l join accounts as a on a.id = l.id group by l.id,l.login_date,a.name) as c where c.diff=5
SELECT distinct id, name FROM ( SELECT a.id, a.name , login_date , lag(login_date) over(partition by a.id order by login_date) as lag1 , lag(login_date,2) over(partition by a.id order by login_date) as lag2 , lag(login_date,3) over(partition by a.id order by login_date) as lag3 , lag(login_date,4) over(partition by a.id order by login_date) as lag4 FROM Accounts a left join (SELECT DISTINCT id, login_date from logins) b on a.id=b.id ) A WHERE datediff(login_date,lag1)=1 and datediff(login_date,lag2)=2 and datediff(login_date,lag3)=3 and datediff(login_date,lag4)=4
SELECT distinct id, name FROM (SELECT *, Lead(login_date, 4) over(partition by id order by login_date) AS fifth_day FROM (SELECT distinct * FROM Logins) l) t JOIN Accounts a USING(id) WHERE datediff(fifth_day, login_date)=4 ORDER BY 1
SELECT distinct id, name FROM (SELECT *, lead(login_date, 4) over(partition by id order by login_date) AS next_4days FROM (SELECT distinct * FROM Logins) l) t JOIN Accounts USING(id) WHERE datediff(next_4days, login_date)=4 ORDER BY 1
SELECT distinct l1.id, A.name FROM Logins l1 JOIN Logins l2 ON l1.id = l2.id AND DATEDIFF(l2.login_date, l1.login_date) BETWEEN 1 AND 4 JOIN Accounts A ON l1.id = A.id GROUP BY l1.id, l1.login_date HAVING COUNT(DISTINCT l2.login_date) = 4
SELECT distinct l1.id, a.name FROM Logins l1 JOIN Logins l2 ON l1.id = l2.id AND DATEDIFF(l2.login_date, l1.login_date) BETWEEN 1 AND 4 JOIN Accounts a on a.id = l1.id GROUP BY l1.id, l1.login_date HAVING COUNT(distinct l2.login_date) = 4
SELECT distinct t.id, a.name from ( SELECT l1.id,l1.login_date,count(distinct l2.login_date)as cnt from Logins l1, Logins l2 where l1.id=l2.id and DATEDIFF(l2.login_date,l1.login_date) BETWEEN 0 AND 4 group by 1,2 )t join accounts a ON a.id = t.id where cnt>=5 order by t.id
SELECT distinct temp.id, a.name FROM ( SELECT *, LEAD(login_date, 4) OVER (PARTITION BY id ORDER BY login_date) AS lead_day FROM (SELECT distinct * FROM Logins) unique_t ORDER BY id, login_date ) temp LEFT JOIN Accounts a ON a.id = temp.id WHERE DATEDIFF(lead_day, login_date) = 4
SELECT distinct(b.id) as id, b.name FROM ( SELECT id, COUNT(*) as c FROM ( SELECT id, login_date, dense_rank() OVER (PARTITION BY id ORDER by login_date) as r FROM (SELECT distinct * from logins) a ) a GROUP BY id, DATE_ADD(login_date, INTERVAL -r day) ) a JOIN accounts b ON a.id = b.id where c >= 5 order by b.id
SELECT id, name FROM ( SELECT id, name, login_date, LAG(login_date, 4) OVER(PARTITION BY id ORDER BY login_date) AS lag_date, DATEDIFF(login_date, LAG(login_date, 4) OVER(PARTITION BY id ORDER BY login_date)) AS diff FROM ( SELECT l.id, a.name, l.login_date FROM logins l LEFT JOIN accounts a ON l.id = a.id GROUP BY 1, 2, 3 )x )y WHERE diff = 4 GROUP BY 1, 2
SELECT id, name FROM ( SELECT id, name, login_date, LEAD(login_date, 4) OVER(PARTITION BY id ORDER BY login_date) AS lead_date, date_add(login_date, INTERVAL 4 DAY) AS fifth_day FROM ( SELECT l.id, a.name, l.login_date FROM logins l LEFT JOIN accounts a ON l.id = a.id GROUP BY 1, 2, 3 )x )y WHERE lead_date = fifth_day GROUP BY 1, 2
SELECT id, name FROM ( SELECT id, name, login_date, LEAD(login_date, 4) OVER(PARTITION BY id ORDER BY login_date) AS lead_date, date_add(login_date, INTERVAL 4 DAY) AS fifth_day FROM ( SELECT l.id, a.name, l.login_date FROM logins l LEFT JOIN accounts a ON l.id = a.id GROUP BY 1, 2, 3 ORDER BY l.id, l.login_date )x )y WHERE lead_date = fifth_day GROUP BY 1, 2
SELECT id, name FROM Accounts WHERE id IN ( SELECT a.id FROM Logins a JOIN Logins b ON a.id=b.id AND DATEDIFF(b.login_date,a.login_date) BETWEEN 1 AND 4 GROUP BY a.id,a.login_date HAVING COUNT(DISTINCT b.login_date)=4 ) ORDER BY 1,2
SELECT id, name FROM Accounts WHERE id IN ( SELECT a.id FROM Logins a, Logins b WHERE a.id = b.id AND DATEDIFF(a.login_date, b.login_date) BETWEEN 1 AND 4 GROUP BY a.id, a.login_date HAVING COUNT(DISTINCT b.login_date) = 4 ) ORDER BY 1
SELECT id, name FROM Accounts WHERE id IN ( SELECT l1.id FROM Logins l1, Logins l2 WHERE DATEDIFF(l1.login_date, l2.login_date) BETWEEN 1 AND 4 AND l1.id=l2.id GROUP BY l1.id, l1.login_date HAVING COUNT(distinct l2.login_date)>=4 ) ORDER BY id
SELECT l.id,l.name FROM Accounts l WHERE l.id IN (SELECT l1.id FROM Logins l1 JOIN Logins l2 ON l1.id = l2.id AND DATEDIFF(l2.login_date,l1.login_date) BETWEEN 0 AND 4 GROUP BY l1.id,l1.login_date HAVING COUNT(DISTINCT l2.login_date) >= 5) ORDER BY l.id
SELECT sub2.id, name FROM Accounts a INNER JOIN (SELECT id, CASE WHEN DATEDIFF(LEAD(login_date,4) OVER (PARTITION BY id ORDER BY login_date), login_date) = 4 THEN 1 ELSE 0 END AS filter FROM (SELECT id, login_date FROM Logins GROUP BY 1,2) sub ) sub2 ON a.id = sub2.id WHERE filter = 1 GROUP BY sub2.id ORDER BY id
Select Distinct a.id,name From (Select id, login_date,count(id) over (partition by id order by login_date ASC range between interval 4 day preceding and current row) cnt From (Select Distinct id, login_date From Logins)a)b join Accounts a on b.id=a.id Where cnt >= 5 order by a.id ASC
Select Distinct l1.id, a.name From Logins as l1 Join Logins as l2 On l1.login_date = subdate(l2.login_date, interval 1 day) And l1.id = l2.id Join Logins as l3 On l1.login_date = subdate(l3.login_date, interval 2 day) And l1.id = l3.id Join Logins as l4 On l1.login_date = subdate(l4.login_date, interval 3 day) And l1.id = l4.id Join Logins as l5 On l1.login_date = subdate(l5.login_date, interval 4 day) And l1.id = l5.id Join Accounts as a On l1.id = a.id Order By id
Select distinct Accounts.id,name from (Select l1.id,l1.login_date from Logins l1, Logins l2 where l1.id=l2.id and datediff(l1.login_date,l2.login_date) between 0 and 4 group by l1.id,l1.login_date having count(distinct l2.login_date)=5) a left join Accounts on Accounts.id=a.id
Select distinct a.id, (Select name From Accounts where a.id=Accounts.id) as name From Logins a Inner Join Logins b On a.id=b.id where DATEDIFF(a.login_date, b.login_date) between 1 and 4 Group By a.id, a.login_date Having Count(distinct b.login_date)>=4 Order by a.id
Select distinct a.id, Accounts.name from logins a join logins b on a.id = b.id and datediff(a.login_date,b.login_date) between 1 and 4 join Accounts on a.id = Accounts.id group by a.id,a.login_date having count(distinct b.login_date) = 4
Select distinct a.id, name From Logins a join Logins b On a.id=b.id And DATEDIFF(a.login_date, b.login_date) Between 1 and 4 join Accounts on a.id=Accounts.id Group by a.id, a.login_date Having count(distinct b.login_date) = 4
Select distinct l1.id,(SELECT name FROM Accounts WHERE id=l1.id) name from Logins l1,Logins l2 Where l1.id=l2.id and datediff(l2.login_date,l1.login_date)>=1 and datediff(l2.login_date,l1.login_date)<=4 group by l1.id,l1.login_date having count(distinct l2.login_date)=4
WITH CONSEC_LOGIN AS( SELECT LOGINS.ID, NAME, LOGIN_DATE, DAYOFYEAR(LOGIN_DATE) - DENSE_RANK() OVER (PARTITION BY ID ORDER BY LOGIN_DATE) AS DATE_RANK FROM LOGINS NATURAL JOIN ACCOUNTS ) SELECT DISTINCT ID, NAME FROM CONSEC_LOGIN GROUP BY DATE_RANK, ID HAVING COUNT(DISTINCT LOGIN_DATE)>=5 ORDER BY ID
WITH CTE AS ( SELECT *, date_add(login_date, interval rnum day) AS groupings FROM (SELECT *, -DENSE_RANK() OVER(PARTITION BY id ORDER BY login_date) AS rnum FROM logins)sub11 ) SELECT DISTINCT sub1.id, acc.name FROM (SELECT id, groupings, MIN(login_date), MAX(login_date), COUNT(*) FROM cte GROUP BY 1, 2 HAVING datediff(MAX(login_date), MIN(login_date)) >= 4) sub1 JOIN accounts acc ON acc.id = sub1.id ORDER BY 1
WITH CTE AS ( SELECT *, date_add(login_date, interval rnum day) AS groupings FROM (SELECT *, -DENSE_RANK()OVER(PARTITION BY id ORDER BY login_date) AS rnum FROM logins) sub3 ) SELECT distinct sub1.id, acc.name FROM (SELECT id, groupings, MIN(login_date), MAX(login_date), datediff(MAX(login_date), MIN(login_date)) as duration, COUNT(id) FROM cte GROUP BY 1, 2 HAVING datediff(MAX(login_date), MIN(login_date)) >= 4) sub1 JOIN accounts acc ON acc.id = sub1.id order by 1
WITH CTE AS ( SELECT ID, LOGIN_DATE, DENSE_RANK() OVER(PARTITION BY ID ORDER BY LOGIN_DATE) AS ROW_NUM FROM LOGINS) SELECT DISTINCT ID, NAME FROM ACCOUNTS WHERE ID IN (SELECT ID FROM CTE GROUP BY ID, DATE_ADD(LOGIN_DATE, INTERVAL -ROW_NUM DAY) HAVING COUNT(DISTINCT LOGIN_DATE)>=5) ORDER BY ID
WITH CTE AS ( select l4.id from ( select l3.id, datediff(l3.fifthdatelog, l3.login_date) as datediffcount from ( select l2.id, l2.login_date, lead(l2.login_date, 4) over (partition by l2.id) as fifthdatelog from ( select l.id, l.login_date from Logins l group by l.id, l.login_date order by l.login_date ASC ) l2 ) l3 ) l4 where l4.datediffcount = 4 group by l4.id ) select a.id, a.name from Accounts a inner join CTE on a.id = CTE.id group by a.id order by id ASC
WITH CTE AS( SELECT DISTINCT id, login_date FROM Logins ORDER BY id, login_date ), CTE1 AS( SELECT *, DATEDIFF(login_date, LAG(login_date, 4) OVER (PARTITION BY id ORDER BY login_date)) AS diff FROM CTE ) SELECT id, name FROM Accounts WHERE id IN (SELECT id FROM CTE1 WHERE diff = 4) ORDER BY 1
WITH CTE1 AS ( SELECT DISTINCT id, login_date FROM Logins ), CTE2 AS ( SELECT id, login_date, LEAD(login_date, 4) OVER(PARTITION BY id ORDER BY login_date) AS date_lead_five FROM CTE1 ) SELECT DISTINCT c2.id, a.name FROM CTE2 c2 INNER JOIN Accounts a ON c2.id = a.id WHERE DATEDIFF(c2.date_lead_five, c2.login_date) = 4 ORDER BY c2.id ASC
WITH CTE1 AS ( SELECT DISTINCT id, login_date FROM Logins ), CTE2 AS ( SELECT id, login_date, LEAD(login_date,4) OVER (PARTITION BY id ORDER BY login_date) AS date_lead_five FROM CTE1 ) SELECT distinct c2.id, a.name FROM CTE2 AS c2 INNER JOIN Accounts a ON c2.id = a.id WHERE DATEDIFF(c2.date_lead_five,c2.login_date) = 4 ORDER BY c2.id ASC
WITH CTE1 AS ( SELECT ID, LOGIN_DATE, ROW_NUMBER() OVER(PARTITION BY ID ORDER BY LOGIN_DATE) AS RNO FROM (SELECT DISTINCT ID, LOGIN_DATE FROM LOGINS) T ) , CTE2 AS ( SELECT *, SUBDATE(LOGIN_DATE, RNO) AS CONSECUTIVE FROM CTE1 GROUP BY ID, CONSECUTIVE HAVING COUNT(RNO) >= 5 ) SELECT DISTINCT ID, NAME FROM CTE2 JOIN ACCOUNTS USING(ID) ORDER BY ID
WITH DistinctLogins AS (SELECT DISTINCT id, login_date FROM Logins), ConsecutiveLogin AS (SELECT id ,login_date ,LEAD(login_date,4) OVER (PARTITION BY id ORDER BY login_date ASC) AS Day5Login FROM DistinctLogins), ActiveUserId AS (SELECT DISTINCT id FROM ConsecutiveLogin WHERE DATEDIFF(Day5Login,login_date) = 4) SELECT A.id ,A.name FROM Accounts A INNER JOIN ActiveUserId AU ON AU.id = A.id ORDER BY 1
WITH FIVE_DAYS_TABLE AS( SELECT *, LEAD(login_date, 4) OVER(PARTITION BY id ORDER BY login_date) AS FIVE_DAYS_AFTER FROM (SELECT DISTINCT * FROM Logins) AS UNIQUE_DATE_TABLE ) SELECT distinct F.id, A.name FROM FIVE_DAYS_TABLE F JOIN Accounts A USING(id) WHERE DATEDIFF(FIVE_DAYS_AFTER, login_date) = 4 ORDER BY id
WITH L AS ( SELECT DISTINCT id, login_date FROM Logins ) SELECT DISTINCT l3.id, a.name FROM ( SELECT l1.id, l1.login_date, COUNT(l2.login_date) AS cnt FROM L l1 LEFT JOIN L l2 ON l1.id=l2.id AND l2.login_date <= DATE_ADD(l1.login_date, INTERVAL 4 DAY) AND l2.login_date > l1.login_date GROUP BY 1,2 HAVING cnt >=4 ) l3 LEFT JOIN Accounts a ON l3.id=a.id ORDER BY 1
WITH S0 AS (SELECT Logins.`id`, login_date AS day1 FROM Logins INNER JOIN (SELECT `id`, login_date AS day2 FROM Logins) S2 ON Logins.`id` = S2.`id` AND DATE_ADD(Logins.login_date, INTERVAL 1 DAY) = day2 INNER JOIN (SELECT `id`, login_date AS day3 FROM Logins) S3 ON Logins.`id` = S3.`id` AND DATE_ADD(Logins.login_date, INTERVAL 2 DAY) = day3 INNER JOIN (SELECT `id`, login_date AS day4 FROM Logins) S4 ON Logins.`id` = S4.`id` AND DATE_ADD(Logins.login_date, INTERVAL 3 DAY) = day4 INNER JOIN (SELECT `id`, login_date AS day5 FROM Logins) S5 ON Logins.`id` = S5.`id` AND DATE_ADD(Logins.login_date, INTERVAL 4 DAY) = day5) SELECT DISTINCT(S0.`id`) AS `id`, name FROM S0 INNER JOIN Accounts ON S0.`id` = Accounts.`id` ORDER BY `id`
WITH T1 AS (SELECT DISTINCT id, login_date, DENSE_RANK() OVER (PARTITION BY id ORDER BY login_date) AS ranks FROM Logins), T2 AS (SELECT id, DATE_SUB(login_date, INTERVAL ranks DAY) AS diff, COUNT(*) AS num FROM T1 GROUP BY 1,2) SELECT id, name FROM Accounts WHERE id IN (SELECT id FROM T2 WHERE num > 4) ORDER BY id
WITH T1 AS (SELECT DISTINCT id, login_date, DENSE_RANK() OVER (PARTITION BY id ORDER BY login_date) AS ranks FROM Logins), T2 AS (SELECT id, login_date - INTERVAL ranks DAY AS diff, COUNT(*) AS num FROM T1 GROUP BY 1,2) SELECT id, name FROM Accounts WHERE id IN (SELECT id FROM T2 WHERE num > 4) ORDER BY id
WITH TEMP AS (SELECT A.ID, A.NAME AS NAME, DAYOFYEAR(L.LOGIN_DATE)- CAST(ROW_NUMBER() OVER (PARTITION BY ID ORDER BY L.LOGIN_DATE) AS SIGNED) AS GRP FROM ACCOUNTS A, (SELECT DISTINCT * FROM LOGINS) L WHERE A.ID = L.ID), TEMP2 AS (SELECT ID, NAME, COUNT(*) AS CNT FROM TEMP GROUP BY ID, NAME, GRP) SELECT DISTINCT ID, NAME FROM TEMP2 WHERE CNT>=5
WITH TEMP AS (SELECT ID, DAYOFYEAR(LOGIN_DATE)-CAST(ROW_NUMBER() OVER (PARTITION BY ID ORDER BY LOGIN_DATE) AS SIGNED) AS GRP FROM (SELECT DISTINCT * FROM LOGINS) T) SELECT DISTINCT A.ID, A.NAME FROM ACCOUNTS A, TEMP T WHERE A.ID = T.ID GROUP BY A.ID, A.NAME, GRP HAVING COUNT(*)>=5
WITH Tbl AS (SELECT ROW_NUMBER() OVER (ORDER BY id, login_date) AS 'rn', id, login_date, login_date - INTERVAL (ROW_NUMBER() OVER (ORDER BY id, login_date)) DAY AS 'grp' FROM (SELECT DISTINCT id, login_date FROM Logins) M) SELECT DISTINCT Tbl.id, A.name FROM Tbl LEFT JOIN Accounts A ON Tbl.id = A.id GROUP BY Tbl.id, Tbl.grp, A.name HAVING COUNT(*) >= 5
WITH a AS ( SELECT DISTINCT id, login_date FROM Logins ), b AS ( SELECT id, login_date, DATE_SUB(login_date, INTERVAL (ROW_NUMBER() OVER(PARTITION BY id ORDER BY login_date)) DAY) AS g FROM a ) SELECT id, name FROM Accounts WHERE id IN ( SELECT id FROM b GROUP BY id, g HAVING COUNT(*) >= 5 ) ORDER BY id
WITH a AS ( SELECT distinct id, login_date FROM logins), b AS(SELECT *, rank() over(partition by id order by login_date) rnk FROM a) SELECT distinct b.id, a.name FROM b JOIN Accounts a on a.id = b.id GROUP BY 1, DATE_SUB(b.login_date, interval b.rnk day) HAVING count(*)>=5 ORDER BY a.id
WITH add_rank_num AS( SELECT id, DENSE_RANK() OVER(PARTITION BY id ORDER BY login_date) AS rank_num, login_date FROM Logins ), add_date_diff AS ( SELECT id, SUBDATE(login_date, INTERVAL rank_num DAY) AS diff, login_date, rank_num FROM add_rank_num ) , add_count AS ( SELECT id, COUNT(DISTINCT login_date) AS n FROM add_date_diff GROUP BY id, diff HAVING n >= 5 ) SELECT DISTINCT add_count.id, Accounts.name FROM add_count INNER JOIN Accounts ON add_count.id = Accounts.id ORDER BY id
WITH all_data AS(SELECT DISTINCT l.id, l.login_date,a.name FROM Logins l JOIN Accounts a ON l.id=a.id) SELECT id, name FROM ( SELECT *, CASE WHEN DATEDIFF(LEAD(login_date,4) OVER(PARTITION BY id ORDER BY login_date), login_date) = 4 THEN 1 ELSE 0 END cons_days FROM all_data ) sub1 GROUP BY 1,2 HAVING SUM(cons_days)>=1 ORDER BY 1
WITH consecutive_login AS ( SELECT id, login_date, COUNT(login_date) OVER (PARTITION BY id ORDER BY login_date range between current row and interval 4 day following) AS consecutive_days FROM (SELECT DISTINCT * FROM Logins) tmp) SELECT DISTINCT c.id, a.name FROM consecutive_login c LEFT JOIN Accounts a ON a.id = c.id WHERE consecutive_days >= 5
WITH cte AS ( SELECT distinct id, login_date, dense_rank () over (partition by id order by login_date) as rn FROM logins ) SELECT id, name FROM accounts WHERE id IN ( SELECT id FROM cte GROUP BY id, date_sub(login_date, INTERVAL rn day) HAVING count(id) >= 5 ) ORDER BY id
WITH cte AS ( SELECT id ,login_date ,LAG(login_date, 4) OVER(PARTITION BY id ORDER BY login_date) log4 FROM (SELECT DISTINCT * FROM Logins) tmp ) SELECT act.id ,act.name FROM Accounts act JOIN cte a ON act.id = a.id AND DATEDIFF(login_date, log4) = 4 GROUP BY 1 ORDER BY 1
WITH cte AS ( SELECT id, login_date, LAG(login_date,4) OVER ( PARTITION BY id ORDER BY login_date ) AS login_lag FROM ( SELECT DISTINCT id, login_date FROM Logins ) t1 ORDER BY login_date ) SELECT DISTINCT l.id, a.name FROM cte l LEFT JOIN Accounts a ON l.id = a.id WHERE DATEDIFF(login_date, login_lag) = 4 ORDER BY l.id
WITH cte AS (SELECT * ,ROW_NUMBER() OVER (PARTITION BY id ORDER BY login_date) AS rn FROM (SELECT DISTINCT id ,login_date FROM Logins) log) SELECT * FROM Accounts WHERE id IN ( SELECT DISTINCT c1.id FROM cte c1 JOIN cte c2 ON c1.id = c2.id AND DATEDIFF(c2.login_date,c1.login_date)=4 AND c2.rn = c1.rn+4) ORDER BY id
WITH cte AS (SELECT * ,ROW_NUMBER() OVER (PARTITION BY id ORDER BY login_date) AS rn FROM (SELECT DISTINCT l.id ,a.name ,l.login_date FROM Logins l JOIN Accounts a ON l.id = a.id) b) SELECT DISTINCT c1.id ,c1.name FROM cte c1 JOIN cte c2 ON c1.id = c2.id AND c2.rn = c1.rn+4 AND DATEDIFF(c2.login_date,c1.login_date) = 4 ORDER BY 1
WITH cte AS (SELECT *, LEAD(login_date, 4, NULL) OVER ( PARTITION BY id ORDER BY login_date) as fifthDay FROM Logins group by id,login_date ) SELECT distinct a.id, name FROM cte l JOIN Accounts a ON l.id = a.id WHERE fifthDay=date_add(login_date, interval 4 day) ORDER BY a.id
WITH cte1 AS (SELECT DISTINCT l.id,l.login_date,a.name FROM Logins as l INNER JOIN Accounts as a ON a.id=l.id) ,cte2 AS (SELECT l1.id as id1, l1.name as name1, DATE(l1.login_date) as c1,l2.login_date as c2,l3.login_date as c3,l4.login_date as c4,l5.login_date as c5, l2.name as name2,l3.name as name3,l4.name as name4,l5.name as name5,l2.id as id2,l3.id as id3,l4.id as id4,l5.id as id5 FROM cte1 AS l1 INNER JOIN cte1 as l2 ON l1.id=l2.id AND DATE(l1.login_date)+interval 1 day=DATE(l2.login_date) INNER JOIN cte1 as l3 ON l1.id=l3.id AND DATE(l1.login_date)+interval 2 day=DATE(l3.login_date) INNER JOIN cte1 as l4 ON l1.id=l4.id AND DATE(l1.login_date)+interval 3 day=DATE(l4.login_date) INNER JOIN cte1 as l5 ON l1.id=l5.id AND DATE(l1.login_date)+interval 4 day=DATE(l5.login_date)) SELECT id1 as 'id',name1 as 'name' FROM cte2 UNION SELECT id2 as 'id',name2 as 'name' FROM cte2 UNION SELECT id3 as 'id',name3 as 'name' FROM cte2 UNION SELECT id4 as 'id',name4 as 'name' FROM cte2 UNION SELECT id5 as 'id',name5 as 'name' FROM cte2 ORDER BY id
WITH cte1 as ( SELECT distinct id ,login_date FROM Logins ) , cte2 as ( SELECT id ,login_date ,lead(login_date,4) over(partition by id order by login_date) as login_nextdate5 FROM cte1 ) SELECT DISTINCT c.id ,a.name FROM cte2 c INNER JOIN Accounts a ON(c.id=a.id) WHERE datediff(c.login_nextdate5,c.login_date) = 4 ORDER BY c.id
WITH cte1 as (SELECT temp.id, temp.login_date, ROW_NUMBER() OVER (PARTITION BY temp.id ORDER BY temp.login_date asc) as ranked_dates FROM (SELECT distinct id, login_date FROM logins) temp), cte_2 as ( SELECT id, DATEDIFF(max(login_date),min(login_date)) + 1 as diff_days FROM cte1 GROUP BY id, DATE_ADD(login_date,INTERVAL -ranked_dates DAY) ) SELECT distinct id, name FROM cte_2 c2 JOIN accounts a USING(id) WHERE diff_days>=5 ORDER BY id
WITH cte_logins AS ( SELECT DISTINCT id, login_date, DATE_ADD(login_date, INTERVAL 4 DAY) AS fifth_date, ROW_NUMBER() OVER (PARTITION BY id ORDER BY login_date ASC) AS login_date_rank FROM ( SELECT DISTINCT id, login_date FROM Logins ORDER BY id, login_date ) d ) SELECT a.id, a.name FROM Accounts a WHERE id IN ( SELECT DISTINCT p.id FROM cte_logins p INNER JOIN cte_logins a ON p.id = a.id AND p.login_date = a.fifth_date AND p.login_date_rank = a.login_date_rank + 4 ) ORDER BY a.id
WITH cte_logins AS ( SELECT DISTINCT id, login_date, LEAD(login_date, 4) OVER (PARTITION BY id ORDER BY login_date ASC) AS leading_5_date, DATE_ADD(login_date, INTERVAL 4 DAY) AS fifth_date FROM ( SELECT DISTINCT id, login_date FROM Logins ORDER BY id, login_date ) d ) SELECT a.id, a.name FROM Accounts a WHERE id IN ( SELECT DISTINCT id FROM cte_logins WHERE leading_5_date = fifth_date ) ORDER BY a.id
WITH cte_x AS ( SELECT id, LEAD(login_date,4) OVER( PARTITION BY id ORDER BY login_date ) AS day5, login_date FROM Logins GROUP BY id,login_date ) SELECT DISTINCT cte_x.id, name FROM cte_x INNER JOIN Accounts ON cte_x.id = Accounts.id AND day5 = DATE_ADD(login_date, Interval 4 day) ORDER BY 1
WITH daily_login AS (SELECT id , login_date FROM logins GROUP BY id , login_date) SELECT logins_summary.id , name FROM ( SELECT id , login_date , DATEDIFF(login_date , LAG(login_date , 4) OVER (PARTITION BY id order by login_date)) AS days_since_login FROM daily_login) logins_summary LEFT JOIN Accounts ON logins_summary.id = Accounts.id WHERE days_since_login = 4 GROUP BY logins_summary.id , name
WITH lead_login_dates_cte AS(SELECT id, login_date, LEAD(login_date, 4) OVER(PARTITION BY id ORDER BY login_date) AS lead_date FROM (SELECT DISTINCT id, login_date FROM logins) distinct_logins) SELECT DISTINCT id, name FROM lead_login_dates_cte INNER JOIN accounts USING(id) WHERE DATEDIFF(lead_date, login_date) = 4 ORDER BY id
WITH log_lag AS (SELECT DISTINCT id, DATEDIFF(login_date,lag(login_date, 4) OVER (PARTITION BY id ORDER BY login_date)) AS diff FROM (SELECT DISTINCT id, login_date FROM logins) l2 ), dlog AS (SELECT DISTINCT id FROM log_lag WHERE diff=4 ) select distinct d.id, a.name FROM dlog d JOIN Accounts a ON d.id = a.id order by id
WITH login_grouped AS (SELECT id, login_date FROM logins GROUP BY 1,2 ORDER BY 1,2 ASC) SELECT l1.id,name FROM login_grouped l1 INNER JOIN login_grouped l2 ON l1.id = l2.id AND DATEDIFF(l2.login_date,l1.login_date)=1 INNER JOIN login_grouped l3 ON l1.id = l3.id AND DATEDIFF(l3.login_date,l1.login_date)=2 INNER JOIN login_grouped l4 ON l1.id = l4.id AND DATEDIFF(l4.login_date,l1.login_date)=3 INNER JOIN login_grouped l5 ON l1.id = l5.id AND DATEDIFF(l5.login_date,l1.login_date)=4 INNER JOIN accounts a ON l1.id = a.id GROUP BY l1.id, name order by l1.id
WITH login_grouped AS (SELECT id, login_date FROM logins GROUP BY 1,2) SELECT l1.id,name FROM login_grouped l1 INNER JOIN login_grouped l2 ON l1.id = l2.id AND DATEDIFF(l2.login_date,l1.login_date)=1 INNER JOIN login_grouped l3 ON l1.id = l3.id AND DATEDIFF(l3.login_date,l1.login_date)=2 INNER JOIN login_grouped l4 ON l1.id = l4.id AND DATEDIFF(l4.login_date,l1.login_date)=3 INNER JOIN login_grouped l5 ON l1.id = l5.id AND DATEDIFF(l5.login_date,l1.login_date)=4 INNER JOIN accounts a ON l1.id = a.id GROUP BY l1.id, name order by l1.id
WITH login_info AS (SELECT L.id, L.login_date, A.name, LEAD(L.login_date,4) OVER (PARTITION BY L.id ORDER BY L.login_date) AS fifth_login_day FROM Logins L JOIN Accounts A ON L.id = A.id GROUP BY 1,2) SELECT DISTINCT L.id, L.name FROM login_info L WHERE DATEDIFF(L.fifth_login_day, L.login_date) = 4
WITH logins_ranked AS ( SELECT id, login_date, ROW_NUMBER() OVER(PARTITION BY id ORDER BY login_date) AS rn, DATEDIFF(login_date, MIN(login_date) OVER(PARTITION BY id ORDER BY login_date))+1 AS date_diff FROM ( SELECT DISTINCT id, login_date FROM logins ) uniq_id_login ) SELECT DISTINCT logins_ranked.id, accounts.name FROM logins_ranked LEFT JOIN accounts ON logins_ranked.id = accounts.id GROUP BY id, date_diff-rn HAVING COUNT(*) >= 5 ORDER BY 1
WITH sub AS( SELECT id, login_date, lead(login_date,4) over(partition by id order by login_date) as leading_date FROM logins GROUP BY 1, 2) SELECT DISTINCT a.id, a.name FROM accounts a JOIN sub ON sub.id = a.id AND datediff(sub.leading_date, login_date) = 4 ORDER BY 1
WITH t AS ( SELECT *, DENSE_RANK() OVER (PARTITION BY id ORDER BY login_date ASC) rnk FROM Logins ) SELECT d.id, name FROM ( SELECT DISTINCT t1.id FROM t t1, t t2 WHERE t1.id = t2.id AND DATEDIFF(t1.login_date,t2.login_date) >= 4 AND t1.rnk-t2.rnk >=4 AND DATEDIFF(t1.login_date,t2.login_date) = t1.rnk-t2.rnk ) d JOIN Accounts a ON d.id = a.id ORDER BY d.id
WITH t AS ( SELECT DISTINCT id,login_date FROM logins ), m AS ( SELECT id, login_date d1, LEAD(login_date,4) OVER(PARTITION BY id ORDER BY login_date ASC) d5 FROM t ) SELECT DISTINCT a.id id, a.name name FROM m JOIN accounts a ON m.id=a.id WHERE m.d1=m.d5-interval 4 day ORDER BY id
WITH t AS ( SELECT id, login_date, LAG(login_date, 4) OVER(PARTITION BY id ORDER BY login_date) AS lag_5 FROM (SELECT DISTINCT id, login_date FROM Logins GROUP BY id, login_date) t2 ) SELECT DISTINCT t.id, name FROM Accounts a LEFT JOIN t ON a.id = t.id WHERE DATEDIFF(t.login_date, lag_5) = 4 ORDER BY id
WITH t AS ( SELECT id, login_date, LAG(login_date, 4) OVER(PARTITION BY id ORDER BY login_date) AS lag_5 FROM (SELECT DISTINCT id, login_date FROM Logins) t2 ) SELECT DISTINCT t.id, name FROM Accounts a LEFT JOIN t ON a.id = t.id WHERE DATEDIFF(t.login_date, lag_5) = 4 ORDER BY id
WITH t AS (SELECT *, (DAYOFYEAR(Login_date) - DENSE_RANK() OVER(PARTITION BY id ORDER BY login_date ASC)) AS diff FROM Logins) SELECT DISTINCT a.id, a.name FROM t JOIN Accounts a ON t.id=a.id GROUP BY a.id, t.diff HAVING COUNT(DISTINCT t.login_date)>=5
WITH t AS (SELECT DISTINCT * FROM logins), r AS (SELECT t1.id, t1.login_date FROM t t1 JOIN t t2 ON t1.id = t2.id AND t2.login_date <= DATE_ADD(t1.login_date, INTERVAL 4 DAY) AND t2.login_date >= t1.login_date GROUP BY 1, 2 HAVING COUNT(t2.login_date) >= 5) SELECT DISTINCT r.id, a.name FROM r JOIN accounts a ON r.id = a.id ORDER BY 1
WITH t AS (SELECT DISTINCT * FROM logins), r AS (SELECT t1.id, t1.login_date, COUNT(t2.login_date) FROM t t1 LEFT JOIN t t2 ON t1.id = t2.id AND t2.login_date <= DATE_ADD(t1.login_date, INTERVAL 4 DAY) AND t2.login_date >= t1.login_date GROUP BY 1, 2 HAVING COUNT(t2.login_date) >= 5) SELECT DISTINCT r.id, a.name FROM r JOIN accounts a ON r.id = a.id ORDER BY 1
WITH t AS (SELECT id, login_date, LAG(login_date, 4) OVER (PARTITION BY id ORDER BY login_date) AS lag5 FROM (SELECT DISTINCT id, login_date FROM Logins) t2 ) SELECT DISTINCT a.id, name FROM Accounts a LEFT JOIN t ON a.id = t.id WHERE DATEDIFF(login_date, lag5) = 4 ORDER BY id
WITH t as ( select id, login_date, count(1) as con from Logins group by id, login_date ), result as( select t1.id, t1.login_date, count(1) as con from t as t1, t as t2 where t1.id = t2.id and datediff(t1.login_date, t2.login_date) between 0 and 4 group by t1.id, t1.login_date having con >=5 ) select * from Accounts where id in (select distinct id from result) order by id
WITH t0 AS( SELECT *, DENSE_RANK()OVER(PARTITION BY id ORDER BY login_date) AS rk FROM Logins ), t1 AS( SELECT id,login_date,rk, DATE_ADD(login_date, INTERVAL -rk DAY) AS groupings FROM t0 ), t2 AS( SELECT id, MIN(login_date) AS start_date, MAX(login_date) AS end_date, rk, groupings, count(id) AS cnt, DATEDIFF(MAX(login_date), MIN(login_date)) AS duration FROM t1 GROUP BY id, groupings HAVING DATEDIFF(MAX(login_date), MIN(login_date)) >= 4 ORDER BY id, start_date ) SELECT DISTINCT a.id, b.name FROM t2 a JOIN Accounts b ON a.id = b.id ORDER BY a.id
WITH t1 AS ( SELECT DISTINCT id, login_date FROM Logins ), t2 AS ( SELECT id, login_date, LEAD(login_date, 4)OVER(PARTITION BY id ORDER BY login_date) AS lead_4days FROM t1 ) SELECT DISTINCT a.id, name FROM t2 INNER JOIN Accounts a ON t2.id=a.id WHERE DATEDIFF(lead_4days, login_date)=4 ORDER BY 1
WITH table1 AS ( SELECT DISTINCT id, login_date FROM Logins ), table2 AS ( SELECT id, login_date, row_number() over (partition by id order by login_date) as rk FROM table1 ), table3 AS ( SELECT id, SUBDATE(login_date, rk) as diff FROM table2 ) SELECT id, name FROM Accounts WHERE id IN ( SELECT id FROM table3 GROUP BY id, diff HAVING COUNT(*) >= 5 ) ORDER BY id
WITH table1 AS( SELECT DISTINCT l.id, l.login_date, a.name FROM Logins l LEFT JOIN Accounts a USING(id) ), table2 AS( SELECT id, login_date, name, LEAD(login_date,1) OVER(PARTITION BY id ORDER BY login_date) As lead1, LEAD(login_date,2) OVER(PARTITION BY id ORDER BY login_date) As lead2, LEAD(login_date,3) OVER(PARTITION BY id ORDER BY login_date) As lead3, LEAD(login_date,4) OVER(PARTITION BY id ORDER BY login_date) As lead4 FROM table1 ) SELECT DISTINCT id, name FROM table2 WHERE DATEDIFF(lead4,lead3)=1 AND DATEDIFF(lead3,lead2)=1 AND DATEDIFF(lead2,lead1)=1 AND DATEDIFF(lead1,login_date)=1 ORDER BY id
WITH table1 AS( SELECT id, name, login_date, LEAD(login_date,1)OVER(PARTITION BY id ORDER BY login_date ASC) AS lead_1, LEAD(login_date,2)OVER(PARTITION BY id ORDER BY login_date ASC) AS lead_2, LEAD(login_date,3)OVER(PARTITION BY id ORDER BY login_date ASC) AS lead_3, LEAD(login_date,4)OVER(PARTITION BY id ORDER BY login_date ASC) AS lead_4, LAG(login_date,1)OVER(PARTITION BY id ORDER BY login_date ASC) AS lag_1, LAG(login_date,2)OVER(PARTITION BY id ORDER BY login_date ASC) AS lag_2, LAG(login_date,3)OVER(PARTITION BY id ORDER BY login_date ASC) AS lag_3, LAG(login_date,4)OVER(PARTITION BY id ORDER BY login_date ASC) AS lag_4 FROM Logins LEFT JOIN Accounts USING(id) GROUP BY id, login_date ORDER BY id, login_date ASC ) SELECT DISTINCT id, name FROM table1 WHERE (DATEDIFF(lead_4,lead_3)*DATEDIFF(lead_3,lead_2)*DATEDIFF(lead_2,lead_1)*DATEDIFF(lead_1,login_date))=1 OR (DATEDIFF(login_date, lag_1)*DATEDIFF(lag_1,lag_2)*DATEDIFF(lag_2,lag_3)*DATEDIFF(lag_3,lag_4))=1
WITH temp AS (SELECT l1.id, l1.login_date, COUNT(DISTINCT l2.login_date) AS cnt FROM Logins l1 LEFT JOIN Logins l2 ON l1.id = l2.id AND DATEDIFF(l2.login_date, l1.login_date) BETWEEN 1 AND 4 GROUP BY 1,2 HAVING cnt>=4) SELECT DISTINCT temp.id, name FROM temp JOIN Accounts ON temp.id = Accounts.id ORDER BY 1
WITH temp0 AS ( SELECT id, login_date, DENSE_RANK() OVER(PARTITION BY id ORDER BY login_date) AS row_num FROM logins), temp1 AS ( SELECT id, login_date, row_num, login_date - INTERVAL row_num DAY AS groupings FROM temp0 ), answer_table AS ( SELECT id, MIN(login_date) AS first_login, MAX(login_date) AS last_login FROM temp1 GROUP BY id, groupings HAVING DATEDIFF(MAX(login_date) , MIN(login_date)) >=4 ) SELECT DISTINCT id, name FROM answer_table JOIN accounts USING(id) ORDER BY answer_table.id
WITH temp0 AS ( SELECT id, login_date, DENSE_RANK() OVER(PARTITION BY id ORDER BY login_date) AS row_num FROM logins), temp1 AS ( SELECT id, login_date, row_num, login_date - INTERVAL row_num DAY AS groupings FROM temp0 ), answer_table as (SELECT id FROM temp1 GROUP BY id, Groupings HAVING datediff(MAX(login_date), MIN(login_date)) >= 4 ) SELECT DISTINCT id, name FROM answer_table JOIN accounts USING(id) ORDER BY answer_table.id
WITH temp0 AS ( SELECT id, login_date, DENSE_RANK() OVER(PARTITION BY id ORDER BY login_date) AS row_num FROM logins), temp1 AS ( SELECT id, login_date, row_num, login_date - INTERVAL row_num DAY AS groupings FROM temp0 ), answer_table as (SELECT id, MIN(login_date) as startDate, MAX(login_date) as EndDate, row_num, Groupings, count(id), datediff(MAX(login_date), MIN(login_date)) as duration FROM temp1 GROUP BY id, Groupings HAVING datediff(MAX(login_date), MIN(login_date)) >= 4 ORDER BY id, StartDate) SELECT DISTINCT id, name FROM answer_table JOIN accounts USING(id) ORDER BY answer_table.id
WITH temp1 AS ( SELECT id, login_date FROM Logins GROUP BY id, login_date ), temp2 AS ( SELECT id,login_date, DATEDIFF(LEAD(login_date,4) OVER (PARTITION BY id ORDER BY login_date), login_date) AS diff FROM temp1 ) SELECT a.id, a.name FROM temp2 t2 INNER JOIN Accounts a ON t2.id = a.id WHERE diff = 4 GROUP BY id ORDER BY id
WITH tmp AS ( SELECT DISTINCT ina.id, name, login_date FROM Accounts AS ina, Logins AS inb WHERE ina.id = inb.id ) SELECT DISTINCT id, name FROM ( SELECT id, name, login_date, DATE_ADD(login_date, INTERVAL -r_number DAY) AS grp FROM ( SELECT id, name, login_date, ROW_NUMBER() OVER (PARTITION BY id ORDER BY login_date) AS r_number FROM tmp ) AS inc ) AS ind GROUP BY id, name, grp HAVING COUNT(*) >= 5
WITH tmp AS ( SELECT DISTINCT ina.id, name, login_date FROM Accounts AS ina, Logins AS inb WHERE ina.id = inb.id ) SELECT DISTINCT ina.id, ina.name FROM tmp AS ina, tmp AS inb WHERE ina.id=inb.id AND DATEDIFF(ina.login_date, inb.login_date) BETWEEN 0 and 4 GROUP BY ina.id, ina.login_date HAVING COUNT(*) = 5
WITH uni AS ( SELECT DISTINCT id, login_date FROM logins ), win AS ( SELECT l.id, l.login_date, SUM(CASE WHEN r.login_date IS NULL THEN 1 ELSE 0 END) OVER (PARTITION BY id ORDER BY login_date) AS con_int FROM uni AS l LEFT JOIN uni AS r ON l.id = r.id AND ADDDATE(l.login_date, -1) = r.login_date ), agg AS ( SELECT id, con_int, COUNT(DISTINCT login_date) AS ct_days FROM win GROUP BY 1, 2 ) SELECT ag.id, ac.name FROM agg AS ag JOIN accounts AS ac ON ag.id = ac.id GROUP BY 1, 2 HAVING MAX(ag.ct_days) >= 5 ORDER BY 1, 2
WITH uni AS ( SELECT DISTINCT id, login_date FROM logins ), win AS ( SELECT l.id, l.login_date, SUM(CASE WHEN r.login_date IS NULL THEN 1 ELSE 0 END) OVER (PARTITION BY l.id ORDER BY l.login_date) AS con_int FROM uni AS l LEFT JOIN uni AS r ON l.id = r.id AND ADDDATE(l.login_date, -1) = r.login_date ), agg AS ( SELECT id, con_int, COUNT(DISTINCT login_date) AS ct_days FROM win GROUP BY 1, 2 ) SELECT ag.id, ac.name FROM agg AS ag JOIN accounts AS ac ON ag.id = ac.id GROUP BY 1, 2 HAVING MAX(ag.ct_days) >= 5 ORDER BY 1, 2
WITH uni AS (SELECT DISTINCT * FROM Logins ), conse AS (SELECT id, login_date, LEAD(login_date,4) OVER(PARTITION BY id ORDER BY login_date ASC) AS lead_4 FROM uni ) SELECT DISTINCT a.id, a.name FROM conse c LEFT JOIN Accounts a ON c.id = a.id WHERE DATEDIFF(lead_4, login_date) = 4
WITH uniqueValueTable AS( SELECT id, login_date, DATE_SUB(login_date, INTERVAL rnk DAY) AS uniqueValue FROM( SELECT id, login_date, ROW_NUMBER() OVER(PARTITION BY id ORDER BY login_date) AS rnk FROM Logins GROUP BY id, login_date) rnkTable) SELECT DISTINCT usersOver5.id, a.name FROM( SELECT id, COUNT(*) FROM uniqueValueTable GROUP BY id, uniqueValue HAVING COUNT(*) >=5) usersOver5 LEFT JOIN Accounts a ON usersOver5.id = a.id ORDER BY 1
WITH unique_log AS (SELECT * FROM Logins GROUP BY id, login_date), rank_table AS (SELECT id, login_date, DENSE_RANK() OVER (PARTITION BY id ORDER BY login_date) AS rnk FROM unique_log), res AS (SELECT r1.id FROM rank_table AS r1 JOIN rank_table AS r2 ON r1.id = r2.id AND r1.rnk + 4 = r2.rnk AND DATEDIFF(r2.login_date,r1.login_date) = 4 GROUP BY r1.id) SELECT r3.id, a.name FROM res AS r3 JOIN Accounts AS a ON r3.id = a.id ORDER BY r3.id
WITH unique_login_dates AS( SELECT id, login_date FROM Logins GROUP BY 1, 2 ) SELECT temp4.id AS id, a.name AS name FROM Accounts a JOIN ( SELECT temp3.id AS id FROM( SELECT temp2.id AS id, temp2.grouping_variable AS grouping_variable, MAX(temp2.login_date) AS max_login_date, MIN(temp2.login_date) AS min_login_date FROM( SELECT *, DATE_SUB(temp.login_date, INTERVAL temp.rownumber DAY) AS grouping_variable FROM( SELECT *, ROW_NUMBER() OVER (PARTITION BY id ORDER BY login_date) AS rownumber FROM unique_login_dates )temp )temp2 GROUP BY temp2.id, temp2.grouping_variable )temp3 WHERE DATEDIFF(temp3.max_login_date, temp3.min_login_date) + 1 >=5 )temp4 ON a.id = temp4.id GROUP BY 1 ORDER BY 1
WITH user_active_days AS ( SELECT DISTINCT a.id, name, login_date FROM Accounts a JOIN Logins l on l.id = a.id ) SELECT DISTINCT id, name FROM ( SELECT id, name, login_date, LEAD(login_date, 4) OVER(PARTITION BY id ORDER BY login_date) AS fifth_date FROM user_active_days ) t WHERE DATE_ADD(login_date, interval '4' day) = fifth_date
WITH user_active_days AS (SELECT DISTINCT a.id, name, login_date FROM Accounts a JOIN Logins l ON a.id=l.id) SELECT DISTINCT id, name FROM ( SELECT id, name, login_date, lead(login_date, 4) OVER(PARTITION BY Id ORDER BY login_date) AS fifth_date FROM user_active_days )t WHERE date_add(login_date, interval 4 day)=fifth_date
WITH user_active_days AS( SELECT DISTINCT a.id, name, login_date FROM Accounts a JOIN Logins l ON a.id = l.id ) SELECT DISTINCT id, Name FROM (SELECT DISTINCT id, name, login_date, lead(login_date,4) over(partition by id order by login_date) as fifth_date FROM user_active_days) t WHERE DATE_ADD(login_date, interval 4 day) = fifth_date
WITH user_active_days AS( SELECT DISTINCT a.id, name, login_date FROM Accounts a JOIN Logins l ON a.id = l.id ) SELECT DISTINCT id, Name FROM (SELECT id, name, login_date, lead(login_date,4) over(partition by id order by login_date) as fifth_date FROM user_Active_days) t WHERE DATE_ADD(login_date, interval 4 day) = fifth_date
With cte as (select distinct id from (select id, login_date, dense_rank() over(partition by id order by login_date) as d_rank from Logins) temp group by id, to_days(login_date) - d_rank having count(distinct login_date)>=5) select act.id, act.name from cte inner join Accounts act on cte.id = act.id order by act.id
With id_gap As (Select Distinct id, login_date, adddate(login_date, 4) as end_5_cons From Logins) Select Distinct a.id, c.name From id_gap as a Join id_gap as b On a.id = b.id And b.login_date between a.login_date and a.end_5_cons Join Accounts as c On a.id = c.id Group By a.id, a.login_date Having Count(*) >= 5
select * from Accounts where id in ( select distinct t1.id from Logins t1 join Logins t2 on t1.id = t2.id and datediff(t1.login_date, t2.login_date) between 1 and 4 and t1.login_date > t2.login_date group by t1.id, t1.login_date having(count(distinct t2.login_date) = 4) ) order by id
select * from Accounts where id in ( select distinct(Logins.id) from Logins left join (select Logins.id,date_add(Logins.login_date,interval 1 day) as one_day_before from Logins) as table1 on Logins.login_date = table1.one_day_before and Logins.id = table1.id left join (select Logins.id,date_add(Logins.login_date,interval 2 day) as two_day_before from Logins) as table2 on Logins.login_date = table2.two_day_before and Logins.id = table2.id left join (select Logins.id,date_add(Logins.login_date,interval -1 day) as one_day_after from Logins) as table3 on Logins.login_date = table3.one_day_after and Logins.id = table3.id left join (select Logins.id,date_add(Logins.login_date,interval -2 day) as two_day_after from Logins) as table4 on Logins.login_date = table4.two_day_after and Logins.id = table4.id where table1.one_day_before is not null and table2.two_day_before is not null and table3.one_day_after is not null and table4.two_day_after is not null) order by id
select * from Accounts where id in (select L1.id from Logins L1 join Logins L2 on datediff(L2.login_date,L1.login_date) between 1 and 4 and L1.id = L2.id group by L1.id, L1.login_date having count(distinct L2.login_date)>=4) order by 1,2 asc
select * from Accounts where id in (select distinct l1.id from logins l1 inner join logins l2 using (id) where datediff(l1.login_date, l2.login_date) between 1 and 4 group by l1.id, l1.login_date having count(distinct l2.login_date) = 4) order by id
select * from Accounts where id in (select distinct t1.id from Logins as t1 inner join Logins as t2 on t1.id = t2.id and datediff(t1.login_date, t2.login_date) between 1 and 4 group by t1.id, t1.login_date having count(distinct(t2.login_date)) = 4) order by id
select * from Accounts where id in (select id from( select id, case when lag_login_date is null then @counter:=1 when DATEDIFF(login_date,lag_login_date)=1 then @counter:=@counter+1 else @counter:=1 end as consistency from( select id, login_date, lag(login_date) over(partition by id) as lag_login_date from( select id, login_date from Logins group by id, login_date order by id, login_date ) id_login_unique ) lagged_login ) concesutive_ids where concesutive_ids.consistency >= 5) order by id
select * from Accounts where id in (select l1.id from Logins l1 join Logins l2 on (datediff(l2.login_date,l1.login_date) between 1 and 4) and l1.id=l2.id group by l1.id, l1.login_date having count(distinct l2.login_date)>=4) order by id
select * from accounts where id in ( select l1.id from logins l1 join logins l2 on l1.id=l2.id and datediff(l1.login_date,l2.login_date) between 1 and 4 group by l1.id, l1.login_date having count(distinct l2.login_date)>=4) order by id
select * from accounts where id in (select l1.id from logins l1, logins l2, logins l3, logins l4, logins l5 where (l1.id = l2.id and l2.id = l3.id and l3.id = l4.id and l4.id = l5.id) and datediff(l2.login_date, l1.login_date) = 1 and datediff(l3.login_date, l2.login_date) = 1 and datediff(l4.login_date, l3.login_date) = 1 and datediff(l5.login_date, l4.login_date) = 1) order by id
select AA.id, a.name from ( select distinct l1.id from Logins l1 join logins l2 on l1.id = l2.id and date_add(l1.login_date, INTERVAL 1 DAY) = l2.login_date join logins l3 on l2.id = l3.id and date_add(l2.login_date, INTERVAL 1 DAY) = l3.login_date join logins l4 on l3.id = l4.id and date_add(l3.login_date, INTERVAL 1 DAY) = l4.login_date join logins l5 on l4.id = l5.id and date_add(l4.login_date, INTERVAL 1 DAY) = l5.login_date ) AA join Accounts a on AA.id = a.id order by AA.id
select Accounts.id, Accounts.name from Accounts where id in ( select distinct id from ( select id, login_date, lag(login_date, 4) over (partition by id order by login_date) as lag4 from (select distinct id, login_date from Logins) t1) temp where datediff(login_date, lag4)=4 ) order by id
select Accounts.id, Accounts.name from Accounts where id in ( select distinct l1.id from Logins l1 inner join Logins l2 on l1.id=l2.id and l1.login_date=subdate(l2.login_date, INTERVAL 1 DAY) inner join Logins l3 on l3.id=l2.id and l2.login_date=subdate(l3.login_date, INTERVAL 1 DAY) inner join Logins l4 on l3.id=l4.id and l3.login_date=subdate(l4.login_date, INTERVAL 1 DAY) inner join Logins l5 on l5.id=l4.id and l4.login_date=subdate(l5.login_date, INTERVAL 1 DAY) ) order by id
select DISTINCT a.id, ac.name from logins a inner join logins b on a.id = b.id and datediff(a.login_date, b.login_Date) between 1 and 4 inner join accounts ac on ac.id = a.id group by a.id, a.login_date having count(distinct b.login_date) = 4
select DISTINCT a.id, ac.name from logins a inner join logins b on a.id = b.id and datediff(b.login_date, a.login_Date) between 1 and 4 inner join accounts ac on ac.id = a.id group by a.id, a.login_date having count(distinct b.login_date) = 4
select DISTINCT a.id, c.name from Logins a join Logins b on a.id = b.id and datediff(a.login_date, b.login_date) between 1 and 4 join Accounts c on a.id = c.id group by a.id, a.login_date having count(distinct b.login_date) = 4 order by a.id, a.login_date
select DISTINCT a.id, c.name from Logins a left join Logins b on a.id = b.id and datediff(a.login_date, b.login_date) between 1 and 4 join Accounts c on a.id = c.id group by a.id, a.login_date having count(distinct b.login_date) = 4 order by a.id, a.login_date
select DISTINCT a.id,Accounts.name from Logins a Join Logins b on a.id=b.id and DATEDIFF(a.login_date,b.login_Date) BETWEEN 1 and 4 Join Accounts on a.id=Accounts.id group by a.id,a.login_date having count(distinct b.login_date)=4
select Z.id,Z.name from ( select distinct A.id from Logins A inner join Logins B on A.login_date = DATE_ADD(B.login_date, interval 1 day) and A.id=B.id inner join Logins C on B.login_date = DATE_ADD(C.login_date, interval 1 day) and B.id=C.id inner join Logins D on C.login_date = DATE_ADD(D.login_date, interval 1 day) and C.id=D.id inner join Logins E on D.login_date = DATE_ADD(E.login_date, interval 1 day ) and D.id=E.id) Y inner join Accounts Z on Y.id = Z.id order by Z.id
select a.id , b.name from ( select distinct a.id from logins a, logins b where a.id = b.id and datediff(a.login_date,b.login_date) between 1 and 4 group by a.id, a.login_Date having count(distinct b.login_date) = 4 ) as a join accounts b on a.id= b.id order by 1
select a.id, a.name from (select distinct l1.id from logins l1, logins l2 where l1.id = l2.id and datediff(l1.login_date,l2.login_date) between 1 and 4 group by l1.id, l1.login_date having count(distinct l2.login_date)>=4 )t JOIN accounts a ON t.id = a.id order by a.id
select a.id, a.name from Accounts a join ( select distinct l1.id from logins l1 join logins l2 on l1.id = l2.id and l2.login_date >= l1.login_date and l2.login_date < adddate(l1.login_date, 5) group by l1.id, l1.login_date having count(distinct l2.login_date) = 5 ) l on a.id = l.id order by a.id
select a.id, a.name from Accounts a join ( select distinct l1.id from logins l1, logins l2 where l1.id = l2.id and l2.login_date >= l1.login_date and l2.login_date < adddate(l1.login_date, 5) group by l1.id, l1.login_date having count(distinct l2.login_date) = 5 ) l on a.id = l.id order by a.id
select a.id, a.name from Accounts a join (select distinct l1.id as id from Logins l1 join Logins l2 on datediff(l1.login_date,l2.login_date) between 0 and 4 and l1.id = l2.id group by l1.id, l1.login_date having count(distinct l2.login_date)>=5 )b on a.id = b.id group by a.id order by a.id
select a.id, a.name from Accounts a where a.id in (select l.id from ( select distinct l.id, l.login_date, datediff(l.login_date, '1970-01-01') - dense_rank() over( partition by l.id order by l.login_date) as rk_group from Logins l) l group by l.rk_group, l.id having count(l.login_date) >= 5) order by a.id
select a.id, a.name from accounts a join ( select x1.id from ( select id, login_date from logins l group by id, login_date ) x1 join ( select id, login_date from logins l group by id, login_date ) x2 on x1.id=x2.id and datediff(x1.login_date, x2.login_date)=1 join ( select id, login_date from logins l group by id, login_date ) x3 on x2.id=x3.id and datediff(x2.login_date, x3.login_date)=1 join ( select id, login_date from logins l group by id, login_date ) x4 on x3.id=x4.id and datediff(x3.login_date, x4.login_date)=1 join ( select id, login_date from logins l group by id, login_date ) x5 on x4.id=x5.id and datediff(x4.login_date, x5.login_date)=1 group by x1.id ) Y on a.id=Y.id order by id asc
select a.id, name from (select distinct id from ( select id, diff, count(distinct login_date) conse_days from ( select id, login_date, (date_inteval - rnk) diff from (select id, login_date, datediff(login_date, '2020-01-01') date_inteval, dense_rank() over(partition by id order by login_date) rnk from Logins) a ) a group by id, diff ) a where conse_days >=5 ) a join Accounts b on a.id = b.id order by 1
select distinct Accounts.id, Accounts.name from ( select id, login_date, lead(login_date, 4) over (partition by id order by login_date asc) as lead_ from ( select distinct id, login_date from Logins ) A ) B inner join Accounts on Accounts.id = B.id where lead_ = date_add(login_date, interval 4 day) order by id asc
select distinct Accounts.id, name from ( select distinct id, datediff(login_date, lag(login_date, 4) over (partition by id order by login_date)) as diff from ( select distinct * from Logins ) Logins_distinct ) diff join Accounts on diff.id = Accounts.id where diff.diff = 4 order by Accounts.id
select distinct Accounts.id, name from (select id, rot from (select id, login_date, lag(login_date, 4) over(order by id, login_date), (DATE_ADD(lag(login_date, 4) over(order by id, login_date), INTERVAL 4 DAY) = login_date) and (lag(id,4) over (order by id, login_date) = id) as rot from (select distinct id, login_date from Logins) as a order by id, login_date asc) as b where b.rot = 1) as c, Accounts where c.id = Accounts.id order by Accounts.id
select distinct Accounts.id,Accounts.name from (select b.id,date_sub(b.login_date, interval b.ranks day) from (select a.id,a.login_date,row_number() over(partition by a.id order by a.login_date) ranks from (select distinct id, login_date from Logins) a) b group by 1,2 having count(distinct b.login_date)>=5) c join Accounts on c.id=Accounts.id order by 1
select distinct L1.id, max(A.name) name from Logins L1 JOIN Logins L2 on L1.id =L2.id and DATEDIFF(L2.login_date,L1.login_date) between 1 and 4 JOIN Accounts A on A.id = L1.id group by L1.id,L1.login_date having count(distinct L2.login_date) = 4 order by 1
select distinct Logins.id ,Accounts.name from Logins join Logins next_day_login on Logins.id = next_day_login.id and datediff(next_day_login.login_date, Logins.login_date) between 1 and 4 join Accounts on Logins.id = Accounts.id group by Logins.id ,Logins.login_date having count(distinct next_day_login.login_date) = 4
select distinct a.* from (select id, login_date, lag(login_date, 4) over (partition by id order by login_date) as lag_date from (select distinct id, login_date from Logins) t1 ) t2 left join Accounts a on t2.id = a.id where datediff(login_date, lag_date) = 4
select distinct a.* from accounts a join logins l1 using(id) join logins l2 on datediff(l1.login_date, l2.login_date) between 0 and 4 and l1.id = l2.id group by l1.id, l1.login_date having count(distinct l2.login_date) = 5 order by a.id
select distinct a.* from accounts a join logins l1 using(id) join logins l2 on datediff(l1.login_date, l2.login_date) between 0 and 4 and l1.id = l2.id group by l1.id, l1.login_date having count(distinct l2.login_date) >= 5 order by a.id
select distinct a.Id, b.name from ( select Id, login_date, login_date - interval rnk day as grouing from ( select Id, login_date, dense_rank()over(partition by id order by login_date asc) as rnk from (select distinct id,login_date from Logins) a )a order by 1 )a left join Accounts b on a.id=b.id group by Id,grouing having(count(*)>=5)
select distinct a.id ,a.name from accounts a join (select id ,login_date ,lead(login_date,4) over (partition by id order by login_date) as fifth ,datediff(lead(login_date,4) over (partition by id order by login_date),login_date) as diff from logins group by 1,2 order by id) l on a.id = l.id where fifth is not null and diff = 4 order by 1
select distinct a.id, (SELECT name FROM Accounts WHERE id=a.id) name from Logins A, Logins B where A.id = B.id and datediff(A.login_date, B.login_date) between 1 and 4 group by 1, a.login_date having count(distinct B.login_date) = 4
select distinct a.id, (select name from Accounts as ac where ac.id= a.id) as name from Logins as a inner join Logins as b on a.id = b.id and datediff(a.login_date, b.login_date) between 1 and 4 group by a.id, a.login_date having count(distinct b.login_date) >=4
select distinct a.id, (select name from Accounts where id = a.id) name from Logins a, Logins b where a.id = b.id and DATEDIFF(a.login_date, b.login_date) between 1 and 4 group by a.id, a.login_date having count(distinct b.login_date) = 4
select distinct a.id, (select name from Accounts where id=a.id ) as name from Logins as a left join Logins as b on a.id=b.id and datediff(a.login_date, b.login_date) between 1 and 4 group by a.id, a.login_date having count(distinct b.login_date) >= 4
select distinct a.id, (select name from Accounts where id=a.id) as name from Logins a join Logins b on a.id = b.id where datediff(a.login_date, b.login_date) between 1 and 4 group by a.id, a.login_date having count(distinct b.login_date) >= 4
select distinct a.id, (select name from Accounts where id=a.id) as name from Logins a,Logins b where a.id = b.id and datediff(a.login_date, b.login_date) between 1 and 4 group by a.id, a.login_date having count(distinct b.login_date) >= 4
select distinct a.id, (select name from Accounts where id=a.id) name from Logins a, Logins b where a.id = b.id and datediff(a.login_date,b.login_date) between 1 and 4 group by a.id, a.login_date having count(distinct b.login_date)=4
select distinct a.id, (select name from accounts where id = a.id) as name from Logins a, Logins b where a.id = b.id and DATEDIFF(a.login_date, b.login_date) BETWEEN 0 and 4 group by a.id, a.login_date Having count(distinct b.login_date) = 5
select distinct a.id, (select name from accounts where id = a.id) as name from logins a, logins b where a.id = b.id and datediff(a.login_date, b.login_date) between 1 and 4 group by a.id, a.login_date having count(distinct b.login_date) = 4 order by a.id
select distinct a.id, (select name from accounts where id=a.id) as name from logins a , logins b where a.id=b.id and datediff(a.login_date,b.login_date) between 0 and 4 group by a.id, a.login_date having count(distinct b.login_date)=5 order by a.id
select distinct a.id, (select name from accounts where id=a.id) as name from logins a , logins b where a.id=b.id and datediff(a.login_date,b.login_date) between 1 and 4 group by a.id, a.login_date having count(distinct b.login_date)=4 order by a.id
select distinct a.id, (select name from accounts where id=a.id) as name from logins a join logins b on a.id=b.id and datediff(a.login_date,b.login_date) between 1 and 4 group by a.id, a.login_date having count(distinct b.login_date)=4
select distinct a.id, (select name from accounts where id=a.id) as name from logins a,logins b where a.id = b.id and datediff(a.login_date,b.login_date) between 1 and 4 group by a.id,a.login_date having count(distinct b.login_date)=4
select distinct a.id, (select name from accounts where id=a.id) as name from logins as a, logins as b where a.id=b.id and datediff(a.login_date, b.login_date) between 1 and 4 group by a.id, a.login_date having count(distinct b.login_date)=4 order by id asc
select distinct a.id, a.name from Accounts a join Logins l1 on a.id = l1.id join Logins l2 on a.id = l2.id where datediff(l2.login_date,l1.login_date) between 0 and 4 group by 1,2,l1.login_date having count(distinct l2.login_date) >= 5
select distinct a.id, a.name from Logins l1, Logins l2, Accounts a where a.id = l1.id and l1.id=l2.id and datediff(l1.login_date, l2.login_date) between 1 and 4 group by l1.id, l1.login_date HAVING COUNT(DISTINCT l2.login_date)=4
select distinct a.id, a.name from accounts a join ( select id, daynum-rowid daydiff, count(daynum-rowid) count_c from (select distinct id, to_days(login_date) daynum, dense_rank () over (order by id, login_date) rowid from logins order by id, login_date) d group by id, daydiff) c on c.id = a.id and c.count_c >= 5 order by a.id
select distinct a.id, a.name from accounts a join logins b on a.id = b.id where (a.id, date_add(login_date, interval 1 day)) in (select * from logins) and (a.id, date_add(login_date, interval 2 day)) in (select * from logins) and (a.id, date_add(login_date, interval 3 day)) in (select * from logins) and (a.id, date_add(login_date, interval 4 day)) in (select * from logins) order by 1
select distinct a.id, a.name from accounts as a join ( select distinct a.id,a.login_date from (select distinct * from logins) as a left join (select distinct * from logins) as b on datediff(b.login_date,a.login_date)>=0 and datediff(b.login_date,a.login_date)<=4 and a.id=b.id group by 1,2 having count(distinct b.login_date) = 5 ) as b on a.id=b.id order by 1
select distinct a.id, a.name from logins l1 join logins l2 on l1.id = l2.id and datediff(l1.login_date, l2.login_date) between 1 and 4 JOIN Accounts A ON l1.id = A.id GROUP BY l1.id, l1.login_date HAVING COUNT(DISTINCT l2.login_date) = 4
select distinct a.id, a2.name from (select l1.id, count(distinct(l2.login_date)) as id_count from Logins l1 left join Logins l2 on DATEDIFF(l1.login_date, l2.login_date) BETWEEN 1 and 4 and l1.id = l2.id group by l1.id, l1.login_date) a join Accounts a2 on a.id = a2.id where a.id_count = 4 order by 1
select distinct a.id, ac.name from logins a inner join logins b on a.id = b.id and datediff(a.login_date, b.login_date) between 1 and 4 inner join accounts ac on ac.id = a.id group by a.id, a.login_date having count(distinct b.login_date) = 4
select distinct a.id, ac.name from logins a inner join logins b on datediff(a.login_date, b.login_Date) between 1 and 4 and a.id = b.id inner join accounts ac on ac.id = a.id group by a.id, a.login_date having count(distinct b.login_date) = 4
select distinct a.id, ac.name from(select id, login_date, datediff(login_date, lag(login_date,4) over(partition by id order by login_date)) as diff from ( select distinct id, login_date from Logins)l) a join Accounts ac using (id) where a.diff=4 order by a.id
select distinct a.id, acc.name from Logins a inner join Logins b on a.id = b.id and datediff(b.login_date, a.login_date) between 1 and 4 inner join Accounts acc on a.id = acc.id group by a.id, a.login_date having count(distinct b.login_date) = 4 order by 1
select distinct a.id, b.name from (select id,login_date, lead(login_date,4)over(partition by id order by login_date) as l from (select distinct id,login_date from logins)tr) a inner join accounts b on a.id = b.id where datediff(a.l,a.login_date) = 4 order by a.id
select distinct a.id, c.name from (select distinct id, login_date, lag(login_date, 4)over(partition by id order by login_date asc) as prev5 from (select distinct id, login_date from Logins) b order by id, login_date) a inner join Accounts c on a.id = c.id where datediff(login_date, prev5) = 4 order by a.id, c.name
select distinct a.id, c.name from Logins a join Logins b on a.id = b.id and datediff(a.login_date,b.login_date) between 1 and 4 join Accounts c on a.id = c.id group by a.id, a.login_date having count(distinct b.login_date)=4 order by a.id
select distinct a.id, name from (select id, login_date, lead(login_date, 4) over(partition by id order by login_date) day5 from Logins group by 1,2) temp join Accounts a on temp.id = a.id where day5 = date_add(login_date, interval 4 day) order by id
select distinct a.id, name from accounts a join logins b on a.id = b.id where (a.id, date_add(login_date, interval 1 day)) in (select * from logins) and (a.id, date_add(login_date, interval 2 day)) in (select * from logins) and (a.id, date_add(login_date, interval 3 day)) in (select * from logins) and (a.id, date_add(login_date, interval 4 day)) in (select * from logins) order by 1
select distinct a.id, name from( select id, datediff(lead(login_date,4) over(partition by id order by login_date), login_date) gap from (select distinct id, login_date from Logins) ded_a ) a join Accounts on a.id=Accounts.id where gap=4 order by a.id
select distinct a.id,(SELECT name FROM Accounts WHERE id=a.id) name from Logins a, Logins b where a.id=b.id and datediff(a.login_date, b.login_date) between 1 and 4 group by a.id, a.login_date having count(distinct b.login_date)=4
select distinct a.id,(select name from Accounts where id=a.id)as name from Logins a, Logins b where a.id = b.id and datediff(a.login_date,b.login_date) between 1 and 4 group by a.id, a.login_date having count(distinct b.login_date) >= 4
select distinct a.id,(select name from accounts where id=a.id) as name from Logins a, logins b where a.id=b.Id and datediff(a.login_date,b.login_date) between 1 and 4 group by a.id, a.login_date having count( distinct b.login_date) = 4
select distinct a.id,(select name from accounts where id=a.id) name from logins a,logins b where a.id=b.id and datediff(a.login_date,b.login_date) between 1 and 4 group by a.id,a.login_date having count(distinct b.login_date)=4
select distinct a.id,(select name from accounts where id=a.id)as name from logins a join logins b on a.id = b.id and datediff(a.login_date,b.login_date) between 1 and 4 group by a.id,a.login_date having count(distinct b.login_date) = 4
select distinct a.id,Accounts.name from Logins a join Logins b on a.id=b.id and datediff(a.login_date,b.login_date)between 1 and 4 left join Accounts on a.id=Accounts.id group by a.id,a.login_date having count(distinct b.login_date)=4
select distinct a.id,Accounts.name from logins a join logins b on a.id=b.id and datediff(a.login_date,b.login_date) between 1 and 4 join accounts on a.id = accounts.id group by a.id, a.login_date having count(distinct b.login_date)= 4
select distinct a.id,a.name from accounts a join (select login_date,id, lead(login_Date,4) over(partition by id order by login_date) lead_date, date_add(login_date,interval 4 day) dateadd_date from logins group by 1,2)b on a.id = b.id where lead_date=dateadd_date order by 1,2
select distinct a.id,c.name from Logins as a join Logins as b on a.id=b.id and datediff(a.login_date,b.login_date) between 1 and 4 left join Accounts as c on a.id=c.id group by a.id,a.login_date having count(distinct b.login_date)=4
select distinct a1.id,name from logins a1 join logins a2 on a1.id = a2.id and datediff(a2.login_date,a1.login_date) between 1 and 4 join accounts on a1.id = accounts.id group by a1.id,a1.login_date having count(distinct a2.login_date)=4
select distinct ac.id, name from ( select id, login_date, datediff(lead_5_date, login_date) as diff_days from ( select id, login_date, lead(login_date,4) over(partition by id order by login_date) as lead_5_date from ( select distinct id, login_date from Logins ) a ) b where lead_5_date is not null ) c join Accounts ac on ac.id = c.id and c.diff_days = 4 order by ac.id
select distinct acc.id, acc.name from (select *, datediff(b.login_date, b.lag_date) as date_diff from (select *,lag(a.login_date,4) over (partition by a.id order by a.login_date) as lag_date from (select id, login_date from logins group by id, login_date order by id, login_date)a )b )c join accounts acc on acc.id = c.id where date_diff = 4 order by c.id
select distinct acc.id, acc.name from (select id, lead(login_date,4) OVER (PARTITION BY id order by login_date) as 5_day, login_date, (case when datediff(lead(login_date,4) OVER (PARTITION BY id order by login_date), login_date) =4 then 1 else 0 end) as flag from (select distinct id, login_date from logins) as A) as B inner join accounts acc on B.id = acc.id where flag=1 order by id
select distinct b.id, b.name from (select a.id, lead(a.login_date, 4) over (partition by a.id order by a.login_date) lead_date, a.login_date, a.name from (select distinct l.id, login_date, name from Logins l join Accounts a on l.id = a.id) a) b where datediff(b.lead_date, b.login_date) = 4
select distinct b.id, c.name from (select a.id, a.login_date, lead(a.login_date, 4) over (partition by id) as nxt_date from (select distinct id, login_date, count(id) as id_ct from logins group by 1,2 order by 1,2)a)b left join accounts c on b.id=c.id where abs(datediff(b.login_date, b.nxt_date))=4
select distinct c.id, acc.name from ( select *, datediff(b.login_date, b.lag_date) as date_diff from (select *,lag(a.login_date,4) over (partition by a.id order by a.login_date) as lag_date from (select id, login_date from logins group by id, login_date order by id, login_date)a )b ) c join accounts acc on acc.id = c.id where date_diff = 4 order by c.id
select distinct c.id, acc.name from (select *, datediff(b.login_date, b.lag_date) as date_diff from (select *,lag(a.login_date,4) over (partition by a.id order by a.login_date) as lag_date from (select id, login_date from logins group by id, login_date order by id, login_date)a )b )c join accounts acc on acc.id = c.id where date_diff = 4 order by c.id
select distinct c.id, c.name from logins a join logins b on a.id = b.id and DateDIFF(a.login_date, b.login_date) between 1 and 4 join accounts c on c.id = a.id group by a.id, a.login_date having count(distinct b.login_date) = 4
select distinct c1.id,a.name from (select id, login_date, dense_rank() over (partition by id order by login_date asc) as login_rank from logins) c1, (select id, login_date, dense_rank() over (partition by id order by login_date asc) as login_rank from logins) c2, accounts a where c1.id = c2.id and datediff(c2.login_date,c1.login_date) = 4 and c2.login_rank = c1.login_rank + 4 and a.id = c1.id order by c1.id
select distinct concesutive_ids.id as id, A.name from( select id, case when lag_login_date is null then @counter:=1 when DATEDIFF(login_date,lag_login_date)=1 then @counter:=@counter+1 else @counter:=1 end as consistency from( select id, login_date, lag(login_date) over(partition by id) as lag_login_date from( select id, login_date from Logins group by id, login_date order by id, login_date ) id_login_unique ) lagged_login ) concesutive_ids join Accounts A on concesutive_ids.id = A.id where concesutive_ids.consistency >= 5 order by id
select distinct cte.id, name from ( select id, login_date, lead(login_date,4)over(partition by id order by login_date)as date_5 from logins group by id,login_date ) cte join Accounts b on cte.id = b. id where cte.date_5 = date_add(cte.login_date, interval 4 day ) order by id
select distinct cte.id, name from ( select id, login_date, lead(login_date,4)over(partition by id order by login_date)as date_5 from logins group by id,login_date ) cte left join Accounts b on cte.id = b. id where cte.date_5 = date_add(cte.login_date, interval 4 day ) order by id
select distinct id, name from ( SELECT a.id, a.name, l.login_date, LEAD(l.login_date, 4) OVER(PARTITION BY l.id ORDER BY l.login_date) AS lead_date, date_add(l.login_date, INTERVAL 4 DAY) AS fifth_day from (select distinct id, login_date from Logins) l join Accounts a on l.id = a.id) sub where lead_date = fifth_day
select distinct id, name from ( select a.id, b.name, a.login_date, lead(a.login_date,4) over (partition by a.id order by a.login_date) fifth_date, datediff(lead(a.login_date,4) over (partition by a.id order by a.login_date), a.login_date) +1 as difference from Logins a left join Accounts b on a.id = b.id group by 1,2,3 ) AA where AA.difference = 5
select distinct id, name from ( select id , login_date , date_sub(login_date, interval dense_rank() over(partition by id order by login_date) day) as grp from logins ) tmp join accounts using(id) group by tmp.id, tmp.grp having count(distinct login_date) >= 5
select distinct id, name from ( select id, name, login_date, datediff( lead(login_date, 4) over(partition by id order by id, login_date), login_date) diff from logins join accounts using (id) group by id, login_date order by id, login_date ) temp where diff=4
select distinct id, name from ( select id, name, login_date, lag(login_date, 4) over (partition by id order by login_date) prev_date from (select distinct id, login_date from logins) a join accounts b using (id) )t where datediff(login_date, prev_date) = 4
select distinct id, name from ( select l1.id, datediff(l2.login_date, l1.login_date) as diff from logins l1 join logins l2 using (id) where datediff(l2.login_date, l1.login_date) between 1 and 4 group by id, l1.login_date having count(distinct diff) >= 4 ) a join Accounts using (id) order by id
select distinct id, name from ( select temp1.id, login_date, date_add(login_date, interval -row_number() over(partition by id order by login_date) day) temp, name from (select distinct * from logins) temp1 left join accounts a on temp1.id = a.id) temp2 group by id, temp having count(id)>=5
select distinct id, name from (select id, lead(login_date, 4) over (partition by id order by login_date) lead_date, login_date, name from (select distinct l.id, login_date, name from Logins l join Accounts a on l.id = a.id ) a ) b where datediff(lead_date, login_date) = 4
select distinct id, name from (select id,login_date, lead(login_date, 4) over (partition by id order by login_date) lag_date from (select distinct id, login_date from logins) t1) t2 join accounts using (id) where datediff(lag_date, login_date) = 4 order by id
select distinct id, name from( select distinct logins.id, logins.login_date, a.name, row_number() over (partition by logins.id order by logins.login_date asc) as ranking, lead(login_date,4) over(partition by logins.id order by logins.login_date asc) as day5 from (select distinct id, login_date from Logins) logins join accounts a on logins.id = a.id ) asd where datediff(day5,login_date) =4
select distinct id,name from ( select *, lead (login_date,4) over (partition by id order by login_date) as fifth_date from ( SELECT l.id, a.name, l.login_date FROM logins l LEFT JOIN accounts a ON l.id = a.id GROUP BY 1, 2, 3 )b )c where datediff(fifth_date,login_date)=4
select distinct l.id, a.name from (select id, login_date, date_sub(login_date, interval row_number() over(partition by id order by login_date asc) day) group_day from (select distinct id, login_date from Logins) l) l left join Accounts a on l.id = a.id group by l.id, l.group_day having count(*) >= 5
select distinct l.id, a.name from( select distinct id, login_date, dayofyear(login_date) - dense_rank()over(partition by id order by login_date) as grp from logins )l join accounts as a on l.id=a.id group by l.id, grp having count(l.login_date)>=5 order by l.id
select distinct l.id, a.name from( select id, login_date, datediff(login_date, lag(login_date,4) over(partition by id order by login_date)) as diff from ( select distinct id, login_date from logins ) t ) l, accounts a where a.id = l.id and l.diff = 4 order by l.id
select distinct l.id, a.name from(select distinct id, login_date, datediff(login_date ,lag(login_date,4)over(partition by id order by login_date )) as diff from (select distinct id, login_date from logins) l2) l, accounts a where a.id = l.id and l.diff = 4 order by id
select distinct l.id, u.name from( select distinct id, login_date, dayofyear(login_date)-dense_rank()over(partition by id order by login_date) as idgrp from logins )l join accounts as u using (id) group by l.id, u.name, l.idgrp having count(l.id)>=5 order by l.id
select distinct l1.id as id, a.name from Logins l1 inner join Logins l2 on l1.id = l2.id and datediff(l1.login_date, l2.login_date) between 1 and 4 inner join Accounts a on a.id = l1.id group by l1.id, l1.login_date having count(distinct l2.login_date) = 4
select distinct l1.id as id, a.name from Logins l1 inner join Logins l2 on l1.id = l2.id and datediff(l1.login_date, l2.login_date) between 1 and 4 inner join Accounts a on a.id = l1.id group by l1.id,l1.login_date having count(distinct l2.login_date) = 4
select distinct l1.id, (select name from Accounts as a where a.id= l1.id) as name from Logins as l1 inner join Logins as l2 on datediff(l2.login_date, l1.login_date) between 1 and 4 and l2.id = l1.id group by l1.id, l1.login_date having count(distinct l2.login_date) = 4
select distinct l1.id, (select name from Accounts as a where a.id= l1.id) as name from Logins as l1 inner join Logins as l2 on datediff(l2.login_date, l1.login_date) between 1 and 4 and l2.id = l1.id group by l1.id, l1.login_date having count(distinct l2.login_date) =4
select distinct l1.id, (select name from Accounts where id = l1.id) as name from Logins l1 join Logins l2 on l1.id = l2.id where datediff(l1.login_date, l2.login_date) between 1 and 4 group by id, l1.login_date having count(distinct(l2.login_date)) = 4
select distinct l1.id, (select name from Accounts where id = l1.id) name from logins l1 inner join logins l2 using (id) where datediff(l1.login_date, l2.login_date) between 1 and 4 group by l1.id, l1.login_date having count(distinct l2.login_date) = 4
select distinct l1.id, (select name from Accounts where id=l1.id) name from Logins l1, Logins l2 where l1.id=l2.id and datediff(l1.login_date,l2.login_date) between 1 and 4 group by l1.id,l1.login_date having count(distinct l2.login_date)=4
select distinct l1.id, (select name from accounts where id = l1.id) as name from logins l1 join logins l2 on l1.id = l2.id and datediff(l2.login_date, l1.login_date) between 1 and 4 group by l1.id, l1.login_date having count(distinct l2.login_date) = 4
select distinct l1.id, (select name from accounts where id = l1.id) as name from logins l1 join logins l2 on l1.id = l2.id where datediff(l1.login_date, l2.login_date) between 1 and 4 group by l1.id, l1.login_date having count(distinct l2.login_date) >= 4
select distinct l1.id, A.name from logins l1 join logins l2 on l1.id = l2.id and datediff(l2.login_date, l1.login_date) between 1 and 4 join Accounts A on l1.id = A.id group by l1.id, l1.login_date having count(distinct l2.login_date) >=4
select distinct l1.id, a.name from Logins as l1 join Logins as l2 on l1.id=l2.id and datediff (l2.login_date, l1.login_date) between 1 and 4 join Accounts as a on a.id=l1.id group by l1.id, l1.login_date having count(distinct l2.login_date)>=4
select distinct l1.id, a.name from Logins l1 inner join Logins l2 on l1.id = l2.id and datediff(l1.login_date, l2.login_date) between 1 and 4 inner join Accounts a on a.id = l1.id group by l1.id,l1.login_date having count(distinct l2.login_date) = 4
select distinct l1.id, a.name from Logins l1 join Logins l2 on (l1.id = l2.id and adddate(l1.login_date, 1) = l2.login_date) join Logins l3 on (l1.id = l3.id and adddate(l1.login_date, 2) = l3.login_date) join Logins l4 on (l1.id = l4.id and adddate(l1.login_date, 3) = l4.login_date) join Logins l5 on (l1.id = l5.id and adddate(l1.login_date, 4) = l5.login_date) join Accounts a on (l1.id = a.id) order by 1
select distinct l1.id, a.name from Logins l1 join Logins l2 on l1.id = l2.id and Datediff(l2.login_date, l1.login_date) between 1 and 4 join Accounts a on a.id = l1.id group by l1.id, l1.login_date having count(distinct l2.login_date) = 4
select distinct l1.id, a.name from Logins l1 join Logins l2 on l1.id = l2.id and datediff(l2.login_date, l1.login_date) between 1 and 4 join Accounts a on l1.id = a.id group by l1.id, l1.login_date having count(distinct l2.login_date) = 4 order by l1.id
select distinct l1.id, a.name from Logins l1 left join Accounts a using (id) where date_sub(login_date, interval 1 day) in (select login_date from Logins l2 where l1.id = l2.id) and date_sub(login_date, interval 2 day) in (select login_date from Logins l3 where l1.id = l3.id) and date_sub(login_date, interval 3 day) in (select login_date from Logins l4 where l1.id = l4.id) and date_sub(login_date, interval 4 day) in (select login_date from Logins l5 where l1.id = l5.id) order by l1.id
select distinct l1.id, a.name from Logins l1 left join accounts a on a.id = l1.id, Logins l2 where datediff(l1.login_date, l2.login_date) between 1 and 4 and l1.id = l2.id group by l1.id, l1.login_date having count(distinct l2.login_date) >= 4
select distinct l1.id, a.name from Logins l1, Logins l2, Logins l3, Logins l4, Logins l5, accounts a where l1.id=l2.id and l1.id=l3.id and l1.id=l4.id and l1.id=l5.id and date_sub(l1.login_date,INTERVAL 1 day )=l2.login_date and date_sub(l1.login_date,INTERVAL 2 day)=l3.login_date and date_sub(l1.login_date,INTERVAL 3 day)=l4.login_date and date_sub(l1.login_date,INTERVAL 4 day)=l5.login_date and l1.id=a.id order by id
select distinct l1.id, a.name from Logins l1, logins l2, accounts a where l1.id=l2.id and l1.id=a.id and datediff(l1.login_date, l2.login_date) between 1 and 4 group by l1.id, l1.login_date having count(distinct l2.login_date) =4
select distinct l1.id, a.name from logins as l1 join logins as l2 on l1.id=l2.id and datediff(l1.login_Date, l2.login_date) between 0 and 4 join accounts as a on l1.id=a.id group by l1.id, l1.login_date having count(distinct l2.login_date)=5 order by l1.id
select distinct l1.id, a.name from logins as l1 join logins as l2 on l1.id=l2.id and datediff(l2.login_Date, l1.login_date) between 0 and 4 join accounts as a on l1.id=a.id group by l1.id, l1.login_date having count(distinct l2.login_date)=5 order by l1.id
select distinct l1.id, a.name from logins l1 join accounts a on a.id = l1.id join logins l2 on l1.id = l2.id and datediff(l1.login_date, l2.login_date) between 1 and 4 group by l1.id, l1.login_date having count(distinct l2.login_date) = 4
select distinct l1.id, a.name from logins l1 join accounts a on a.id=l1.id join logins l2 on l1.id=l2.id and datediff(l1.login_date,l2.login_date) between 1 and 4 group by l1.id,l1.login_date having count(distinct l2.login_date)=4
select distinct l1.id, a.name from logins l1 join logins l2 on l1.id = l2.id and datediff(l1.login_date, l2.login_date) between 0 and 4 join accounts a on a.id = l1.id group by l1.id, l1.login_date having count(distinct l2.login_date) = 5 order by l1.id
select distinct l1.id, a.name from logins l1 join logins l2 on l1.id = l2.id and datediff(l1.login_date, l2.login_date) between 1 and 4 JOIN Accounts A ON l1.id = A.id GROUP BY l1.id, l1.login_date HAVING COUNT(DISTINCT l2.login_date) = 4
select distinct l1.id, a.name from logins l1 join logins l2 on l1.id = l2.id and datediff(l1.login_date, l2.login_date) between 1 and 4 join accounts a on a.id = l1.id group by l1.id , l1.login_date having count(distinct l2.login_date) = 4
select distinct l1.id, a.name from logins l1 join logins l2 on l1.id = l2.id and datediff(l1.login_date,l2.login_date) between 1 and 4 join accounts a on a.id=l1.id group by l1.id, l1.login_date having count(distinct l2.login_date) = 4
select distinct l1.id, a.name from logins l1 join logins l2 on l1.id = l2.id and datediff(l1.login_date,l2.login_date) between 1 and 4 join accounts a on l1.id=a.id group by l1.id, l1.login_date having count(distinct l2.login_date) =4
select distinct l1.id, a.name from logins l1 join logins l2 on l2.id = l1.id join accounts a on a.id = l1.id where datediff(l2.login_date,l1.login_date) between 1 and 4 group by l1.id, l1.login_date HAVING COUNT(DISTINCT l2.login_date) = 4
select distinct l1.id, a.name from logins l1 left join logins l2 on l1.id = l2.id and datediff(l1.login_date, l2.login_date) between 0 and 4 join accounts a on l1.id = a.id group by l1.id, l1.login_date having(count(distinct l2.login_date)) = 5 order by l1.id
select distinct l1.id, name from Logins l1 join Logins l2 on l1.id = l2.id and datediff(l1.login_date, l2.login_date) between 0 and 4 join Accounts on Accounts.id = l1.id group by l1.id, l1.login_date having count(distinct l2.login_date) = 5 order by 1
select distinct l1.id, name from logins l1 join logins l2 on l2.id = l1.id and datediff(l2.login_date,l1.login_date) between 1 and 4 join accounts a on a.id = l1.id group by l1.id, l1.login_date having count(distinct l2.login_date) = 4
select distinct l1.id,(select distinct name from Accounts where id=l1.id) name from Logins l1 join Logins l2 on datediff(l1.login_date, l2.login_date) BETWEEN 1 and 4 and l1.id=l2.id group by l1.id,l1.login_date having count(distinct l2.login_date) =4
select distinct l1.id,(select name from Accounts where id=l1.id) name from Logins l1 join Logins l2 on datediff(l1.login_date, l2.login_date) BETWEEN 1 and 4 and l1.id=l2.id group by l1.id,l1.login_date having count(distinct l2.login_date) =4
select distinct l1.id,a.name from logins as l1 join logins as l2 on l1.id=l2.id and datediff(l2.login_date, l1.login_date) between 0 and 4 join accounts as a on l1.id=a.id group by l1.id, l1.login_date having count(distinct l2.login_date)=5 order by l1.id
select distinct ls.id, ls.name from ( select p.id, p.name, p.date_dif, count(*) as cnt_r from ( select t.id, a.name, t.login_date, date_add(t.login_date, INTERVAL -row_number() over (partition by t.id order by t.login_date) DAY) as date_dif from (select distinct id, login_date from logins) t join accounts a on t.id = a.id ) as p group by p.id, p.name, p.date_dif ) ls where ls.cnt_r >= 5 order by ls.id
select distinct n.id, name from ( select id,lead(login_date,4)over(partition by id order by login_date) as day5, login_date from Logins group by id,login_date )n join Accounts a on n.id = a.id where day5=date_add(login_date, interval 4 day) order by id
select distinct n.id, name from ( select id,lead(login_date,4)over(partition by id order by login_date) as day5, login_date from Logins group by id,login_date )n join accounts a on n.id = a.id where day5 = date_add(login_date, interval 4 day) order by id
select distinct n.id, name from (select id,lead(login_date,4)over(partition by id order by login_date) as day5, login_date from Logins group by id,login_date )n join Accounts a on n.id = a.id where day5=date_add(login_date, interval 4 day) order by id
select distinct n4.id, a1.name from (select id, count(id)as num_con from (select id, login_date, diff_date-row_num as grp from (select id, login_date, diff_date, row_number()over(partition by id order by login_date)-1 as row_num from (select distinct l1.id, l1.login_date, datediff(l1.login_date,t1.min_login_date)as diff_date from logins as l1 left join (select id, min(login_date)as min_login_date from logins group by id) as t1 on l1.id=t1.id order by id asc, login_date asc) as n1) as n2) as n3 group by id, grp) as n4 join accounts as a1 on n4.id=a1.id and n4.num_con>=5 order by id
select distinct p1.id, a.name from Logins as p1 join Logins as p2 using (id) join accounts as a using (id) where DATEDIFF(p1.login_date,p2.login_date) BETWEEN 1 AND 4 GROUP BY p1.id, p1.login_date HAVING COUNT(DISTINCT p2.login_date)=4
select distinct t1.id, (select name from Accounts where id=t1.id) as name from Logins t1, Logins t2 where t1.id=t2.id and datediff(t1.login_date, t2.login_date) between 1 and 4 group by t1.id, t1.login_date having count(distinct t2.login_date)>=4
select distinct t1.id,name from Logins t1 join Logins t2 join Logins t3 join Logins t4 join Logins t5 join Accounts on t1.id = t2.id and t3.id = t2.id and t3.id = t4.id and t4.id = t5.id and DATE_ADD(t1.login_date,INTERVAL 1 DAY) = t2.login_date and DATE_ADD(t2.login_date,INTERVAL 1 DAY) = t3.login_date and DATE_ADD(t3.login_date,INTERVAL 1 DAY) = t4.login_date and DATE_ADD(t4.login_date,INTERVAL 1 DAY) = t5.login_date and t1.id = Accounts.id order by t1.id
select distinct t2.id, name from ( select id, date_sub(login_date, interval row_number()over(partition by id order by login_date) day) as grp from (select distinct id, login_date from logins) as t1) as t2 join accounts using (id) group by id, grp having count(grp)>=5 order by t2.id
select distinct t4.id, t5.name from (select id, diff_id, count(diff_id) as total_login from (select t2.id, (CAST( diff AS SIGNED ) - CAST(row_id AS SIGNED)) as diff_id from ( select *, DATEDIFF(login_date, '2020-05-30') AS diff, row_number() over(partition by id order by login_date) as row_id FROM (select distinct * from Logins ) t1 ) t2) t3 group by id, diff_id )t4 join Accounts t5 on t5.id = t4.id where total_login>=5 order by id
select distinct temp.id, name from (select id, lead(login_date,4) over(partition by id order by login_date) as day5, login_date from Logins group by id, login_date) temp join Accounts a on temp.id = a.id where day5 = date_add(login_date, interval 4 day) order by 1
select distinct tmp3.id, Accounts.name from ( select l.id from ( select id, login_date, row_number() OVER (PARTITION BY id ORDER BY login_date) AS day_rk from (select distinct id, login_date from Logins) as tmp1 order by id, day_rk ) as l left join ( select id, login_date, row_number() OVER (PARTITION BY id ORDER BY login_date) AS day_rk from (select distinct id, login_date from Logins) as tmp2 order by id, day_rk ) as r on l.id = r.id and l.day_rk + 4 = r.day_rk where DATE_ADD(l.login_date, INTERVAL 4 DAY) = r.login_date ) as tmp3 left join Accounts using (id)
select distinct tt1.id, name from (select t1.id, t1.login_date from logins t1 left join logins t2 on t1.id = t2.id and datediff(t2.login_date, t1.login_date) between 1 and 4 group by t1.id,t1.login_date having count(distinct t2.login_date) =4 ) tt1 join Accounts tt2 on tt1.id = tt2.id order by tt1.id
select distinct v.id,v.name from ( select a.id,a.name,l.login_date,dense_rank()over(partition by l.id order by l.login_date) as rn from accounts a right join logins l on a.id=l.id)v group by v.name,v.id, (v.login_date-INTERVAL rn DAY) having count(distinct v.login_date)>=5 order by v.id
select distinct x.id, (select name from accounts where id=x.id) as name from logins x, logins y where x.id=y.id and datediff(x.login_date,y.login_date) between 1 and 4 group by x.id,x.login_date having count(distinct y.login_date)=4 order by x.id
select distinct x.id, x.name from ( select a.id, b.name, a.login_date, LEAD(a.login_date,4)over(partition by a.id order by a.login_date asc) as fifth_date, DATEDIFF(LEAD(a.login_date,4)over(partition by id order by a.login_date asc) , a.login_date)+1 as diff from logins a join accounts b on a.id = b.id group by a.id, b.name, a.login_date ) x where x.diff = 5
select distinct y.id, a.name from (select id, login_date, lead(login_date, 4) over (partition by id order by login_date) as lead_date from (select distinct id, login_date from Logins) x) y , accounts a where a.id=y.id and datediff(y.lead_date, y.login_date)=4 order by 1
select distinct z.id , name from ( select l.id , l.login_date , lead(l.login_date, 4) over(partition by l.id order by login_date) as seq from (select distinct id, login_date from logins l) l) z left join accounts a on z.id = a.id where datediff(seq, login_date) = 4
select distinct(l1.id), (select name from accounts where id = l1.id) name from logins l1, logins l2 where l1.id = l2.id and DATEDIFF(l1.login_date,l2.login_date) BETWEEN 1 AND 4 group by l1.id, l1.login_date having count(distinct l2.login_date) = 4
select distinct(l1.id), (select name from accounts where id = l1.id) name from logins l1, logins l2 where l1.id = l2.id and DATEDIFF(l1.login_date,l2.login_date) BETWEEN 1 AND 4 group by l1.id, l1.login_date having count(distinct l2.login_date) >= 4
select distinct(l1.id), (select name from accounts where id = l1.id) name from logins l1, logins l2 where l1.id = l2.id and DATEDIFF(l1.login_date,l2.login_date) BETWEEN 1 AND 4 group by l1.id, l1.login_date having count(distinct l2.login_date) >=4
select distinct(l1.id),a.name from logins l1 left join logins l2 on l1.id=l2.id and datediff(l1.login_date,l2.login_date) between 0 and 4 join Accounts a on l1.id=a.id group by l1.id, l1.login_date having count(distinct l2.login_date)=5 order by l1.id
select id, name from ( select id, name, login_date ,lead(login_date, 4 ) over (partition by id order by login_date) as lead_date ,date_add(login_date, interval 4 day) as fifth_day from ( select l.id, a.name, l.login_date from logins l left join Accounts a on l.id = a.id group by 1, 2, 3) x ) y where lead_date = fifth_day group by 1,2
select id, name from (SELECT id, name, login_date, LEAD(login_date, 4) OVER(PARTITION BY id ORDER BY login_date) AS lead_date, date_add(login_date, INTERVAL 4 DAY) AS fifth_day FROM ( SELECT l.id, a.name, l.login_date FROM logins l LEFT JOIN accounts a ON l.id = a.id GROUP BY 1, 2, 3)t) tt where lead_date=fifth_day group by 1,2 order by 1,2
select id, name from (select id, name, max(day_range) as max_active_days from (select id, name, consecutive_group, count(distinct login_date) as day_range from (select t1.id, t2.name, t1.login_date, dense_rank()over(order by t1.login_date) - dense_rank()over(partition by t1.id order by t1.login_date) as consecutive_group from Logins t1 left join Accounts t2 on t1.id = t2.id order by 1) t3 group by 1,2,3) t4 group by 1,2) t5 where max_active_days >=5 order by 1
select id, name from Accounts where id in ( select distinct L1.id from logins L1 join logins L2 on L1.id = L2.id where datediff(L1.login_date,L2.login_date) between 1 and 4 group by L1.id,l1.login_date having count(distinct L2.login_date) >=4) order by id
select id, name from Accounts where id in (select id from (select id, Date_sub(login_date, interval login_row day) as login_row_group from (select *, row_number() over(partition by id order by login_date) as login_row from (select distinct * from logins) Z) A ) B group by id, login_row_group having count(*)>=5) order by id
select id, name from Accounts where id in( select l1.id from Logins l1, Logins l2 where datediff(l1.login_date,l2.login_date) between 1 and 4 and l1.id = l2.id group by l1.id,l1.login_date having count(distinct l2.login_date)>=4 ) order by id
select id, name from accounts where id in ( select l1.id from logins l1 join logins l2 on l2.id = l1.id and l2.login_date = date_sub(l1.login_date, interval 1 day) join logins l3 on l3.id = l2.id and l3.login_date = date_sub(l2.login_date, interval 1 day) join logins l4 on l4.id = l3.id and l4.login_date = date_sub(l3.login_date, interval 1 day) join logins l5 on l5.id = l4.id and l5.login_date = date_sub(l4.login_date, interval 1 day) ) order by id
select id, name from accounts where id in (select distinct l1.id from logins l1 left join logins l2 on l1.id = l2.id and datediff(l1.login_date, l2.login_date) between 0 and 4 group by l1.id, l1.login_date having(count(distinct l2.login_date)=5)) order by id
select id, name from accounts where id in (select l1.id from logins l1 inner join logins l2 on l1.id=l2.id and datediff(l1.login_date, l2.login_date) between 1 and 4 group by l1.id, l1.login_date having count(distinct(l2.login_date)) = 4) order by id
select id,name from Accounts where id in ( select id from( select id, date_add(login_date, interval -(row_number() over (partition by id order by login_date asc))day) as diff from( select distinct * from Logins) as TM1P) as TMP2 group by id, diff having count(*) >= 5) order by id asc
select id,name from Accounts where id in (select l1.id from Logins l1,Logins l2 where l1.id = l2.id and datediff(l2.login_date,l1.login_date ) between 1 and 4 group by l1.id,l1.login_date having count(distinct l2.login_date) > 3) order by id
select id,name from accounts where id in ( select a.id from logins a join logins b on a.id = b.id and DATEDIFF(a.login_date,b.login_date) BETWEEN 1 and 4 GROUP by a.id,a.login_date HAVING COUNT(DISTINCT b.login_date) = 4 ) order by id
select id.id, a.name from ( select distinct l1.id from logins l1 join logins l2 on l1.id = l2.id and datediff(l1.login_date,l2.login_date) < 5 and datediff(l1.login_date,l2.login_date) >= 0 group by l1.id,l1.login_date having count(distinct l2.login_date) >= 5 ) id left join accounts a on a.id = id.id
select id.id, a.name from ( select distinct l1.id from logins l1 join logins l2 on l1.id = l2.id and datediff(l1.login_date,l2.login_date) between 1 and 4 group by l1.id,l1.login_date having count(distinct l2.login_date) = 4 ) id left join accounts a on a.id = id.id
select l.id, ac.name from ( select distinct a.id from Logins as a left join Logins as b on a.id=b.id and datediff(a.login_date, b.login_date) between 1 and 4 group by a.id, a.login_date having count(distinct b.login_date) >= 4 ) as l left join Accounts as ac on l.id = ac.id
select t5.id, Accounts.name from ( select distinct id from( select id,d1,count(distinct d2) as cc from( select t1.id , t1.login_date as d1, t2.login_date as d2 from Logins t1 inner join Logins t2 on t1.id=t2.id and DATEDIFF(t2.login_date, t1.login_date) <=4 and DATEDIFF(t2.login_date, t1.login_date) >=1 ) t3 group by d1,id having count(distinct d2) =4 ) t4 ) t5 inner join Accounts on Accounts.id = t5.id order by t5.id
with CTE as ( select A.id, A.login_date, lead(login_date,4) over (partition by A.id order by A.login_date) as leadDate from (select distinct id, login_date from logins) as A ) select distinct B.id, acc.name from CTE B inner join accounts acc on B.id=acc.id where datediff(B.leadDate,B.login_Date)=4 order by B.id
with CTE as ( select a.id, name,login_date, lead(login_date,4) over(partition by a.id order by login_date) as fifth_login_date from logins l inner join accounts a on a.id=l.id group by a.id,login_date) select distinct id,name from cte where datediff(fifth_login_date,login_date)=4
with L as (select id,login_date,row_number()over(partition by id order by login_date) gp from (select distinct * from Logins) distinctt), cte as (select id from (select id, max(login_date) endday, min(login_date) startday from L group by id,date_add(login_date, interval -gp day)) t where datediff(endday,startday)>=4) select distinct cte.id,name from cte join Accounts a on a.id=cte.id order by 1
with L as (select id,login_date,row_number()over(partition by id order by login_date) gp from (select distinct * from Logins) distinctt), cte as (select id from L group by id,date_add(login_date, interval -gp day) having count(*)>=5) select distinct cte.id,name from cte join Accounts a on a.id=cte.id order by 1
with a as (select distinct * from Logins), c as (select *, LEAD (login_date, 4) over (partition by id order by login_date) as day5_login from a), b as (select id, datediff(day5_login, login_date) as days_to_d5 from c) select distinct b.id, Accounts.name from b join Accounts on b.id=Accounts.id where b.days_to_d5=4 order by b.id
with a as( select distinct * from logins order by id, login_Date) select * from accounts where id in ( select id from ( select id, datediff(login_date,lag(login_date,4) over(partition by id order by login_date)) as date_diff from a) as b where date_diff=4) order by id
with acct_logins as ( select a.id, a.name, l.login_date from accounts a join logins l on a.id = l.id order by 1, 3 ) select distinct id, name from (select id, name, login_date, lead(login_date, 4) over (partition by id order by login_date) "lead_date", date_add(login_date, interval 4 day) "fifth_date" from acct_logins group by 1, 2, 3 ) result_table where lead_date = fifth_date
with active as ( select id, login_date, lag(login_date, 4) over(partition by id order by login_date) as lag4 from ( select distinct * from Logins ) t)select a.id, a.name from Accounts a join active a1 on a.id = a1.id and datediff(login_date, lag4) = 4 group by 1 order by 1
with base as (select *, lead(login_date,4) over (partition by id order by login_date) as fifth_dt from (select * from Logins group by id, login_date )a) select p.id, q.name from (select *, case when (date_add(login_date,interval 4 day)=fifth_dt) then 1 else 0 end as result from base ) p inner join Accounts q on p.id=q.id where result = 1 group by p.id,q.name order by p.id
with base as (select *, lead(login_date,4) over (partition by id) as fifth_dt from (select * from Logins group by id, login_date order by id, login_date )a ) select p.id, q.name from (select *, case when (date_add(login_date,interval 4 day)=fifth_dt) then 1 else 0 end as result from base ) p inner join Accounts q on p.id=q.id where result = 1 group by p.id,q.name order by p.id
with base as (select *, lead(login_date,4) over (partition by id) as fifth_dt from (select * from Logins group by id, login_date order by id, login_date )a) select p.id, q.name from (select *, case when (date_add(login_date,interval 4 day)=fifth_dt) then 1 else 0 end as result from base ) p inner join Accounts q on p.id=q.id where result = 1 group by p.id,q.name order by p.id
with base as (select l1.id from Logins l1 join Logins l2 on l1.login_date = date_sub(l2.login_date, interval 1 day) AND l1.id = l2.id join Logins l3 on l1.login_date = date_sub(l3.login_date, interval 2 day) AND l1.id = l3.id join Logins l4 on l1.login_date = date_sub(l4.login_date, interval 3 day) AND l1.id = l4.id join Logins l5 on l1.login_date = date_sub(l5.login_date, interval 4 day) AND l1.id = l5.id) select distinct b.id,name from base b left join Accounts a on b.id = a.id order by 1
with consecutive as( select *, case when datediff(login_date,lag(login_date)over(partition by id order by login_date))=1 then 1 else 0 end as cons_flag from (select distinct id, login_date from logins ) a ), cum_sum as (select *, sum(cons_flag)over(partition by id order by login_date rows between 3 preceding and current row) as cum_sum from consecutive ) select distinct a.id,b.name from cum_sum a left join accounts b on a.id=b.id where a.cum_sum=4
with consecutive_ids as (select a.id from Logins a join Logins b on datediff(a.login_date, b.login_date) between 1 and 4 and a.id = b.id group by a.id, a.login_date having count(distinct b.login_date) =4) select distinct x.id, y.name from consecutive_ids x join Accounts y using(id) order by x.id
with cte as ( SELECT *, LEAD(login_date, 4) OVER (PARTITION BY id ORDER BY login_date) AS 'next_4_day' FROM (SELECT distinct * FROM Logins) unique_t ORDER BY id, login_date ) SELECT distinct cte.id, a.name FROM cte LEFT JOIN Accounts a ON a.id = cte.id WHERE DATEDIFF(next_4_day, login_date) = 4
with cte as ( SELECT *, LEAD(login_date, 4) OVER (PARTITION BY id ORDER BY login_date) AS lead_day FROM (SELECT distinct * FROM Logins) unique_t ORDER BY id, login_date ) SELECT distinct cte.id, a.name FROM cte LEFT JOIN Accounts a ON a.id = cte.id WHERE DATEDIFF(lead_day, login_date) = 4
with cte as ( Select distinct id, login_date, lead(login_date,4) over ( partition by id order by login_date) lead_date, date_add(login_date , interval 4 day) fifth from Logins group by id, login_date order by id, login_date ) Select distinct cte.id, a.name from cte join Accounts a on cte.id = a.id where lead_date = fifth order by id
with cte as ( Select id , datediff(lead(login_date,4)Over(Partition by id order by login_date),login_date) as cons from (Select distinct id, login_date from Logins) as a ) Select distinct(cte.id), name from cte ,Accounts as a where cte.id=a.id and cons=4 order by cte.id
with cte as ( select *, lead(login_date, 4) over (partition by id order by login_date) as ld from (select distinct id, login_date from logins order by id, login_date) a ) select distinct cte.id, a.name from cte join accounts a on cte.id = a.id where datediff(ld,login_date)=4 order by cte.id
with cte as ( select a.id from logins a, logins b where a.id=b.id and datediff(a.login_date,b.login_date) between 1 and 4 group by a.id,a.login_date having count(distinct b.login_date) >= 4 ) select id,name from accounts where id in (select id from cte ) order by 1
with cte as ( select distinct * from Logins), cte2 as ( select id, login_date, Lead(login_date,4) over(partition by id order by login_date) as lead_date from cte order by id ) select distinct id, name from cte2 left join Accounts using (id) where datediff(lead_date, login_date)=4
with cte as ( select distinct * from logins ), temp as ( select id, login_date, lead(login_date, 4) over (partition by id order by login_date) lead_date from cte ) SELECT DISTINCT a.id,name FROM TEMP JOIN accounts a USING(id) WHERE DATEDIFF(lead_date,login_date)=4 ORDER BY a.id
with cte as ( select distinct * from logins ), temp as ( select id, login_date, lead(login_date, 4) over (partition by id order by login_date) lead_date from cte ) select distinct a.id, name from temp a left join accounts b on a.id = b.id where TIMESTAMPDIFF(DAY,login_date,lead_date) = 4
with cte as ( select distinct * from logins ), temp as ( select id, login_date, lead(login_date, 4) over (partition by id order by login_date) lead_date from cte ) select distinct a.id, name from temp a left join accounts b on a.id = b.id where datediff(lead_date, login_date) = 4
with cte as ( select distinct *, dense_rank() over (partition by id order by login_date) as rnk from Logins), cte2 as (select id, date_sub(login_date, interval rnk day) as grouped_date from cte) select * from Accounts where id in (select id from cte2 group by id,grouped_date having count(1)>=5) order by id
with cte as ( select distinct id, login_date, lead(login_date, 4) over (partition by id order by login_date) as lead_5_date from ( select distinct id, login_date from Logins ) tmp ) select distinct tmp.id, tab2.name from cte tmp inner join Accounts tab2 on tmp.id = tab2.id where datediff(tmp.lead_5_date,tmp.login_date) = 4 order by id
with cte as ( select distinct l.id, name, login_date from accounts a, logins l where a.id=l.id ) select distinct id, name from ( select *, lead(login_date, 4)over(partition by id order by login_date) as var from cte) a where datediff(var,login_date)=4
with cte as ( select id , login_date , dense_rank() over(partition by id order by login_date) as rnk from logins ) select id , name from accounts where id in ( select id from cte group by id, date_sub(login_date, interval rnk day) having count(distinct login_date) >= 5 ) order by 1
with cte as ( select id, SUBDATE(login_date, interval rnk day) as grouped_date from ( select distinct *, dense_rank() over(partition by id order by login_date) as rnk from logins) t ) select * from Accounts where id in ( select id from cte group by id, grouped_date having count(id) >= 5 ) order by id
with cte as ( select id, date_sub(login_date, interval rnk day) as grouped_date from (select distinct *, dense_rank() over (partition by id order by login_date) as rnk from Logins) t ) select * from Accounts where id in (select id from cte group by id, grouped_date having count(1) >= 5) order by id
with cte as ( select id, date_sub(login_date, interval rnk day) as grouped_date from (select distinct *, dense_rank() over (partition by id order by login_date) as rnk from Logins) t ) select * from Accounts where id in (select id from cte group by id, grouped_date having count(id) >= 5) order by id
with cte as ( select id, login_date, date_add(login_date, interval -dense_rank() over(partition by id order by login_date) day) as ld_group from logins ) select distinct c.id, a.name from cte c join accounts a on c.id = a.id group by id, ld_group having datediff(MAX(login_date), MIN(login_date)) >= 4 order by c.id
with cte as ( select id, login_date, dense_rank() over(partition by id order by login_date) as rnk from logins ), cte1 as ( select id, login_date, DATE_ADD(login_date, INTERVAL -rnk DAY) as groupings from cte ), cte2 as ( select id, groupings, MIN(login_date) as start_date, MAX(login_date) as end_date from cte1 group by id, groupings HAVING count(distinct login_date) >= 5 order by id , start_date ) select distinct c.id as id, a.name as name from cte2 c inner join Accounts a on c.id = a.id order by a.id
with cte as ( select id, login_date, dense_rank() over(partition by id order by login_date) as rnk from logins ), cte1 as ( select id, login_date, DATE_ADD(login_date, INTERVAL -rnk DAY) as groupings from cte ), cte2 as ( select id, groupings, MIN(login_date) as start_date, MAX(login_date) as end_date from cte1 group by id, groupings HAVING datediff(MAX(login_date), MIN(login_date)) >= 4 order by id , start_date ) select distinct c.id as id, a.name as name from cte2 c inner join Accounts a on c.id = a.id order by a.id
with cte as ( select id, login_date, lead(login_date, 4) over (partition by id order by login_date) as lx from (select distinct id, login_date from logins) cc ) select distinct a.id, name from accounts a join cte c on a.id = c.id where abs(datediff(login_date, lx)) = 4 order by a.id
with cte as ( select id, login_date, row_number() over(partition by id order by login_date) as row_num from( select distinct id, login_date from Logins )t ), cte2 as ( select id, count(start_dt) over(partition by id, start_dt) as cnt from( select id, login_date, date_add(login_date, interval -row_num day) as start_dt from cte )t ) select distinct c.id, a.name from cte2 c left join Accounts a on c.id = a.id where cnt >= 5 order by c.id
with cte as ( select l1.id from logins l1, logins l2 where l1.id = l2.id and DATEDIFF(l1.login_date,l2.login_date) between 1 and 4 group by l1.id,l1.login_date having count(distinct l2.login_Date) =4 ) select id, name from Accounts where id in (select * from cte) order by id
with cte as (select *, lead(login_date,4) over (partition by id order by login_date asc) as num, date_add(login_date, interval 4 day) as diff from logins group by id, login_date) select distinct c.id, name from cte c join accounts a on c.id = a.id where num = diff order by c.id
with cte as (select distinct id, login_date from Logins group by 1, 2), cte2 as (select id, login_date, date_sub(login_date, interval row_number() over (partition by id order by login_date) day) as indicator from cte) select distinct id, name from cte2 left join Accounts using (id) group by id, indicator having count(*) >= 5
with cte as (select distinct id, login_date from logins) select distinct a.id, (select name from accounts where id=a.id) as name from cte a , cte b where a.id=b.id and datediff(a.login_date,b.login_date) between 0 and 4 group by a.id, a.login_date having count(distinct b.login_date)=5 order by a.id
with cte as (select distinct id, login_date from logins), cte1 as (select *, lead(login_date,4) over(partition by id order by login_date) fifthdate from cte) select distinct t.id, a.name from cte1 t join accounts a using(id) where datediff(t.fifthdate,t.login_date) = 4 order by 1
with cte as (select distinct id,login_date from logins), cte1 as (select id,dayofyear(login_date) as doy, row_number() over(partition by id order by login_date) as rn from cte), cte2 as (select id,doy-rn as diff from cte1), cte3 as (select id from cte2 group by id,diff having count(*)>=5) select distinct a.id,a.name from accounts a, cte3 c where a.id=c.id order by id
with cte as (select distinct id,login_date from logins), cte1 as (select id,dayofyear(login_date) as doy, row_number() over(partition by id order by login_date) as rn from cte), cte3 as (select distinct id from cte1 group by id,doy-rn having count(*)>=5) select a.id,a.name from accounts a, cte3 c where a.id=c.id order by id
with cte as (select distinct id,login_date from logins), cte1 as (select id,dayofyear(login_date) as doy, row_number() over(partition by id order by login_date) as rn from cte), cte3 as (select id from cte1 group by id,doy-rn having count(*)>=5) select distinct a.id,a.name from accounts a, cte3 c where a.id=c.id order by id
with cte as (select id from( select id,login_date,row_number()over(partition by id order by login_date) as gp from (select distinct * from Logins) t1) t group by id, date_add(login_date, interval -gp day) having count(*)>=5) select distinct cte.id, name from cte join Accounts a on a.id = cte.id order by 1
with cte as (select id, DATEDIFF(lead(login_date,4) over (partition by id order by login_date),login_date) as final from logins group by id, login_date ) select distinct a.id,name from cte join Accounts a on a.id = cte.id where final = 4 order by id
with cte as (select id, count(*) from (select distinct * from logins) a group by id having count(*) >=5), cte2 as ( select id, datediff(next_login, login_date) as diff from (select id, login_date, lead(login_date, 4) over (partition by id order by login_date asc) as next_login from (select distinct * from Logins) a) b where next_login is not null ) select distinct accounts.id, accounts.name from cte2 join cte on (cte.id = cte2.id) join accounts on (cte2.id = accounts.id) where diff = 4 order by id
with cte as (select id, date_sub(login_date, interval rnk day) as grouped_date from (select distinct *, dense_rank() over (partition by id order by login_date) as rnk from Logins)t) select * from Accounts where id in (select id from cte group by id,grouped_date having count(1)>=5) order by id
with cte as (select id, login_date, lead(login_date, 4) over (partition by id order by login_date asc) as leading_date, date_add(login_date, interval 4 day) as fifth_date from logins GROUP BY id, login_date) select distinct a.id, a.name from accounts as a join cte as b on a.id = b.id and b.leading_date = b.fifth_date order by a.id asc
with cte as (select id, login_date, lead(login_date, 4) over (partition by id order by login_date asc) as leading_date, date_add(login_date, interval 4 day) as fifth_date from logins group by id, login_date) select distinct a.id, a.name from accounts as a join cte as b on a.id = b.id and b.leading_date = b.fifth_date order by a.id asc
with cte as (select id, login_date, lead(login_date, 4) over (partition by id order by login_date) as lead_date, date_add(login_date, interval 4 day) as fifth_day from logins group by 1,2 ) select distinct a.id, a.name from accounts a join cte on cte.id = a.id and cte.lead_date = cte.fifth_day order by a.id
with cte as (select id, login_date, rank() over(partition by id order by login_date) as rnk from (select distinct * from logins) l order by id, login_date), cte2 as ( select id, login_date, date_add(login_date, interval -rnk day) as grp from cte order by id, login_date, grp ) select distinct cte2.id, name from cte2 left join accounts a on cte2.id = a.id group by cte2.id, grp, name having count(*) >= 5
with cte as (select id,login_date from logins group by 1,2) select distinct temp.id,temp.name from (select a.name,a.id, date_add(login_date, INTERVAL - row_number() over (partition by id order by login_date) DAY) as grp from accounts a inner join cte l on a.id=l.id ) temp group by temp.id,temp.grp having count(*)>=5
with cte as (select l.id,l.login_date from Logins l group by 1,2 order by 1,2) select distinct temp.id,temp.name from ( select cte.id, a.name, date_sub(cte.login_date, interval row_number() over (partition by cte.id order by login_date) day) as grp_dt from cte left join accounts a on cte.id=a.id ) temp group by temp.id,temp.grp_dt having count(*)>=5
with cte as (select l.id,l.login_date from logins l group by 1,2) select distinct temp.id,temp.name from ( select c.id, a.name ,date_sub(c.login_date, interval row_number() over (partition by id order by login_date) day) as grp from cte c left join accounts a on c.id=a.id ) temp group by id,grp having count(temp.id)>=5
with cte as( SELECT DISTINCT a.id,a.login_date,b.name FROM Logins a LEFT JOIN Accounts b ON a.id=b.id ) , cte2 as( SELECT id,name,login_date,lead(login_date,4) OVER(PARTITION BY id ORDER BY login_date) AS fifth_date FROM cte ) SELECT DISTINCT id,name FROM cte2 WHERE DATEDIFF(fifth_date,login_date) = 4
with cte as( select c.id, name, ndate from (select id, login_date, date_sub(login_date, interval rn day) as ndate from (select id, login_date, row_number() over(partition by id order by login_date) as rn from (select distinct id, login_date from logins)a )b)c join accounts ac on c.id = ac.id group by id, ndate having count(*)>=5) select distinct id, name from cte order by id
with cte as( select id, date_sub(login_date, interval rn day)as group_date from (select distinct *, dense_rank() over (partition by id order by login_date asc)as rn from logins)t) select distinct * from Accounts where id in(select id from cte group by id, group_date having count(id)>=5) order by id
with cte as( select id, date_sub(login_date, interval rnk day) as grouped_date from (select distinct *, dense_rank() over (partition by id order by login_date) as rnk from logins) as a ) select * from accounts where id in (select id from cte group by id, grouped_date having count(id) >= 5) order by id
with cte as( select id, date_sub(login_date, interval rnk day) as grp_date from (select distinct id, login_date, dense_rank() over (partition by id order by login_date) as rnk from logins) t ) select * from accounts where id in (select id from cte group by id, grp_date having count(*) >= 5 ) order by id
with cte as( select l1.id from logins l1, logins l2, logins l3, logins l4, logins l5 where l1.id = l2.id and l2.id = l3.id and l3.id = l4.id and l4.id = l5.id and l1.login_date = date_sub(l2.login_date, interval 1 day) and l2.login_date = date_sub(l3.login_date, interval 1 day) and l3.login_date = date_sub(l4.login_date, interval 1 day) and l4.login_date = date_sub(l5.login_date, interval 1 day) ) select distinct c.id, name from cte c join accounts a on c.id = a.id order by 1
with cte1 as ( select id , login_date , dense_rank() over (partition by id order by login_date) as rk from Logins ), cte2 as ( select id , login_date , date_add(login_date, interval -rk day) as marking from cte1 ) select distinct id , name from Accounts where id in ( select id from cte2 group by id, marking having count(distinct login_date) >= 5 ) order by id
with cte1 as ( select id , login_date , dense_rank() over (partition by id order by login_date) as rk from Logins ), cte2 as ( select id , login_date , date_add(login_date, interval -rk day) as marking from cte1 ) select id , name from Accounts where id in ( select id from cte2 group by id, marking having count(distinct login_date) >= 5 ) order by id
with cte1 as ( select id, login_date, dense_rank() over (partition by id order by login_date) rnk from Logins ), cte2 as( select id, login_date,rnk, date_add(login_date, interval -rnk day) as groupings from cte1 ), final as ( select id, min(login_date) as startDate, max(login_date) as endDate from cte2 group by id, groupings having count(distinct rnk) >= 5 ) select distinct f.id, name from final f left join Accounts a on f.id = a.id
with cte1 as (select distinct a.id, a.login_date as login_date1, b.login_date as login_date2 from logins as a join logins as b on a.id = b.id and b.login_date = a.login_date + interval 1 day), cte2 as (select distinct a.id, a.login_date1, b.login_date2 from cte1 as a join cte1 as b on a.id = b.id and b.login_date2 = a.login_date1 + interval 2 day), cte3 as (select distinct a.id, a.login_date1, b.login_date2 from cte2 as a join cte2 as b on a.id = b.id and b.login_date2 = a.login_date1 + interval 4 day) select distinct a.id, a.name from accounts as a join cte3 as b where a.id = b.id order by a.id asc
with cte1 as (select distinct id, login_date from Logins), cte2 as (select id, login_date,lead(login_date,4)over(partition by id order by login_date) as next_4_login_date from cte1) select distinct c.id, a.name from cte2 as c inner join accounts a on c.id=a.id where datediff(c.next_4_login_date,c.login_date)=4 order by c.id
with cte1 as (select distinct id, login_date from Logins), cte2 as (select id, login_date,lead(login_date,4)over(partition by id order by login_date) as next_4_login_date from cte1) select distinct c.id, a.name from cte2 as c inner join accounts a on c.id=a.id where datediff(c.next_4_login_date,c.login_date)=4 order by c.id asc
with cte1 as (select distinct id, login_date, dense_rank() over (partition by id order by login_date asc) as rn from logins), cte2 as (select id, login_date - interval rn day as group_index from cte1) select distinct a.id, a.name from accounts as a join cte2 as b on a.id = b.id group by a.id, b.group_index having count(a.id) >= 5 order by a.id asc
with cte1 as(select distinct id, login_date from Logins), cte2 as(select id, login_date, lead(login_date,4) over(partition by id order by login_date) as lead_date from cte1), cte3 as(select id, datediff(lead_date, login_date) as date_diff from cte2) select distinct cte3.id, a.name from cte3 join Accounts a on a.id = cte3.id where cte3.date_diff = 4 order by 1
with cte1 as(select id, login_date from logins group by 1,2), cte2 as(select id, login_date, dense_rank() over(partition by id order by login_date) as myrank from cte1) select c1.id, name from cte2 c1 join cte2 c2 on c1.id=c2.id and c1.myrank+4=c2.myrank and c1.login_date=date_sub(c2.login_date, interval 4 day) join accounts a on c1.id=a.id group by 1,2 order by 1
with date_rank as ( select id , login_date , dense_rank() over(partition by id order by login_date) as rnk from logins ) select distinct id , name from accounts where id in ( select id from date_rank group by id, date_sub(login_date, interval rnk day) having count(distinct login_date) >= 5 ) order by 1
with day_logins as (select id,login_date, count(1) as login_day_freq from Logins group by 1,2) ,lag_dt as (select a.id,login_date ,lead(login_date,1)over(partition by a.id order by login_date) as luser_lead1_dt ,lead(login_date,2)over(partition by a.id order by login_date) as luser_lead2_dt ,lead(login_date,3)over(partition by a.id order by login_date) as luser_lead3_dt ,lead(login_date,4)over(partition by a.id order by login_date) as luser_lead4_dt from day_logins as a ) , lag_dt_1 as (select id,case when luser_lead1_dt= date_add(login_date,interval 1 day) and luser_lead2_dt=date_add(login_date, interval 2 day) and luser_lead3_dt=date_add(login_date, interval 3 day) and luser_lead4_dt=date_add(login_date, interval 4 day) then 1 else 0 end as ind from lag_dt) select distinct a.id,b.name from lag_dt_1 as a left join Accounts as b on a.id=b.id where a.ind=1
with dedupe as ( select distinct id, login_date from logins ),cte as ( select id, (dense_rank() over(order by login_date)) - (dense_rank() over(partition by id order by login_date)) as diff from dedupe ), cte2 as ( select id, diff, count(diff) from cte group by 1, 2 having count(diff)>=5 ) select distinct ac.id, ac.name from accounts ac inner join cte2 on cte2.id=ac.id order by 1
with dist_logins as( select distinct id, login_date from logins) select distinct a.id, c.name from dist_logins a, dist_logins b inner join accounts c on b.id = c.id where a.id = b.id and a.login_date <= b.login_date and datediff(b.login_date, a.login_date) <=4 group by a.id, a.login_date having count(*) = 5
with distict_login as (select distinct id, login_date from Logins) select t.id, a.name from (select distinct(l1.id) as id from distict_login l1, distict_login l2 where l1.id = l2.id and l1.login_date >= l2.login_date and datediff(l1.login_date, l2.login_date) <= 4 group by l1.id, l1.login_date having count(l1.id) >=5) as t left join Accounts a on t.id = a.id
with distict_login as (select distinct id, login_date from Logins) select t.id, a.name from (select distinct(l1.id) as id from distict_login l1, distict_login l2 where l1.id = l2.id and l1.login_date >= l2.login_date and datediff(l1.login_date, l2.login_date) <= 4 group by l1.id, l1.login_date having count(l1.id) >=5) as t left join Accounts a on t.id = a.id order by 1
with distict_login as (select id, login_date from Logins group by id, login_date order by id,login_date ) select t.id, a.name from (select distinct(l1.id) as id from distict_login l1, distict_login l2 where l1.id = l2.id and l1.login_date >= l2.login_date and datediff(l1.login_date, l2.login_date) <= 4 group by l1.id, l1.login_date having count(l1.id) >=5) as t left join Accounts a on t.id = a.id order by 1
with distinct_logins as ( select distinct * from Logins ), LoginsWithLag as ( select id, login_date, lag(login_date, 4) over (partition by id order by login_date) as lag_4 from distinct_logins ) select distinct id, name from LoginsWithLag natural join Accounts where datediff( login_date, lag_4)= 4 order by id
with distinctlogins as ( select distinct id, login_date from logins order by id, login_date) , firstlastdate as ( select id, login_date, lead(login_date, 4) over (partition by id order by login_date) as day5 from distinctlogins ) select distinct f.id, a.name from firstlastdate f, accounts a where f.id = a.id and Datediff(f.day5, f.login_date) = 4 order by a.id
with distinctt as ( select distinct id,login_date from logins ), pre as ( select id,login_date,lead(login_date,4) over (partition by id order by login_date)next_val from distinctt ) select distinct p.id,name from pre p join accounts a on p.id = a.id where datediff(next_val,login_date) = 4 order by p.id
with e as (select id, login_date, lead(login_date, 1) over(partition by id order by login_date) as login_n2, lead(login_date, 2) over(partition by id order by login_date) as login_n3, lead(login_date, 3) over(partition by id order by login_date) as login_n4, lead(login_date, 4) over(partition by id order by login_date) as login_n5 from (select distinct id, login_date from Logins) t ) select distinct e.id, a.name from e inner join Accounts a on e.id = a.id where datediff(login_n2, login_date) = 1 and datediff(login_n3, login_date) = 2 and datediff(login_n4, login_date) = 3 and datediff(login_n5, login_date) = 4 order by 1
with gaps_and_islands as( select id, login_date, dense_rank() over (partition by id order by login_date) as rnk from (select distinct id, login_date from logins) a), filled_gaps as (select id, login_date, rnk, date_add(login_date, interval - rnk day) as nw_date from gaps_and_islands ) select distinct a.id, name from (select id from filled_gaps group by id, nw_date having count(*) >= 5)a left join accounts b on a.id = b.id
with gaps_and_islands as( select id, login_date, dense_rank() over (partition by id order by login_date) as rnk from logins ), filled_gaps as (select id, login_date, rnk, date_add(login_date, interval - rnk day) as nw_date from gaps_and_islands ) select distinct a.id, name from ( select id, min(login_date), max(login_date), rnk, nw_date, count(id), datediff(max(login_date), min(login_date)) from filled_gaps group by id, nw_date HAVING datediff(MAX(login_date), MIN(login_date)) >= 4)a join accounts b on a.id = b.id order by id
with id_needed as (select id from (select l.id, login_date, DATE_ADD(login_date, INTERVAL -row_number()over(partition by l.id order by login_date) DAY) as grp from logins l left join accounts a on l.id= a.id group by l.id, login_date) t group by id, grp having count(grp) >=5) select distinct a.id, name from id_needed l left join accounts a using(id)
with ids as( select distinct l.id, name, login_date from logins as l join accounts as a on l.id = a.id order by id, login_date) select distinct(id), name from( select distinct id, name, login_date, subdate(login_date, dense_rank() over(partition by id order by login_date)) as datediff from ids) as sub group by datediff, id having count(id) >= 5 order by id
with lead5 as ( select *, lead(login_date,4) over (partition by id order by login_date desc) as five_after from (select distinct * from Logins) l ) select distinct l5.id, a.Name as name from lead5 l5 left join Accounts a on l5.id = a.id where date_add(login_date, interval -4 day) = five_after order by 1 asc
with log as ( select *, lag(login_date,4) over (partition by id order by login_date) as ld4 from (select distinct id, login_date from logins) as sub), active as ( select * from log where date_sub(login_date, interval 4 day) = ld4) select * from accounts where id in (select a.id from active a) order by id
with login_info as (select a.id , a.login_date from logins a left join logins b on a.id = b.id where b.login_date between a.login_date and date_add(a.login_date , interval 4 day) group by 1,2 having count(distinct b.login_date) = 5) select id , name from accounts where id in (select id from login_info) order by id
with logins as( select distinct id, login_date from Logins) select distinct b.id, b.name from (select id, login_date , datediff(lead(login_date,4) over(partition by id order by login_date), login_date) gap from logins ) a join Accounts b on a.id = b.id where a.gap = 4 order by a.id
with logins1 as (select distinct id, login_date from logins), next_four as (select id, login_date, lead(login_date,4) over(partition by id order by login_date asc) as next_f from logins1) select distinct n.id, a.name from next_four n join accounts a on n.id = a.id where datediff(next_f, login_date) = 4 order by 1
with logins_cte as ( select distinct id, login_date from logins ) , temp as ( select *, lead(login_date,4) over(partition by id order by login_date) fifth_login_date from logins_cte ) select id, name from accounts a where id in (select id from temp where datediff(fifth_login_date,login_date) = 4 ) order by id
with logins_cte as (select distinct id, login_date from Logins), temp as (select *, lead(login_date, 4) over(partition by id order by login_date) as fifthdate from logins_cte) select * from Accounts where id in (select id from temp where datediff(fifthdate, login_date) = 4) order by id
with new as( select id, login_date, subdate(login_date, row_number() over(partition by id order by login_date)) as diff from( select distinct id, login_date from logins order by id)as a) select distinct new.id, name from new left join accounts as a on new.id = a.id group by new.id, diff having count(diff) >=5
with new_logins as( select distinct id,login_date from logins), login_table as (select a.id,a.login_date as currentdate,b.login_date as previous_logins, datediff(a.login_date,b.login_date) as days_ago from new_logins a join new_logins b on (a.id=b.id and a.login_date>=b.login_date) where datediff(a.login_date,b.login_date)<=4), login_past_5_day as(select id,previous_logins,count(distinct(currentdate)) as logins from login_table group by id,previous_logins having count(*) >=5) select distinct l.id,a.name from login_past_5_day l join accounts a on l.id=a.id order by id
with orderlogins as ( select id ,login_date from Logins group by id,login_date order by id,login_date desc ) select distinct acct.id ,acct.name from Accounts acct join( select id ,row_number() over (partition by id order by login_date) as num ,login_date from orderlogins ) A on acct.id = A.id group by acct.id,date_add(login_date,interval -num day) having count(acct.id) >= 5
with orderlogins as ( select id ,login_date from Logins group by id,login_date order by id,login_date desc ) select distinct accts.id ,accts.name from Accounts accts join ( select id ,row_number() over (partition by id order by login_date desc) as num ,datediff(curdate(),login_date) as yrmonday from orderlogins ) A on accts.id = A.id group by id,(yrmonday-num) having count(accts.id) >= 5 order by id
with r as (select id, login_date, rank() over(partition by id order by login_date) as rk from (select distinct * from logins) t) select a.id, a.name from accounts a left join (select r.id, DATE_ADD(r.login_date, INTERVAL -rk DAY), count(*) as n from r group by 1,2) b on a.id = b.id group by 1 having max(n) >=5 order by 1
with row_logins as ( select l.id, a.name, l.login_date, row_number() over (partition by l.id order by l.login_date) as rn from logins l, accounts a where l.id = a.id group by l.id, l.login_date ) select distinct a.id, a.name from row_logins a join row_logins b on (a.id = b.id and a.rn = b.rn + 4) and datediff(a.login_date,b.login_date) = 4
with rt as ( Select id, login_date, lead(login_date,4) Over ( Partition by id order by login_date ) as cnt from Logins group by id,login_date ) Select distinct rt.id,name from rt inner join Accounts on rt.id=Accounts.id where cnt = date_add(login_date,interval 4 day) order by id
with subq1 as ( select id, login_date, dense_rank() over (partition by id order by login_date asc ) as dr from Logins ), subq2 as ( select id, login_date, date_add(login_date, interval -dr day) as gr from subq1 ) , subq3 as ( select id from subq2 group by id, gr having count(distinct login_date)>=5 ) select distinct s.id,a.name from subq3 s inner join accounts a on s.id=a.id order by id asc
with t as ( select a.id, a.name, l.login_date from Accounts a join (select distinct id, login_date from Logins) l using (id) ) select t.id, t.name from t join t t2 on t2.id=t.id and datediff(t2.login_date, t.login_date)=1 join t t3 on t3.id=t.id and datediff(t3.login_date, t.login_date)=2 join t t4 on t4.id=t.id and datediff(t4.login_date, t.login_date)=3 join t t5 on t5.id=t.id and datediff(t5.login_date, t.login_date)=4 group by t.id, t.name order by t.id
with t as ( select a.id, a.name, l.login_date from Accounts a join (select distinct id, login_date from Logins) l using (id) order by id, login_date) select t.id, t.name from t join t t2 on t2.id=t.id and datediff(t2.login_date, t.login_date)=1 join t t3 on t3.id=t.id and datediff(t3.login_date, t.login_date)=2 join t t4 on t4.id=t.id and datediff(t4.login_date, t.login_date)=3 join t t5 on t5.id=t.id and datediff(t5.login_date, t.login_date)=4 group by t.id, t.name order by t.id
with t as ( select id,login_date, lag(login_date) over(partition by id order by login_date) as prev_login_date from logins ), sess_starts as ( select login_date as sess_start,id, lead(login_date) over(partition by id order by login_date) as next_sess_start from t where prev_login_date is null or datediff(login_date,prev_login_date) > 1 ), sess_start_ends as ( select s.sess_start,s.id,max(l.login_date) as sess_end,s.next_sess_start from logins l join sess_starts s on s.id =l.id and l.login_date >= s.sess_start and (s.next_sess_start is null or l.login_date < s.next_sess_start ) group by 1,2 ) select distinct s.id,a.name from sess_start_ends s join accounts a on a.id=s.id where datediff(sess_end,sess_start) >= 4 order by s.id
with t as (select distinct * from logins), m as ( select l1.id, l1.login_date, count(l2.login_date) as date_count from t l1 join t l2 on l1.id = l2.id and datediff(l2.login_date, l1.login_date) between 1 and 4 and l2.login_date > l1.login_date group by l1.id, l1.login_date having date_count >=4 ) select distinct m.id , accounts.name from m join accounts on m.id = accounts.id order by m.id
with t as (select distinct * from logins), m as ( select l1.id, l1.login_date, count(l2.login_date) as date_count from t l1 join t l2 on l1.id = l2.id and l2.login_date <= date_add(l1.login_date, interval 4 day) and l2.login_date > l1.login_date group by l1.id, l1.login_date having date_count >=4 ) select distinct m.id , accounts.name from m join accounts on m.id = accounts.id order by m.id
with t as (select distinct * from logins), m as ( select l1.id, l1.login_date, count(l2.login_date) as date_count from t l1 join t l2 on l1.id = l2.id and l2.login_date <= date_add(l1.login_date, interval 4 day) and l2.login_date >= l1.login_date group by l1.id, l1.login_date having date_count >=5 ) select distinct m.id , accounts.name from m join accounts on m.id = accounts.id order by m.id
with t as (select distinct id from (select id,login_date, date_add(login_date,interval 1 day) as 1daydiff,date_add(login_date,interval 2 day) as 2daydiff,date_add(login_date,interval 3 day) as 3daydiff,date_add(login_date,interval 4 day) as 4daydiff from Logins) sub where ((id, 1daydiff) in (select id,login_date from Logins) and (id, 2daydiff) in (select id,login_date from Logins) and (id, 3daydiff) in (select id,login_date from Logins) and (id, 4daydiff) in (select id,login_date from Logins))) select t.id, name from t, Accounts where t.id = Accounts.id order by t.id
with t as (select id, login_date, adddate(login_date,- dense_rank()over(partition by id order by login_date asc)) as st from logins ) select distinct a.id, a.name from t inner join accounts as a on a.id = t.id group by st ,a.id, a.name having count(distinct login_date) >=5 order by 1
with t as (select id,login_date,lead(login_date,4)over(partition by id order by login_date) endday from (select distinct * from Logins) t) select distinct a.id,name from Accounts a join t on t.id=a.id where datediff(endday,login_date) = 4 order by 1
with t0 as(select *, dense_rank() over(partition by id order by login_date) as rk from Logins), t1 as( select id, login_date, date_sub(login_date,interval rk day) as gp from t0) select * from Accounts where id in (select id from t1 group by id, gp having datediff(max(login_date),min(login_date))>=4) order by id
with t1 as (select a.id from logins a left join logins b on a.id=b.id and datediff(a.login_date, b.login_date) between 1 and 4 group by a.id,a.login_date having count(distinct b.login_date)=4) select distinct t1.id, name from t1 left join accounts on t1.id=accounts.id
with t1 as( select * from logins as l join accounts as a using(id) ) select distinct a.id, a.name from t1 as a, t1 as b where datediff(a.login_date, b.login_date) between 1 and 4 and a.id = b.id group by a.id, a.login_date having count(distinct b.login_date) = 4
with t1 as( select * from logins as l join accounts as a using(id) ) select distinct(a.id), a.name from t1 as a, t1 as b where a.id = b.id and datediff(a.login_date, b.login_date) between 1 and 4 group by a.id, a.login_date having count(distinct (b.login_date)) = 4
with tb1 as ( select id, login_date, dense_rank() over(partition by id order by login_date) as row_num from logins ), tb2 as ( select id, login_date, row_num, date_add(login_date, interval -row_num day) as groupings from tb1 ), result_tb as ( select id, min(login_date) start_date, max(login_date) end_date, groupings from tb2 group by id, groupings having datediff(max(login_date), min(login_date)) >= 4 order by id, start_date ) select distinct a.id, a.name from accounts a join result_tb on result_tb.id=a.id order by 1
with tb1 as ( select id, login_date, dense_rank() over(partition by id order by login_date) as row_num from logins ), tb2 as ( select id, login_date, row_num, date_add(login_date, interval -row_num day) as groupings from tb1 ), result_tb as ( select id, min(login_date) start_date, max(login_date) end_date, row_num, groupings, count(id), datediff(max(login_date), min(login_date)) as duration from tb2 group by id, groupings having datediff(max(login_date), min(login_date)) >= 4 order by id, start_date ) select distinct a.id, a.name from accounts a join result_tb on result_tb.id=a.id order by 1
with tb1 as (select distinct id,login_date, datediff(login_date,'2020-05-29') - dense_rank()over(partition by id order by login_date) as days from Logins) select distinct id, (select A.name from Accounts A where A.id = tb1.id) as name from tb1 group by id,days having count(days) >=5
with tb_ as ( select tb1.id from Logins as tb1 join Logins as tb2 on tb1.id = tb2.id and tb1.login_date = subdate(tb2.login_date,1) join Logins as tb3 on tb3.id = tb2.id and tb1.login_date = subdate(tb3.login_date,2) join Logins as tb4 on tb4.id = tb3.id and tb1.login_date = subdate(tb4.login_date,3) join Logins as tb5 on tb5.id = tb4.id and tb1.login_date = subdate(tb5.login_date,4) group by tb1.id ) select tb_.id as id, Accounts.name as name from tb_ join Accounts on tb_.id = Accounts.id order by tb_.id
with tbl as ( SELECT DISTINCT id, login_date, DATE_ADD(login_date, interval 4 day) as end_date FROM Logins ), tbl2 as ( SELECT distinct t1.id FROM tbl as t1 JOIN tbl as t2 ON t1.id = t2.id AND t2.login_date >= t1.login_date AND t2.login_date <= t1.end_date GROUP BY t1.id, t1.login_date HAVING count(t2.login_date) = 5 ) SELECT t.id, a.name FROM tbl2 t JOIN accounts a ON t.id = a.id ORDER BY t.id
with temp as ( select id, login_date as l, lead(login_date) over(partition by id order by login_date) as l1, lead(login_date,2) over(partition by id order by login_date) as l2, lead(login_date,3) over(partition by id order by login_date) as l3, lead(login_date,4) over(partition by id order by login_date) as l4 from logins group by id, login_date) select id, name from accounts where id in (select id from temp where datediff(l1,l)=1 and datediff(l2,l1)=1 and datediff(l3,l2)=1 and datediff(l4,l3)=1) order by id
with temp as ( select id, login_date, dense_rank() over (partition by id order by login_date) as ranking from Logins ), temp1 as ( select distinct t.id from temp as t join temp as u on t.id = u.id where to_days(u.login_date) - to_days(t.login_date) = 4 and u.ranking - t.ranking = 4 ) select id, name from Accounts where id in (select * from temp1) order by id
with temp as (select a.id, a.login_date from logins a join logins b on a.id=b.id and datediff(b.login_date,a.login_date) between 1 and 4 group by a.id,a.login_date having count(distinct b.login_date)=4) select distinct a.id, name from accounts as a join temp as t on a.id=t.id order by id
with temp as (select distinct id, login_date from Logins), temp2 as (select temp.id,temp.login_date , lead(login_date, 4,0) over (partition by temp.id order by temp.login_date) as consective_5 from temp), temp3 as (select temp2.id, case when datediff(consective_5,temp2.login_date)+1=5 then 1 else 0 end active_user from temp2) select distinct temp3.id, name from temp3 join Accounts on Accounts.id=temp3.id where active_user =1 order by 1
with temp as (select distinct id, login_date from logins group by id, login_date) select a.id, a.name from accounts a where a.id in (select l1.id from temp l1 join temp l2 on l1.id = l2.id and datediff(l1.login_date, l2.login_date) = 1 join temp l3 on l1.id = l3.id and datediff(l1.login_date, l3.login_date) = 2 join temp l4 on l1.id = l4.id and datediff(l1.login_date, l4.login_date) = 3 join temp l5 on l1.id = l5.id and datediff(l1.login_date, l5.login_date) = 4) order by id
with temp as (select distinct id, login_date from logins) select * from accounts where id in (select distinct eligible_id from (select case when t2.id is not null and t3.id is not null and t4.id is not null and t5.id is not null then t1.id else null end as eligible_id from temp t1 inner join temp t2 on t1.id = t2.id and TIMESTAMPDIFF(DAY, t1.login_date, t2.login_date) = 1 inner join temp t3 on t1.id = t3.id and TIMESTAMPDIFF(DAY, t1.login_date, t3.login_date) = 2 inner join temp t4 on t1.id = t4.id and TIMESTAMPDIFF(DAY, t1.login_date, t4.login_date) = 3 inner join temp t5 on t1.id = t5.id and TIMESTAMPDIFF(DAY, t1.login_date, t5.login_date) = 4) p where eligible_id is not null) order by id
with temp0 AS (SELECT id, login_date, dense_rank() OVER(PARTITION BY id ORDER BY login_date) as row_num FROM Logins), temp1 as ( select id, login_date, row_num, DATE_ADD(login_date, INTERVAL -row_num DAY) as Groupings from temp0), answer_table as (SELECT id, MIN(login_date) as startDate, MAX(login_date) as EndDate, row_num, Groupings, count(id), datediff(MAX(login_date), MIN(login_date)) as duration FROM temp1 GROUP BY id, Groupings HAVING datediff(MAX(login_date), MIN(login_date)) >= 4 ORDER BY id, StartDate) select distinct a.id, name from answer_table a join Accounts acc on acc.id = a.id order by a.id
with temp0 as ( select id, login_date from Logins group by 1, 2 order by 1, 2 ) , temp1 as ( select id,login_date, lag(login_date, 4) over (partition by id order by login_date) as lag_4 from temp0 ) select a.id,b.name from temp1 a left join Accounts b on a.id = b.id where datediff(a.login_date, a.lag_4) = 4 group by 1,2
with temp1 AS ( SELECT DISTINCT id, login_date FROM Logins), temp2 AS( SELECT id, login_date, LEAD(login_date, 4) OVER(PARTITION BY id ORDER BY login_date) AS date_lead_five FROM temp1) SELECT DISTINCT t2.id, a.name FROM temp2 t2 INNER JOIN Accounts a ON t2.id = a.id WHERE DATEDIFF(t2.date_lead_five, t2.login_date) = 4 ORDER BY t2.id ASC
with temp1 AS (SELECT id, login_date, dense_rank() OVER(PARTITION BY id ORDER BY login_date) as row_num, DATE_ADD(login_date, INTERVAL -dense_rank() OVER(PARTITION BY id ORDER BY login_date) DAY) as Groupings FROM Logins), answer_table as (SELECT id,Groupings, MIN(login_date) as startDate, MAX(login_date) as EndDate, datediff(MAX(login_date), MIN(login_date)) as duration FROM temp1 GROUP BY id, Groupings HAVING datediff(MAX(login_date), MIN(login_date)) >= 4 ORDER BY id, StartDate) select distinct a.id, name from answer_table a join Accounts acc on acc.id = a.id order by a.id
with temp1 as ( select a.id,a.login_date, b.login_date as login_date_b from logins a join logins b on datediff(a.login_date,b.login_date) between 1 and 4 and a.id = b.id ) select distinct temp1.id,a.name from temp1 join accounts a on temp1.id = a.id group by temp1.id,login_date having count(distinct temp1.login_date_b)=4
with temp1 as ( select distinct id, login_date from Logins ), temp2 as ( select id,login_date,date_add(login_date,interval 4 day) as five_day, rank() over(partition by id order by login_date) as rk from temp1 ) select distinct a.id as id, a.name as name from (select t1.id, t1.login_date, t1.five_day, t1.rk as first, t2.rk as last from temp2 t1, temp2 t2 where t1.five_day=t2.login_date and t1.id=t2.id and t2.rk=t1.rk+4) as t join Accounts a on t.id=a.id order by id
with tmp as (select *,lag(a.login_date,4) over (partition by a.id order by a.login_date) as lag_date from (select id, login_date from logins group by id, login_date order by id, login_date)a ) select a.id,name from tmp a join Accounts b on a.id=b.id where datediff(lag_date,login_date)=-4 group by 1,2 order by id
with tmp as (select *,lag(a.login_date,4) over (partition by a.id order by a.login_date) as lag_date from (select id, login_date from logins group by id, login_date order by id, login_date)a ) select distinct a.id,name from tmp a join Accounts b on a.id=b.id where datediff(lag_date,login_date)=-4 order by id
with tmp as (select a.id, a.login_date, date_add(min_date, interval row_number() over (partition by id order by login_date) -1 day) as seq_date from (select distinct id, login_date from logins) a inner join (select id, min(login_date) as min_date from logins group by 1) b on a.id=b.id ) select distinct a.* from accounts a inner join tmp b on a.id=b.id group by a.id, datediff(login_date,seq_date) having count(*)>=5 order by 1
with tmp as (select id, login_date, lag(login_date,4) over (partition by id order by login_date) as lag_date from (select distinct id, login_date from logins) t ) select distinct a.* from accounts a inner join tmp b on a.id=b.id where datediff(login_date, lag_date)=4 order by 1
with unique_login as ( select distinct id, login_date from Logins ), lead_five AS ( SELECT id, login_date, LEAD(login_date, 4) OVER(PARTITION BY id ORDER BY login_date) AS date_lead_five FROM unique_login ) SELECT DISTINCT lead_five.id, a.name FROM lead_five INNER JOIN Accounts a ON lead_five.id = a.id WHERE DATEDIFF(lead_five.date_lead_five, lead_five.login_date) = 4 ORDER BY lead_five.id ASC
with unique_logins as ( select distinct id, login_date from logins ) , active_users as ( select id, login_date, lead(login_date, 4) over (partition by id order by login_date) day5 from unique_logins ) select id, name from Accounts where id in ( select id from active_users where DATEDIFF(day5, login_date) = 4) order by id
with userLogins AS ( select lg.id, lg.login_date, lead(lg.login_date, 4) over(partition by lg.id order by lg.login_date) fivedays from (SELECT distinct l.* FROM logins l) lg ) select distinct a.id, a.name from userLogins ul join accounts a on a.id = ul.id where ul.fivedays is not null and datediff(ul.fivedays,ul.login_date) = 4 order by a.id asc
with user_active_days as (select distinct a.id, name, login_date from accounts a join logins l on l.id = a.id) select distinct id, name from ( select id, name, login_date, lead(login_date,4) over(partition by id order by login_date) as fifth_date from user_active_days uad ) t where date_add(login_date, interval '4' day) = fifth_date
with x as ( select id, login_date from Logins group by 1,2 ) , two as (select x1.id, x1.login_date, a.name, count(distinct x2.login_date) as day_cnt from x x1 left join x x2 on x2.login_date between x1.login_date and date_add(x1.login_date, interval 4 day) and x1.id=x2.id left join Accounts a on x1.id=a.id group by 1,2,3 ) select distinct id, name from two where day_cnt>=5
with x as (select id, val, count(*) as ct from (select id, login_date, date_add(login_date, interval - row_number() over (partition by id order by login_date) day) as val from (select distinct * from logins) a ) b group by id, val having count(*) >= 5) select distinct a.id, b.name from x a inner join accounts b using(id) order by a.id
